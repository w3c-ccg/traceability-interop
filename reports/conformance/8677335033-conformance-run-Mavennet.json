{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5dc8df1e-04cb-4646-bccf-0f3a0c298653",
        "name": "Clear Cache",
        "item": [
          {
            "id": "f3bbcb4d-dd72-4f2a-afb0-ee977f708534",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1e3d3c5e-1b9c-4b4c-a9eb-b8f1e72ac7ac",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "667cff8f-9f59-4762-b70d-10bf1874be0a"
                }
              }
            ]
          },
          {
            "id": "c3ea5f16-56a5-4ada-9427-51823263365c",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0cb93e85-12a6-446a-888d-b355edbf79b4",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f8dc8ea2-f6a1-4728-8cc2-85074ef4a7d7"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "5aa45440-1934-442a-a0fe-0c4e1b05bfb5",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "4c0cd81f-91c3-4cdb-8eb8-92c2f669d872",
            "name": "Positive Testing",
            "item": [
              {
                "id": "63ec75ec-8ed1-4f6f-a971-12ebc37c07cc",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9da58b09-7527-403f-b542-e8263917bb0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1f85a5e1-a181-42ee-a8ca-5c39b43b2e96"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b69fd58d-6d76-474d-9db8-03a7dd7ff2cc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "f4706a05-065a-4063-b67d-134707457443"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6ca1c2bc-0de5-4308-92ac-37df7d8736bc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "5012437a-75fd-4005-97da-43bd778e5dd8"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ac1dd6e2-7279-4495-8edf-046bafc7e172",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "475a27b9-72c3-4fc9-b281-f91f11a69a40"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a682d21e-7f0f-44f0-910b-187534262963",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "eaf66e87-2bb7-400b-99c0-9e23f47ba54f"
            }
          }
        ]
      },
      {
        "id": "77ca5896-1166-46a2-a8cf-db6c8f81ff2c",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "cd60ac4c-7d3b-4f83-a75d-6d1343cbf409",
            "name": "Negative Testing",
            "item": [
              {
                "id": "06b9472b-3e7a-4188-9d34-eb1aeb0e2952",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "7a0159f9-0b9e-4715-a573-8bde9156db0a",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52478059-6dbb-4b62-94a8-eea34346313c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "088416f3-656b-4b4d-9f92-9df577906d7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a5b519-edea-4113-857f-e42b3ccf9b18",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2ea3773-c84d-470e-bfcc-5f8c17031117",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8ecec9ea-5f17-4a1e-bb35-04f80647c55a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7071b863-eff8-48da-bc7c-fa862226fa66",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af5e5c18-bbd2-4c68-acf0-85dcd77838a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e41aeb95-5fd4-4737-addd-c651236a5786"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "12119122-497b-4cb4-9b3c-ae8c2b2f999e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bcf6a6c2-c640-4137-83d0-1ce08fc6a9db",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a49f5de7-1183-43d3-95c5-4286c394761c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7de6c90a-8d99-4a1f-abea-51ff83d65331"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97bb90e8-df6e-4a91-9105-dc1c0e5a7b0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b07ea7b-1a35-4274-b584-5962bca9a89a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a0da485d-90a8-450a-81c5-a1f526f3b212",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d356d959-df7c-41fb-8545-a540c32fc584",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "674cc196-8e3d-4fbf-9312-422010c54f13",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "855ce7d6-14ea-45a9-9ad9-8ac065bd10e6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "29c4a2bd-89fe-4af7-9956-0743897042a2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "60adff2a-ffe6-43f3-b042-9825ee83cf11"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "8ad5a2ae-a34c-4307-abe0-cc5f376bce2e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f3898546-bd9d-4b0d-a61e-d9aa55916069"
            }
          }
        ]
      },
      {
        "id": "a7525be5-41b1-4862-aec8-039c8b446dc1",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "531e1e1d-3f6a-4339-8209-a1efc595edec",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d48e82ca-3dc4-414b-a08c-ba1f64bcddb8",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "5a7f92e1-ecb3-4993-9dc7-5cb5f8e62953",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a923789c-d329-4021-a593-1cb481c17776",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe399bf4-72c7-4e04-a22d-1a37284ee062"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48b9582f-ad81-4f9b-8e76-49930036fd39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "058821f3-4fde-4699-b7ea-236ff2599994"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5023255-bf22-4458-86dd-a7a646ea890b",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e68bf9e-a488-45df-8344-df41d0b64a1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "168c157d-1d6c-4632-a770-e2e381da7241"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bfcf16a-405d-4f30-ab76-74bec7130798",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a1849d46-9968-48ba-aced-7f32dc589b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c424aa5-f5ba-4bac-bdda-42a743f5396b",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9c93c29-368d-46c5-ad69-9c3156187c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e5ec868-8602-4d75-9b7a-a86e430ec621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6670c40c-3d2f-47c0-8188-8105b9f8fca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0c7836d1-c8d2-4524-a20c-e3b690868ecb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e5ed850-a577-4a0e-a901-ed37c3dba47a",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90af65b9-2c76-4a70-b22d-731f6aa98232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a68cd248-c1ea-4a10-8274-d3f60e686b2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "996bb792-d055-416b-a84c-03ad6803c671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1725d991-8ecf-4f6f-8748-2e554f31dbf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cb26450-cde2-4b1a-a809-2b1214ce8b67",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6436efd8-0a70-4418-9af4-771bd0a02e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b5eb6607-561d-4392-93dd-136a0323314b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99fdba34-2d18-4cf2-993b-bb69926b8f70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d8d2f7b8-a878-4bfa-94d9-2daaa518f1d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f069ec3e-43ac-46ac-9ac2-f1ffb4f85e35",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac7357ce-41c3-4c11-837e-41ba6090b613",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9c2207a-14d3-4092-a7b7-56d5ef09ae70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f89af489-cfcd-4e60-8f7c-d74f3e20d744",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d3dff428-f7dd-4157-9223-6198cb1ef10b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b4cf786-cbb1-4848-9bc9-27b8b8cfa8d8",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b668f73-fc59-4202-a842-b9785494da3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ce0c99b-6744-4689-a5f3-939149dea0f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0741c0d-cdb2-40bb-8775-1765326ef14e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2baef357-0831-4e39-8d35-86ed81cfea45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "910d0cbd-6200-46db-8501-01a48d46770b",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "945667bf-ea70-4fd6-88de-37968b137a9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39e5686c-f833-45d4-aab7-de35d0fda033"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4545e72-61c5-4b93-aab5-52c4f89ae655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b7dcd64e-039c-41d9-b221-c51ea8c1ed7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a47232-e384-4658-ac2a-82e96cce051a",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "543e77c9-831e-4f6c-950f-982953dfb5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "51b0753b-b579-425e-9cd0-ae45899ed38d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "643097cd-c88f-426e-8b44-33a3cfe5a3c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4fe74eeb-6add-46de-a03c-c18455431b92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3f19fae-9b80-467b-a108-34c323dac544",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "672cac2c-bd64-4254-8226-cdf3ae6e125f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96ec0213-177b-4fd7-b9bd-10b3cdee8cb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2d6a481-4f53-49a0-9d52-60d837284752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb741d9f-238e-40be-9cfd-ea72c24d4f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f338fd-7963-4955-9acc-de2ded462622",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "043f7e06-cd73-4321-affa-c8fb45d3ef5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef4beb51-7ced-4736-8a83-a9815b8b64c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad1f5600-f2c8-4225-ad26-0897603b285e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ee448f14-ee12-4ee2-af00-0e7142bd1723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346040e4-f9ac-4dcb-917e-f4650df33d45",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88c9c90e-186d-42d5-ba86-d5b5cc99103c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79bbbeb0-8d5b-44c0-8292-52f76b7dcacb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4366cc88-293c-4446-8fca-d3eb4f2d1157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a746aad8-728c-44fd-a824-10f021c48698"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6972ebc-a115-4234-95f5-c7cd023aacac",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a8b744c-5c52-4f04-a1ed-a8d603f92ecb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a434e9bf-6f70-4472-87fb-62c0b4757c87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a51467e-ead6-41a7-b98a-a888f30bc6b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d6f4e50f-5128-4080-938e-05f81b96bd12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308f0119-204d-45d9-840a-f8a1f0e99da4",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4d99aec-bf71-4d2c-8ad8-18a1785b260c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ecaf96d-d316-4947-82a9-921181fc9053"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a956cf-7359-4a1d-ab32-c5190e4464da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2d75f7f6-8305-4931-b0c8-532a9f4f944e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa756ac0-0749-4065-99e9-e01433ac753d",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c3f0e45-1d8a-4f85-989a-bec8c480defb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "35958165-a383-4cdc-ac89-53bd6ff9920a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "278f4220-e740-45a3-9af6-cd7cba3418e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "12dc8e4d-581a-48be-bad6-3843a682a8e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac4fc056-44b2-4913-9e66-c6bb76573388",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ad687ea-1b6f-4e1b-8af8-074fba841793",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef9284db-a305-4763-8cbe-e8281e093100"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "522e6006-bcee-4d98-a0a7-6d341593e92e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbdd13a1-a1ff-4678-8465-8ed323bb6189"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27334b6b-0b9d-40e1-b4ae-a348503565b1",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f1a2dd9e-a6e2-4f16-82b8-3f1ff950f986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b46f71c4-cb62-4942-b058-e29bc01c98f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f470aae3-9213-4d16-b281-8a1c4a7bc2b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "94ff5f87-f570-41b0-adfb-d188ac4f2a59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8ea69c6-5b67-4353-b394-0f4dff34f835",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e814d1-5815-492f-a099-1bccefbd8dbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54ac5613-48c4-4c94-af98-29b2c2f761c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de0df58-c593-465f-849d-c68b6b86f2be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "a95783a7-3556-4258-88b9-25f06e7b02d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4dbd8ae1-6c60-4f7e-a763-acd4d9968b87",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9fcbbbf8-2229-48d7-b43f-08f988dedeb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a56c1c11-42c9-4555-949d-e26a5bd9f69a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d481690-b7e8-4481-9af1-11c7214291f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50971a55-1f43-4e46-bd0a-5584e8eb2617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf62d10a-69be-4ee3-b4ea-b6706a173e9a",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e4e6f6d-64c7-4a57-a8d8-dbfcc023d546",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0db95a5a-2ed0-4156-9109-8b4379c88d95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5a4aed7-f8f0-4af0-86bf-4b4c2986eaf0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "80d4debe-4c9b-4cdb-a2a1-72a44d8efe32"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a1aed5e-d1d0-4097-be06-58f98dd656f8",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5339f1b-c66b-45b5-ac9f-9fbcf4f4f144",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c091f1c-57ae-4a94-91c0-a4ae6dfd906b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a879103-2544-45f9-8bcc-8b701e0dbfbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed739bd1-5b14-4ab2-b0b8-06c41449c431"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be49e6f3-2b04-4d46-816e-b74acf5f9d3a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8bd9cb-debf-407f-9fa6-3fd55aa31303",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56a5b6f0-5451-4aba-9b24-d199bdfc5fc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2408c9c6-4e68-48c3-bc8f-7fabcf958d42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3a1f39da-01b7-49dc-ae1b-2c69b3109ff8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee53c59d-acdd-40c5-8aa4-9019ccd64714",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ada4d41-aef9-421b-8227-6ba0fa60af66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02f3ed63-bc1b-4427-b1d2-9a9dbbc264ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76bedf35-1183-48b0-ace5-a52a8a663388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "32262aef-02f0-4285-a5e3-5b30fdaef72d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cbc269fe-cfad-43e7-a631-4713b5d23be2",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd30f2a-489e-4bdb-b07b-4f9e773fa254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88c7d6e9-f434-4cf5-923a-24270d95866f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8214373f-c94b-483d-acfd-e69378d7ec78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "25f09794-bf2d-4619-ab77-418a5c7893fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1af3b45-f8d9-475a-b653-20b5ec5e7150",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f9f03e1-5c74-40a1-9b52-0690823a2e9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d473c433-c691-454c-98ae-45e0d0e66a09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6f9e46f-1632-4aa9-bf4c-9822e7a6686d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c460912-bd35-43ca-ab3c-78f45a9d5ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36b1b0ad-39c5-475a-89ca-21426715141c",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a188f0-666a-4ddc-8d3d-34b053f72cdb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebab4577-6e4e-401d-b21c-f7377e41f0f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7efa28c-2601-49a3-ab34-bcecb274be89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc46b6b0-0f78-487e-b383-0216bc715b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c2e39e3-be92-46d8-ade9-66da1150f78e",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e1f3ae6-94ed-4e74-9d2c-f68b39fa2e6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc9a2f12-36ba-48af-b52f-ad17473fe88e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "feea92a5-4c9d-4cb3-adbb-d9b15b8a9089",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b18dc44c-fc1c-4ede-b991-945e31f6e439"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e317bc-7264-4099-bd21-4ec0bfff0823",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed48de2a-4ea5-4b08-8612-c4f812082b31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df364a28-27f2-468d-abbe-f844fd8b4657"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64ac78ff-4421-42ee-9450-a5094065fce0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b9af3b40-5411-4d56-9f06-1bd574b7faba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "846aedd6-0635-44b2-9906-8101a9f89a53",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ee9d41-6e67-469c-9477-a295d8e77a87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d804114e-d9be-488d-b756-7c6d5eac2fb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31f66864-0171-4005-bc30-96ea8843be50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8ffe3aed-8f29-438b-a4a4-119801a82483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da85d048-5d70-4092-a9ff-0c7d0d0d2971",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f68a99e-0e81-4f7e-89ad-0b01cfdfcb01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06287144-45d1-4ccc-9013-f54674004334"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1bbea2-4772-4304-88a5-ebb4b1d29cb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ab9413f-d0c7-4c2c-907e-c5e53b038488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41924e0b-4713-43f0-887a-dd2770294024",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28321f0e-3f7b-4315-ac87-2cf961a25804",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbfefbcf-96a0-43cf-bb77-8029eda4b89b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1cda01c-3452-4891-a807-8421ca1d7501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b51b387f-3e5a-4e46-aba5-632610c24128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a164476-ce1e-4ae8-8e09-b07f5e0c56d1",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d1589b0-205c-4587-b296-17f85d80a5ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d21d8a55-f1c3-4396-be6c-8d476cde645f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a97ed4f4-4a40-4237-8045-975fe4eff535",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d0822170-c5f3-46c8-bd2d-1c4d9ee50834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4eafa678-f2ff-462d-bca9-8f1e990fdbf0",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fea45c71-f978-4448-98cf-38e579444ec1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d3c90df-a153-4324-986f-3d2ba58931b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97e95132-f084-4c6b-b896-a2de818566bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6ee9decf-c015-40b6-94d5-fd8161d1b220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f97de6ce-34b7-4de1-a4ef-bbb3d2c85965",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c35849-694a-402a-818c-f21e3f5cff29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cbcafd3-06ce-4a59-b004-ec45d84b295c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e70341ea-95d5-4b2b-a899-782e610d89f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "631a28fb-1fce-446e-bedc-3dc1c1b1d441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9cde6aa-aff1-41a3-9f06-9e3baec0369b",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55bf529a-348a-41ed-83d1-a9087ef142a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "429c2513-3a80-4d2d-8cb4-cb3593a209dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a211558b-4639-4164-b9fe-61f5d824aba4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "9ceac381-2cc3-4cc8-b818-4316ae1d158a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12520822-60f6-4dd3-97de-d6cc5981e157",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5b2aa94-0b43-41e0-83cd-f8e51f5246f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "014ccdf3-b767-49d2-a17d-55939bb07c31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bec9ce3-e81d-4a34-bc93-0f8ef865c7d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5b56c117-de21-448c-95e8-09f8449bdff0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d06301bf-14a2-493a-aaea-1b7dc5f9a870",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0d80d47-9689-457c-bc02-43d6260f1cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa56eee6-5d2d-4782-99b7-e0e726751365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e16990d-310f-44af-9fbe-42a097caeab2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9f939e90-1ca8-4d56-ae85-c6aa7a155fb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0026dfb2-658b-43fa-8f3e-d2405fde114c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afac6de8-7c8d-4875-b18c-50bc1b0eea6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a695cb3b-3eb2-47a0-90bf-b197e0dbca2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2526c8a5-0be1-4027-8ebe-ce8f34c06f28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "893a3e47-253c-414a-bd42-9f9c52d92176"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb8aa48a-bc32-4f22-a2d4-8a5c78e04cb4",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c704a7b-af4f-4134-99d1-7a1f01f52e62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "857594fe-108e-4142-89bc-3bbfcbbd1856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acf53e0f-dd87-40c7-a2b3-a6be815bdd71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "e89ff159-35e7-4941-b075-61e9b6711632"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9534dbe-cf5d-4d47-8ba1-ee3a23a871b9",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd53f42c-6cf0-4f8e-8f28-f9eceda147a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4732c6fa-a8aa-4696-b337-9f516a862fb9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0717141c-d623-4c4a-a705-fdc6d0f171c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3b4fea3-72a5-4354-97cb-eb85436b9c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffd8fbb9-1c05-47ea-87f8-81852bdac489",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f85449dd-b386-4e82-bf58-0fc2b661384b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a775557-2703-4988-9e5a-2c1dab67ac04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d94ed07c-a5f8-4287-9a7b-608049fd8ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "125a3af7-6bf6-4f0b-880d-bb68c87bb9af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54d484e7-58e9-4008-8c5e-c95f437312e9",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "918b605f-1c42-4741-ad02-a44513d12d5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "368e590e-7123-4698-a48c-ac878c977e79"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e514373e-9469-4d1f-9326-c98ef91c4ab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3564996f-c775-4285-a538-ad8244cea9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47b34f3e-2d02-4942-92f4-a2825efb11a6",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c43719f1-abf6-40b8-a5b9-cc80d41966a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5644ed1-5c74-4336-8d8d-776d5d46bf24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d245f6cb-df9a-4e90-959f-826d77ad01d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "9926ce09-c1d7-4924-a5d8-7832bc6c9a5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acdee2ea-315b-4e30-a8b0-90f058fac088",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a67eaf6-bfb0-4fca-87fc-1858c4e339e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82f5c45f-6333-4649-b4ce-511ed28fe6ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "399bc03f-4f94-4c37-9634-aaaf11ced1c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "56c98b87-6990-4df6-8f38-0e46636e02fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53ac32d0-5de7-4e3f-9153-7214f3369e5d",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86ddd96-e89a-4713-9832-c6ea4af3ea88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "41fd41a2-64b3-4c5a-a7fb-9bcf37d959be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e911ba6-d9fc-49d1-be31-737f1a70e226",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4fce156-982f-4cb3-bfa4-c10e04f3e2d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa3e2c22-4d1c-498e-b806-a6b9b77c1501",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3f97df-6053-4baa-9847-c369b6678ad0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b899c991-b266-4b5e-9152-873e2e994656"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c8a429e-feb4-4107-84c1-c5662d4dfde5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "729eb4e3-9017-4357-878b-df6095b84fba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ded818bb-de3a-46ff-8b2b-6bb133e9d87a",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b24c12b2-209f-48e6-ae15-a374fd9e5c94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1e53f56-0c36-452e-b242-73a5b4d845d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeeaf151-3377-4b03-9953-291dee4053fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7642c7db-2bf4-4190-8085-e08332182a61"
                        }
                      }
                    ]
                  },
                  {
                    "id": "717be27b-6b02-4c0a-b510-c69d91654024",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebcbeb92-b10a-4e88-ad37-32b2925a50f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7c92b01f-acc6-4392-9ef1-d607894a19c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66f00c47-7f56-427b-bd73-e05fb7ef97cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8e4a7b21-62b9-4bf4-8909-8eb1cc580174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d7e6d0-9dee-43b1-a618-05f0ff54a6d2",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13dfa040-e3ec-41f8-b2d5-55aa40b7c694",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e65485da-d40e-4bd7-80aa-eb0a682cbded"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b95ce41d-1364-488f-a1f5-b5d774c194d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "daed0db2-1047-48d9-be44-35c0b709bcdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2830bbf9-c061-45d1-882c-6747b5df8628",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bc591b8-654b-4e37-8ca8-8a488aca9ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79e94788-6bc5-4fba-b107-451bf90c1eb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2867159-4068-418d-a89f-83be5bd0df8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "572adff3-d67a-48a9-833b-f5a11ca879a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d740ae9-dad5-48f2-b581-37fe862bea65",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0abdcf25-aed2-4a0b-ab4d-6dba63ecef99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cae32f52-df70-4452-9b11-0f61f9ecf520"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecf33813-c93f-4daf-b504-9e400c914d4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d6e3d79-2ab6-43ef-9f84-9f214ec5294d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbea0fbb-8afd-4a2c-95d1-630ade719bea",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58a1c20-838a-4853-9cd0-48d460c730ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "261f29c1-8701-454d-b5fc-88297cda66ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49ce2296-b7f0-4e29-a54a-30850afa3463",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "de23aad4-2da5-4f3a-accb-e7700adf9379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e5ebe7b-244a-4314-bf8d-4efca5f9a903",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b959144c-0cb3-4824-b236-0dcf84b12f15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b6267bd-9c13-4846-8552-57213e9d547c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5357c630-cb43-4428-a6ca-538d46e24df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bf2f6ee9-d1cc-45a1-8cc4-b3de494e3171"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7155f2f8-11ff-4e0a-98dc-fc755922b6e5",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f276f85d-caf2-4540-82eb-6aa4c2dbc1f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fd48341d-ef86-451f-994d-00b14b8c51aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a1c74b-5fb1-4dec-9c0d-0beebcd8c56c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3dc236f1-a8da-4d12-ba63-0090bdcdbb79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1582839-9734-4858-99de-39f236eb0e08",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32eb5ea4-ad9f-49ce-987c-0b1463df13ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24554be7-06c9-47f3-b63b-7c4773a45b5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe48139-1537-4aa1-b145-9b1c4547e77f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "252d2052-5853-4121-b82e-0f58ec06a2c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42faf9ff-865d-4a2e-89a7-7b555ddb5e7b",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ced76198-0e53-471a-bc7b-9a3854bea241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05124566-6ffc-48fb-a48a-2145e190ed49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "069ffa26-c396-4ab6-8c8f-6b21b19e99d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b37b2550-b19d-4316-b311-e434262cc75d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ebf1f3-ea32-4f38-b8de-6dd618c6ecd3",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5baf7c2-849c-463d-854c-746e722d70a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89aefefc-bcb0-46b6-8619-2a43a4dc62d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3662430f-25ea-45a0-ae85-8599117f8f21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "c190f961-e992-4bb7-957c-b13d4fb3114e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41272cd7-0310-46b4-abe8-3d0f555e6f52",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a11fba0-963d-477a-99c1-16c023a48e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5ccf7ab-f293-455e-869e-724a87fbcc04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccde49b9-164c-4bc2-944e-7c3409a51bb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d01808af-4015-44b7-9797-74b0c3349fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77405fdc-0ee9-4cc7-8839-4543d60e1cb6",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a25f0823-6dea-4101-b0e6-37b5da641f23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "377dfb82-4c7f-4228-bffb-9f80e3134480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72d5dc81-238d-45c0-83f2-a2bce541d391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "278fc4d6-8284-465a-a0a9-4759b59918e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d13944aa-e693-4fa3-8a85-64d2f6a94990",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c171c2-1591-440e-9cab-c87a0bf6c271",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae38b454-7d73-49e6-adf5-db2690bb8bdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fcc0e41-cc71-429e-858a-ee99f7b2f6ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "06650361-9c96-44e0-806d-cd3c01691dfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef093f52-a60c-4678-be9b-f7d0a680c119",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db99cb20-89da-4696-ac74-9e17a757fb8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e9f455f-b1e5-4132-b490-ae56ff845709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79571d21-40fa-43a2-9eef-5a8fb5148b2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "841db651-3a4d-4b29-84db-5f9dab1fe1a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be0fc80f-05fd-4610-9859-4d4eabf4d0c9",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a8d6c6c-ab10-4f73-9f4a-792ba9a33ef1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1878062a-08e7-4296-92da-dc7969575cd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdbcbbff-f58e-4176-958a-5144a4dc5a0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "0909946d-198c-41cc-bfc4-b017973eafe4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02631c15-9435-4e06-ba68-a7f434484bec",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bee79b6-17cd-45dc-81a0-50b215f25662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d00417c7-340a-4758-a53d-84e6d8b40d67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58783ec6-5e7f-4d97-bfe5-88981403bbf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "3251435e-6780-487d-9df0-5bccaf147b89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a0ddd1f-2029-4e58-aa20-4b24733e66a5",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0071891a-b94d-4002-a432-b7ca85f3f899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8fa43d2-1b5c-4b54-a91c-388e3b22bb47"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbc30dd0-ca42-4ad8-b3e1-4dec33c0884b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0f545006-6bf0-4844-8fa0-db7d69c41ba3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9418c104-5e52-4c2c-be44-1e2dcf510508",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4232e38-b361-4110-811f-540ee5aaa282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d537791-dd91-448b-912c-8b22bf5cf617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1f114f-e847-45c1-ad96-99a2841254f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c62dfb17-d979-42de-b5db-9ff10f61e121"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98d6436-a4d5-4e8b-a3c2-471e2da4b772",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a287b9e-80d1-4398-989f-6f5e21f6dfcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d402346c-46fc-4f03-9ca0-e5a4d0ff20b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96b2d310-4917-41b1-b778-bb7516b299f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "09d0e2d8-4b8a-4e81-9d6a-5e36928b8ca7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff2c01c-14ba-4eef-9c6d-67c198ff260b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d454b51-8994-49df-bed4-3ce854309104",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ecf01b2d-8a81-4f22-9928-53f51b090079"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb86b8d-09d0-4fc2-81a6-d9cbc1fe9927",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2f22493c-cf5d-491b-ace0-a2470372174c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65fd6c62-9cea-4270-9785-9efae91c0b05",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75b9817-d490-47bc-a5e3-777b127a6f40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "166ede0d-e7b9-452f-b885-c147136d47b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a23b2ff8-f2a9-41e9-b6ee-5231b33bb298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "fddcae71-defa-4225-a77d-139a7ebc6f67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e6481b7-5f94-4ca0-91b3-4de09cfc792d",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3574551-2b6f-481d-a2d0-8f39bca979fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f73ec7c-36c6-467f-833f-5baf8a4d9e8d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780fbca4-13f1-4876-9667-703fa2fb7c33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4faad16-b4ab-4302-bef4-4b0137177871"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c151f99-9283-449a-b4b4-c894bd4bb9b2",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "674b7364-64cb-46e3-8e5b-13306deb51c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3453d510-c015-404a-b9ad-667ecb356fd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21039c10-c67a-4ff6-897e-54833aa3c1b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f08a5221-d149-4630-835a-058560739aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2277422-4472-404a-acc7-8605b918b4a2",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6de7fe87-1d8d-4390-8614-89213b8755f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22560f37-840d-4896-b9f0-453bf4901bed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff1cf218-9df2-4c74-87b7-fe72d5a3b723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f44e767-c67e-4f43-ab50-05d90a56ac66"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b1fbd2a-8b02-483c-b4f9-678b23815088",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "af10aa0c-1b94-45ca-a89a-8a20a521c391",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28f1d302-3ae8-4a82-89ce-7402220c3746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c19504b-1fbe-4d23-93bc-6a56c8538e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "df1d2064-2d5e-4122-b84d-0a2ff9be8ed7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0203990-59d1-4dcc-9980-e54ddec1de0b",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46687ff1-d19c-43e5-b2ac-a05859e336ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb31ed65-0197-4b7b-9fe1-d2112a1cd0e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b1cfc09-21c4-488d-a2c1-48dbb9100219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a75f5581-4127-4cba-800c-0ee669076dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62573859-bce9-4fa9-91fb-44c0efd31cb4",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e850d36d-fa31-458a-b1cf-9bd034d7c75a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "945eb764-3fe6-4195-84df-a3a133ab6879"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39f03229-2117-4558-b486-13a67dcd05f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "105c4707-402c-4689-85d7-af4382e28797"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c69c268-ed84-4f81-817e-1526d19e0c80",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c0a5a1c-ea81-49de-8c2b-51a6ce6900bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e72b404f-00a8-45f3-81b1-0eb6fae0601d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "603d6419-1851-4b31-b093-476ab1fba020",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "92b11ad1-8534-467c-86f9-5fcc3e605e25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "505171ae-0b54-40c5-8fa1-0ec0758db055",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "892938fe-98e9-42cd-94a6-2af058dbe3f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28b283f1-4cb6-4829-9ecf-878d9078a0bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e5f6344-050b-46a8-aec9-986ed9bb92ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dcdd97a2-c564-4b50-9fc5-6485e7cf4ebc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0ff4ce83-f88c-46be-ba28-5aa213c8b3a5",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b4601d1-2191-41c6-a5e6-293704eb16f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2efe7ba-0904-42e0-ad80-25918afd65fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02aa3f5f-c83f-4f1b-b4de-bf8104871378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "be548f38-84c9-4252-bcad-f1e77834bd97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590443a8-fcc2-4e98-b170-4cd16ac86118",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e20eb20-f57f-439e-8619-345066030ab0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2486a531-d74d-405c-8e66-d990684ea5f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30bd2dd3-a7a4-419d-b957-ad6b76947568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a67792a7-aeb7-4c1d-aad5-87d29758dbb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3502d7f0-7e43-4ef7-8ea1-8027e68d3a1c",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4adfaeeb-9c8f-46db-a239-15946b3688ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29c0fd81-044f-4092-8529-0d15e49c6bae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37c5efac-73e6-49df-b18c-63878a7e50a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e6673fc2-179d-4d06-a16b-8f82a8a4a8ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f09325ec-b35a-4ed2-a2bd-9aae15735075",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d07790-287c-4dac-8292-12acb5581f0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12f790c8-1780-4a70-ac4c-e5af28234806"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21cca247-a43f-435c-a4cf-d9d005f7aa93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8918bcb6-58ce-4761-b662-2f00acdc429e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38d5047a-234b-45e4-90b5-983951dde60e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6081fc19-ad7e-490e-bcc7-71a0a747558b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb67f609-6563-4862-b86e-a8d82fa855a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f3639f3-76e5-4dbd-a760-2acd94ffc41b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad0a1fcf-2dca-44f0-ae3f-c1d51c792da0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcab0bd6-f5f5-45cb-8b0b-4af5778aff4a",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2327b66-c614-45b4-bd80-dc5356fa9ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e6933b3-9aab-47a2-8dc7-aca15d3ae3d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5edabcd-4a4a-4cc3-940c-c970bc54afe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "041180b2-678c-4160-b403-c332fd87244c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056e7afd-2db6-41c8-8ddf-3bdeda901806",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "198ddc3f-bd8d-40f5-9e36-f0623a6291af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e683aea-4743-4f39-a3af-071e9170310d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5960edaf-e0a7-48ae-a9df-fda4d65b9cf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba6b1503-837a-426c-9b64-6c85830a5505"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dbefbc0e-79ac-4f74-a902-f1f1fbacbbd9",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9536ee-413d-4b1e-828f-e7c14242db15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b275321e-2ba1-43df-8c03-a12e322c2a73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3521d24-8ff3-45f2-a7f8-aa43ba075ac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "beb0f88c-819b-4bf6-967c-c1d1e77ff907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e71e4083-38d2-4167-8ff9-1635216f48cf",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "102b82c7-8c7b-493a-bd2e-04e9d9ee7af6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0112f4f5-6f92-43d7-b1f7-3b8f53b2bcdd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce53210e-bcf3-443e-89ee-7c977efbe006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0ca79e2a-1ccd-4f1a-9c00-9d1f51792266"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bd90be6b-60b2-4485-b406-bbd63157ba20",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abadb10e-b088-4b24-a44c-6b18531aa48a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1b9d61d-eadb-4903-bae6-5e87e91f0ce3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7b514f5-f3d8-4a1b-a414-d8eae8a4d201",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6b83f45-f1b6-4713-9afa-565a60c02d59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "feb7f10b-c9f1-4e72-b7b8-3a13d7bfd181",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d1f51e8-8a00-42e0-9211-a0beff4eb449",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52440b28-e1dc-469d-873e-19e54bd863ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38146b8d-6171-44d1-9df1-4c95e5bd0d1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "8a6171e6-625a-4aa6-b580-fca0d53f89eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5bd6090-c01f-4216-8f57-347d5e9318a6",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71a0af10-6ffc-4022-845b-cfb9538a5cdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ade6247-d58b-4517-a92e-507fd194cc65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2cd1243-f89c-496f-b2f9-3bc678022ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "062ecf88-b58f-43ea-b63c-cd009f934674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce59a83e-2090-41d2-b9f9-18c9e23c8f84",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ccc0db3-1a61-48cc-b627-58800ba035be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f7185602-be74-45a0-b1ce-d350a4f917f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac0f5dd-dab3-4bd8-b496-cdd959a38c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "6faf33d3-95bd-4d90-a446-1d3bfbf63461"
                        }
                      }
                    ]
                  },
                  {
                    "id": "914f8b9f-cfd3-4326-8d1a-474fa48d0740",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1d28336-fb47-424b-8278-2be19d7c8270",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cea31959-8b86-451a-89eb-61a9b01de751"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2699267-429e-497b-8dca-7a6664fe115d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "edd96969-9c63-4b1c-b8a1-1f78435b3d2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa797f0f-ec86-49d8-b8bb-239d3a2a5d9e",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d81f7e00-aad9-4659-ae17-c0146a565fb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d212e465-503a-420e-88b2-c7fde5bfd94c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9d6c203-b36b-4463-a7e8-9935669f2a2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d2ef42e-7e2b-4568-9a27-9c7462290617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e41e6c0-b00b-44ab-be1b-f1b98caaf99d",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cece08e4-5fd8-4618-8ca8-e900dd589298",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "bf040461-af03-4591-97cf-e69135ba25fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03a59799-e0af-47b4-b459-b7d5acdaef5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d48a3f95-9f37-419e-bbf8-960e14c38f06"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3c7b6192-c489-49e3-bb01-d5cca6536746",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "8c19b573-c221-49fe-9b96-a50ee34f5f87",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f175f19a-f7ab-4c69-8f94-896230f22958",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e58a3c1-9c2c-40f7-ab50-fccf0bd07676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f368c46d-8b71-4eb9-8e90-652bbc781049",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b4f21d38-d7a7-49f3-a2fe-2c7d41fe8343"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8b35022-80b7-44cf-ae6e-1f7693dec15d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aae62f62-fa59-45f4-bace-ffea85d65b99"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "0a887174-bbbd-43b8-ab1a-807e35b87ced",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9c866362-3ae1-49df-9323-4126379b4b24"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "957b3654-a625-4fda-8590-11f8dd1df494",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "9fbb5606-a5aa-4689-9be2-e760d4aa1788"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7b37677d-7302-48e3-83e7-6170b06c9f49",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3c775831-56ee-4459-b4cb-e9d8325ca170"
                }
              }
            ]
          },
          {
            "id": "6e624601-12a3-4eaa-a774-65d2f8f7dfe2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "42ea6b76-9439-4bb7-91f2-2ad85605280e",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "128db41d-ef42-460b-8a8a-5a67dd25b2c4",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee421944-0c25-447e-a9f3-ed93044fcc19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "fcde392b-0c40-4fc5-bcd3-cd7ac1403324"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3bdf6f7-81be-4c23-9e55-85654affec70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6978015-d2cc-4b2f-9986-8f7934dde444"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e74cfbf9-f8a0-4855-a57d-231ac487715f",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e5c0bc02-3e5e-4ec3-a7f4-fbf318941c2a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8df2a512-ac69-4455-a5d1-359317122f24"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "00c2c1ab-104b-4d4c-893c-205e46c8bfa1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "5ea7f39a-6f26-42d4-9a5b-3c6f83bfb013"
                    }
                  }
                ]
              },
              {
                "id": "49c18e8a-2acb-46ff-a429-90eaafdb1fec",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7e797e2e-7ec5-4765-8ab6-ede63b2f0941",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e4ee92ae-fb30-41a9-a527-cc4dfada85c2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4e2d45cc-7e9f-4780-8d65-f5a1e3172e3e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "745564e1-5491-4ebc-8a9c-2a56760c73f4"
                    }
                  }
                ]
              },
              {
                "id": "8d97440c-026f-4250-9d35-2a6cb3d0b019",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4b9d0ad7-5559-40d7-9006-479773c386fc",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7fc35e1d-c078-42c4-93f1-d365f2aa6510"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "58116d87-f733-4235-a5d8-475c8f72abc3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c7e2c1f2-9bd6-4904-8ab5-104e49ed10ae"
                    }
                  }
                ]
              },
              {
                "id": "9d1d488b-d599-4311-a141-fafa1d8043d7",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "17da22e8-0e27-4c2a-8b08-0da8d5d86cb1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a70cd42b-dd10-4e5b-a513-62e8b34a1d5b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4d55a663-548f-42b8-9e3a-930184653ea2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "4679ad65-2175-4248-872f-78e387acb1a1"
                    }
                  }
                ]
              },
              {
                "id": "dae1dc2d-f0d9-4249-a320-6d3510a54a4e",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "6a2c6ec9-6bf8-479d-ab27-3994d61a1492",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "52d5eef1-2e7a-4c53-ba3d-c364994201fc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1c5ee315-c7bd-4642-9a34-0cefe71d2060",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c6422f0b-3895-4a36-b0a7-f985f68c6cad"
                    }
                  }
                ]
              },
              {
                "id": "4c5ce911-4a49-45c2-9817-2ded181e03f3",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c614f359-824c-468f-8879-557be41ac0c0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d90792fd-829c-4d47-8fd5-d9646cc89315"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "adf94213-ad35-4bb5-8901-7f0d5b077a59",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "7e908751-a49f-489e-9755-ae0f9c89b5ac"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "3ef4a706-ab4b-4aa6-8c2a-acaca5619e5a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "279042d6-7690-4682-934c-6e9e43efb730"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "d821fd28-ca57-4ce7-95fd-64be8205a1d5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6c686851-313b-4922-bcd0-a476bf70d85a"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "10d62464-51f0-4c09-884e-1a8297b6f711",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "07bab603-0452-42aa-b429-f38865f2aca7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b8ab9578-46dd-4e5c-9984-83e32afd70c7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8c10eb65-4129-4631-a24f-929a39e69b51"
            }
          }
        ]
      },
      {
        "id": "807f3138-0a5c-403c-890a-2795e134c38e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d7bc6a45-cbb3-4f99-a810-2955a52edb46",
            "name": "Negative Testing",
            "item": [
              {
                "id": "01f0bb1c-9128-4492-83df-39d51a4dda62",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "66fb4e1c-1e88-4fc5-ac8e-fababb4a562f",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28090acd-d484-442b-b75a-5e825cfcd4d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83fcaca3-73d9-46e8-9d1b-9250515e4a20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "052a2808-7f8f-45db-ad7c-a21ed367a5d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "241e6f47-b6d4-4e42-8f3d-ea09cbdf16fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ba56818-d5a0-40db-b0d2-9ed7d62bf0bc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7427cc2-7fb6-40cf-af8c-0b0020585455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "835fd910-cafe-4449-8ff9-abb59c8b48c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03766faa-d29a-46bd-bcf7-f13f346b9183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb62b0a4-1e79-4bc3-99d4-2840b9411e90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "139fb7e3-4e3d-4809-acb2-76a998e57362",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5cfa73-2926-4dde-809f-b4378f83d59b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03c7c346-64de-4320-b387-6c652fee1df7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f532d540-642e-43ad-95f8-7c4ae6f1284b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c69ecf5-fca0-472b-af81-4d34c3772695"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e23a6cf-9a04-4d5b-8c60-40a34b673787",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc35cc1a-f592-4bb6-bbe1-c4f098115a2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47dabca9-45fc-49ac-b7e1-3c65cf3500f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7800f3a4-626d-4a94-a3da-92be21acf25b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c58b06f9-201e-416e-a5fe-aca69117486d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51bc58a7-22f3-4f8d-82b6-f80683b8e2f3",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7359908e-f23f-4eb8-a915-c32b9163c46f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "245c8bcd-fda9-4605-a73c-63b5b59def23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bddcb628-8be3-424d-a276-2a9e8551f8fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcc244ba-8ea3-467d-ab28-f1467772c156"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3642800e-10f6-40a5-b372-1c55c3ff2a09",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "732764b1-24b0-40f4-ae10-16bcdd881c28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f3e6fe1-8ad8-4313-94c1-8a0f00987c88"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fed7ef52-1fef-4070-b20a-b6356ef67c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ecdb36d5-68fb-4ff6-9944-9f8780874f70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b01651d-ea18-43e4-9766-193c4daa7bb2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b516b88-c333-4992-b8db-c560aea2f1b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bb9be84-35fd-4bb0-a282-7ce92344cf22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b305513d-ba72-4916-a732-48af9e44dac8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd772ec0-f071-4410-9017-58251cff195c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58144ee3-4602-49a9-bf13-1ba610677254",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e58b809-7b30-459a-9136-ffd00a2fa19c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0421513-2d9b-4417-99ea-544e6e7a232f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aac891cf-746e-4ced-be60-7ccd87a4b204",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "93605753-5d21-452f-b9d1-b3a023f8ace7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfd0ff96-5fe8-42e2-bc79-dba2298b17cc",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70e624ae-874d-445d-9a01-0e60a502db21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cec85c9-97d2-40d3-a5b3-1be71cde9da7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6054bb3-e17c-4639-9d8e-e57ad79df167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e7873f63-2774-465a-8985-a7dfa2bfc763"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05e5373f-2371-4b91-bda5-d49045c19de4",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74e1b581-985a-469f-a579-249c93e5ba89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11744718-85d9-4c56-a63a-c473598fbac3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8930ed0-a7b9-4282-9d19-9241fddfd4b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "ba0b4ac3-32dc-4281-9933-98e118f15836"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ebec3bd-261e-4bc3-9317-d7a9486ed1b6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a1ca579-228d-4533-8094-7b8fb84325e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "694a4f56-d926-417f-94a1-286976be63c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7a86bf2-2a56-4e23-9a48-4e9f3c1bca2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ddb6bdee-c4fb-44b6-a68e-58986570714a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8116cb-6c89-4162-8af8-681e893d89b6",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb1e9fba-d881-4cc4-92cb-b1709ccdbc31",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f55cc5e-e532-452a-9f5a-d76f229577ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a67cf6d7-00d2-4d56-babf-97fac2e94c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "7053fc04-f329-486f-8fdd-80b301f4c3b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a502dda7-f43e-4c04-be0a-d64611273902",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb9edda5-b37c-4c65-b32f-fdcbff7a2d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f948e0e-baa9-4e22-bd1b-aacab6fd75e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09cddccf-5c3a-4525-81e4-2f68e1e9505c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9532241-e5d4-4279-8a93-efd56d39cdf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8fdb22-cf41-4bfa-b527-a16f976ebebe",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "599f1b90-ca0f-4f3c-b479-9c7d09733460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c90b7ea2-7cd9-48b5-a0bb-13630e65667d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec213d0a-70a5-48ad-a82a-dac74dc46538",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "23f003f0-ab53-429e-a4b7-4094211a8967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84626f3b-f261-459c-9b36-2e7a35967e38",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86e8a283-4343-444a-aa82-dc41ee592290",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67d02d3a-90da-4799-8792-909e5d92f91a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "831ce24c-259f-4369-a985-d3ca271f1b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc6500e1-61e4-48a1-b44c-423530a413db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "653d16b5-34e4-413b-8b91-df25063c3691",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec2d00f8-67dd-4a9b-931d-84f13f8e4a9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ea0a154-5367-4790-9cff-550645a30ec4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "020de322-1e49-4ec5-b844-1feba537a10c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "dc8b2cc2-09eb-4978-96a9-a462ff683bb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c467653-b1c5-417a-a92c-4a111a3358f7",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de623f8-5673-43af-8f09-9576384a3806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5ffd16f-2045-4dcd-a94f-0af5d761b2a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebe66af1-ee0d-460b-829a-ab988afe8d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4679879-abcf-4396-8899-d91a00f01a90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03413fbc-5954-4735-a8c0-d0737ae63cb0",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e1de0a-0321-48ca-8bb5-0a1e27915f97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e250359-fef0-4808-8c22-1c341d6c9653"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3edfc6c2-7cc7-4229-9705-ed72237eac06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "12f7173a-d483-4a41-8cec-09db8ee17574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63a1b6d9-57ca-466d-8f00-2b79ab95a044",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56fce103-5484-40a4-a48b-cbc5efa0e886",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d3a1208-6143-4bcf-a34e-8a2f3a38d581"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ce9c55-6908-400c-9796-20ae86968440",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ee8be46-04e0-48a4-9b04-efb43080675d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8b75acd-b7ff-40da-8c68-3bcfecbba14f",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b044873-e435-48e8-87d8-a234d7f2fb5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f09041d4-4c3f-416e-92b3-4a2f3ddf1813"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40699fda-c5fe-4ecd-895e-96e4cd660994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cea8dda-fc0e-46c1-96ad-1a77cff4d2c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cee00b3-0537-41d1-afb0-50e1e16edfd0",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a03464bc-f75e-443b-9f05-2b832f0dd738",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e9b43cc-9201-4f26-9778-188fb4698f36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6974d417-034d-4f4a-a8fc-677bd24c2d74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b349f8ef-b107-494e-b1d5-92d5d72c846e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2fe011e-fe08-467c-b927-4413cccef1e8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb759b8-ebd9-47d3-9049-c3fda5a691f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1baf59ea-1ea4-4e08-aa94-4b4ec96613a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627ead2f-78c1-4bd1-bc97-2c4d35194f04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e4b69ef9-2b96-4b69-bb8e-bd167a7cd076"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f8565b9-dffd-4186-8db5-7ac5bdbc2dca",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d666a1c-7d8e-493d-af13-a80f64ea2a64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab969db6-b69c-4583-aa21-10a9063f661c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99bd592-df06-412e-af08-0f0b9992d5fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3e29b3ea-0110-4701-96d6-763c42552571"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e29daa20-640e-4a28-b2f2-12f8781c4a65",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5201e5da-1742-4200-ae25-62b2ef57eea9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9aae338b-7734-4391-b80d-28a2729df646"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad85c2ca-0bb5-4ed1-8adc-8e90975d0316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d20077b7-7bc9-4334-9afa-aa4a5baf3ad6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d4df190-df03-496b-bf16-14effe6d4973",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24f0ff98-7862-4710-bcfa-6488cce52ba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b44a7e-b3dc-427c-bde5-a5855439d93a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85ad2c0b-2b23-4d70-a127-448e8234cd38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "173954dc-cfd6-4345-b000-006a5496515e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2e83ae4-e464-4ca3-8658-4f4495d70efd",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1236826f-f31a-4729-a7c2-accc94091a66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "072d163e-b1a4-4d67-8786-bbd0774b33d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebe24b9-46ed-4659-9878-eb43f192a166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "433d0244-f0d4-420b-8e7c-b28d68f4cbf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d15175a0-c057-470d-8c3e-f5ec8facbe0f",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aabd8c1-26e1-4bf6-b0b7-c341717a00fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22439e94-8cd4-4b3b-9826-5b28ef6a71e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2920b56d-fe97-4a10-8e4a-2648450f1ecf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "edcd3ab9-182f-4968-864d-456fed87c73a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65c6f732-2886-4e24-b6c7-80a56586307e",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "006dd9cf-7e1f-4b09-8404-e466e6af9b7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f62ea9b9-a8a1-41f8-a73e-d55d3fd83b72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ea29e5-e42c-43bb-afdb-0d8c955a8b34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "280e7cea-5c04-47fd-9528-5a3c1dae81f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e993645-68f4-424c-81c7-85f58039a8f4",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757673ef-82d0-409c-830a-94c6e5f9cb0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3ab4a8f-30cc-4493-b747-b6ce54eac7f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b66a9b-e0d1-4d2a-b186-c5d0df242935",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "173eb6d5-7d7d-4a38-a672-ab7cf41a15b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06cc9b91-53c4-4b90-af4d-c0b081525433",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93117d85-0c0a-453c-b67a-6039b55a1c29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26da45b6-fb27-4f8a-aa02-1a41dc5653ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5addc86e-7b11-48af-a364-ccd1eb9f7953",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65f06f2f-be8d-414b-a509-b3e9b032f654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc946a0d-ded8-4e10-9aec-8a3a6aff6e1e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75956585-55d4-4ec2-84aa-2c8f8db8f57b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc853364-af48-481a-88fa-24a65987e38f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1373d9a-a357-4d6e-a1b9-58fe038812b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f3c5940-9d76-4731-bfc6-19b0b8902b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a2e378-852d-4a75-93fa-248a1b4267a8",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6fdfc5f1-5a29-4fc3-8881-0df7fa53bdc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf93f507-1dd2-410d-b2fc-62a7b7eceaaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2f194799-91e7-41c7-a9f1-5346b1155e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8c864c4-7a0a-4d09-8587-ef274903ff57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4f047df-c858-4a05-8681-0f0b0127a339",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbc4f214-29e1-4215-98bb-133059cae18f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "342070b3-adbb-4e1b-9370-05e88f922a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf4d22d7-09fe-4608-9843-3e0c8f50ee5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "82d1f1bb-a928-4768-9555-bd097d2fbccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44a51e22-1b6c-41b9-bb09-cc6cb09562ad",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68c8033-6263-4444-8f4a-070e5f99f3ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c81e04b-7583-48ec-a93b-ea23ddf355ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b50502a-48ce-4510-a8fc-36d4c4ebe085",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a9fc8b61-4a77-4079-9a6b-f38a08e52a4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd444369-25fb-4d5b-85c6-ef50015b19f5",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83c61b2f-253f-4599-81a4-f6ad9d4c7abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf088702-ee71-4761-af4a-2a9453b664c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "594de204-d906-4655-b11c-f43353d71ac0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3afe2efa-a806-498c-a897-9713eb020d87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c7f2e789-3aca-4b86-8528-9af94dac3ce0",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55ce6f6c-31e3-4ad7-8944-853d357e6a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e69d270e-6f6e-481e-960e-926c9df6d776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48f0164-63a9-4f44-ac45-f69e2ad60cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0dc7b82-3eb7-464b-85aa-6556f257b49a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbcb2186-e329-4dda-ae04-b6268a65dafd",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9cf79907-76f4-413a-bba0-f2f884c6c7ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d19a5ac8-f2d6-4d85-9ec4-319f8fb57779"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15560ee1-fc40-4ec0-969e-e346ff95570b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a2bdfe33-15a2-4f71-9afb-38233bdb7aa8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "c47e4f45-a63b-4ca5-9586-88bb848bb3a7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c0cf212b-daf4-43cb-b95b-35b47880e1c2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "964a2e86-6644-4dab-875c-fbbe7b5e97af",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "1a8eec39-2a4d-4367-9220-a0a87053a1fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "562eac6a-e0e5-4f95-bb63-e4f7b5396c2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "194d9e1d-abf1-49e7-b2d7-548fea28a79b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c5b440bb-6923-4016-9af0-b9d54c98feb2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6e144ba1-707d-4d6d-99c5-3984ce1368cb"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "390c3453-b8ff-466b-944b-b4bc4bd401ad",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8465293d-ab6d-4e93-9e5f-166765d35928"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "72616091-8532-4793-90d5-d8324c9befe1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b71ae242-6fcd-4df8-bbdd-8d8d6cf05e69"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "aed4373f-d4c6-427a-8e7f-11d030d316de",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f94b0def-b09c-4678-a0d5-3cfe0de47a93"
            }
          }
        ]
      },
      {
        "id": "19a94867-9703-4be1-ab93-718c8f4f73e0",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "d868e7bf-88a3-4fae-ba8f-5e6408223120",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a629f146-2053-460a-9c6b-45e30a2b50b8",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d309978a-ff32-4d0b-8938-78992d1de786",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a6eff9b-5536-4320-aef3-6eeecd191584",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c424af4-3d4d-4ed9-834c-6537d44d14c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d19ad58-df9d-4f31-a2ad-d6e9b1768a2d",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2fd82d0-22de-478e-aa5c-c4ec6aa10f72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "467769f5-4d15-46d0-ab75-98faba4a1c0a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95a2d916-5f2d-4848-b0c3-067a399b38a0",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bab536de-5027-48bb-8f1d-3a601e723c32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b25f6ac-84d8-4011-ae37-930a974cd9d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce5eda49-5df9-436d-bfc6-d45f658190e5",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f436533-3aba-46b1-8f51-6957c0020082",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6a70e93-2b9d-4aad-a124-4e6a112bd893"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ce54378-edb3-4289-af6d-4f0d2e0ee87c",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da86b900-3521-4799-b11c-3ffd21fb2c5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51180213-9ad5-4065-b512-f7881a333aa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9488030-2d4b-4887-8e05-5fdcc347b25b",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "584e5fe8-f9ee-4501-86a9-d6b58335e448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c587bc85-ef65-4d43-acde-a1e83642df4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e56e70f4-a5d4-4201-b7c3-b726ddf71e46",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2717827-43fb-4a92-a333-7fdac3f8c33f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b48ae56a-a4f9-49d3-92e1-2c75a7a077d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f82b237-833a-45e6-9c91-39c425c927fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2fe1bb2-e787-4d16-94b7-6fad76acf9c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f58509d-072e-4586-813c-ec0a4bbfc3d0",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dc3dc62-826a-457d-b500-8b9c5c460f18",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3ac55a8-62cf-4831-9847-8e0b68b41971"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6be60e17-629d-4085-b59e-baae932f1a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b46d026-5c97-45ed-a50a-bc0468a2d053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb70bd54-07a9-4798-b15e-379894194281",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b29bfd13-c808-4342-bf60-4ec70ad2ec9a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "028a6346-c04b-4d01-9652-1aff6a6a0ac6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7c4c1c3-118a-45c9-9bb4-98de9a7069ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88f92dd0-86f8-4139-8e38-54f192eacd15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaae4092-6f77-4215-8d9e-5805ad9d1fbd",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef231e83-c6c9-485c-aecf-e0414a02ee9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75e43cec-29d5-406e-86a4-8372fafe388c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ea2aca0-0e24-4941-b176-3b080bafa010",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d98c860d-efd8-4526-a4b2-7bca9734f19a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0055d8c4-0031-48bf-b839-b8c8f4e02225",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aebf59c-68e6-45ec-93af-ac18e39512e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f5d6a1f-9fae-4eae-90e2-528d4e8dc97f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "180b4ee7-2444-46e8-be03-150998e807ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cb4a1db6-4b0f-46e5-8ab1-12707e15d7fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b3cfaab-dc77-41d9-9510-9dac2d182d2f",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41fef843-95ff-49e2-b627-4a6ce1c3ee95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3269497-98ab-4a7b-9ace-676606060422"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b979755-7a97-41b1-963b-a786f7d7d7f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4419069f-aa45-458f-a9ae-152a5530dfeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b920700-373e-409b-ae74-6d4f19c3f01b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1d5a37f-7daa-4e8d-a1b9-932226d04b06",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "022dab2e-92a1-4902-a9f9-988e88740094"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e638ea1e-4a7f-4824-bd93-529a8be6993d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4724c21f-c651-4bca-a1de-64ce13c2bd80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af9c39a-6afa-4476-8329-6407f909a113",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f93c6bcb-fa1e-4f09-b2a5-e2ce30bf3cbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0955865b-3e7a-4edb-8e2e-33d1e1dec3a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce739c5a-1961-493b-9e05-77ed407a450e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d273f94f-8341-4bbf-a057-104485764638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe4ed8e-1041-4ffe-b5ae-6503611bd4b0",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9ca68e6-2639-4395-907a-bc517123cf0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1022f2fc-948e-4d67-a112-4df3e2324edf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "447ac32f-bb6f-4d95-a719-5accb8d58b1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc7ecac4-36b0-4f26-8442-70b396a6c378"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bec18239-b749-4642-b1e7-2c515903c9e3",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9eedad54-4e5f-420e-b271-d67ddba743ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bb7abade-7ae7-48de-acef-4c005efc68a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1273bb50-0228-425f-bde0-442a04f5a1e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fdd2454-347d-4163-a5e3-4d755f0b0772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3a93473-fa00-4ffb-a13b-8981cc11f9ed",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbe83026-5fe7-4ecf-a5a7-70802a54fa5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8c04b5f-f1e5-4a78-9e7c-08baad15ea41"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d146b076-dc4e-40d1-a68b-cb8609c5d802",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "481f48a1-9b1e-4b1b-94f4-10a6da9d358d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37ecd444-00f1-4e3b-8a8f-af91a9489d27",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f085b5ee-da26-41aa-a5a8-04a706a096e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0a35cce-c232-4800-bba1-3acfb9c53c70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26a1dd03-e6ca-4213-9ba1-8be7c5b75c25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e708b4bb-ec91-439c-a6bf-0a0849a0bd60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6f26d8e-f882-4667-803e-d87a25ba8ad6",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e0865af-3231-4fcc-8fdf-20804a79d8d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46e2c010-d778-45b5-8fac-373c1df20bc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "131bbe10-46fb-4dc3-b3d8-19519d35cf48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f25d19da-0c59-4560-920c-7f0eee32f3f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c37d95e9-d8d7-466a-a28d-6f1c5c0a7041",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd2daf24-ed38-4c67-a56e-dde2ae4891ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1f3ddb6-7fd7-4fa3-a6a9-eb61c168ac4e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64591200-2e7a-4b3a-b0f5-934ab79aa090",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "743844cf-7a3c-43de-a967-6913a0a10276"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7747b90e-2138-485e-b531-5a68750cf6fe",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95d2b732-20cc-4b1e-949c-40ab0f562ecf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81d94168-d2ed-445a-ac70-edc60e884493"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca514404-d40c-4735-9efa-d7a1d218b3b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7131a7ff-d0a0-4f63-82e9-91412c4bd92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f60633b7-89f7-4a6c-876c-eb5140130bce",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "826fddd7-8967-413b-bf56-3dc11e359ce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "707adbad-1918-4dc4-8ebf-0676754c228e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f52740a-2e51-4f78-82b7-9df6799d6283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89c62e76-6d50-4467-8d5f-ea7cebdeccb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "359ff62b-5579-46fa-9d36-9ed8029b1a9f",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c692e626-28ed-4eb0-bfd7-da432d3489eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a409b8f-edf6-4f81-83fa-1be6e36e8674"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16ccd867-59cd-49ff-b583-02c0abc92562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b79d2ea-ef5c-4f4d-b659-09f0e52bbc70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "362623ed-327a-470a-a234-14b275aa91e6",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3c9ee6d-504d-4534-b264-cea95102f98f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13a66a26-62c1-45bf-80a2-799123678358"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3e37e05-2f09-4e10-ba6c-1eac55e865c5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "428e8766-99fa-4459-adb9-bc32cb58a3de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85af1b13-aebe-4c66-a713-1bd161b31278",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4becf1a2-7802-40ca-be18-ee9bf1fcd1cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1eb1108b-ec2b-43e2-b58a-ce6097197045"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9c69f12-e278-4e72-8e4b-8af6299c559a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a06ec7c-34e0-487d-9e74-72dcda4a08b7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f82cb19a-ee4b-4737-8120-0e1cdced644c",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5b8c3c6-46d0-403d-9f91-75010212e0c3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e32c8635-1eb1-4c85-9c1b-a5b523aeca0b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5b5589-6ff3-41e7-b239-1bc24cc4d1ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca1dd415-66cd-4d37-943a-449b32959bfc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97013704-b021-4029-8301-8d8126a57e1c",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c1710ee-80b5-482c-96c9-2595f31cc215",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3384b50-e7b4-4746-89c4-142222742978"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f919dca1-3fe1-4cd2-946b-483b6fbf7973",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8204d1c5-fc1d-4d6e-acdb-757ee8c168ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ebc3dad-ae7a-488f-98a8-311888dba1b9",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "989cfaab-668f-4c0e-8d76-c010cfbdf5b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e99d048e-a7f8-44e4-9cac-5c367b48f768"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab7a0177-a5ee-42cb-ba3e-368cd8844b35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "879cd7c2-9d0e-4b0d-bf41-b3695f6c77a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ecac0f2-e656-4147-8129-001557976d36",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e901c0-94ba-4b7b-ab28-283fbd9f5793",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4f04a49b-c769-4c8f-92cd-e7461c8336b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "101d2edc-7e66-4c05-8a39-ad0c203aa304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eee800a5-02e4-4a38-81b5-1322392e3b37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "095ed120-00fb-4a40-a1b8-0e03b24a3cc3",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aae4f3e-a6d8-4e7d-ab73-c4ec671387b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0a1a8a43-0c13-4f9f-a7f8-28f5da5cd533"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b843e5d-eb68-4c24-a3ea-e8ec0f5b4ffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bea57c87-5370-4f85-9448-0c6dbcaa1c15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7fe5476-3401-4ba9-aca1-655508a3744e",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8051a1ae-1fd2-4dcb-98d3-3bddf8517d75",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a3b9e91d-d74f-4472-9a2d-5a47e0ee84e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "357261be-059e-463d-aeb9-586232b3c0f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54f633fa-c274-45ba-81af-d230ceecf7e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af5b48bf-b63d-4fef-b854-06874b57de87",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ce410c-95fd-4459-a564-370a149095fc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4452b15-ae6e-4ca8-a2a6-db9a5889b57b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99ed73ad-9984-4aea-aa41-b53a2cf1a9f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b053579-f7e7-4f3a-975a-f9621a663464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2d154a19-c309-4718-9611-d2c6705e351e",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "880b7d6e-34f8-462a-aabe-45b6b5587d92",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fbd6709a-9304-4a4f-a066-9615f951d151"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "500033a4-3fe4-4d6a-b762-d03e4836cac0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09951e6f-e12c-43c4-8fa0-a2e560de9622"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9edb792-d8fc-449f-a07a-46caf295c082",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c419fc6-839b-47f9-895c-f8c738c9e8e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29ba23ff-9825-47bb-a75e-55761087f718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efaf1cf0-0996-477c-9093-ac2dc34bbc03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1edc433-e77b-40f5-ac32-9be5f000de9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0dd855c-2586-4121-8377-eaf371c106ca",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1977495e-6a5b-4dc0-86ae-991fbbfaae1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b8fe6a9-e99d-4499-9f17-9de001c6a451"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f975b5de-f7a4-45a6-a3ba-9731008e84c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "77034408-6122-42b7-9ce3-1464d313c9cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e98daf6b-5580-42de-b91f-38a781887aa0",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "627dcb38-b106-4b54-b1ed-a09b6e82edfe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d028c36f-2d80-4e52-93c1-a7fc7a249deb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84d515d-5637-4ec3-a3d1-fdc470eb1406",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ac73e69-fddb-48b8-98d4-822810b79d3f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aae9a9bb-0d72-41c2-b28a-f878fc1b7af3",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "37ab3eb1-ea73-4c22-9582-d99c7f013e45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01ea9563-46a3-484e-864c-1a8fa24eedc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "981c4622-c6b1-4121-98b0-e775b87820e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d3adc01-4033-4c32-adb7-00a8af5a816c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b93b707-a5f0-4cee-a876-80b1f6f9003a",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccaf8c78-cda2-4fea-b15d-e5868f90dff8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9b22116-0589-4614-9d46-3fd986d56f2c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5e974f-e71b-4c9c-937e-b0e437af4b1f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c81e7d32-894f-4622-a491-104c83146cf0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81aa0604-e1b0-4a7a-b9d9-e7a4b2306963",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d69dd94e-49ca-41d7-8216-300be0b15929",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff2ab7a1-106d-4b4c-89c5-b123563d2793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf8d9402-d748-430d-92d1-2565630b2498",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c27a9f4f-b884-4e4d-bcf2-5b96243ef2d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b51a95-35a3-4de8-8343-354f75110f72",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70f1d101-53b5-475b-b5bb-57fc74890806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1c59252-6af9-4a6c-a719-6d67af504169"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3975f13-d88d-4d51-bd9a-f5229930a3b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "766e1ed6-baa7-48c9-a5ee-728f1deab53a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adf04f5d-8391-4cc7-9842-05f9b665a657",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9db8e307-9302-4729-8b33-3bfb077b907f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09e299aa-2ae1-41ff-bbbf-0ad2bab86416"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0f34f93-4b9b-44fb-b5c5-0260276dd512",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33412414-f744-465e-aa9c-ab32d3e82444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9cf1faa-0b3d-4ceb-a309-759a704d0be8",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c9d842d-c9cf-4c3f-bcff-09b8d76b03e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da394fc6-8396-4e07-ba5b-f8fe31d71416"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e535ef7-2ab8-4612-9037-4a94365bd91f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ce52e94-8e65-4e0b-8f50-96ed7cd23373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be84e77b-6e44-40c1-9d11-015c162b074d",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "166aff02-3485-4941-a941-5c9b6cc9a985",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e70a8440-2366-41f0-83b7-7018d35f162d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c1561d-c9e7-4aeb-85ce-c6853a266947",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6fa488b-ffdd-4d3a-86ca-ff2b93f67697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e42dade-b5b4-47bc-be7e-5ce759882250",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ddb699c-0b03-4ca4-a5be-530f2288cdef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "368c5e89-830e-4716-957b-27d9a2cf683a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97e3dc4b-766e-46e3-aeff-6b3d47cf0abe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad06b602-2eae-4a85-85fb-a47697c9faf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a96caee1-f7f6-479a-baec-deba3b6ec8ab",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cdb19a6-4d58-40b7-9101-86e4388a1e7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fd6f5b9-3571-4e3e-b66e-d90e0a29c8b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a4fecb-f064-47ec-8665-971c03d4c90f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33b837e2-c3b3-4398-9060-81fd0e05512e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7acc1c65-1577-4eb0-b49b-6e00f1d0dd10",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3450d9c4-cb5b-4a55-9950-24bb5e27fe58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3db28c1e-88b1-459d-b449-a246a3ad8612"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce93203-c503-4722-8125-ca1e7b7d599f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3878c3fc-89ff-49d5-a238-c0807264cf0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a92fa654-365b-45f7-a33a-7fde7a5abef8",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "920695b4-71a7-42f3-863b-89fbef7b9f25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "671b90f5-e2f6-469a-aed4-68ea2dca28ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81a5b1f5-8a35-4287-a36c-3ab88a4922b2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27196c4a-2a06-41cf-9327-6b80767cf9ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74e86a87-ec17-47ca-9d60-ee4d9226f48f",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d63ef4c1-6b47-44b9-afc0-d12e5280f897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c22775f2-3eb6-4707-b5f3-f56f02beebef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "925df687-7602-445c-8bdb-29d6262de7f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0543923f-6362-4a87-920b-6408fa6efc2f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d8993ea-aa35-4b11-a604-1a35053aaf20",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72fba91a-de0c-4ad4-8868-23e797b7694e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3b4db69c-e9ce-4426-8753-9b8417d2f71d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98f6e741-7049-4c52-a300-434ba38ea683",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e05fa8f0-a13e-4b9a-b50b-11f90ba24b9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f3e977-893e-4c94-8b54-a606a03aa920",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db8e0e82-31b4-423d-8af8-2f3fde4df843",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64b08d88-cd86-44e1-81c3-74ef1f261dc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e998aba0-585b-4b92-99a7-15c50af69d72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf754496-124f-48ce-8cd7-dece91b1b966"
                        }
                      }
                    ]
                  },
                  {
                    "id": "848b991b-b6d7-43ad-8383-d9970989c1b1",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9de474c8-3420-4db2-a853-ef0972af1626",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "341d2b09-b0d5-43c7-b38a-f780a5fb34ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d28ec3d8-cc29-40fb-9d58-5f08120b55e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "990634c8-06fe-4fc9-9a39-d149aa1e15ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3762d3da-fd0c-4427-ab28-c81cc8c0235d",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffbc8f19-8ba4-4980-9db5-8ad608d5fa7b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d46c1486-c1ba-42a9-ae80-e241b4ed36c2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec4d8641-cf2f-4d1b-ad8a-7ac25691707f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bdc69ea-e6a6-46ce-af5f-fd05e7508a92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97f6cc8a-e0bc-4166-9aac-10db5d1c1806",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6257a6a1-fbbb-4fda-b5c3-c5f8e4fbe255",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e9a33a7-6e1e-47a2-a2d5-85058329c45d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "92353743-8f25-4119-9924-b1a881d1fc43",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad34f36e-8aee-4e8a-a034-f530142edb45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8199e12e-c4fc-4b03-ad2c-c8343e896c27",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7efc8863-dbd6-4146-ae17-2641c2d787f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c10a65b7-9d50-46cd-8bb5-cb6e99f8aa15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7cce722-0368-499d-8cf3-51fc8a8cdf80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98445e2f-7f84-4fe6-8505-78e4e6c85ffe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d8a11c-2aa6-47ec-8a56-d71bdfa85316",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe9d2279-cffe-4c80-b192-72ae8754fdce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38690fc2-d0db-4392-a1ef-2d86b6c9bcc5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d37207-d4b6-40ca-98c2-392c1dbd76d9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26c7336f-40a8-49e0-b2df-2318a0efa7d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1cb4833-2b9d-48d9-ae6a-137f35d3dd0e",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0651b619-3f9c-4bb0-8ac6-50df830d32cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dc99f27-5890-4569-aba5-96bdedd8fbd7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5518b586-36dc-4b30-87c8-2c7e4e3bd21c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cdf22b0-a2ee-4dab-9ba5-a54c375c5961"
                        }
                      }
                    ]
                  },
                  {
                    "id": "371362cb-9466-49b8-b373-46032959ebb0",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff356f5b-3406-4d20-a204-6bb986903f5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "031586e9-f2dc-45f0-a6a1-88e6c5bd6291"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8e15b21-c64f-4e71-ab8c-9e80e5b3e66d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f46f9b9d-705f-4dae-9d4b-35de2d11b619"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77727414-11b0-4f77-b209-30b8b7374b6c",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1b22c98-5c9e-4155-9655-e258452555e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce0352e5-01e0-4df5-8498-5b9486cfcee3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78335bff-3dc7-4e34-95a1-f8612e5f20ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b481136-6760-442b-9a5b-12848465a24b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e8010c-5704-4b85-bcfe-544e077bf536",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "078c235c-1d80-4882-bceb-dca48edee769",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "081b3a5c-0e44-4d5a-b83c-79bc78456921"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04a7e989-94d3-4056-bedb-96bea5a27cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a34c509-af87-4391-a008-7f9254ca632c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46e451f8-3ebd-4690-81bb-a91484b5b323",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33dd754-dc28-4615-adcf-db4ee4ea4b58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f23c10c-03e3-4328-9322-3ed940c0d96e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cb7600e-03eb-4083-b754-2dd0fc728119",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eb817701-3bd2-4df3-a734-bff308513b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dd6a0c4-921e-494e-b23c-cc776498bd23",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e46fce3f-8149-4b39-9ceb-11db89d72ac8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6f9fdd7-10cd-4fc3-b083-63fd71632282"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "95d57417-b2d5-4d35-b129-8280f1a9c9f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9488ff76-73b0-442c-b1ac-079bb0e6cbcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d28e2d-f4cd-4a18-adfe-b9bf7bd9d72c",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96fc4962-4b7d-4085-bcf9-4015883abf3c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5afbd76-52e9-4448-a0a4-2a584ea9adde"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0096e915-98dc-4766-b1bc-af1e0931a149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f73e7aa6-3228-425b-abd6-f21593ce8f34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed7f2645-0225-4d8e-8a2c-26ef5d6e23b4",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c56469d-b1c4-4ae1-a09b-cc24826b8430",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7b95e65c-c60d-4113-93b6-6d6eec268bb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cbce857-7c0f-4e24-83c3-47190c94652c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc1686a5-7b70-40c5-bb35-22d045f594ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29f35667-6c82-433b-a38b-dd2d42590a56",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80a59dd-3af1-432e-beae-bdceafeb031b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b447eff-bc55-410b-a041-038d73500895"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "486cf61d-6dcd-41e8-9f52-e71a71ca91a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39f66a01-f903-4132-aedb-4b575ce302e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da22644f-d279-4419-88b8-6ac5360ee2d8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "510330b3-f87d-431d-a851-34273efdd2ac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bb4a78f-6bf5-4a1c-89db-32698bb5b104"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "06e58a7c-77bf-4995-8074-ff46986f67b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "682ea5ba-6fa8-4adb-a7ff-9b7ccbae5e9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "292d0390-8e78-48d1-bf8f-1732f6a862b7",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f06cccb7-4b85-4e12-902d-931b204f17e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "939a1afd-8fac-40bd-86e0-e70e9b205f64"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fecaba2f-13ab-40be-80cf-55a5108edca4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d90340d-398a-4b16-b660-6efee0df36d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04b7d054-6224-41af-ae43-f445ac581f91",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7434851-dfbf-4307-8389-3e187f567326",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "06f7a749-6365-4f92-b7c1-3f0ebcd66a37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1b881ba-a950-4b5d-821b-5ce64890043f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c7b3d3b-ad6c-46f1-a565-ce335d075aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70f6d4b9-fc69-4cf0-ae7b-412cebe3bf9c",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ed45f8-1be2-4563-99c6-ae8d69799d1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eda5dbba-ac8e-4733-a3af-71c7a641e8af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "76cc9442-086b-4874-8b6d-a904b2c56941",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fffb595-435b-425e-ab29-2b34b0eebd04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f32f0bf2-3c9a-4c22-a21c-7d23cec2708b",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "671c6ae0-992a-4ade-b2ed-f3f49bad9210",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fab8ccac-ebb4-40c9-84e7-78dae5cb902a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae83fc2-ced9-46f1-8133-93658f82cff6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2bdb5f72-fd88-492d-a143-d4b5a483f375"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb090d02-7cf7-4188-bebd-fc6babadc3fa",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e4cdcd2-03c3-4d27-bdcf-c0a48f4efc0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b26db8e2-523c-4350-ab2c-43de975c21a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3cba4637-b9fe-45e9-b257-78d06d20a35b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc48bd12-8cf3-4e24-a8ce-106c442aff7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47a46ba-2053-4c5d-9de1-14c2a103bb9f",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c14d50c5-fdef-474a-bc80-f3d5aaacd904",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0632b39c-54c6-4474-b7b8-5e61988a4be3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5381432b-4afd-4fd6-8922-6e7fd6ff7ca8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de08cc38-6e6a-4699-a10c-81c96579cb6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d53edd2-5e34-4d33-b0be-ce1c4986269b",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad6e961a-23f5-4a72-8834-f921402b77df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "65569d4e-ef8f-40eb-9063-bdfd1312e3e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f9d710-73bb-4705-b1d6-59ecdbba68cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fe48347-10a2-48f6-bc87-b6db4d8633c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0053655-6f98-42b4-89d8-bed6a813f960",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cff2c731-a3a8-4b81-8980-0c51d05976d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "110a84a7-d24a-46a9-9056-46e62e41c8a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9b0b4b-50d8-4c92-bcf5-48dd8a9142d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30202f3c-f9cf-42b4-ae44-eb9c5cf6c23b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6aebb4fd-6b4f-46f8-abb1-a71cbe3784cc",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc410501-d82d-4f10-adb0-5e9798e5bc7e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8ce68d6-3fbb-4d71-85bc-d1abd719e613"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abddd137-663e-49bd-bc9d-45d62a2df8e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1efcabd-f6ba-49af-8272-104f5e8a1b90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "488d6fbc-a200-43f2-96c8-1d81e829675f",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e71a9b1-60a4-4c1e-a0f0-f96348f0abda",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c726e584-77c3-44c3-80d4-78be78e9e598"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f292961f-dd55-46f5-b528-c9fc4a807485",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c9637c6-7942-4e60-975c-16fc9113837e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efd99f34-ba6c-42f8-a139-2d382b0c7d2b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cdb400a-b064-443d-8fd9-8de9260bdc9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0c50f843-e112-432c-a4f1-74ea93b5a70a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5a8732f-a007-4707-b035-ebe52b069bbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e37f79a1-f916-4abf-a707-399e8e249cca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e05af501-2d88-4561-9847-200ecfbced77",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "164c7110-fa1a-416e-8d7b-c5d9100d3be7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "12a2a5d1-d25f-47fb-886d-e79d3e47da81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bf854ce-af99-4753-b0eb-9b018d2b019d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f9d5c3c-3625-448e-8619-1f8e59ad0aba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e256903d-9e9a-4650-a2fb-a52dee03d5a9",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3912caab-c5d6-40ad-a425-c59396419511",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b105c2ca-3943-498d-9676-bdca15d1948a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2412f15e-3de0-4c77-949b-9c4f29453b6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d4a762c-0734-4fdc-ac78-cbf7b2f8e9c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43ecf2d7-0b39-44e1-9303-31fb4ca3ae76",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b412748-10ea-4520-b2ef-545fd07d0cd8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef583b42-6f13-41c9-989c-af877b44acf3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "431bde10-21e2-4848-85a5-460faf9c6f53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43b705dd-5804-44b4-acc6-5d7ef6b6a355"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4450a3e4-1e6b-4139-adb2-7aa805cf7a54",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eed1d130-e049-4dc7-980a-46db6757fbf9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b630156-c4d7-41f8-8a63-5ed8d7948016"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2926dfc5-8c78-462f-bac4-6abcd84ccd12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "516bdf0f-880d-4f9f-918e-d7d3d8759f9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b39752fb-377e-4e52-b7be-985f53c4f859",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8aeff6e1-81d3-4421-a272-c79a834af1ed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4992c315-3892-4587-9554-4fe082fe5fcd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f215d12-6b1f-437a-a015-fd596fa4e42e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13697daa-f125-4141-8c1d-82258e855307"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d01a236-3b24-4e26-a7c2-b864956241d5",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2192958-24a4-4f85-8676-7e4ade3227cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ea5b54e-f110-47f6-9fe8-72c2123275b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e77104-df34-486b-af30-706e3b06a1ca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29e2cfb9-9026-44e0-911e-c35352c50f43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2a826da-ec97-478b-b8ba-5d4e72e5b204",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb80ef6-a3a6-4477-97df-be1e913eb505",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4a9a706f-e837-471d-b78d-2145595254da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa18798-379f-43f8-bf36-d887c5e0e282",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8361147-2d7e-40d7-910b-817a5c42db9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40812299-c1ed-452e-ac4c-0045ca63110b",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69a3ac66-18c9-459c-b010-90a4efbdd249",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dfe5b792-3e4b-446c-83c4-7c3be548cfa2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da830ba2-41a6-489e-a1f3-940402414feb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a888705f-1794-43fc-865f-6cede2d98a07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17981a8c-9e55-409a-a4ad-de89b98a59e3",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6bab6b-5758-4e59-8b6f-326ae60a60d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a10a563b-f3bc-4dae-a007-4e9bbbfc3a28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e087375-8675-475b-afb8-e40e49dbca4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e38ccef0-e7e6-46c9-a5a4-9e26c061f43d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9197bc-7e0d-4f79-85b4-72f4487c2272",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7ff365e-af42-4e30-a791-dac042f38085",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b274bc0a-1bbf-4511-89e9-b6264d83a95e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4dc7b148-74a8-40f5-827c-995c1f12eadd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14f52004-ef14-40e6-a7ea-71616f4f3667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e87a06c4-9b4e-4773-9bab-0ad4c0fa4fc1",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "068215cb-3a89-48c1-95da-c3eea38c0dc9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2eff33cf-0b34-442f-b928-68916c4882c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e1a2304-41b8-44be-832b-06607c3313ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cc63c56-6186-4177-99b5-2087eaf0dcf3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de515026-bd9d-46c1-aca8-c5f12a10bbbf",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22b83518-b75e-421f-95c2-474891dbaeea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "815518ba-0631-41a8-a155-6b71afd21bff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "738dca27-cbe2-4c26-99ab-afa555052ab3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a0e83b6-135f-4d39-b9e1-63d39cf9aedd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56bcad19-edec-4b94-a7bd-5301882144db",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f88af48f-a8b2-4a05-8e93-8e6ead536b38",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "248ad415-c637-433f-adf6-825109d93bc7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46b76c43-2b4e-4db4-83f5-095520d18796",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6400e6a4-efee-4739-a322-6c51765abcdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79c7b51c-9eb4-4edf-91fa-def783da19c0",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93775f40-93ce-4c94-b072-e91b5ff9e691",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "995eace4-f263-41ed-95a0-d9a8ddc411c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cd9865d-41c5-42e0-9307-34dd7409d8e0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8327f714-ba5b-42f5-9f84-82b36fb20666"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c035bfca-3108-4c79-90b9-3ba41c534228",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f95312c-0cff-400a-9264-976603159ae9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "59bd1052-8a9b-4a6e-9d81-f5739489652a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa321211-1b72-4632-8efe-68b1f3c1d1f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e0c73911-bcaa-4ca4-8251-a5729346858d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2da2a348-de1c-4c76-b383-b1989b5227c3",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc568369-fc89-4b44-a70d-f571d9947f56",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e46bfa4-559c-4964-b1d1-9b0dc7d2e146"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4319da5-c8ec-4075-92d6-c8d520d4407f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "caf8a02b-63bc-4d31-9bb8-16c04c7de4ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de9f3343-9a2c-401f-9d53-5dc88c8ab637",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14bd595-b6ba-4d7d-9921-1d6f5b776e70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5c218c2f-d232-4cfc-9ae9-a743acb91d17"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e3aaf30-26e6-4c67-aa65-785b5014e59c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6913f77-8780-4ee4-adda-b0a201350697"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ade87c-ff62-4151-acec-1866a0929838",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f8815a-bfac-459d-96b8-72a3a376d3e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c09fee41-9336-4393-9e4d-cc4743c39a35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd353c58-f1f8-43a9-a9af-c1896ce11da4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1e33ae9-0d1b-4155-81a1-48af063ef656"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63ed8d4f-407e-40d3-bf54-1d914ef90843",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5c6a334-1d3f-40d6-82bc-5c8e3c6dd113",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e3fa98f-4c16-46f1-a36a-09c0387d5d74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b08d30b-1d67-44fc-b2b4-59bab8744e5d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bc84702-4b19-46c9-b843-f199825c60d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e6243d6-8ed2-41da-98a6-8bc5b1889516",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9707c00-cae4-4373-8435-7b50accd7536",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "03a68a6b-120d-46f0-8fce-9ab56dc9c2a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ba5d378-7483-4098-b966-46363743cd04",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70aea114-ed60-4bf5-8b3e-24e4cb8f3fe8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af51c23-73bb-4215-8a2c-b4169ae91043",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd3a0457-189b-4bed-bef9-ed956ab5e145",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b0a49201-7fc4-4dab-a136-cdf8d69b6d9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfdbb478-94d5-4e15-a3fe-4bef9e8aaa1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4ac26e1-6865-4d4e-ad06-cc88c40483da"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "15ffa339-bc50-4d53-a967-c14d0865d0b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f7a7e021-cc03-46c8-9450-3fe53533a1f6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1bd267c4-208e-46f2-b91f-5ace5678e507",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f7a19e7e-8c6b-4ca3-a6d2-6ffd1e037699"
                    }
                  }
                ]
              },
              {
                "id": "b8a7a390-58be-49c1-9063-99749c5401de",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "cb763ce7-f892-4b9d-973c-2e8123e4e447",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1aff5d-3f8c-4491-bbe6-6a84341f228d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b6df223e-9bbb-4be4-87ae-363bfa178c6c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c9ad8e7-c7cb-4ede-b11c-c25260b29631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "13d11f34-08ca-408d-a9a5-e1bb120141d7"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22a1accc-6b06-4113-b8b5-c4c02a48b352",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e26b29fe-c138-4226-8e42-e817e27f23ce"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce6700d0-976c-4d6a-be6b-648a76aa6113",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e44e237f-7513-4335-bcb2-2e7cc1bde1d5"
                    }
                  }
                ]
              },
              {
                "id": "c8612d03-1caf-49ca-bd10-e34f23ffee50",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "f6079ca3-e5db-4154-bb64-7e598dedbb12",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "548c88f7-37f9-473d-904c-23ab883dce85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "8e43d9e4-12e9-44f0-9e88-5bff02dcba16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a172224-6a79-49a2-b800-4f9afd30da75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a086ffa3-ad33-4ac9-9c98-66878ed8acc2"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "157e85d6-9a58-49ab-8c69-45b8e9391806",
            "name": "Positive Testing",
            "item": [
              {
                "id": "9aa60aa4-70f9-419a-9198-197d606d9603",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "44d9667c-c5f8-46c9-a760-f60417ec1c35",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "7de3a817-4a1a-430e-9aba-fad8581861cb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a20bde6a-b73d-46e6-ac6f-44671dfa8aa2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4a87b9a7-21f4-44d3-98c9-eba9ecb5c51c"
                    }
                  }
                ]
              },
              {
                "id": "c8fcb3ee-2753-4d13-b9e2-04c0f49ad7ab",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "37559dd6-1ffd-4e35-a4b7-46a3507d8ed2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "306f2ddf-0a29-4585-a23c-577c3a67b0c6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "faa061d7-afa7-4249-9bc4-d703ee6c2bba",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aa00120d-a19f-4be0-84a2-29aac017ade5"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "54b9a32a-6b08-4c17-851b-2a29000d7cbe",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8013bbe3-ba13-404b-865d-fe5bf5ba7480"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "931e2b84-9b63-437f-a0cd-d9e70eb9f297",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "65906225-d263-4a05-9617-24da57386e55"
            }
          }
        ]
      },
      {
        "id": "2105674c-7ba3-4d1f-a1b4-e56a72116cda",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "6763c535-0982-49c6-bd5c-569cb0dff20d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "83810018-7770-4d29-9b2c-f27a73d4b4f0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f9a35766-6a7f-480b-80e0-b9a8b10193c6",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32acf42c-6f32-4c5f-850b-2a6fec5fe386",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "136931d8-392d-4083-a8bd-076329387a51"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb042e1-94c7-4a08-bd3f-7c52143b1566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4129ecb1-d24e-472f-809e-08b1409385ac"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5490be82-7e79-4107-8dd6-b499dcbda9f5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ab2dbe84-b8ee-45a7-b510-722535eff6e1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "79284726-7b3a-43b9-93b0-f39883734ce6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ff8ed0d-28a9-4ad1-915b-c0da58925cc1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fb0978f8-7004-477b-b1bd-35b68e9cbf52",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "37a3ccef-4f7a-4343-8fa6-ace913c6d805"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d64027f5-a4e3-4490-81f3-2323d2aac0c6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8c6f6ae7-42fc-43b4-94bb-0cc5c135706e"
            }
          }
        ]
      },
      {
        "id": "b3cd260a-2bce-4af6-8d66-68f2e188a23c",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "4a05c789-4253-4c02-b1f8-96db60df4e2d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "579be709-fd9d-43c7-86c4-732ffc6ccee6",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "898e5d0f-61f4-45fe-8242-5f47f945773c",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e73709a9-8a13-412a-8263-d346ddc5cb59",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db68a881-c1cd-44b5-ba6e-8a3945e51721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44b8aca0-7a97-4330-ae64-cb9f5ee2f643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "71a1f9f7-2bd4-47cf-a677-edbc465d66cb"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "505ca00b-bde4-4b79-921d-79bbb94e7674",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "60c23211-4928-4035-867d-4675dfcfd7c0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d43c547c-e745-4d42-b3ae-35cad29e387e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81c7b668-f838-4fa2-ae85-382482cdfb73"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4de437aa-96db-482f-b925-35440390845c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7d37d0ce-a2cf-4282-8a3b-0ee689c2395d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "11766131-ba4d-4b01-b730-d5748064d7d7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "cf3da70c-fa22-410f-8611-8d18a9188035"
            }
          }
        ]
      },
      {
        "id": "785927c4-6a3e-457b-bbc4-754e6fa16f64",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "4e9319f1-f6f7-4b58-95f7-a3e7b95854af",
            "name": "Negative Testing",
            "item": [
              {
                "id": "52aef90a-83b8-4b14-a19e-0c72000aaeb3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c7493df8-b4f2-481c-9025-a9ebe74ad266",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5cbc6d-9f74-4f19-adb8-09c211007f5a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "21f0a966-cc3e-4a7e-a1d7-0f193fde25bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa4477d3-7c81-4b82-a432-c6e426dc6963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "cdda931d-2a08-44aa-81fe-db8d6c46145c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bb7102fa-42f2-40ed-902e-eb5576317e0d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "87a47169-a91e-41e7-85a6-5486e7a91018"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3c01cf48-9190-4130-a5ba-5c92be0365f6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "55fda9a5-89ac-474d-8854-cbc1039b0281"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "53631023-7cc7-4088-bdee-c4a59b31b18d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "5884dc49-da5c-4abe-afca-90ece8d2f0fb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "613fbe03-b58f-4f95-a886-2e62b582e886",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8006a1fc-fa60-4627-b0a1-39f51c96f0f3"
            }
          }
        ]
      },
      {
        "id": "6b0d6bd4-2b83-4349-82e3-4c9042beeae5",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "594e2ac4-bcda-413a-ae62-76012a65ef90",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "54e3dab4-3b59-4e49-96ae-83e9e7dfe66a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "041ac12c-5f01-4c7e-bda0-75d7ef51f865",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "dd454ecf-bb2a-40ae-9d00-af27f4e42712",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7c2361ff-3143-4e69-9238-6512d2858417",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 71
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 71.58730158730154,
      "responseMin": 5,
      "responseMax": 575,
      "responseSd": 76.42630747112499,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1713055212763,
      "completed": 1713055239142
    },
    "executions": [
      {
        "id": "f3bbcb4d-dd72-4f2a-afb0-ee977f708534",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "266ab023-d03b-4f26-a81b-f30dfab1226a",
          "httpRequestId": "e2edffeb-32aa-4463-8676-34bf4b7ebc2c"
        },
        "item": {
          "id": "f3bbcb4d-dd72-4f2a-afb0-ee977f708534",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "a09ab67f-be6b-4ed6-82ce-3c6568a79bc2",
          "status": "OK",
          "code": 200,
          "responseTime": 68,
          "responseSize": 0
        }
      },
      {
        "id": "c3ea5f16-56a5-4ada-9427-51823263365c",
        "cursor": {
          "ref": "e35dd09c-77c2-47ed-be89-056a398eeb43",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "eec75ebe-cda0-4478-b321-dd5ab8ff475d"
        },
        "item": {
          "id": "c3ea5f16-56a5-4ada-9427-51823263365c",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "75102d50-0bc0-4b0b-bcd0-51c67fbe3483",
          "status": "OK",
          "code": 200,
          "responseTime": 5,
          "responseSize": 0
        }
      },
      {
        "id": "63ec75ec-8ed1-4f6f-a971-12ebc37c07cc",
        "cursor": {
          "ref": "ce024062-663b-4ff2-8687-76cc20ad9cdc",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "03a5acde-c357-4dc8-bd53-626098a0f604"
        },
        "item": {
          "id": "63ec75ec-8ed1-4f6f-a971-12ebc37c07cc",
          "name": "did_json"
        },
        "response": {
          "id": "cad8e5b2-b7a4-4830-b117-8f3254f958ac",
          "status": "OK",
          "code": 200,
          "responseTime": 480,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a0159f9-0b9e-4715-a573-8bde9156db0a",
        "cursor": {
          "ref": "28508784-4641-4128-9143-39eb91af21de",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a86aeb71-c5ce-4906-8d26-1b5fd648ce1f"
        },
        "item": {
          "id": "7a0159f9-0b9e-4715-a573-8bde9156db0a",
          "name": "did:invalid"
        },
        "response": {
          "id": "b906ea10-4e79-42e9-8e03-498efd736365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a0159f9-0b9e-4715-a573-8bde9156db0a",
        "cursor": {
          "ref": "28508784-4641-4128-9143-39eb91af21de",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "a86aeb71-c5ce-4906-8d26-1b5fd648ce1f"
        },
        "item": {
          "id": "7a0159f9-0b9e-4715-a573-8bde9156db0a",
          "name": "did:invalid"
        },
        "response": {
          "id": "b906ea10-4e79-42e9-8e03-498efd736365",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6a5b519-edea-4113-857f-e42b3ccf9b18",
        "cursor": {
          "ref": "1ea80244-9394-4fcc-8c92-f5166b9cfcb5",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "2a35c747-092e-4b56-a708-2cc5a4089926"
        },
        "item": {
          "id": "f6a5b519-edea-4113-857f-e42b3ccf9b18",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "5c048243-e88c-4a81-852a-d1c2f1b08841",
          "status": "Not Found",
          "code": 404,
          "responseTime": 100,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7071b863-eff8-48da-bc7c-fa862226fa66",
        "cursor": {
          "ref": "f9b6bd53-98c6-450c-93f0-18606b70f3ef",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e18e1f0e-8a4f-422c-8808-594bfeb63087"
        },
        "item": {
          "id": "7071b863-eff8-48da-bc7c-fa862226fa66",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "c501e1d2-ec2f-49f0-b55f-bc341153f23d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 47,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcf6a6c2-c640-4137-83d0-1ce08fc6a9db",
        "cursor": {
          "ref": "7860e36a-7eb1-4eaa-a748-f7aa55e79d55",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "a9fa78f6-4d05-451d-8eb5-d2e895308532"
        },
        "item": {
          "id": "bcf6a6c2-c640-4137-83d0-1ce08fc6a9db",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "e4d2aec2-49dd-4979-a7da-90d97983ab93",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 39,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d356d959-df7c-41fb-8545-a540c32fc584",
        "cursor": {
          "ref": "80901f53-6f6f-4943-bbae-6c096f49a8fe",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "69b01089-3d17-4f9d-aac3-b6cf0721d716"
        },
        "item": {
          "id": "d356d959-df7c-41fb-8545-a540c32fc584",
          "name": "identifiers"
        },
        "response": {
          "id": "8ed8970b-b65e-4e9b-95c4-1f28e76eca34",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7f92e1-ecb3-4993-9dc7-5cb5f8e62953",
        "cursor": {
          "ref": "1acab324-91cf-4c34-bebe-8abbd5e2f8ec",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "29e59595-d23e-4e73-9615-6b141e188dc4"
        },
        "item": {
          "id": "5a7f92e1-ecb3-4993-9dc7-5cb5f8e62953",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "f35e15d3-99a2-4489-8b94-216d80b4f02a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5023255-bf22-4458-86dd-a7a646ea890b",
        "cursor": {
          "ref": "c3160832-26c0-4a71-a1e5-6141df7685e7",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "d28003f5-1fd8-4274-ad0c-35090e11f256"
        },
        "item": {
          "id": "d5023255-bf22-4458-86dd-a7a646ea890b",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "45e2a092-0533-4fe0-95c9-5ce1694b4769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c424aa5-f5ba-4bac-bdda-42a743f5396b",
        "cursor": {
          "ref": "0e318a0f-accc-4f9f-80b0-4c64144e5c1d",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "ca54a99b-506b-4126-a21c-b76e85e48c08"
        },
        "item": {
          "id": "2c424aa5-f5ba-4bac-bdda-42a743f5396b",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "227a0530-79ae-4ae2-8003-c77df86e79ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e5ed850-a577-4a0e-a901-ed37c3dba47a",
        "cursor": {
          "ref": "87ae8fca-17d2-49b3-ba26-1f0bf63eb794",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "6bbd3efb-e064-45af-9468-1c1c628666da"
        },
        "item": {
          "id": "1e5ed850-a577-4a0e-a901-ed37c3dba47a",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "37784417-1cd0-4d9d-a822-786621a8af1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cb26450-cde2-4b1a-a809-2b1214ce8b67",
        "cursor": {
          "ref": "f0e02ac8-6889-47e2-9d05-ae0a055bb0cd",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6a33fff4-b441-4a92-8cff-e00b5d4a5425"
        },
        "item": {
          "id": "8cb26450-cde2-4b1a-a809-2b1214ce8b67",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "8ee8af7a-544d-44e2-aaac-1241ac89777a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f069ec3e-43ac-46ac-9ac2-f1ffb4f85e35",
        "cursor": {
          "ref": "702ef602-92f4-40b1-b52c-94100bb89a76",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "bfefe4cc-40cd-4f8a-a133-87cea3a4ec88"
        },
        "item": {
          "id": "f069ec3e-43ac-46ac-9ac2-f1ffb4f85e35",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "9b595202-2ac3-493b-8e56-c69652e141ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b4cf786-cbb1-4848-9bc9-27b8b8cfa8d8",
        "cursor": {
          "ref": "ffdc83af-77b3-4526-9aac-35bdce4621c2",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "992144e4-1127-4987-8a62-211818817eae"
        },
        "item": {
          "id": "7b4cf786-cbb1-4848-9bc9-27b8b8cfa8d8",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "5a9150f6-2bc1-4caf-a36f-9c4ecf963849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "910d0cbd-6200-46db-8501-01a48d46770b",
        "cursor": {
          "ref": "483c8626-d0e3-4a84-a8d0-28499914d16b",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "880b657e-2b2a-47a3-a1af-2a3eaf701066"
        },
        "item": {
          "id": "910d0cbd-6200-46db-8501-01a48d46770b",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "4c4b96fc-f9ec-4c9d-bf9f-9eaadebe7072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a47232-e384-4658-ac2a-82e96cce051a",
        "cursor": {
          "ref": "2d26c8e6-e99f-4a50-bb7a-61e44793778d",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "e365659e-5689-4085-9e96-10eb1fb672eb"
        },
        "item": {
          "id": "61a47232-e384-4658-ac2a-82e96cce051a",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "3a754ffa-1f7b-4386-b7fa-ec311e093fec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3f19fae-9b80-467b-a108-34c323dac544",
        "cursor": {
          "ref": "037d88ac-62f7-4420-b049-edcbd2eb6a3f",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "8945efd3-57c9-40ad-a149-b68a127ffce7"
        },
        "item": {
          "id": "c3f19fae-9b80-467b-a108-34c323dac544",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "b5e7680f-eff5-4480-93a8-f81f12e5c0f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f338fd-7963-4955-9acc-de2ded462622",
        "cursor": {
          "ref": "70a86c47-0349-4328-8013-106744915a8a",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "91acfafa-83e7-4d8c-9201-9111f279133b"
        },
        "item": {
          "id": "04f338fd-7963-4955-9acc-de2ded462622",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "9bedd410-a81d-4a0d-99b8-ba4209db09ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346040e4-f9ac-4dcb-917e-f4650df33d45",
        "cursor": {
          "ref": "5e6fc123-c137-4a20-b656-719a3d6c5a74",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "058792f4-67e9-447c-91e9-bdfe0df58d0d"
        },
        "item": {
          "id": "346040e4-f9ac-4dcb-917e-f4650df33d45",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "d25246c5-8fb0-4b88-8889-ecf6ce943b5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6972ebc-a115-4234-95f5-c7cd023aacac",
        "cursor": {
          "ref": "5c44ff77-1eb3-4263-98b6-08f95d5b43de",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "6af4ba98-0a0c-491f-8175-63784e736fbc"
        },
        "item": {
          "id": "b6972ebc-a115-4234-95f5-c7cd023aacac",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "a210dcc4-cf97-4c55-96e4-0e673a4259c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "308f0119-204d-45d9-840a-f8a1f0e99da4",
        "cursor": {
          "ref": "c0c3d4f9-96e7-499f-98fb-cb0745b8daa7",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "17de5900-739b-4093-9617-954e3498a45f"
        },
        "item": {
          "id": "308f0119-204d-45d9-840a-f8a1f0e99da4",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "54f544f0-37a4-460e-81ec-921cce8d3b0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa756ac0-0749-4065-99e9-e01433ac753d",
        "cursor": {
          "ref": "51362a2f-b043-4844-bc4b-5fa0897a4fe7",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "12c5038e-30e1-4c95-b953-9e22374955e9"
        },
        "item": {
          "id": "aa756ac0-0749-4065-99e9-e01433ac753d",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "e77d2c8e-0974-4751-b6a9-d99da6ca40ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac4fc056-44b2-4913-9e66-c6bb76573388",
        "cursor": {
          "ref": "015cc8d0-e412-49dc-bcee-5a163ea077d8",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "eae70ed0-4bc6-437f-9ad1-86400a788d13"
        },
        "item": {
          "id": "ac4fc056-44b2-4913-9e66-c6bb76573388",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "ff8569ba-5169-428f-a1a8-4061f76c110d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27334b6b-0b9d-40e1-b4ae-a348503565b1",
        "cursor": {
          "ref": "473b7a01-c7c9-4ae3-a7cd-70bc1605b70a",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "17e5ec07-e9db-4ef4-bd35-8b9217ea22c2"
        },
        "item": {
          "id": "27334b6b-0b9d-40e1-b4ae-a348503565b1",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "ea027c77-c96d-4032-9623-1d1615dc4775",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8ea69c6-5b67-4353-b394-0f4dff34f835",
        "cursor": {
          "ref": "36e70276-1181-4f1c-8783-e0a66ec26c5b",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "7045d76b-4d1e-4c4d-904c-c71432dc7313"
        },
        "item": {
          "id": "d8ea69c6-5b67-4353-b394-0f4dff34f835",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "98a4f3d2-910b-4019-b129-79d1060b59c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4dbd8ae1-6c60-4f7e-a763-acd4d9968b87",
        "cursor": {
          "ref": "86c6fc0d-ba9b-477a-b429-0a4880753a6e",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "170dd8e2-cc9d-4050-a954-d82ef1ef81e7"
        },
        "item": {
          "id": "4dbd8ae1-6c60-4f7e-a763-acd4d9968b87",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "93345e17-3e26-4f6a-a20e-438770859f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf62d10a-69be-4ee3-b4ea-b6706a173e9a",
        "cursor": {
          "ref": "53d15aea-ff8d-4c93-acb7-f86ca8b486e3",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e8de4f26-87f8-4e44-ad68-8abcd15d5990"
        },
        "item": {
          "id": "cf62d10a-69be-4ee3-b4ea-b6706a173e9a",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "733f2ff6-f8df-4953-832a-e4400a19f76d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a1aed5e-d1d0-4097-be06-58f98dd656f8",
        "cursor": {
          "ref": "897f347f-30a2-4839-b9ec-a18b75e37395",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "875a4406-376f-433d-878b-2ddc35264c1b"
        },
        "item": {
          "id": "7a1aed5e-d1d0-4097-be06-58f98dd656f8",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "eabf4966-685a-4c43-a1c6-e95e71516316",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be49e6f3-2b04-4d46-816e-b74acf5f9d3a",
        "cursor": {
          "ref": "2792b467-3755-4f41-9e26-7d9941c622b3",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "57164bfe-23fb-42f3-a7d4-53d362a282b8"
        },
        "item": {
          "id": "be49e6f3-2b04-4d46-816e-b74acf5f9d3a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "2370b51f-03b3-42a3-b76e-d854ea22ff20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee53c59d-acdd-40c5-8aa4-9019ccd64714",
        "cursor": {
          "ref": "e80652c4-19d0-481c-a7e6-ce15a0ef4b43",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "2098f795-49ed-49d2-9f1a-6c43cb63bcce"
        },
        "item": {
          "id": "ee53c59d-acdd-40c5-8aa4-9019ccd64714",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "27cfaba5-1e13-43f4-b214-67572f8c2726",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cbc269fe-cfad-43e7-a631-4713b5d23be2",
        "cursor": {
          "ref": "63e28e20-78bc-44f7-b4ad-bec21572e737",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f1694f24-1d8c-479b-b68c-57f652b8bede"
        },
        "item": {
          "id": "cbc269fe-cfad-43e7-a631-4713b5d23be2",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "72e7d1b2-5adc-4838-8686-ac1ac035b21d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1af3b45-f8d9-475a-b653-20b5ec5e7150",
        "cursor": {
          "ref": "b883260c-5f59-44e4-880f-37aa12dc67e1",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "0d3793a8-75ec-4db4-8587-293e9f2e01a7"
        },
        "item": {
          "id": "e1af3b45-f8d9-475a-b653-20b5ec5e7150",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "5c6db518-0c6b-466c-aae5-cec31ed976fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36b1b0ad-39c5-475a-89ca-21426715141c",
        "cursor": {
          "ref": "b084dda3-985b-4dc8-aac3-33749fe5bd22",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "86b0fe15-f179-4c40-bc4b-0242f42e5fdf"
        },
        "item": {
          "id": "36b1b0ad-39c5-475a-89ca-21426715141c",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e6f67f8d-9c6c-4c33-9939-53fd78400fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c2e39e3-be92-46d8-ade9-66da1150f78e",
        "cursor": {
          "ref": "d87f6097-4029-494d-bd58-ec93e7160700",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "47147d60-9e3e-452e-bfa2-a0a5e032fcab"
        },
        "item": {
          "id": "2c2e39e3-be92-46d8-ade9-66da1150f78e",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "ca86fa50-4982-4270-aca9-d14f3a2fa19f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e317bc-7264-4099-bd21-4ec0bfff0823",
        "cursor": {
          "ref": "87e7fe3a-ed89-42c5-9087-bd115c7cd54c",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "725f820d-14cd-4a4e-ac83-73cfa5af0acc"
        },
        "item": {
          "id": "d5e317bc-7264-4099-bd21-4ec0bfff0823",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "77016cb6-8d87-4980-93bc-0629c9b99dab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "846aedd6-0635-44b2-9906-8101a9f89a53",
        "cursor": {
          "ref": "8d1e5e2d-8685-41cd-b409-8e84f19cb2f9",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "6f5e8c7e-a224-49f4-ac3c-4954c8150265"
        },
        "item": {
          "id": "846aedd6-0635-44b2-9906-8101a9f89a53",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b452c70f-6a99-4066-8bdc-e59ba6a113a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da85d048-5d70-4092-a9ff-0c7d0d0d2971",
        "cursor": {
          "ref": "561cf226-317b-42f8-aac7-1ffa3165914c",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "5e600582-c216-4fc7-990f-6899be2a093d"
        },
        "item": {
          "id": "da85d048-5d70-4092-a9ff-0c7d0d0d2971",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "de7084e0-e42b-4909-95f2-8e43eb590bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41924e0b-4713-43f0-887a-dd2770294024",
        "cursor": {
          "ref": "d8145390-73e7-4bb5-b547-8060a7af7b5b",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "57bd52e7-76bf-457b-8e92-0b509a03f88c"
        },
        "item": {
          "id": "41924e0b-4713-43f0-887a-dd2770294024",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "8e8b7bf8-d986-4bae-b19d-1b98f78135e6",
          "status": "Created",
          "code": 201,
          "responseTime": 575,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "4a164476-ce1e-4ae8-8e09-b07f5e0c56d1",
        "cursor": {
          "ref": "89a4d652-9522-491e-b9da-f94c320a6245",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2099d615-2224-4333-9532-2c9046da643f"
        },
        "item": {
          "id": "4a164476-ce1e-4ae8-8e09-b07f5e0c56d1",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "b33178f1-d600-4b97-91bd-cbdb58e68b4e",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "4eafa678-f2ff-462d-bca9-8f1e990fdbf0",
        "cursor": {
          "ref": "01159405-c077-44b9-b775-22d13e9fe201",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "30548be2-85ab-4ff5-8f37-d2c23da185e5"
        },
        "item": {
          "id": "4eafa678-f2ff-462d-bca9-8f1e990fdbf0",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7e4c9f91-8572-493f-9cba-2a0146494242",
          "status": "Created",
          "code": 201,
          "responseTime": 274,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "f97de6ce-34b7-4de1-a4ef-bbb3d2c85965",
        "cursor": {
          "ref": "74413b81-2d97-4364-8025-157c7af73537",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "845dc35f-cb1d-4cc0-8d9a-5236f564ac15"
        },
        "item": {
          "id": "f97de6ce-34b7-4de1-a4ef-bbb3d2c85965",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "bcdf0517-4753-4a35-99a0-24733302c0c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9cde6aa-aff1-41a3-9f06-9e3baec0369b",
        "cursor": {
          "ref": "983d49f1-beb8-44c0-ab43-5aaf8d86c44b",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "7553a84d-a59a-48c9-ab04-9afccc6098f3"
        },
        "item": {
          "id": "d9cde6aa-aff1-41a3-9f06-9e3baec0369b",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "29f036c5-4fac-4ef4-8525-c7e21b7eed12",
          "status": "Created",
          "code": 201,
          "responseTime": 291,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "12520822-60f6-4dd3-97de-d6cc5981e157",
        "cursor": {
          "ref": "209a13bd-4905-4759-8673-373815a2ef26",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "0d7e0848-5658-4e6a-9602-da136ad0eb32"
        },
        "item": {
          "id": "12520822-60f6-4dd3-97de-d6cc5981e157",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "73e78fca-8d4e-4f12-923a-3629cb054345",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "d06301bf-14a2-493a-aaea-1b7dc5f9a870",
        "cursor": {
          "ref": "058d59a5-8ee7-4971-af55-01e2d9045f8a",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e6593e34-2ecc-48a2-9eb7-e8a3940ef7e3"
        },
        "item": {
          "id": "d06301bf-14a2-493a-aaea-1b7dc5f9a870",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "e91bf1cc-474d-486b-b3eb-101440706729",
          "status": "Created",
          "code": 201,
          "responseTime": 272,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "0026dfb2-658b-43fa-8f3e-d2405fde114c",
        "cursor": {
          "ref": "99deb2fe-c09b-49bb-b2b3-89fb342c2405",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "3aa18148-1581-4bcb-abc6-6b5dd2fe0844"
        },
        "item": {
          "id": "0026dfb2-658b-43fa-8f3e-d2405fde114c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "0a3fba99-4f28-4492-896b-addf8286ce55",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "bb8aa48a-bc32-4f22-a2d4-8a5c78e04cb4",
        "cursor": {
          "ref": "b1364a88-aa42-4b75-868d-a54e29f1dbb1",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "ba4c2108-54c5-42f3-850f-f492949653a5"
        },
        "item": {
          "id": "bb8aa48a-bc32-4f22-a2d4-8a5c78e04cb4",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "bc067a42-8fee-4d1e-8754-0112e9038b38",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b9534dbe-cf5d-4d47-8ba1-ee3a23a871b9",
        "cursor": {
          "ref": "e8b7a025-5606-4619-a517-1be453961a10",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "2d88c7a8-aca7-4e2a-975a-8fa2f56d4a12"
        },
        "item": {
          "id": "b9534dbe-cf5d-4d47-8ba1-ee3a23a871b9",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "8e87ee0b-e740-46b0-b857-d624eb0b5617",
          "status": "Created",
          "code": 201,
          "responseTime": 260,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "ffd8fbb9-1c05-47ea-87f8-81852bdac489",
        "cursor": {
          "ref": "7a30532e-5774-4982-b108-0dd63d7f86f3",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "0142e2be-8454-4985-a9d4-f26078b79e9f"
        },
        "item": {
          "id": "ffd8fbb9-1c05-47ea-87f8-81852bdac489",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "85a5d8cc-1fd0-4063-9233-bba4224af5d0",
          "status": "Created",
          "code": 201,
          "responseTime": 265,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "54d484e7-58e9-4008-8c5e-c95f437312e9",
        "cursor": {
          "ref": "c1bb67b3-042c-4cce-9f59-12cc32f5ed0e",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "2ced2f44-5f0d-4727-8339-0f7394a0b8a0"
        },
        "item": {
          "id": "54d484e7-58e9-4008-8c5e-c95f437312e9",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "28b713ba-064f-44f1-8e20-f6daef854e37",
          "status": "Created",
          "code": 201,
          "responseTime": 270,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "47b34f3e-2d02-4942-92f4-a2825efb11a6",
        "cursor": {
          "ref": "809b3016-591d-423b-b80d-ec8c08e63c00",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "17b5a653-db3c-4260-84bf-9fcc0760431b"
        },
        "item": {
          "id": "47b34f3e-2d02-4942-92f4-a2825efb11a6",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "a3ebc3ef-c9be-4990-80da-ad59d70ebf5a",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "acdee2ea-315b-4e30-a8b0-90f058fac088",
        "cursor": {
          "ref": "baf1aaa6-5747-47c9-b959-c64d126e00a0",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "944523a2-3f0e-44bd-a95b-11b53ec4b42e"
        },
        "item": {
          "id": "acdee2ea-315b-4e30-a8b0-90f058fac088",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "16db04d7-6a7b-4fca-adde-21e023dc6b2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53ac32d0-5de7-4e3f-9153-7214f3369e5d",
        "cursor": {
          "ref": "7299792f-c471-4f88-b209-a19baa8af3c2",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "51b478d3-8dc7-4786-a2c8-62f42b5e8113"
        },
        "item": {
          "id": "53ac32d0-5de7-4e3f-9153-7214f3369e5d",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b6b327f3-ea02-423c-8da7-acd057c12f23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa3e2c22-4d1c-498e-b806-a6b9b77c1501",
        "cursor": {
          "ref": "e282beed-7e0a-4819-8f51-98d522a68756",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "86724c22-309c-47ba-943a-71e117df2281"
        },
        "item": {
          "id": "fa3e2c22-4d1c-498e-b806-a6b9b77c1501",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "d60f3863-ac81-400f-aeff-80e7b52c65de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ded818bb-de3a-46ff-8b2b-6bb133e9d87a",
        "cursor": {
          "ref": "41a45246-1f59-45f3-82fd-6849dc925f55",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "555d4624-fea4-42b0-aedd-24c7f0ae96ec"
        },
        "item": {
          "id": "ded818bb-de3a-46ff-8b2b-6bb133e9d87a",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "05bccf2f-5dcd-4bfa-a5ff-273ecd0042dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "717be27b-6b02-4c0a-b510-c69d91654024",
        "cursor": {
          "ref": "c1578852-838d-49f2-ba77-12cc57507bab",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "2ffb30f7-1bb7-4043-add1-4a163f0dbd34"
        },
        "item": {
          "id": "717be27b-6b02-4c0a-b510-c69d91654024",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "bf5a6818-c2c8-4d22-81b4-1b15b26fe551",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d7e6d0-9dee-43b1-a618-05f0ff54a6d2",
        "cursor": {
          "ref": "1ea9c49f-12a2-4d3a-95b6-8e1aeafb3d94",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "2f806dd2-86a5-4a94-8132-83c0387c0af1"
        },
        "item": {
          "id": "12d7e6d0-9dee-43b1-a618-05f0ff54a6d2",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a81ea5b1-099d-486f-9f79-568bb4b7cc19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2830bbf9-c061-45d1-882c-6747b5df8628",
        "cursor": {
          "ref": "ff323a4f-acab-440d-998a-5981c541f4b8",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "4983e5fe-d3c1-430c-8842-c8adf2f49a7f"
        },
        "item": {
          "id": "2830bbf9-c061-45d1-882c-6747b5df8628",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "bf61fe31-de4d-45e5-afda-1375f37b8fe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d740ae9-dad5-48f2-b581-37fe862bea65",
        "cursor": {
          "ref": "63dd7b7a-2a0a-4a90-bf0d-966373d5cea3",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "92eb2949-67dc-479c-b771-2e434b1e2511"
        },
        "item": {
          "id": "5d740ae9-dad5-48f2-b581-37fe862bea65",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "db189ff1-0d9b-4cf8-b157-79926bfb0cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbea0fbb-8afd-4a2c-95d1-630ade719bea",
        "cursor": {
          "ref": "bf20755b-e4e2-435e-bef3-8b3f437de45a",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "9a693c4e-50cc-4605-b694-7e34e4262c96"
        },
        "item": {
          "id": "fbea0fbb-8afd-4a2c-95d1-630ade719bea",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "be92ac59-4cfa-4468-b5c4-f502e2b44f11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e5ebe7b-244a-4314-bf8d-4efca5f9a903",
        "cursor": {
          "ref": "c9634372-6726-41d4-b8ed-8d46f99fe8bd",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "82243d1a-4103-4917-84ab-0c4cd301a201"
        },
        "item": {
          "id": "5e5ebe7b-244a-4314-bf8d-4efca5f9a903",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "2605193c-f547-4b16-8d74-7b8a3a85307c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7155f2f8-11ff-4e0a-98dc-fc755922b6e5",
        "cursor": {
          "ref": "0b6aa32a-fd58-4cad-a89c-b6d518cacbf4",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "8550139f-fe4f-474e-b894-491c9a91ecfc"
        },
        "item": {
          "id": "7155f2f8-11ff-4e0a-98dc-fc755922b6e5",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "03b800d4-8f91-46d0-b2b5-795f5b2beebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1582839-9734-4858-99de-39f236eb0e08",
        "cursor": {
          "ref": "e7e7c320-93ea-47f4-8f96-68b49de04395",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "ace9fa75-0da6-4ab1-b4a2-61cb73db0f89"
        },
        "item": {
          "id": "d1582839-9734-4858-99de-39f236eb0e08",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "d6402dd9-52a5-4bf2-b72f-d3869392a1af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42faf9ff-865d-4a2e-89a7-7b555ddb5e7b",
        "cursor": {
          "ref": "7d4e8489-ec91-474e-a8b2-89c4c69208ff",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "76c26017-f39b-47c0-9053-c7778578874a"
        },
        "item": {
          "id": "42faf9ff-865d-4a2e-89a7-7b555ddb5e7b",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "1b218ad2-97f6-40ee-8bd2-6dc452da3b68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ebf1f3-ea32-4f38-b8de-6dd618c6ecd3",
        "cursor": {
          "ref": "716e94b7-5436-43ea-b6e0-cc88e7bae837",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c5986cb9-4392-4c49-a049-144d8302bb81"
        },
        "item": {
          "id": "35ebf1f3-ea32-4f38-b8de-6dd618c6ecd3",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "5d639ac9-7bad-4487-9810-28e0482f4acf",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "41272cd7-0310-46b4-abe8-3d0f555e6f52",
        "cursor": {
          "ref": "eb76727d-e376-454e-a9c4-a77580b66c5d",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "5c47307a-9171-4b87-8d47-c1e526fec749"
        },
        "item": {
          "id": "41272cd7-0310-46b4-abe8-3d0f555e6f52",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "694fbd76-b732-429d-8e63-483b77f73165",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "77405fdc-0ee9-4cc7-8839-4543d60e1cb6",
        "cursor": {
          "ref": "73c9755b-75e3-4601-ab47-24697c98692a",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "7034bc64-b5a5-412a-ba6d-0b4ec45396db"
        },
        "item": {
          "id": "77405fdc-0ee9-4cc7-8839-4543d60e1cb6",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "fe42b25e-d8b2-457f-ba66-87622b655335",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "d13944aa-e693-4fa3-8a85-64d2f6a94990",
        "cursor": {
          "ref": "b5342e01-cf8b-4b72-acbb-3c0e06399cbf",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "1caa3fd6-b6b6-4fbe-855f-31f49949a3c7"
        },
        "item": {
          "id": "d13944aa-e693-4fa3-8a85-64d2f6a94990",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "93c3aff8-ed1d-41eb-a44a-b4834aa45a39",
          "status": "Created",
          "code": 201,
          "responseTime": 257,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "ef093f52-a60c-4678-be9b-f7d0a680c119",
        "cursor": {
          "ref": "b25049c0-3196-4f0a-84fb-54d88666529e",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "11fe5a39-ec5d-4174-890e-44e71e5b0d66"
        },
        "item": {
          "id": "ef093f52-a60c-4678-be9b-f7d0a680c119",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "e54d72a6-8706-48bf-9491-83f71347a651",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "be0fc80f-05fd-4610-9859-4d4eabf4d0c9",
        "cursor": {
          "ref": "3967ec48-d4c3-4061-9c4d-41731e8725da",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "d800b98c-ba7f-46e2-9a92-688d8f57a4e5"
        },
        "item": {
          "id": "be0fc80f-05fd-4610-9859-4d4eabf4d0c9",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8be39a0d-3fc6-48a4-a170-811412aebee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02631c15-9435-4e06-ba68-a7f434484bec",
        "cursor": {
          "ref": "5fca08c5-415f-48e3-8092-193f148438f7",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b0bcc03e-6017-401a-9499-bd0d4eb553be"
        },
        "item": {
          "id": "02631c15-9435-4e06-ba68-a7f434484bec",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d9ea270e-23ae-466b-86a5-61f58810f535",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a0ddd1f-2029-4e58-aa20-4b24733e66a5",
        "cursor": {
          "ref": "be7b9d72-b3c0-4595-a8df-239d662d48b4",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "9a153ce4-6999-42bd-a1f6-dae266ba9051"
        },
        "item": {
          "id": "7a0ddd1f-2029-4e58-aa20-4b24733e66a5",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "6dbf2599-1330-47e6-a23a-782f66ef7c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9418c104-5e52-4c2c-be44-1e2dcf510508",
        "cursor": {
          "ref": "e72aa657-8bf5-42e9-b5c7-40c02b683e41",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "276e5328-2ad1-4ffe-86d8-f69c2cc8dfb3"
        },
        "item": {
          "id": "9418c104-5e52-4c2c-be44-1e2dcf510508",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "06f8841e-bb71-4715-bd8b-61dc7bd04d61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c98d6436-a4d5-4e8b-a3c2-471e2da4b772",
        "cursor": {
          "ref": "2586cb8b-5da1-42d2-8724-52de1a33eefd",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "5e722768-5aee-4256-bbac-3f61a46dbb5b"
        },
        "item": {
          "id": "c98d6436-a4d5-4e8b-a3c2-471e2da4b772",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "d6fefc2b-a7b3-48d6-a68f-d1b9f9a72ced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff2c01c-14ba-4eef-9c6d-67c198ff260b",
        "cursor": {
          "ref": "ce14f617-de8a-4e52-ba45-59424f53335c",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "29f09234-be8e-4121-9bfe-ce6cb6318898"
        },
        "item": {
          "id": "fff2c01c-14ba-4eef-9c6d-67c198ff260b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "bb2bad97-4c4d-4503-b3be-215f2dea4c88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65fd6c62-9cea-4270-9785-9efae91c0b05",
        "cursor": {
          "ref": "46c8086d-7770-49ba-8f02-d8264db8af9b",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c6b7e79c-1519-4a03-b0e0-414dafbc5ca8"
        },
        "item": {
          "id": "65fd6c62-9cea-4270-9785-9efae91c0b05",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "7b151e8e-52ad-419c-bb36-660b170e4bf4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e6481b7-5f94-4ca0-91b3-4de09cfc792d",
        "cursor": {
          "ref": "e6cbdb49-853e-46a8-b0b6-27110c443c1b",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "4c6a2743-743f-469a-ab24-7fbac1a56216"
        },
        "item": {
          "id": "4e6481b7-5f94-4ca0-91b3-4de09cfc792d",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "eb00b59f-334f-434b-ad4a-251bf0d3b980",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c151f99-9283-449a-b4b4-c894bd4bb9b2",
        "cursor": {
          "ref": "b09b71a1-0b17-4568-afae-5bf347aac864",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d2aca677-84d7-4427-8b07-e0b92b1844dd"
        },
        "item": {
          "id": "7c151f99-9283-449a-b4b4-c894bd4bb9b2",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "438bc9ca-6717-457a-a046-a020450724be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2277422-4472-404a-acc7-8605b918b4a2",
        "cursor": {
          "ref": "fda2cc55-64f0-4da9-9261-27c987b6379c",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "627810a0-b272-4f1f-ac6c-76d51d3f71f1"
        },
        "item": {
          "id": "e2277422-4472-404a-acc7-8605b918b4a2",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "4d848712-ce6f-4577-986f-6bd643d3fb14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b1fbd2a-8b02-483c-b4f9-678b23815088",
        "cursor": {
          "ref": "da097886-4ea7-4462-adf0-3adc00952b28",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "fc5c16fa-c39b-4a6e-9e17-c1cd04a94dcf"
        },
        "item": {
          "id": "2b1fbd2a-8b02-483c-b4f9-678b23815088",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "5cd4ff92-0ab2-4c94-a35e-9eaa3bfec48d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0203990-59d1-4dcc-9980-e54ddec1de0b",
        "cursor": {
          "ref": "f5b26468-16c4-4f97-9891-bc0730f3b32d",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "6f91187d-2ae1-48f3-ac7c-1ba82b724204"
        },
        "item": {
          "id": "e0203990-59d1-4dcc-9980-e54ddec1de0b",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "ee828420-91a1-4113-94d0-096fc4909157",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62573859-bce9-4fa9-91fb-44c0efd31cb4",
        "cursor": {
          "ref": "9ce507e2-9f87-4737-873a-52203c2aa93f",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "905990c8-46a5-4d2c-af4e-d0a46abf7684"
        },
        "item": {
          "id": "62573859-bce9-4fa9-91fb-44c0efd31cb4",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "7c886db1-7665-4a20-a216-097e94e667c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c69c268-ed84-4f81-817e-1526d19e0c80",
        "cursor": {
          "ref": "8c733f8b-8246-47e7-8085-45c05071ef4d",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "c9dbf5c0-46e3-44c3-b6e5-cf3c59cdbd76"
        },
        "item": {
          "id": "2c69c268-ed84-4f81-817e-1526d19e0c80",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "a156e0dd-a804-4c53-b888-1e076cf06a94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "505171ae-0b54-40c5-8fa1-0ec0758db055",
        "cursor": {
          "ref": "38d0a65f-72bb-4d06-aeac-075ab593b860",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "b768abef-6b48-4f62-ae10-7abf45cdbb00"
        },
        "item": {
          "id": "505171ae-0b54-40c5-8fa1-0ec0758db055",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "c8a41652-2cfe-45df-9a4a-a3c04fad2562",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0ff4ce83-f88c-46be-ba28-5aa213c8b3a5",
        "cursor": {
          "ref": "992cf1a7-b4d1-4dce-891b-f759c9b77276",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ef24aeec-6471-42ec-9fe9-4941f032957f"
        },
        "item": {
          "id": "0ff4ce83-f88c-46be-ba28-5aa213c8b3a5",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "009de9b0-6f08-4c62-850d-7ce1b68ec869",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "590443a8-fcc2-4e98-b170-4cd16ac86118",
        "cursor": {
          "ref": "c4782bc4-c6e3-4393-b5e2-4fe9830740f9",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e4aa0df1-3115-4455-8b91-d5d635852f70"
        },
        "item": {
          "id": "590443a8-fcc2-4e98-b170-4cd16ac86118",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "54118a21-e177-4c49-ba73-0973e5f68d80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3502d7f0-7e43-4ef7-8ea1-8027e68d3a1c",
        "cursor": {
          "ref": "f08923e9-f8e7-47f0-b3fb-4c82617dc249",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "229bc260-864e-4208-87b3-9662585e85bd"
        },
        "item": {
          "id": "3502d7f0-7e43-4ef7-8ea1-8027e68d3a1c",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "81af0ab4-5569-4ab5-a8eb-9d5c3f1f12fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f09325ec-b35a-4ed2-a2bd-9aae15735075",
        "cursor": {
          "ref": "2aa8ccb4-40f8-4cdf-a223-55e81eca76a1",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "a56a71cc-42a8-46ee-b4b8-6a41f92c1f14"
        },
        "item": {
          "id": "f09325ec-b35a-4ed2-a2bd-9aae15735075",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "d7cce839-affe-4186-9f09-06f98db0a44d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38d5047a-234b-45e4-90b5-983951dde60e",
        "cursor": {
          "ref": "3d2a31f3-1a7b-4d20-9d80-9fc3649e8415",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "f885941f-8e17-4376-8b26-496530e255d7"
        },
        "item": {
          "id": "38d5047a-234b-45e4-90b5-983951dde60e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "252dacec-9f4a-4759-b374-826d01dc0e83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcab0bd6-f5f5-45cb-8b0b-4af5778aff4a",
        "cursor": {
          "ref": "800356f5-54d3-4e09-aadd-a8d2e980f086",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "f4c1fc3e-1f8d-443e-bf6a-b7477b1302d7"
        },
        "item": {
          "id": "bcab0bd6-f5f5-45cb-8b0b-4af5778aff4a",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "2faf9b09-6ee1-40cf-8bee-99c0d0d23f99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "056e7afd-2db6-41c8-8ddf-3bdeda901806",
        "cursor": {
          "ref": "c9461c53-07e7-4e17-a6f2-65b731020afc",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "081f0b49-095c-486a-af58-ca9d42adb037"
        },
        "item": {
          "id": "056e7afd-2db6-41c8-8ddf-3bdeda901806",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "cae7da4b-43d6-4b71-925c-d3c5dd492b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dbefbc0e-79ac-4f74-a902-f1f1fbacbbd9",
        "cursor": {
          "ref": "6f9ed29d-16bd-451e-9893-0f700cab84af",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "a9948acb-45a4-4072-8679-49b61c7d092a"
        },
        "item": {
          "id": "dbefbc0e-79ac-4f74-a902-f1f1fbacbbd9",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4a9e3de9-3452-4e25-80c2-23d01c023c81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e71e4083-38d2-4167-8ff9-1635216f48cf",
        "cursor": {
          "ref": "47f1480c-c9dd-4ff1-8201-2719f33ab7e3",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "bfe02da9-7542-4b1d-b96d-3e677036e0db"
        },
        "item": {
          "id": "e71e4083-38d2-4167-8ff9-1635216f48cf",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "add4dc91-220d-4afe-a6e8-dc0d6eb1a29b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bd90be6b-60b2-4485-b406-bbd63157ba20",
        "cursor": {
          "ref": "85a24c9a-9c74-4c2c-9153-7a6e353e794f",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "965d0fd0-7501-48bd-b34d-78bad1c3f286"
        },
        "item": {
          "id": "bd90be6b-60b2-4485-b406-bbd63157ba20",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d30441a9-e4ff-4daf-a7fe-d0362ffa4892",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "feb7f10b-c9f1-4e72-b7b8-3a13d7bfd181",
        "cursor": {
          "ref": "f9c020ba-11e4-4cce-8560-71cc022825fa",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "d82e5feb-105c-44b2-94e1-b9d40ebc0dbd"
        },
        "item": {
          "id": "feb7f10b-c9f1-4e72-b7b8-3a13d7bfd181",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "a0e95d73-b9cc-4284-822a-5b3fc9b68ccc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5bd6090-c01f-4216-8f57-347d5e9318a6",
        "cursor": {
          "ref": "c5814698-d7f6-4cf8-8ac6-a7d96ad71e76",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "4ed5a936-61b4-4ac0-9c9c-ff6413c29b25"
        },
        "item": {
          "id": "d5bd6090-c01f-4216-8f57-347d5e9318a6",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "18afe215-af48-4b3f-94c2-b62a022fab0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce59a83e-2090-41d2-b9f9-18c9e23c8f84",
        "cursor": {
          "ref": "b24065f6-491a-4239-8b56-46179281d203",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "883f5a5f-b851-434a-b45b-326e8a38995b"
        },
        "item": {
          "id": "ce59a83e-2090-41d2-b9f9-18c9e23c8f84",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "0da9cb0c-0255-4285-bea0-9a7d0f165f1c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "914f8b9f-cfd3-4326-8d1a-474fa48d0740",
        "cursor": {
          "ref": "c7221cac-21b2-4101-8143-e7e1b1cdba56",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a1e69541-80a0-4ba7-83fc-f3167497c5e5"
        },
        "item": {
          "id": "914f8b9f-cfd3-4326-8d1a-474fa48d0740",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "e4df64b9-70bd-455a-8e61-5de8bac45fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa797f0f-ec86-49d8-b8bb-239d3a2a5d9e",
        "cursor": {
          "ref": "027ab16f-b964-4a5d-a373-9e28fcd4a583",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c590faa7-61fa-4f99-b5f2-b31a84a0675b"
        },
        "item": {
          "id": "fa797f0f-ec86-49d8-b8bb-239d3a2a5d9e",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "0eefea77-b4c7-46ce-8cc9-71459dce9d38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e41e6c0-b00b-44ab-be1b-f1b98caaf99d",
        "cursor": {
          "ref": "dc677c96-deea-45bb-b507-c051002f6c85",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5cc34711-1d6c-46f8-b6e9-7356c058c3f0"
        },
        "item": {
          "id": "9e41e6c0-b00b-44ab-be1b-f1b98caaf99d",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ea4b07e2-7ef0-4d5c-862c-61db66d7677f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c19b573-c221-49fe-9b96-a50ee34f5f87",
        "cursor": {
          "ref": "fc104872-0516-4c19-8889-f8aa6cb8d226",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "c9c12cfe-dab6-4519-985a-18fee9c84a84"
        },
        "item": {
          "id": "8c19b573-c221-49fe-9b96-a50ee34f5f87",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "cd2de176-a358-4ea3-82e8-a1d6dfae1d14",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 37,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "128db41d-ef42-460b-8a8a-5a67dd25b2c4",
        "cursor": {
          "ref": "83c9b2dd-6d3f-4757-9e14-8c48fa50a091",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4735b67a-07ff-4df9-9a9f-31846df972f9"
        },
        "item": {
          "id": "128db41d-ef42-460b-8a8a-5a67dd25b2c4",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "9d905a13-d365-41d5-889a-9586897f7c73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "e74cfbf9-f8a0-4855-a57d-231ac487715f",
        "cursor": {
          "ref": "536272eb-a574-4e42-bf54-a6f0c6dc3f10",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "a2c5dfb5-6161-4372-b80d-f11142d21cb5"
        },
        "item": {
          "id": "e74cfbf9-f8a0-4855-a57d-231ac487715f",
          "name": "credentials_issue"
        },
        "response": {
          "id": "7caa9e90-101a-4c2b-9343-a1709d200479",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "49c18e8a-2acb-46ff-a429-90eaafdb1fec",
        "cursor": {
          "ref": "f02ecdc7-c2a6-4c82-b2cb-05f6d23f98a9",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "a845fdc9-ccb0-48a9-889a-0baf59f393ac"
        },
        "item": {
          "id": "49c18e8a-2acb-46ff-a429-90eaafdb1fec",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "44d45e06-1b12-4b22-8f76-80b759791df5",
          "status": "Created",
          "code": 201,
          "responseTime": 244,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d97440c-026f-4250-9d35-2a6cb3d0b019",
        "cursor": {
          "ref": "f3c126f3-85c5-4eec-a8c9-d4032d109828",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "7479b359-348f-495e-bd11-490be82cc11f"
        },
        "item": {
          "id": "8d97440c-026f-4250-9d35-2a6cb3d0b019",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "7e0e2ba3-15d4-41b9-bbc3-ef37fc4efe45",
          "status": "Created",
          "code": 201,
          "responseTime": 263,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d1d488b-d599-4311-a141-fafa1d8043d7",
        "cursor": {
          "ref": "a08c2f78-d341-4f11-ba6b-c43dcb97418e",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "bea14100-15a7-4763-8541-006fd7a75fe0"
        },
        "item": {
          "id": "9d1d488b-d599-4311-a141-fafa1d8043d7",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "29a767a8-71bc-4f0b-ad2f-a647705ef391",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "dae1dc2d-f0d9-4249-a320-6d3510a54a4e",
        "cursor": {
          "ref": "f7af0654-9737-4a69-8c69-f7bab0f519a0",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "3143fab8-9e61-466a-a845-6c24b92a34af"
        },
        "item": {
          "id": "dae1dc2d-f0d9-4249-a320-6d3510a54a4e",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "3125c7f8-b5e1-4923-80a4-8aec52ce1609",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-04-14T00:40:27.164Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-04-14T00:40:27.164Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "4c5ce911-4a49-45c2-9817-2ded181e03f3",
        "cursor": {
          "ref": "f51c89b7-5eb6-4a22-9c8c-10dcd3d52eed",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "b3b6ef2b-b7ed-44f2-901a-2e7eaed28701"
        },
        "item": {
          "id": "4c5ce911-4a49-45c2-9817-2ded181e03f3",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e9564d82-1691-48ce-b19c-b10cd28e4757",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66fb4e1c-1e88-4fc5-ac8e-fababb4a562f",
        "cursor": {
          "ref": "9222f31f-538f-4446-89a1-05d60b0a0698",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "01c35a52-e18d-403e-b0f4-0cc0b1c47b32"
        },
        "item": {
          "id": "66fb4e1c-1e88-4fc5-ac8e-fababb4a562f",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e518cd18-90bc-4c49-8601-3aba2021d806",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ba56818-d5a0-40db-b0d2-9ed7d62bf0bc",
        "cursor": {
          "ref": "8d55b33d-0f6e-48f4-9481-5f072e0a2239",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f0b65147-c8d1-4123-8797-f559d591c324"
        },
        "item": {
          "id": "9ba56818-d5a0-40db-b0d2-9ed7d62bf0bc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "977f4126-d946-441e-ba10-276813926a15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "139fb7e3-4e3d-4809-acb2-76a998e57362",
        "cursor": {
          "ref": "8cafd4e3-f4b1-4385-8feb-2774265e4df1",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "d09973c3-0d55-4622-8a50-9f152446aa50"
        },
        "item": {
          "id": "139fb7e3-4e3d-4809-acb2-76a998e57362",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "3aeaf253-106d-4f84-84ba-46895db56f13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e23a6cf-9a04-4d5b-8c60-40a34b673787",
        "cursor": {
          "ref": "ec5a1175-e596-45e2-b3ee-3aeac1091be4",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "d0d634df-0982-4159-9790-519c777ed109"
        },
        "item": {
          "id": "2e23a6cf-9a04-4d5b-8c60-40a34b673787",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "893a4551-21a5-4102-b568-17a3356102a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51bc58a7-22f3-4f8d-82b6-f80683b8e2f3",
        "cursor": {
          "ref": "f46be690-75ec-4c27-9fef-c6cff9e8fcf5",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "5d197e26-2a9a-42d8-952c-3675e3f425c2"
        },
        "item": {
          "id": "51bc58a7-22f3-4f8d-82b6-f80683b8e2f3",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "4bc29e76-126c-4e80-8c4c-ec9a2faa16ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3642800e-10f6-40a5-b372-1c55c3ff2a09",
        "cursor": {
          "ref": "e222a0f9-88a4-48c7-81b9-22f306a635f8",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "d542af97-73c8-45a5-92e8-413f4e4de04b"
        },
        "item": {
          "id": "3642800e-10f6-40a5-b372-1c55c3ff2a09",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "63b381d0-5267-4f1e-b0c4-6b80eb9cfc00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b01651d-ea18-43e4-9766-193c4daa7bb2",
        "cursor": {
          "ref": "6ebe8ac5-5600-41a5-b8eb-09dbd225deae",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "013ac4d6-1506-4ce6-bad2-e756fd392534"
        },
        "item": {
          "id": "2b01651d-ea18-43e4-9766-193c4daa7bb2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f7b5e42c-4bb7-4b53-9a2a-5ea324901df9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58144ee3-4602-49a9-bf13-1ba610677254",
        "cursor": {
          "ref": "e9d16ce2-a36b-4f51-85b1-1142789a3111",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1d81c38c-3ece-4a7c-9354-51a112173ec0"
        },
        "item": {
          "id": "58144ee3-4602-49a9-bf13-1ba610677254",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "42ef2df3-7876-447d-a885-812b10f00541",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfd0ff96-5fe8-42e2-bc79-dba2298b17cc",
        "cursor": {
          "ref": "bc9ef77b-dca2-4490-91ae-6ff54b1b8e7e",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "0b69c4f2-88d9-4d07-8c28-ac539f425f99"
        },
        "item": {
          "id": "cfd0ff96-5fe8-42e2-bc79-dba2298b17cc",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "eb323c32-f99b-4f59-b3fc-8778d2ef1b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05e5373f-2371-4b91-bda5-d49045c19de4",
        "cursor": {
          "ref": "065f2320-d2f2-4180-8489-f2653532f205",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "40c2ec11-551c-4b3a-9989-f900b29ac053"
        },
        "item": {
          "id": "05e5373f-2371-4b91-bda5-d49045c19de4",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "2c76eed9-583a-4348-abef-2972a6923fb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ebec3bd-261e-4bc3-9317-d7a9486ed1b6",
        "cursor": {
          "ref": "82939cf1-5f0b-4e3f-91b6-ab2e040d7d79",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "615805ba-b4db-49d8-a095-ece3610a935f"
        },
        "item": {
          "id": "5ebec3bd-261e-4bc3-9317-d7a9486ed1b6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2bc4ac80-70f2-47a0-ae28-08b5782b773c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a8116cb-6c89-4162-8af8-681e893d89b6",
        "cursor": {
          "ref": "ab4163ce-e899-429c-99f2-7ab51e70856b",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "12f8f4c7-d3b4-45af-ab1c-fd93e9be93c0"
        },
        "item": {
          "id": "6a8116cb-6c89-4162-8af8-681e893d89b6",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "d04c2ccc-c90b-4ed4-b501-7f77f089d97f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a502dda7-f43e-4c04-be0a-d64611273902",
        "cursor": {
          "ref": "2a9cdd0c-383e-4385-9cb7-ecfeb8127ea6",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c65af43b-0e77-4c62-80b3-75d82bb95c03"
        },
        "item": {
          "id": "a502dda7-f43e-4c04-be0a-d64611273902",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8f1ab37b-65ee-45dc-83ed-7de9879b1188",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8fdb22-cf41-4bfa-b527-a16f976ebebe",
        "cursor": {
          "ref": "2971e406-8a01-4cd0-989d-e8aa77a0fc17",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0d8d3532-a859-4cd5-b967-886d3faafb29"
        },
        "item": {
          "id": "0f8fdb22-cf41-4bfa-b527-a16f976ebebe",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e8283905-6d42-4131-a08c-eeca16500e13",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 61,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "84626f3b-f261-459c-9b36-2e7a35967e38",
        "cursor": {
          "ref": "c03dc872-d565-4d98-b058-ef77710e6625",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "98ed596e-5cc4-4424-9bbe-4c7dbc67b83c"
        },
        "item": {
          "id": "84626f3b-f261-459c-9b36-2e7a35967e38",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "8b4efc5b-2e2f-4fe1-b1b3-3637439c707b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "653d16b5-34e4-413b-8b91-df25063c3691",
        "cursor": {
          "ref": "a23187b7-26f6-4d6d-8b96-184232c69690",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a02a951c-a53a-43b9-8fab-1cd871da4be7"
        },
        "item": {
          "id": "653d16b5-34e4-413b-8b91-df25063c3691",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "287ec055-f53c-4854-b6bd-466240a60239",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c467653-b1c5-417a-a92c-4a111a3358f7",
        "cursor": {
          "ref": "8d019ef5-5315-418e-8d17-6e433fb19f54",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c6d980e3-b384-4fd7-a4c1-0a2725f819ff"
        },
        "item": {
          "id": "9c467653-b1c5-417a-a92c-4a111a3358f7",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "828a7f0c-654e-431e-acb7-6fb337d1a758",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03413fbc-5954-4735-a8c0-d0737ae63cb0",
        "cursor": {
          "ref": "e050f8fa-855f-41a5-9c0f-dce3b8c670ba",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "9b51440b-c2ff-4630-9cbc-8f45dbe75f0b"
        },
        "item": {
          "id": "03413fbc-5954-4735-a8c0-d0737ae63cb0",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "73a8eb15-64c2-48da-af41-e6c97ab05601",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63a1b6d9-57ca-466d-8f00-2b79ab95a044",
        "cursor": {
          "ref": "6998c2f1-ff19-4694-ac1e-73b81ef052a7",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f6db6520-522d-4cf4-9851-508e6f2ab3d3"
        },
        "item": {
          "id": "63a1b6d9-57ca-466d-8f00-2b79ab95a044",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c7b76396-dd64-4ad8-8364-358f8737cedc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8b75acd-b7ff-40da-8c68-3bcfecbba14f",
        "cursor": {
          "ref": "57c32e0d-9b67-411b-9fbc-ee84462fdeab",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "2c9044d8-3eec-4ae7-b9cc-597f0f8617f0"
        },
        "item": {
          "id": "a8b75acd-b7ff-40da-8c68-3bcfecbba14f",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7af76cd7-53e4-4c24-a2a1-4b0beb8d223c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cee00b3-0537-41d1-afb0-50e1e16edfd0",
        "cursor": {
          "ref": "17bdb51a-2253-4dc3-a504-bd49c27684e1",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ab6ebff3-caec-4cd6-bbdf-41f0a8b03e1b"
        },
        "item": {
          "id": "6cee00b3-0537-41d1-afb0-50e1e16edfd0",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bf18b9b5-e549-46e7-b248-1688fcdfd038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2fe011e-fe08-467c-b927-4413cccef1e8",
        "cursor": {
          "ref": "4419f6fe-61d9-4d24-9edb-a0ea49a04428",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "7f678085-1a14-47da-8a81-540fe7cc00f0"
        },
        "item": {
          "id": "e2fe011e-fe08-467c-b927-4413cccef1e8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4312c1a0-9b11-4e01-8bff-1b5975fe1746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f8565b9-dffd-4186-8db5-7ac5bdbc2dca",
        "cursor": {
          "ref": "be1e4afd-bae0-4916-90df-ad5f648977ca",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "f1888a0f-a7d7-4359-8c29-afe87e6154c7"
        },
        "item": {
          "id": "1f8565b9-dffd-4186-8db5-7ac5bdbc2dca",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "0ec36e86-3b34-4c1f-8bcc-d43159c2cd53",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e29daa20-640e-4a28-b2f2-12f8781c4a65",
        "cursor": {
          "ref": "a2dd7c31-0bae-49ed-925a-fe5779e23a1e",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "b5f33a1e-0cb9-42d7-8965-5e927fc8c74e"
        },
        "item": {
          "id": "e29daa20-640e-4a28-b2f2-12f8781c4a65",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "ad66ed16-91be-4068-ac7d-c48f5475ce8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d4df190-df03-496b-bf16-14effe6d4973",
        "cursor": {
          "ref": "82ec6fb5-030e-4c94-bd32-b36d46b86271",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "b6bb812b-5759-45b7-9b8c-7750965b9262"
        },
        "item": {
          "id": "2d4df190-df03-496b-bf16-14effe6d4973",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "02c26439-cecf-490b-aaca-007090f3103d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2e83ae4-e464-4ca3-8658-4f4495d70efd",
        "cursor": {
          "ref": "037eca5f-9ceb-4d1b-9fb3-5ef00ee22db8",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "eade5ff1-405c-40f8-8dd4-ab9a732720ed"
        },
        "item": {
          "id": "f2e83ae4-e464-4ca3-8658-4f4495d70efd",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "fd7dcacb-1dd0-4ef0-ac58-431e2af37da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d15175a0-c057-470d-8c3e-f5ec8facbe0f",
        "cursor": {
          "ref": "1b1c88e3-457e-4e76-bed1-c00cb949500a",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "297d28ba-d870-477d-a50f-69a6d2458fd1"
        },
        "item": {
          "id": "d15175a0-c057-470d-8c3e-f5ec8facbe0f",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "5399a5af-8f0b-4894-92c7-5240d3668daf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65c6f732-2886-4e24-b6c7-80a56586307e",
        "cursor": {
          "ref": "dbc671d9-4f1a-4caa-9c39-7aa783542b8f",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "e12a69b1-997c-45e3-8551-1118b825b524"
        },
        "item": {
          "id": "65c6f732-2886-4e24-b6c7-80a56586307e",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "a0859348-c91c-40b1-9ff8-5d71d5814789",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e993645-68f4-424c-81c7-85f58039a8f4",
        "cursor": {
          "ref": "d1992551-5139-4b75-b63e-87b556921605",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "6405b36d-9829-4d46-b1d9-bc969d411aa5"
        },
        "item": {
          "id": "6e993645-68f4-424c-81c7-85f58039a8f4",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9e493f66-bb93-453b-8c7a-8d78ceed5783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "06cc9b91-53c4-4b90-af4d-c0b081525433",
        "cursor": {
          "ref": "ba9ba7eb-dae0-4a92-a413-238cf260c93b",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "2148ce94-ab8e-4546-8f5b-d541cd0a494a"
        },
        "item": {
          "id": "06cc9b91-53c4-4b90-af4d-c0b081525433",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "51b04f9a-4c09-4278-8e03-baec115a662b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc946a0d-ded8-4e10-9aec-8a3a6aff6e1e",
        "cursor": {
          "ref": "19ecfe36-fc91-4271-bd6b-708e2c49a13f",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "3be44d10-fb3e-402b-a399-ddf291053a1c"
        },
        "item": {
          "id": "bc946a0d-ded8-4e10-9aec-8a3a6aff6e1e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "663e95d7-2b21-472f-bd07-30b6a7cc3816",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48a2e378-852d-4a75-93fa-248a1b4267a8",
        "cursor": {
          "ref": "5bbcc973-3180-4fcc-bc7e-9f8da1216a2f",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "f259fb5e-f880-4808-9331-7cb5d0e5801a"
        },
        "item": {
          "id": "48a2e378-852d-4a75-93fa-248a1b4267a8",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "93669371-4bed-4138-971f-0f66cb4ab83f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4f047df-c858-4a05-8681-0f0b0127a339",
        "cursor": {
          "ref": "93b65852-3dee-47f9-9471-567dce387082",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "78cf369f-b4d8-40ab-9779-b8dec5efae83"
        },
        "item": {
          "id": "a4f047df-c858-4a05-8681-0f0b0127a339",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "722a034e-32e6-4745-abcb-85df31b0a2a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44a51e22-1b6c-41b9-bb09-cc6cb09562ad",
        "cursor": {
          "ref": "c1e86549-f66d-4c6c-8bbe-a29e7a38cab4",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "c1132f08-794d-454a-a413-7e6d828cccd2"
        },
        "item": {
          "id": "44a51e22-1b6c-41b9-bb09-cc6cb09562ad",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "6edbd49a-609a-4374-a655-f3410df91b56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd444369-25fb-4d5b-85c6-ef50015b19f5",
        "cursor": {
          "ref": "ceef16f3-3a5c-4016-ad67-8904f17eb8c4",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "285f20fd-2f90-4ef9-97cc-f8005da64812"
        },
        "item": {
          "id": "fd444369-25fb-4d5b-85c6-ef50015b19f5",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "61fdf48b-d4c8-4168-9a08-9b38af579b26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7f2e789-3aca-4b86-8528-9af94dac3ce0",
        "cursor": {
          "ref": "ab04270f-0490-4149-8fec-8e9ebe4f693e",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "2e28dcf8-e472-475c-b84f-939fb0c046ef"
        },
        "item": {
          "id": "c7f2e789-3aca-4b86-8528-9af94dac3ce0",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "5583821c-68fe-4b30-9eaa-380cba46e504",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fbcb2186-e329-4dda-ae04-b6268a65dafd",
        "cursor": {
          "ref": "8c879bb2-83d1-477a-8fa8-a027e6485a60",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "0ac0bd48-e251-4785-94f2-30a2f562fdc9"
        },
        "item": {
          "id": "fbcb2186-e329-4dda-ae04-b6268a65dafd",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "757bcca6-88d3-4403-85d5-8bc71600cf63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0cf212b-daf4-43cb-b95b-35b47880e1c2",
        "cursor": {
          "ref": "ae291320-5cf2-4931-bf01-62c2317d7aad",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "73e55336-d517-4ee7-9cf1-7df2d5be12bf"
        },
        "item": {
          "id": "c0cf212b-daf4-43cb-b95b-35b47880e1c2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a76aa9bc-c254-42ca-bf03-8af424399e28",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d309978a-ff32-4d0b-8938-78992d1de786",
        "cursor": {
          "ref": "3aadda97-64e5-46ba-a008-6afce6b01309",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "39128ba3-7030-4938-96ca-341940c5af3f"
        },
        "item": {
          "id": "d309978a-ff32-4d0b-8938-78992d1de786",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "3dabebb1-5a84-4599-ba28-c5b10363547f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d19ad58-df9d-4f31-a2ad-d6e9b1768a2d",
        "cursor": {
          "ref": "65175574-f75f-46c3-b998-2f8d8c9271fc",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4322808c-349e-4eed-8cfe-49970a76f75a"
        },
        "item": {
          "id": "4d19ad58-df9d-4f31-a2ad-d6e9b1768a2d",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "d785b77b-07b0-4b3c-9255-548e5f150992",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "95a2d916-5f2d-4848-b0c3-067a399b38a0",
        "cursor": {
          "ref": "e017ff48-23e2-44a5-8ba3-ed9728d1d732",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "39e8d0e4-cbbd-4e2e-946f-439e8d8112b1"
        },
        "item": {
          "id": "95a2d916-5f2d-4848-b0c3-067a399b38a0",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "27bda31b-ab1d-411b-a255-f8cba00a5e03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce5eda49-5df9-436d-bfc6-d45f658190e5",
        "cursor": {
          "ref": "1fd580cd-3823-4724-a114-38ede73c7cbd",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "eb90bb4b-c74f-48cb-980c-b53f2de9e4d0"
        },
        "item": {
          "id": "ce5eda49-5df9-436d-bfc6-d45f658190e5",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "2d122204-ff48-4c96-a279-a4cce61a0453",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ce54378-edb3-4289-af6d-4f0d2e0ee87c",
        "cursor": {
          "ref": "8342611b-a1a4-4d3e-8215-bba39d64431d",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "a72b9708-f350-4683-a992-6c21a01a607c"
        },
        "item": {
          "id": "9ce54378-edb3-4289-af6d-4f0d2e0ee87c",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "449e8ff6-5c9e-4710-a49d-fcf5146b0cc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9488030-2d4b-4887-8e05-5fdcc347b25b",
        "cursor": {
          "ref": "c81dd489-41a3-45dc-b7f4-251ec0ec58ab",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "a4f72a60-be8c-44ad-a319-62d21cab67eb"
        },
        "item": {
          "id": "e9488030-2d4b-4887-8e05-5fdcc347b25b",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "4a076a92-f4ab-411f-96ea-47efd5ece3ba",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "e56e70f4-a5d4-4201-b7c3-b726ddf71e46",
        "cursor": {
          "ref": "49e19184-e8b4-421f-8dd5-1d7111bcec27",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "7ec071ac-49cb-40d8-b8bc-16332cce532f"
        },
        "item": {
          "id": "e56e70f4-a5d4-4201-b7c3-b726ddf71e46",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "5783c22a-95a0-41f6-ab6a-da0b79bf7bcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f58509d-072e-4586-813c-ec0a4bbfc3d0",
        "cursor": {
          "ref": "ea310ae2-6cdb-44f7-a65d-8c89e5e989df",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "f87f7b7e-4987-455c-b65b-9e1fc3fe934c"
        },
        "item": {
          "id": "9f58509d-072e-4586-813c-ec0a4bbfc3d0",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "cee9e84a-ddf6-4785-a88a-67992d05e42c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb70bd54-07a9-4798-b15e-379894194281",
        "cursor": {
          "ref": "5e975f35-51bf-47c9-8971-f65b5c6a0956",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "730290f0-b4ae-4ba9-83f9-f18f4ccb67d9"
        },
        "item": {
          "id": "cb70bd54-07a9-4798-b15e-379894194281",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "be12d1c0-6e09-4498-8e2e-81a5ff8231e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaae4092-6f77-4215-8d9e-5805ad9d1fbd",
        "cursor": {
          "ref": "b199773c-a353-43f9-9288-fe69245665e8",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "a4dd0128-76b4-4d78-a5fa-5817f54d17fc"
        },
        "item": {
          "id": "aaae4092-6f77-4215-8d9e-5805ad9d1fbd",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "cd6740da-5de6-4143-96e8-58cd8bc4b490",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0055d8c4-0031-48bf-b839-b8c8f4e02225",
        "cursor": {
          "ref": "7f9a8083-042c-4428-bfef-00ab66e36ca6",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a21e73dc-1e69-49c0-87a6-91e389749b88"
        },
        "item": {
          "id": "0055d8c4-0031-48bf-b839-b8c8f4e02225",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "3bd90371-c719-4963-81f7-275ee409f22f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 52,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b3cfaab-dc77-41d9-9510-9dac2d182d2f",
        "cursor": {
          "ref": "e215f8a9-4ef7-4178-a7aa-d220c329bfe4",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "21d2591a-0878-4451-82aa-6081d01ebe2b"
        },
        "item": {
          "id": "6b3cfaab-dc77-41d9-9510-9dac2d182d2f",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "bfcfa90f-1c77-464e-a5f0-694a74b7257c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b920700-373e-409b-ae74-6d4f19c3f01b",
        "cursor": {
          "ref": "5714a749-5292-49a9-8c9f-72afcc9564d5",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "90a8e621-b7c6-4523-b251-db8dac3c0a4a"
        },
        "item": {
          "id": "0b920700-373e-409b-ae74-6d4f19c3f01b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "f78f3929-4fa6-4f73-b0cc-d184e2965f52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af9c39a-6afa-4476-8329-6407f909a113",
        "cursor": {
          "ref": "a8bd7a2f-9a31-4d3a-8189-4f9efd2037a5",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "aedadeb0-4419-4b95-95a1-a4f5d32b197a"
        },
        "item": {
          "id": "2af9c39a-6afa-4476-8329-6407f909a113",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "c4d1ee13-fee2-4826-802b-f289740743b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe4ed8e-1041-4ffe-b5ae-6503611bd4b0",
        "cursor": {
          "ref": "fcd033f7-6d4f-40c4-ae88-9aeb806ff19c",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0537b6f7-6d8b-4b69-b0b8-ca4eb2654f26"
        },
        "item": {
          "id": "4fe4ed8e-1041-4ffe-b5ae-6503611bd4b0",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "188c6531-9a4b-42b0-8734-5d25b230df7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bec18239-b749-4642-b1e7-2c515903c9e3",
        "cursor": {
          "ref": "e5521520-9275-41eb-beea-3f835c64725a",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "97ef3f27-b596-46ac-b42d-0de3f66d2567"
        },
        "item": {
          "id": "bec18239-b749-4642-b1e7-2c515903c9e3",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "ec89216b-f972-4400-b1b9-04e30381c1a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3a93473-fa00-4ffb-a13b-8981cc11f9ed",
        "cursor": {
          "ref": "bfaef98a-29fb-420c-9e1c-11a871f5a3db",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "2f1864cd-0fcc-4843-8616-8cb59dad78f6"
        },
        "item": {
          "id": "d3a93473-fa00-4ffb-a13b-8981cc11f9ed",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "08f4a6bc-68bb-4dec-b949-dc885c7b8acb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37ecd444-00f1-4e3b-8a8f-af91a9489d27",
        "cursor": {
          "ref": "d003e108-6b65-4cbf-a75d-6ef3fa7cb93c",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "082901aa-ed29-41e7-8a3c-c96c3e83fc5d"
        },
        "item": {
          "id": "37ecd444-00f1-4e3b-8a8f-af91a9489d27",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "3215e908-ed8b-4f78-904f-e01810c9b142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6f26d8e-f882-4667-803e-d87a25ba8ad6",
        "cursor": {
          "ref": "68d30fb6-6286-40b5-8a08-36112d83ba0f",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "7e2fbda3-e60e-4f74-8ee6-2568a6db4d2b"
        },
        "item": {
          "id": "a6f26d8e-f882-4667-803e-d87a25ba8ad6",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "31aa70f8-1ad0-4265-aa05-5d9fb5dfd452",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c37d95e9-d8d7-466a-a28d-6f1c5c0a7041",
        "cursor": {
          "ref": "763d4391-264e-4ed0-a102-20aac46acef5",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c1cca84e-9e5f-4cdd-b849-7776be617154"
        },
        "item": {
          "id": "c37d95e9-d8d7-466a-a28d-6f1c5c0a7041",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "ed3560d1-dbf3-4ded-aad0-4b3c8f22eee6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7747b90e-2138-485e-b531-5a68750cf6fe",
        "cursor": {
          "ref": "d85c60ae-5c0b-41a6-8fff-bc3ef1390171",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "b3fd9efb-6ee2-4a23-9cf8-a85257efdab3"
        },
        "item": {
          "id": "7747b90e-2138-485e-b531-5a68750cf6fe",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "3be1a444-03ed-46cf-b843-5071fa014e82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f60633b7-89f7-4a6c-876c-eb5140130bce",
        "cursor": {
          "ref": "e7f25195-149d-41f4-bf55-589b3cdf038f",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "477e93c8-c157-4410-ba12-b5addef8ba06"
        },
        "item": {
          "id": "f60633b7-89f7-4a6c-876c-eb5140130bce",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "0844ee53-6000-4a75-9858-9f3920b3e27a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "359ff62b-5579-46fa-9d36-9ed8029b1a9f",
        "cursor": {
          "ref": "b379a40f-babc-4490-9810-ffb4e6a0e661",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "4da8df77-0c8f-4491-9a55-007db9d7aa31"
        },
        "item": {
          "id": "359ff62b-5579-46fa-9d36-9ed8029b1a9f",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d8d5d101-8daa-4b0a-8db0-d9f67e4a6690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "362623ed-327a-470a-a234-14b275aa91e6",
        "cursor": {
          "ref": "c02db1f7-6caa-4aee-9810-8a94bed78e54",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "87a4655e-8721-4a8c-9ad5-dedd79952461"
        },
        "item": {
          "id": "362623ed-327a-470a-a234-14b275aa91e6",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "7e3c54d2-9cef-40c3-a873-f3e0d3c17098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85af1b13-aebe-4c66-a713-1bd161b31278",
        "cursor": {
          "ref": "4d557fee-d81d-4fa1-ad33-aa08381bee0c",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "448e2bea-4551-491c-91b4-b72e74049171"
        },
        "item": {
          "id": "85af1b13-aebe-4c66-a713-1bd161b31278",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "b2c42464-72f3-485b-a3ab-d9b82b9e189e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f82cb19a-ee4b-4737-8120-0e1cdced644c",
        "cursor": {
          "ref": "abd8f362-2119-43b3-9307-63fb196dd95b",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "28f8b27a-3923-4a65-870f-adac89e30eb5"
        },
        "item": {
          "id": "f82cb19a-ee4b-4737-8120-0e1cdced644c",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ee388b21-3c15-4082-9aef-247bad0176ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97013704-b021-4029-8301-8d8126a57e1c",
        "cursor": {
          "ref": "321bd9a7-2657-48af-b715-99a2faab3eca",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "efe77422-ef89-4aa5-a815-bc2a53f3958c"
        },
        "item": {
          "id": "97013704-b021-4029-8301-8d8126a57e1c",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "929670ed-c0cd-4bbe-908a-0c09b3915056",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2ebc3dad-ae7a-488f-98a8-311888dba1b9",
        "cursor": {
          "ref": "b7d3643e-bd2b-4c02-a123-e3654fb4ec44",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e2135e77-e9ca-4fa8-8c7a-cfef4f5db7d8"
        },
        "item": {
          "id": "2ebc3dad-ae7a-488f-98a8-311888dba1b9",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "7baf53d9-a128-46fd-8f54-74824e536f03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ecac0f2-e656-4147-8129-001557976d36",
        "cursor": {
          "ref": "90eed305-d87f-4eac-b1eb-f196d8c58d0c",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "20217820-356b-4015-99ed-397b431c2064"
        },
        "item": {
          "id": "3ecac0f2-e656-4147-8129-001557976d36",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "9c332564-959e-443f-9f9d-4d420ad4241b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "095ed120-00fb-4a40-a1b8-0e03b24a3cc3",
        "cursor": {
          "ref": "ccf01f42-fc95-47d7-84f4-a991624756d6",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "5d9efa03-dbf7-47c6-87a9-da519662d40d"
        },
        "item": {
          "id": "095ed120-00fb-4a40-a1b8-0e03b24a3cc3",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "0cf3d0a1-8e70-4d79-90f8-72871a003a4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7fe5476-3401-4ba9-aca1-655508a3744e",
        "cursor": {
          "ref": "8decdbea-85a3-4de1-977d-2074e66aab7b",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "7c5b2396-2beb-470d-877d-0e871eabb51e"
        },
        "item": {
          "id": "b7fe5476-3401-4ba9-aca1-655508a3744e",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "28b4db46-3f95-4c7f-afdd-0aaecd3f0e6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af5b48bf-b63d-4fef-b854-06874b57de87",
        "cursor": {
          "ref": "1e6c8482-f6b8-4cbc-8e0e-d32932523d92",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "02870931-fb45-420b-a146-24d68a7cda44"
        },
        "item": {
          "id": "af5b48bf-b63d-4fef-b854-06874b57de87",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "fe9085cf-6862-451d-815a-480a42a32631",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2d154a19-c309-4718-9611-d2c6705e351e",
        "cursor": {
          "ref": "94291e2d-3d1f-4785-920a-55e5597b6cd1",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "343eb234-bdd7-40a2-b992-a64d6c98ebfd"
        },
        "item": {
          "id": "2d154a19-c309-4718-9611-d2c6705e351e",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "a7db7248-b3c9-4945-b722-67cf24e17834",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9edb792-d8fc-449f-a07a-46caf295c082",
        "cursor": {
          "ref": "1cc95ad1-9b15-4666-9cea-d0d4b7f9cb15",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "b84dae48-7cf0-4766-b19c-946e4266ab3f"
        },
        "item": {
          "id": "e9edb792-d8fc-449f-a07a-46caf295c082",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "c3fe394c-6792-464f-bfde-b11c66d5a9b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0dd855c-2586-4121-8377-eaf371c106ca",
        "cursor": {
          "ref": "d65d7e25-a43b-490a-af67-f852f8e311c3",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "43eeef71-8677-4e39-a325-af88f77ce411"
        },
        "item": {
          "id": "e0dd855c-2586-4121-8377-eaf371c106ca",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "617f0601-0f08-4ce6-89cc-d183482c0026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e98daf6b-5580-42de-b91f-38a781887aa0",
        "cursor": {
          "ref": "b4ab0e97-6226-47c2-b641-fd2b8dc8fdfb",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "dadc0d20-12db-49e3-bd5e-bc049adb1e64"
        },
        "item": {
          "id": "e98daf6b-5580-42de-b91f-38a781887aa0",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "951d5399-c501-4d22-aead-eeb3b1f86a89",
          "status": "OK",
          "code": 200,
          "responseTime": 94,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "aae9a9bb-0d72-41c2-b28a-f878fc1b7af3",
        "cursor": {
          "ref": "21e32447-9d68-4f63-897e-19a916064394",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "bb110d32-6b5a-42ae-8b0e-1a16a6f4fbd0"
        },
        "item": {
          "id": "aae9a9bb-0d72-41c2-b28a-f878fc1b7af3",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b6a3cac4-9843-4559-8b10-9c1ed3ba7f4f",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "8b93b707-a5f0-4cee-a876-80b1f6f9003a",
        "cursor": {
          "ref": "6b7f5692-431e-4f27-b95c-2afd8db16d5e",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "d03aff6c-3379-4982-963b-29293c26e002"
        },
        "item": {
          "id": "8b93b707-a5f0-4cee-a876-80b1f6f9003a",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "d7392071-63a2-4932-81d7-c50c8c6a99fe",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "81aa0604-e1b0-4a7a-b9d9-e7a4b2306963",
        "cursor": {
          "ref": "0ddf9567-38d2-477e-8bb5-ca38a007eb6a",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "2fb6fb67-7408-4ecd-8acc-0bec11bd5c3e"
        },
        "item": {
          "id": "81aa0604-e1b0-4a7a-b9d9-e7a4b2306963",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "04d3e458-9e88-4a94-9b3f-ba4a630d080a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b51a95-35a3-4de8-8343-354f75110f72",
        "cursor": {
          "ref": "ebbe61b8-7cac-4846-957f-74592aac9482",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "d54c2a3b-de6b-4be1-959a-1e6b7ae68b7a"
        },
        "item": {
          "id": "b9b51a95-35a3-4de8-8343-354f75110f72",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a4857454-a6a3-41e0-beae-5772addd1e5a",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "adf04f5d-8391-4cc7-9842-05f9b665a657",
        "cursor": {
          "ref": "f21414a9-85e6-442c-9aa5-81ece13db5e3",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "6b71055a-c001-47f6-aac7-f511bdfdce96"
        },
        "item": {
          "id": "adf04f5d-8391-4cc7-9842-05f9b665a657",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "07520ea7-c5e1-4f9e-a3ca-4fbc9c64cd3c",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "a9cf1faa-0b3d-4ceb-a309-759a704d0be8",
        "cursor": {
          "ref": "43a48283-9245-47d5-aba7-41c2cd9b9630",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "3dc2aa38-0036-416c-ab84-77c07b24d460"
        },
        "item": {
          "id": "a9cf1faa-0b3d-4ceb-a309-759a704d0be8",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "38cb6bbe-eea5-4be8-af28-ee4c66c24864",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "be84e77b-6e44-40c1-9d11-015c162b074d",
        "cursor": {
          "ref": "9c46b1d6-4816-4cd0-812c-a034a1cb486a",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "2438163e-c7a0-42e5-91e7-ee1923c7592a"
        },
        "item": {
          "id": "be84e77b-6e44-40c1-9d11-015c162b074d",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "f61c4196-fe2a-418a-a7d2-bc2b4a958948",
          "status": "OK",
          "code": 200,
          "responseTime": 86,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "3e42dade-b5b4-47bc-be7e-5ce759882250",
        "cursor": {
          "ref": "47855d64-36a2-4b8c-87bd-a063132732a1",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "2b75443f-52a0-43a3-9fa4-43f69b21bc6a"
        },
        "item": {
          "id": "3e42dade-b5b4-47bc-be7e-5ce759882250",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "10af6ffc-2bef-48c9-bd8c-3d51848c6eeb",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "a96caee1-f7f6-479a-baec-deba3b6ec8ab",
        "cursor": {
          "ref": "0810a1f1-7641-48cd-b26a-474547313eef",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "6b18d5a5-e1fc-4f86-9d74-7a6c764f078c"
        },
        "item": {
          "id": "a96caee1-f7f6-479a-baec-deba3b6ec8ab",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "8bbb4cf3-aaf9-419c-9ecf-975c03b40031",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "7acc1c65-1577-4eb0-b49b-6e00f1d0dd10",
        "cursor": {
          "ref": "cd98030a-9eb8-4467-97af-ba7912276ea8",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "31feba4f-afb3-494f-a73a-13812af2d2aa"
        },
        "item": {
          "id": "7acc1c65-1577-4eb0-b49b-6e00f1d0dd10",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "00b8c947-6b3d-4722-bdc2-66097676ccc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a92fa654-365b-45f7-a33a-7fde7a5abef8",
        "cursor": {
          "ref": "1822721d-034f-498b-8f3f-9fdf886c9b11",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "7c231620-ba6c-4ba2-8900-a9ec43deca65"
        },
        "item": {
          "id": "a92fa654-365b-45f7-a33a-7fde7a5abef8",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "7eaadfa1-a9a6-4c9e-9d01-69fac71154a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74e86a87-ec17-47ca-9d60-ee4d9226f48f",
        "cursor": {
          "ref": "ac809d86-f72a-427b-a4ed-2fd66e913ce0",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "8456a790-454b-4583-93ca-f6ae9ad4ce5e"
        },
        "item": {
          "id": "74e86a87-ec17-47ca-9d60-ee4d9226f48f",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "94dbb7a1-ff7e-405f-9187-e76780382436",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d8993ea-aa35-4b11-a604-1a35053aaf20",
        "cursor": {
          "ref": "00840782-38f8-48f8-a5ed-517bc6b83fda",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "a83b26aa-fad8-449b-8f75-794fd7af0d07"
        },
        "item": {
          "id": "9d8993ea-aa35-4b11-a604-1a35053aaf20",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f9826b05-3dc8-4dc5-bacd-e83ed9f7424c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f3e977-893e-4c94-8b54-a606a03aa920",
        "cursor": {
          "ref": "aae53cc6-327a-4e04-b3ff-57222943d5f4",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "33a56c54-1a13-4590-b05f-4b5a5b491ae6"
        },
        "item": {
          "id": "28f3e977-893e-4c94-8b54-a606a03aa920",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "8029bb48-1438-4534-9ff1-bbd733723f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "848b991b-b6d7-43ad-8383-d9970989c1b1",
        "cursor": {
          "ref": "5baa0c48-a1b3-4212-b62a-2b34b8daea86",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "83110315-b07b-43be-8ae8-e57a68feb110"
        },
        "item": {
          "id": "848b991b-b6d7-43ad-8383-d9970989c1b1",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "fd6e450d-8268-4a08-801e-e6f82c2d4f40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3762d3da-fd0c-4427-ab28-c81cc8c0235d",
        "cursor": {
          "ref": "a55675b5-13c3-4547-8899-a1e3278dfee3",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "a7d1e2ac-0651-4755-b476-95f64590b969"
        },
        "item": {
          "id": "3762d3da-fd0c-4427-ab28-c81cc8c0235d",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "f378f6d5-7768-4bcc-b33e-88879a7a21b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97f6cc8a-e0bc-4166-9aac-10db5d1c1806",
        "cursor": {
          "ref": "27ebd049-ae1f-4272-8f14-9c892466cd2b",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "d83528d0-1491-4a82-84b1-8e455d266e27"
        },
        "item": {
          "id": "97f6cc8a-e0bc-4166-9aac-10db5d1c1806",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "ec3d5c83-78ee-483d-8c0b-90047533fd70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8199e12e-c4fc-4b03-ad2c-c8343e896c27",
        "cursor": {
          "ref": "e99a9aac-9e82-4bdd-b6f0-9cd40843fe20",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "f154458a-7f0e-4c02-bff8-a7c3a92d7607"
        },
        "item": {
          "id": "8199e12e-c4fc-4b03-ad2c-c8343e896c27",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1e042055-52ae-46df-8dbe-2b77d329bf51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d8a11c-2aa6-47ec-8a56-d71bdfa85316",
        "cursor": {
          "ref": "f340faa9-4a34-443e-ae31-4c9e02d0673d",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7219b0d5-edde-415b-b7b0-db0426e54b42"
        },
        "item": {
          "id": "12d8a11c-2aa6-47ec-8a56-d71bdfa85316",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0ef6b856-513d-4031-b708-cce967439c06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1cb4833-2b9d-48d9-ae6a-137f35d3dd0e",
        "cursor": {
          "ref": "4730acb2-0fac-4ae7-9f01-5e3a052e4a08",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "c91c2b40-0c2c-4126-9203-92115d57ce70"
        },
        "item": {
          "id": "d1cb4833-2b9d-48d9-ae6a-137f35d3dd0e",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "3ffb84c9-8ae1-4053-b9c1-a82e0e7aeadc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "371362cb-9466-49b8-b373-46032959ebb0",
        "cursor": {
          "ref": "025d14d2-994a-4618-9b53-890aaf5308f6",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "a24d7820-c78b-492d-b9d7-9ae68bfa9517"
        },
        "item": {
          "id": "371362cb-9466-49b8-b373-46032959ebb0",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "f30cffbb-a806-43b7-9d7f-ee0ce2e99d98",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77727414-11b0-4f77-b209-30b8b7374b6c",
        "cursor": {
          "ref": "7da07da1-09cf-4f8e-a738-85e7894498f7",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "8e97a9f6-e53c-45d7-99e3-0d4081f73407"
        },
        "item": {
          "id": "77727414-11b0-4f77-b209-30b8b7374b6c",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "64c48117-c3cb-499c-ad9d-39201982abc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1e8010c-5704-4b85-bcfe-544e077bf536",
        "cursor": {
          "ref": "f875c2fa-bfe8-406d-872d-b79f640c3205",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "61726870-9328-4042-bf1e-585c5def29dd"
        },
        "item": {
          "id": "c1e8010c-5704-4b85-bcfe-544e077bf536",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e3443a92-6aa6-4bd7-9c7a-3bc74167d89d",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "46e451f8-3ebd-4690-81bb-a91484b5b323",
        "cursor": {
          "ref": "196f477c-e8a5-492e-8a54-2fdbcaa8c700",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "060bc9d8-2105-4f37-acee-8d089e1e3295"
        },
        "item": {
          "id": "46e451f8-3ebd-4690-81bb-a91484b5b323",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "ce330850-bf98-4cc6-b316-a744c8089d42",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "6dd6a0c4-921e-494e-b23c-cc776498bd23",
        "cursor": {
          "ref": "f02f598d-6034-4314-904e-3659b747137b",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "3e37475d-ef81-4423-ac1e-d4421c55def4"
        },
        "item": {
          "id": "6dd6a0c4-921e-494e-b23c-cc776498bd23",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "62c1a957-b63a-4bee-9026-9617e044a5b8",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "31d28e2d-f4cd-4a18-adfe-b9bf7bd9d72c",
        "cursor": {
          "ref": "140331c0-c1a6-4da0-a8bc-6558b465caba",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "6da1233c-449d-4fd9-8e55-72fc0656d946"
        },
        "item": {
          "id": "31d28e2d-f4cd-4a18-adfe-b9bf7bd9d72c",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2792567c-f062-47db-bf5e-84b22a406216",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "ed7f2645-0225-4d8e-8a2c-26ef5d6e23b4",
        "cursor": {
          "ref": "45ca5e51-cbe5-46d0-b09a-ed1192777adc",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "62cc7214-cd21-473c-9b6c-37f1e5f7fb2c"
        },
        "item": {
          "id": "ed7f2645-0225-4d8e-8a2c-26ef5d6e23b4",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "a1e69e3c-853d-45e8-ba60-5712debd62dc",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "29f35667-6c82-433b-a38b-dd2d42590a56",
        "cursor": {
          "ref": "b59b5ced-a328-40a8-be6e-d1a806153fbb",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8ca9ecf7-5e19-4d82-abd3-7e2c0f5f4748"
        },
        "item": {
          "id": "29f35667-6c82-433b-a38b-dd2d42590a56",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "71c93bb4-effd-4acc-a637-6b4da1c3e041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da22644f-d279-4419-88b8-6ac5360ee2d8",
        "cursor": {
          "ref": "a78cef5d-4f31-47f1-80ec-4a182947bd71",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "a6a297ef-dcd2-49bc-a829-fa3d01155093"
        },
        "item": {
          "id": "da22644f-d279-4419-88b8-6ac5360ee2d8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "d31561ea-eff5-4869-8778-75c07bdcbb30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "292d0390-8e78-48d1-bf8f-1732f6a862b7",
        "cursor": {
          "ref": "78612bbc-bdae-44ac-bba3-760967cd7e4f",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "8ffedc6c-420e-468a-9d81-3475674f53d1"
        },
        "item": {
          "id": "292d0390-8e78-48d1-bf8f-1732f6a862b7",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "0b37d440-9e51-45ea-8bfb-cb2d049189d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04b7d054-6224-41af-ae43-f445ac581f91",
        "cursor": {
          "ref": "66efca48-f2e3-43a9-97e6-92d1277d084e",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "5104d0b0-9041-4c0d-8c04-be2e92107c41"
        },
        "item": {
          "id": "04b7d054-6224-41af-ae43-f445ac581f91",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9e42ee11-1474-408e-b9b3-b9fb21fe2aa8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70f6d4b9-fc69-4cf0-ae7b-412cebe3bf9c",
        "cursor": {
          "ref": "cdec3806-d99d-4d92-a470-eadf683de1c3",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "ec430d1c-3e03-40cf-8dfd-91eb5fbd67d1"
        },
        "item": {
          "id": "70f6d4b9-fc69-4cf0-ae7b-412cebe3bf9c",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "1c8009a1-8ca2-476e-b6d9-ee2e98a828d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f32f0bf2-3c9a-4c22-a21c-7d23cec2708b",
        "cursor": {
          "ref": "cc4b0c16-f59c-4e98-92f6-607976b5f45f",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9a4ebba6-6ef0-4b07-9205-22b836ea340c"
        },
        "item": {
          "id": "f32f0bf2-3c9a-4c22-a21c-7d23cec2708b",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "debff072-4d6c-4cc5-b189-0e516fc2bcd6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb090d02-7cf7-4188-bebd-fc6babadc3fa",
        "cursor": {
          "ref": "75a9c8eb-0b7c-4281-b619-b3a99a236538",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "98707feb-c6f3-400f-ac48-ff85d0c73a37"
        },
        "item": {
          "id": "fb090d02-7cf7-4188-bebd-fc6babadc3fa",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "b5c5ae87-a2e0-42e1-a20b-7f5e39d773b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c47a46ba-2053-4c5d-9de1-14c2a103bb9f",
        "cursor": {
          "ref": "cedad0ff-452a-4470-8956-e9fe0d58370f",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "da2e8d23-93af-4999-9900-7e985cc7422d"
        },
        "item": {
          "id": "c47a46ba-2053-4c5d-9de1-14c2a103bb9f",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "3574bc82-8ba9-46d5-9e7d-15d8bbb1ef4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d53edd2-5e34-4d33-b0be-ce1c4986269b",
        "cursor": {
          "ref": "1aaadc10-42c7-48b1-b522-99433af5a442",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "0365669f-2dc8-4c64-a060-6357605e69bc"
        },
        "item": {
          "id": "5d53edd2-5e34-4d33-b0be-ce1c4986269b",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "acf7d560-9f30-4f21-9f54-9c708d6ae11a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e0053655-6f98-42b4-89d8-bed6a813f960",
        "cursor": {
          "ref": "ab92cf48-4097-4aae-a305-e0e8a6930f7a",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6d80c48e-6ced-42c1-95b7-e42468ea86df"
        },
        "item": {
          "id": "e0053655-6f98-42b4-89d8-bed6a813f960",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "267bffe2-854a-4956-8e20-4e150d3393c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6aebb4fd-6b4f-46f8-abb1-a71cbe3784cc",
        "cursor": {
          "ref": "35dca35f-7973-40a7-87b1-7417f10bbd7c",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "81e27207-c349-4aca-a568-8f8b30fac506"
        },
        "item": {
          "id": "6aebb4fd-6b4f-46f8-abb1-a71cbe3784cc",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "78ee10f8-25f9-4602-a574-7dce2adff9ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "488d6fbc-a200-43f2-96c8-1d81e829675f",
        "cursor": {
          "ref": "c7264e16-50bb-4367-b66e-2b7b17825a77",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a08ebf89-18e8-4da1-9f2b-c5d2bafd54ff"
        },
        "item": {
          "id": "488d6fbc-a200-43f2-96c8-1d81e829675f",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "05b20b47-25dd-4403-bab5-12cdbb858d4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efd99f34-ba6c-42f8-a139-2d382b0c7d2b",
        "cursor": {
          "ref": "a793eb2d-09bd-4e12-ab5c-862c94ad1d37",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e79347e9-9754-4004-9713-d82ff4024b50"
        },
        "item": {
          "id": "efd99f34-ba6c-42f8-a139-2d382b0c7d2b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "f288a527-dcba-4eff-9ae3-fb1eb0c92e64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e05af501-2d88-4561-9847-200ecfbced77",
        "cursor": {
          "ref": "bb0f9760-a0a9-47d0-9d18-241b5279b216",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "aeb893b6-7b79-4d3e-a20b-2d8dea839fa7"
        },
        "item": {
          "id": "e05af501-2d88-4561-9847-200ecfbced77",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "d48f0ce2-265e-47e1-9dc3-06180f4e3773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e256903d-9e9a-4650-a2fb-a52dee03d5a9",
        "cursor": {
          "ref": "3e77cbcd-865f-4c86-8fc3-73af719735ab",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "154dc6ad-a04d-428a-b73e-7858276cddc8"
        },
        "item": {
          "id": "e256903d-9e9a-4650-a2fb-a52dee03d5a9",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "481e7a46-d3d7-4801-922f-e91c263b27b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "43ecf2d7-0b39-44e1-9303-31fb4ca3ae76",
        "cursor": {
          "ref": "fa6a2426-5ab9-47b1-b55e-fdb52cefbd92",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "017cba51-1cb9-4191-b777-84ccf2df4ecc"
        },
        "item": {
          "id": "43ecf2d7-0b39-44e1-9303-31fb4ca3ae76",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "2d78d739-bb82-40f4-a6b3-cd2dfab74c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4450a3e4-1e6b-4139-adb2-7aa805cf7a54",
        "cursor": {
          "ref": "643ae5ed-3a0b-4667-b7da-8a5716be1253",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "aec1e5b6-4b46-43d9-81f4-0dd9c67e052c"
        },
        "item": {
          "id": "4450a3e4-1e6b-4139-adb2-7aa805cf7a54",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "20211e19-39cf-4b4e-83eb-139903d1ae0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b39752fb-377e-4e52-b7be-985f53c4f859",
        "cursor": {
          "ref": "b40b2f0c-7906-4407-8f71-6ca8b5457497",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "c8893e98-cbe7-43f6-9565-c48221f97a2a"
        },
        "item": {
          "id": "b39752fb-377e-4e52-b7be-985f53c4f859",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "b5af2b42-7c28-405e-951c-271753ff9666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d01a236-3b24-4e26-a7c2-b864956241d5",
        "cursor": {
          "ref": "e3b21222-e48c-43ff-882d-932428dfc972",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "30993d89-4ce1-4121-8afd-a64b78649c5c"
        },
        "item": {
          "id": "4d01a236-3b24-4e26-a7c2-b864956241d5",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "44a72945-5885-4fd1-b31a-3b2ad7cc0092",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c2a826da-ec97-478b-b8ba-5d4e72e5b204",
        "cursor": {
          "ref": "c11f9c93-60d6-451c-a4a4-55377b2910f1",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "b475c23a-8c4d-4f85-883c-4bb9c2aa5817"
        },
        "item": {
          "id": "c2a826da-ec97-478b-b8ba-5d4e72e5b204",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "29e89fb9-ef54-4c7b-abdd-9efebc0b19b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40812299-c1ed-452e-ac4c-0045ca63110b",
        "cursor": {
          "ref": "7463593b-dc3e-428b-95f5-89ba8216baca",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "54285ee5-e28c-4a31-a823-0556e3c95edc"
        },
        "item": {
          "id": "40812299-c1ed-452e-ac4c-0045ca63110b",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c3c9e7fa-f10c-4686-93b2-89ab84e6c2d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17981a8c-9e55-409a-a4ad-de89b98a59e3",
        "cursor": {
          "ref": "c826257f-3b7e-4ba0-964a-4d6a2fe90818",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "70f1c526-a2f8-4bb7-8846-51e0df3ffd6a"
        },
        "item": {
          "id": "17981a8c-9e55-409a-a4ad-de89b98a59e3",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "4f68380b-a646-47b2-b351-53805e64fa49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e9197bc-7e0d-4f79-85b4-72f4487c2272",
        "cursor": {
          "ref": "9eed1ab3-c80d-4fee-a4a3-e39fd7f4c47c",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "65a83218-5b70-4c87-bf31-57d6ceedfbd2"
        },
        "item": {
          "id": "7e9197bc-7e0d-4f79-85b4-72f4487c2272",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "64bdc5bc-e5a7-4bf3-a81b-241d9954bec5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e87a06c4-9b4e-4773-9bab-0ad4c0fa4fc1",
        "cursor": {
          "ref": "f7b56145-ef7b-4eb3-9b6f-17958f46068a",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "bda32625-4031-4d60-8a8e-5df047df1628"
        },
        "item": {
          "id": "e87a06c4-9b4e-4773-9bab-0ad4c0fa4fc1",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "c7e87abe-a927-4662-8cd6-1746a0d117c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de515026-bd9d-46c1-aca8-c5f12a10bbbf",
        "cursor": {
          "ref": "ff30f1e0-d954-4682-81d0-ba01d9db616b",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "8ed081e4-8512-4a2f-87cc-fb708f0c3500"
        },
        "item": {
          "id": "de515026-bd9d-46c1-aca8-c5f12a10bbbf",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5898a124-8af9-435a-9fd5-de3519158244",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56bcad19-edec-4b94-a7bd-5301882144db",
        "cursor": {
          "ref": "c4d69331-15be-411c-bb0e-a95c6a1a4dbf",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "9c20d7dc-d0f9-40a8-9c06-91aa946a1e6a"
        },
        "item": {
          "id": "56bcad19-edec-4b94-a7bd-5301882144db",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "16aff6b5-e6f1-4613-916a-2b1e29189f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79c7b51c-9eb4-4edf-91fa-def783da19c0",
        "cursor": {
          "ref": "f3631357-4388-466b-9fe9-8c1eb8461b04",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "05ff0975-d960-44f5-9546-4cfcf2c159b3"
        },
        "item": {
          "id": "79c7b51c-9eb4-4edf-91fa-def783da19c0",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "5906beda-a4c0-41e1-af30-e3b529bdc994",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c035bfca-3108-4c79-90b9-3ba41c534228",
        "cursor": {
          "ref": "50b704ec-cf05-4098-b093-9d964a95f097",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "7984882b-4110-43e3-8635-e76a505aeee0"
        },
        "item": {
          "id": "c035bfca-3108-4c79-90b9-3ba41c534228",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e78d3f97-643f-44ca-a15c-5a109274059b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2da2a348-de1c-4c76-b383-b1989b5227c3",
        "cursor": {
          "ref": "0e64fd96-e08f-4bbf-a9f7-3766f1d39fea",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "3226a509-7fd3-4fa3-82d4-08637882850f"
        },
        "item": {
          "id": "2da2a348-de1c-4c76-b383-b1989b5227c3",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1d3a83ba-6b19-4866-92f0-65f80651f62c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de9f3343-9a2c-401f-9d53-5dc88c8ab637",
        "cursor": {
          "ref": "e4a45226-e8a0-4774-a4fe-13f4c6ffa0f8",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a3aacdb8-d0b5-4e77-b83c-0a1f25d51dde"
        },
        "item": {
          "id": "de9f3343-9a2c-401f-9d53-5dc88c8ab637",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "7d378a0e-976c-44f6-8535-04481568c587",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ade87c-ff62-4151-acec-1866a0929838",
        "cursor": {
          "ref": "45074b81-b568-467f-be01-5d5cff53ccec",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "657de67a-06f3-4aa0-b10f-88a19cba5485"
        },
        "item": {
          "id": "11ade87c-ff62-4151-acec-1866a0929838",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6f22cddc-c6c7-4f2c-830d-4f7f3dcad8f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63ed8d4f-407e-40d3-bf54-1d914ef90843",
        "cursor": {
          "ref": "6af0930f-14bd-42b2-9f4b-c630cf776f4f",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "5b71b72d-9ea0-4b0b-9299-7a5482c1109a"
        },
        "item": {
          "id": "63ed8d4f-407e-40d3-bf54-1d914ef90843",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "39c9694f-91b5-44e7-a477-8c57d53b3cc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e6243d6-8ed2-41da-98a6-8bc5b1889516",
        "cursor": {
          "ref": "5b5e0844-6733-4a92-af04-348ac13987a2",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "73828a32-e379-4595-924e-d6e40d7f082b"
        },
        "item": {
          "id": "0e6243d6-8ed2-41da-98a6-8bc5b1889516",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "37ca2e6c-9b5b-4d79-8402-edadc273eefc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2af51c23-73bb-4215-8a2c-b4169ae91043",
        "cursor": {
          "ref": "3bf06cc0-e34f-4cfe-97b5-5a4efebfa2dd",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d870b0d4-bca0-4e45-a892-832228fc6eff"
        },
        "item": {
          "id": "2af51c23-73bb-4215-8a2c-b4169ae91043",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "4ccba096-1d70-4b3b-9e1b-8b73f3b04746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb763ce7-f892-4b9d-973c-2e8123e4e447",
        "cursor": {
          "ref": "eee52cbc-2a0f-4a50-b260-779f88c65b5d",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "43d12334-5a25-48b1-bd53-98aa42790b4b"
        },
        "item": {
          "id": "cb763ce7-f892-4b9d-973c-2e8123e4e447",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1d9140f9-7b2a-41b3-8d8c-2bec4511c036",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6079ca3-e5db-4154-bb64-7e598dedbb12",
        "cursor": {
          "ref": "e6c1fba5-9581-4693-9fe0-7e82a7e56866",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "afdf2af6-003f-4621-8ec8-aeb14ecb1f2b"
        },
        "item": {
          "id": "f6079ca3-e5db-4154-bb64-7e598dedbb12",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "a82453a1-c330-4c1d-89b2-f18ad84a4e3b",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "9aa60aa4-70f9-419a-9198-197d606d9603",
        "cursor": {
          "ref": "6c923552-0238-4391-a568-51906148c99b",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "d237cc91-bfc1-488d-a1ec-8d758c8c0962"
        },
        "item": {
          "id": "9aa60aa4-70f9-419a-9198-197d606d9603",
          "name": "credentials_verify"
        },
        "response": {
          "id": "da7ba22a-36e6-4916-abf3-e62286d95457",
          "status": "OK",
          "code": 200,
          "responseTime": 140,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8fcb3ee-2753-4d13-b9e2-04c0f49ad7ab",
        "cursor": {
          "ref": "8148d5d7-4f71-46c7-8f0b-1cb3126d32c7",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "60a13143-39d6-4cf1-99f9-6b175dfec1cc"
        },
        "item": {
          "id": "c8fcb3ee-2753-4d13-b9e2-04c0f49ad7ab",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d518543c-44a9-47bf-8283-a9725fb71714",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a35766-6a7f-480b-80e0-b9a8b10193c6",
        "cursor": {
          "ref": "48b81924-800f-4a01-8e82-4c8242367c51",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3bca8b65-f9f3-4fc1-ae41-383705292ce4"
        },
        "item": {
          "id": "f9a35766-6a7f-480b-80e0-b9a8b10193c6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fd7b5fdd-e5e5-40cc-bcb7-e104a33db6e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9a35766-6a7f-480b-80e0-b9a8b10193c6",
        "cursor": {
          "ref": "48b81924-800f-4a01-8e82-4c8242367c51",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3bca8b65-f9f3-4fc1-ae41-383705292ce4"
        },
        "item": {
          "id": "f9a35766-6a7f-480b-80e0-b9a8b10193c6",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "fd7b5fdd-e5e5-40cc-bcb7-e104a33db6e0",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898e5d0f-61f4-45fe-8242-5f47f945773c",
        "cursor": {
          "ref": "a19b0e19-81b2-4d42-94f5-961a050c1624",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "55680f1a-46a6-4a8e-990e-03f93ef023a0"
        },
        "item": {
          "id": "898e5d0f-61f4-45fe-8242-5f47f945773c",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "cac785b2-048d-46c0-b24a-751664044a00",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 35,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c7493df8-b4f2-481c-9025-a9ebe74ad266",
        "cursor": {
          "ref": "98fcbacb-1971-4242-b896-3f67786c8732",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "97b1c1eb-8b14-47fa-b4af-c62e4da99c73"
        },
        "item": {
          "id": "c7493df8-b4f2-481c-9025-a9ebe74ad266",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "23e3d203-ee8f-458b-aebc-9e4e967a3841",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}