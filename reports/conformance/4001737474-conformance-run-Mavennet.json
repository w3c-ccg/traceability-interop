{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "979cd610-0a3e-468d-9574-a647925be445",
        "name": "Clear Cache",
        "item": [
          {
            "id": "4f6130de-5563-468e-b527-8d443c4bd0f0",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "99d81d4b-c764-4ee6-84ae-a2bd7aceef2c",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "329d1c0e-6194-4e79-b91d-02128193427f"
                }
              }
            ]
          },
          {
            "id": "c42cf261-b1b4-459e-8b02-b11542b3162a",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b6c70fd0-676d-40f8-a1d5-a45796727285",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "370b7f60-7689-4b43-b408-9997815240c9"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "9d989139-5831-4a30-93ff-62693cc1c971",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "37ed9a56-9f02-4e29-8e3f-7d42d7b4548d",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2672c5f1-cfc0-4ffc-bea9-5205c5c3aadf",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8970c301-fb31-4bee-a4cd-04e8ab96ae90",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "02a5dc88-d87f-46a4-876d-2931cf1ed65b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "9f5a457e-b799-4609-81ca-6cfe40bcbf0c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "68b15894-d165-4442-a3d7-4e432cddf51c"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "94d322f8-890d-46b0-8c44-e9cb9f256322",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "69702e5e-f794-40cf-8ad9-c25b518168d0"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e5e89ea2-6e48-4f57-a593-57ee465249d7",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "3c47d92b-550c-4fc9-add3-8ae12d7b7d9c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "2f894c0d-11e5-44bc-8fe2-6887e4234f60",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0e448e85-e98c-46ba-9338-6a5670ba0f30"
            }
          }
        ]
      },
      {
        "id": "efd030c3-6633-4c99-9777-98f92fc71dcf",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8b7f0376-1c00-4f69-86bf-6cd5eb839c62",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5dc347cb-259a-4802-a92a-c1ced318f392",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "2a58bd9b-f713-4cfd-af92-ddc49032a24e",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "607e33f1-8e03-4e51-9390-7b0d8c511b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "736f67f1-8be4-4c12-b5b1-72ec9b0717d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0913c463-8478-457f-bba3-52d5efd9292b",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7eb6c94b-8be3-4f93-b235-8949af151f5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "62cc4928-d394-4bb2-a41d-a5b28e00b115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "329a14b3-9dec-4097-aa9b-0d3bc2d82914",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0db3f4e-c0c9-4639-85a0-475cef926bc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c92c22a0-f1d4-460b-8c07-3166c8009eda"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e6c87ad1-66c2-4e2b-b015-6abc9e18846f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1abf9883-56e4-4592-b478-629a52fa325d",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef6a3c44-b05c-468b-a245-efe58d579905",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d6ab63d-aacb-43b1-be8d-8ee5647a1fd2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "927d80d9-ad3b-4669-ae04-f0c436cefaea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94661c70-16d2-45fe-9820-c801bc541066"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb4c722e-4b9c-4c3b-bd53-3e9c7ff894ff",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18bfc896-4cef-4cfb-bc67-bbaebe258457",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "726a33bf-0868-4040-b71d-82a7d4b64f39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97f0cd8e-347e-4be2-aa8e-16e4d0829360",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "179a042f-bde3-402d-8964-eb6e91ff1b5e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c59fc100-c558-4085-b3c2-48afb939e9b6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "23a9ddd5-dff4-4424-b616-1fc7582fb22e",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f4bbce95-afcf-436e-a7a8-dadcdb303cda",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e006a371-15d2-4829-b783-37bb06d361aa"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2b055f03-83b3-4147-a68c-ca119af737f9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "5c619d00-ae2b-40c9-8ea3-ff5f00eac6cf"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ab33b41b-324c-4d27-9e67-5c6e6488b21f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "00d69b68-9bdd-4c82-8011-62e5dd8f4410"
            }
          }
        ]
      },
      {
        "id": "200882ed-a8ef-45e8-927e-30caafb8bb9f",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "3764ee35-b069-43b8-b1e9-2bf19b65551a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cbaafc02-7265-4316-9869-1a1fc25b319d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "72dc18a5-5b34-4dab-b9f7-b33db0086d25",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cf7e1e2-3429-4416-8a89-fe2d4b93a6c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff282d2b-c74b-49c4-a311-a63b2862ca10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84ba4afd-1610-4357-aeca-0e08603e699a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d2708f56-6769-4dff-92e6-7a99a7e3e6a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483cce7f-cb15-444a-89f3-5e5132ac36e2",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e156d123-4462-420b-a5b7-e4bdcdf9a15e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc586f6a-c616-4fbb-8c01-2742fc6407f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f404ed-72fa-4e06-9108-fdac93a961b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "78e3962b-c44e-43a1-b022-798461b48a21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f75661-cc1a-432a-8225-aee5f7cd5f6f",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "81ee211f-e263-4106-829c-3436b309cf68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83c462bb-ba3c-488f-b62f-b210db95083d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99bdbd9e-f436-4515-bde7-8231c8d978e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64430eed-c6a2-4801-8e4a-0f8fb39316c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34eaa46b-b660-4da4-ad5f-51d6c856bf5e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd617b30-da8b-4986-a120-88322741a93c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90260b34-03a1-4fb9-8a79-ef5450da51a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a0cf81-5d03-49f4-a96f-591ee239fa21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "60fe189b-6ebc-4764-b3a2-98dadfef0421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "930fe79a-a64a-454f-a944-eaa53bb04d43",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "63cadd14-b6c3-4c51-9779-d3bc88588091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b7ea138-bb27-4dfa-bca1-3214f550a3e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "368e8d15-43ce-4d65-bd50-44a253ba14e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "28f9b637-4f20-4b4b-9db5-c93460386afc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8795fa09-233e-4d9e-8117-32b48262ae41",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fec91808-2b69-41c4-86c6-113d35404d01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cf7fdf7-389c-4b31-ad31-5630dd29ef55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15d8f7f8-a0e6-496e-b67e-a11cbaeec99a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c2ccde4-f0b2-4469-9699-e21bc59a96aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8f0daf8-0863-47d1-902e-2fff86b25f3b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "549a26e6-9d00-40e5-8a3f-ad33ad120a8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61c1387e-6514-4e7c-a23e-ea2025c65e67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "737c5160-b6cd-4bbb-a842-4d8e6505ab82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fa43c7ba-692f-41df-8fae-2e6fe4b34a19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ba837d2-1bfc-4766-85e5-809f93824d20",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7df12c25-bca1-4a73-9aad-c9e459bdcbe2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9f2a8ce-91a0-46d1-9b20-9ff5185f2632"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24c86abd-5686-4988-a142-b76e08859f66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7251b059-5787-4737-a057-44565d834e56"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43da6deb-feaf-4dd6-a9ce-6080c6aa4c5f",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "779f5b65-70d6-4c8a-9ae3-69b4c6648502",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "166243b8-fefd-4dcb-a5c9-209df71cbf0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9298e469-c612-48cb-9d65-51687f612cc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "175d344f-0358-4531-ad48-7a49c1c8fb7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27d22be8-63cb-4623-bcda-bd760b2b129e",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bfece98-0a80-44fd-8c7b-65dec16291b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38eb9937-2222-40df-a4ed-d4595176931d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34f299ec-e07f-4343-94ff-ae6546ab3abb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27b0cb5a-27e8-458f-9cc9-c9af133ec985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2d1a66d-3a99-4ce3-9dda-95b83b5aeae0",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e65b2703-deb0-4265-bdd7-ef00fea27d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5984e678-e7dc-40bd-a5bf-56b67b9eaa98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e10f75dc-056f-46a8-a4a5-77569c09a3cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "82936ea6-fcda-44f3-937c-d909bbd3418c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c63c494a-4da0-4f4f-aed9-e65c7b89a7da",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a5b716a-927e-427a-b297-3d43554589ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcd0729a-90c6-4c71-b845-723e4b721e56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1069a4f-6771-4d73-a4f6-7997ebcde707",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fb304fbd-ef9e-46b0-8c0b-34db94f26d16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "080134ff-db48-43d5-a3e5-839391127d38",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccd5792d-d63b-41e5-9b2e-1ee9bd8da7a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd37ea47-0ae6-4c8c-aca4-9010b168c098"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd981dfd-aadb-4f6d-972d-faa7d3afe516",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "5a96a026-f1e7-4b9b-8ff9-5fb5cf54cebe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b0bff06e-7c69-44e0-b981-e29ec968879a",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49ee877d-d533-420a-bcc7-e4ebf5175c79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04e8f2be-11af-4120-8dc4-efeae6211da0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "836f2283-d22a-468b-932c-da1d61df1a7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "2c9964f7-a2ab-43c8-be10-1c48d6584e41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8addc4c0-123f-4faf-8519-d90fc2a723f4",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80f697a4-15f1-4d6f-82ec-5fd493ef2722",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "738ad8b3-50e7-464a-b2d6-37e376cb243f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea19e3e-3c2f-4c4c-bfae-2189dea4fe69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "15147fad-06be-4ae3-99cc-8a379396eac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c98d6bfc-6665-4826-99bf-aeec1b30d583",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7fa1d00-fd15-4dae-950f-3ff35fdcf077",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "678e3f20-f83a-441b-bbb5-98e8a8c37a9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9641a90-dbfa-4180-af5a-7d1f7caf65c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "830a9436-a515-4627-9092-642fc6d3e60b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f254801c-9977-47cb-9053-a541ff236048",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "12f42629-4f76-428a-8239-5b0d7d2e5a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8a25ba8-ed36-4c55-bbeb-a50f5a87e842"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20dff06d-8f42-474f-9ce9-ad315e2af162",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6d647b7a-a748-40e7-a059-e5eda390d612"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12b27a9-abe7-4dcd-bc67-d83b982b148c",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0725a4cc-bb16-4e4c-aa02-3ab4f6ecd0d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dbebb312-453b-44e8-8bf8-aea081c5011c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3498e2a4-5ac0-486b-ab1e-dd738de0dc55",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7ead5caf-0fea-4b22-98ac-125aae8b9985"
                        }
                      }
                    ]
                  },
                  {
                    "id": "871ac1ad-5324-463a-8364-05a521d6de1a",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c68cd989-6ef9-4c19-b250-c017efb6cb9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "375e0a41-e543-45a1-b015-ea5dafde673a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fee5198-b654-4383-833e-1087fcce29fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bb44d0de-94ce-49f3-86c0-74addeec54f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63bdd73e-7bf7-4628-94f2-60a86ac571ca",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae1d8c5e-c0f0-40d2-b2c6-51a2ee5f91ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e68e15c-a380-4ff4-89d7-c3aa7fe230fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1cda4a5-2c08-4340-bde7-6cde6c4b9501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "d1a7a06b-7fe1-4906-a110-5168e019be5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5067f4c-a81b-4bc3-9d00-e7de312209a0",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "340b91e3-af9b-41f6-8fd7-3b9f3555b1ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2867daa5-1d6a-4190-a680-734fef7ff677"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546fb624-0bed-4709-a73e-ba1c5a70b71c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "4034ef33-84a2-4fcb-a88a-0939907d3d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a35008bc-9fa6-4cd9-ae9f-b2808b17d369",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6e49cc0-974b-4477-9de6-d19e7c4090fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ff20794-afae-4e5f-81f7-c02dada34b13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9260f91-afbc-427d-8788-40645818d4a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6480724f-8e9f-42c2-bd08-e64bdd14cdd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21fa70ec-c5c5-43ed-a29c-9319881c097d",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29a011fc-c2b3-4fff-9c44-bd16d4866812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af440bff-3b55-445e-a697-6a154d48b522"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ed91957-ccbb-48b0-9d82-4c5372c1f4b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "833f4040-c6d0-40dd-b8a3-6d44a01ef13c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b14827d-f6af-4cdc-8563-1838052a440e",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "86bb31e0-b2e2-4278-89cc-34e3117e12bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc3da064-ed22-45ba-91a8-28740a0065d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d35440cc-22ae-48db-8f2a-5a10a4cfeaf9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "316d1484-2e70-4f52-8ea9-4037a8e17d4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d6c1afb-2e3c-487a-b1ab-27d1343290a9",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48ab8561-25dd-485e-b893-6eb1b3b40354",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2df896ce-df6c-42c3-bf0c-14bd0466f2d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04f771f1-31b6-4a07-9e51-edf30ccc054b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "25d301d9-cc5e-4e88-a4a5-edebdac3c9ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff26125e-02a1-4b41-860c-88eb4b7827b3",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a168a1f1-85f0-464e-a3a1-5df0ef4c84b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1327cd36-fb36-4c10-b3b0-5229c74ff077"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ec5f5db-37d5-45e7-becc-62816f411cb5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5aba519-bde3-4514-983f-a787972ad69d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d55018-df7d-44a4-b591-e7882ab02bf1",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07a74746-f48e-4ff5-a904-a331072f193b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e8c3371-e782-48dd-a03a-3d9a35b003ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d092010f-07d2-414b-b951-ba8a490fa675",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c72c433-87cb-4552-82df-863881436547"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe92386-2868-46ba-a9e1-d10c1cfae5cb",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82011651-017a-4846-ae28-9a1ce34b0bc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f09817de-395b-461e-bcdf-7ed89e4adf16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2addf8ec-cf4b-4424-8c38-c0978f28aead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8e8ccde-a69f-4c59-8b99-3ea3311d4e2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efcb2b3e-796b-40a6-bcd6-df85e0db9a41",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddb8a15f-0736-4d2d-9492-d4b5d85dc381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de522602-f587-49f8-a63e-c54392fc0f66"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d55ffad-6784-4bb2-a303-ed9e8bcb611e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f99cf25b-b0b0-4754-a8f5-ca076f3ef624"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0841eacc-26f9-478c-b47f-79fbc680221c",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "312fe44f-4ea0-4f7e-b899-7bb6128012e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "821c32cb-f97b-42af-bc3f-f73a1dbf78cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "649f41e7-0e66-471f-9493-2bee5804a84b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "7ae0f9df-1994-428b-83cf-0754b66145ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81960e33-9f0c-4a95-842f-eee1ec41b47b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "673ca90b-22be-49e1-8043-c6718d320d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af41d3a4-232d-41f2-aa42-89563781e0b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "003dcb9e-07ec-4511-a03b-db02d0747ff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f9794433-b249-4d4a-93c5-0aea0ade891f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c0abe71-bbca-49cd-a1c3-6cec08c29057",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0ebbc2e-6b35-4bc9-8a69-cb8c8885e625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b747df81-7fe6-4198-a923-f4e9aaafbc4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e460831c-2da1-489a-a0d4-7d33975c9d59",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "945a5dbe-6c82-4b11-92a9-dcfb3d0427f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5664c5fe-f53d-4172-998d-7b7b1ef39323",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f2e33e21-cb92-4ac8-8728-d5a8bf21b0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0f450550-3daa-4974-80e9-fe339e82b7e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b365ae56-5c1f-4403-9d3c-9fafc63f079c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "21519f84-4f29-461b-894c-615944205fdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f63090a-ffc0-4ff5-9e0c-9b65a7836cdc",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e1e36f-b8e1-4135-8f31-3f380f250582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2127978c-c99f-42f3-9381-93922bb044a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32ee6ecc-b0f7-4542-9076-6f92e5d48b41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4aa42ef-c976-4f7d-83e8-aa946eb4caff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e7079b2-9b0b-4100-9cc4-3179471e5517",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd3865a4-8189-4dc2-9a49-88895af85118",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03f4a751-ef69-42be-9ed3-0b5fc840d55b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50ef260f-315c-40a1-85d2-a2b2b0b2e963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b226c5d-a087-4856-95aa-27e0c12573b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4865578d-c7ef-4383-9cb6-4797f762b4cc",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde6cbef-7f7d-42ea-8806-e271d6568fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6dabeebb-7c0e-4d8a-abb6-bf3b1b60d05b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02bb491-d218-438c-9818-00cde99a42d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3ea381d-6aa5-4e12-9a89-419d514d1262"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81c5d0f2-400a-4c8c-806d-5f23d1a3c6ab",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "96e4c02f-b7fe-40f9-bb12-a57764e8a86f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69cd1b81-69f8-4b43-967b-9e9b2840815d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3a25c6c-f387-46ac-8b55-5343c361fb91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "cba416c5-3dfb-433e-97e3-e3112adff5f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5353d708-c555-4ae5-918d-5ab8d7cd4ac3",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d826c13-4e2c-4ec7-bfdc-0ca4a1b40e0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "352ee998-5d57-4c30-a332-730d6005fb27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd59517c-ba83-4bbb-b679-1c8cc72f1c03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4011c165-65fc-4ec9-aaba-b3662e4379e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "185abdc8-0ffa-48ba-95db-3d072f3c13b5",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f62cc22f-d895-4240-876e-0e9f05101331",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8e4b493-d5e1-4431-b3f2-49774e4ca40f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9680a7c7-1900-411f-93b5-66a8bd4fc93c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "14483aac-1555-49ef-aee8-e54ba214ef2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e067dc3-19ee-492f-a536-57128c44b595",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d6296f7-fc48-4f36-8275-5e0a504ed3bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75804d36-0dae-4ec5-ae9e-f278e7ebf0ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "64d4797d-98cb-4cdb-9af8-672fe69bcf5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "b416cd0c-507c-454c-8279-7a23fcc391ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "348beb47-9442-4194-8f33-0ec51c476c29",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46466b08-f896-42a5-bd11-d14107f10749",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "723a4150-0eef-4dae-a192-785ccef7c0a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d22da13-d84b-4961-b117-b8714d2648b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "2eda8f84-6e3d-46d1-b12d-b0f8527bcd03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a52becfc-c375-4d89-934c-76b1e684e5e3",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0424cb88-c796-4e41-84fc-fe29ce0b4f74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9df00110-17ec-48a5-9029-88e62890c9c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b6fb76d-3756-4a35-8524-31f92f36fa9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "10499c9b-ecc5-4d48-9f5a-b7e3d3fa1648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e5a0796-4af7-45f5-85ec-3581e7db1f46",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7e9c05f-93a3-4526-9789-d1f7f7c3788b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4fbc024-7a82-4923-8c49-515d865e6455"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aaf6550-fb90-410e-9d5d-69e3fe56e2e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "acb35b9a-b54d-4d1a-903c-9289c79ed5fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e5d0f20-7ebe-43a2-ab4d-321bde0ba436",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b4b5320-82df-4344-a19c-8346828073e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c332b48c-76f6-425d-9e0c-4e2b031135bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08df9e1d-f2bc-484a-8f9e-502fbb73fd9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "a8fb4789-1ade-4af2-93a4-1c89112bc2a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b32658e-f21a-4b0d-a5aa-af2100597a9a",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a91eebf-d0df-4556-bf18-51ccbadc0b44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c57229df-b5db-4ab8-978b-74ef24bea6ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13c94778-b511-4836-b9b0-f673e8c1009b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6032756-b2b8-4d13-9926-4255750ebc9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90378b2a-909b-42c6-82c4-bd77a51acf8a",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dcdecab2-eec8-4337-964a-b46242925cab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcbc5b0d-96e8-4a7e-b1d0-a074097359c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f2aa2808-7050-4822-b2eb-ddaa8afb53a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "60684889-f2bd-48a9-845a-1f13cd5924c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3e4883f-5cf6-441a-84e2-e8a586bcccdc",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48e60e11-4390-480e-909a-dd50ce318786",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af3afaa6-63c9-4bf1-bade-6ef6500b8a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ca75000-424b-45a1-babb-a0c672be0e32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "766164d4-55fa-4585-b934-3e6062a0d096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c619084f-a8e3-41ef-b3cd-0050eda82eb3",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d070eb17-c772-4975-8428-efe713d1e4d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44fd6add-d56e-48a1-94a1-1f783c469d38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e1ebb5b-2361-4bd9-b32d-c6c0e0ff0b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ba1b218-c7df-4d5a-801a-89baf6e0e2c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c5a5636-d8aa-44a7-a18c-a4f1931656a3",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42bef3a6-af77-4e3b-a2a2-6a5845e58aae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0576737-7970-4405-a157-98d104df7941"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "103dd8f5-5c1d-44f9-ba66-56da4093b45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef278a24-4c9d-4134-bdf0-e28adbaa4ecc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82fec982-d52e-4006-94a3-65c2a35a1640",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd193dc4-142f-4519-b7b4-19a0b9691bed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd709afe-62c0-4378-91e6-9d87d4677cf7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3944139e-1cca-4fdf-9969-de64fab62c7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "08a98eab-ad4d-4589-92d5-2aab10e9f54d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67904799-2c20-4f43-80a3-0e54db6adf39",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f953488-20e4-4129-a3c0-4dc393a15662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a4c28df5-4ceb-4965-8933-af097aaf30ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d9248d2-9ad0-4593-8458-8a2566b958e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "1a821dac-9a49-4e31-a6b3-b25abeb59a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b82e878-8780-445d-bd53-681416a89ea5",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64805be-da16-4240-876e-73638ad42962",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a09c00d0-9ff3-43b0-ba3b-0a5d2b03b5aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9233f35-f6d1-44a1-b628-5ec1d6a14ecc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6e0a2540-bc84-41b3-bb27-99aa59df18aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3085f268-02b2-4db3-995e-313a121c99ad",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d6e3a0e-878f-4b7f-a1ab-fafbc35ce5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b58970f8-b388-47ef-a339-0b96ea1bd019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8930b78f-8b25-4fe6-bb37-b0cb35d2473e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "57102bd2-50d8-4d01-bd24-bfbff969f751"
                        }
                      }
                    ]
                  },
                  {
                    "id": "893cb550-96df-4936-9768-60f475736cd0",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f39ac789-1e70-40d3-8492-e05843b7f3a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7465023a-9790-42dd-8852-0a6913ccd617"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bad94d9-875d-4bda-be79-52e5867f6de6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "91b615af-72cf-4a58-9689-168ba5dd651d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15c37e85-46d1-4039-bfaf-041515acf87d",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2a76383-c0cc-495b-82eb-f7bbdec3a22f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "330c614d-34c3-4e71-ba2e-f0ff8c24babf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a54602c7-cc20-4c16-b97a-59e069d63746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8049495e-5e09-4126-a50a-c4018aa60d12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7633d191-d3b6-4f31-a56b-a136b9dabf27",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "92b212ff-48a8-4a05-8c57-55f9701e1678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53e47533-fbd0-462f-896d-30607ac5c537"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c1d8c91c-f898-4625-a14e-93fe2d0815c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a2abd8b7-3379-42e1-986c-1e7d697e64e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12ce6e23-1139-43ca-8ff8-36fd9744721c",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "781fc374-b31d-4e1a-9917-77d4cdb801f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff8e64be-3e0a-4f7d-9056-bc75a66e0a41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10e1603d-cb7b-4686-ba0c-ca35059a8ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "620bf095-96a2-48fe-8d6a-a74f2fd4ea84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f218611a-7b3d-4ae1-bf50-cb57fd95e090",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93ca3645-107c-4a5d-b762-b116328c17ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad0d93de-f6a5-44f6-8b9b-e4aece8549f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0647c3b-6ff1-413a-8fe8-9a5aa34973eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "6ac6791c-27ed-4a5c-9cbf-1e06eac173cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "318879d3-4bdd-4d40-b29b-9102b7a3b81e",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f777cd2d-2853-425a-b8c4-a9d3a0a4e458",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "358e8489-8944-4175-b136-b360b3c303c1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e2991b8-6989-4d7f-a7cc-c9d5dfcc6b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "6574fee5-0420-4095-bd82-aeb5c15c9f63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d743dd5e-e7c7-4668-b0c2-bc7e4cd78616",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30caec13-8c3a-4f8d-94b5-11eb70fd9c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0e1ed9d-ddd9-4dd4-95e8-3a7358f5c31c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb70a280-be2b-4ae0-9228-95dc9b059326",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "16720d63-16a3-4427-99ec-4a9d94a496e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "380021f1-ce57-4038-8741-1e1f0727aa43",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9f348a-eb95-46da-ab84-b6bd636f9a5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "675c3a2f-9f15-46de-9819-d896e04d8194"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f13e0719-5192-4e64-877c-02e6739fe1b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "7f3c210c-adf2-46ee-a30c-9e20a945ecb7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72865b55-6ec0-4d5c-b78c-a1be82e832b9",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "caf46bf1-f032-43b0-b8fe-ee73ecfdd18d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "782935c1-61e4-4d16-9a2a-0af708af9ac9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c7a7f04-69df-4880-a188-e4645a2a72b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c76c7380-5279-48ca-badf-80970a9e576c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a256d0a2-800c-4481-9d7e-b62db4088d49",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d13b3e3-3bc4-4d78-bc97-a5a1dffb1167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9db0f540-442f-40a2-b7e2-39374a632513"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7782b8fd-b206-479e-9c76-b5fde8b81103",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc8165b4-28aa-431f-a8a6-eb14babe1714"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47a43a43-24b9-442d-996c-ee12f4758d4b",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b30aa4b-7fe5-4086-801a-34953fef11f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e71ec8b-a8cd-40ac-80da-f5209f6ed76c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ad1171b-a1f5-426e-8a18-30fa9bd76e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbbc8c11-cb5c-403e-826d-7f6fe5a664ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b252e4c-0236-49e3-acb2-0060a6e79c68",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27767617-6d9b-4dee-b48f-f9e7206a2d36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8de0e4f0-3980-47c4-a0e4-b585b0fd8d8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1746c24b-1d0c-445e-af97-0de7a04ece22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "7e97453b-9196-4efe-a9fa-3ee41736380b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ecb980-f2a0-459d-b13c-facdfae669d9",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3446a737-487e-48a9-9a87-d7ed3ea13c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15c472c0-8035-41a2-8a54-ad85543a494d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a1998c3-854a-4509-94bb-b8fff0bf82a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d4c46120-c65f-4a7a-854d-bcefabe3e8de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b099634e-29f3-4dda-a446-13b9a68b9d6f",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1773f12a-b5bb-4a63-9dbe-16dafc3c698e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bdc14490-1ac2-4b84-a528-07aeca9dcb8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65a74530-2796-41a8-beb0-f0266f3ab83c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3d7f5a6-2310-4d32-9dff-30ad963ae8e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e763600-9a52-46c1-a0ce-b6dbd4922ef8",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93fb1eec-e073-460f-a4e9-ea9df1cec8a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "336eed5a-366d-4951-bfd2-9f71d41e6174"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6fcaa88-efc6-4ee4-8251-681a6ac4741b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e01e068-fc58-45b6-951a-5de6f0b369d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83ba9f1f-c134-4811-bbb5-9ea7aab8b07f",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1982bed-93b7-416e-8cb2-eef8a8b04c6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64c5e3ad-fcd0-411f-b0fb-65fbec49ff1d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dded5944-5570-4fba-acea-ac167131a525",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "dc10a4cc-0a52-4d8c-88ae-5aeea2f5faf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecf19282-e34e-49cb-afc6-dcafe0c9d524",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad3ce0bc-a7e7-4418-91b5-8a71ca2ea7b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "097c9af7-c06f-463b-bd47-00c33c3f04ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78d28c9a-8cfa-4c35-bde3-cf9f43cf0ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "37736953-2a59-4a8c-8548-206c4d0a6d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94767282-cee3-4b0e-a498-09e0b0963aba",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e2163c7-f36f-40ef-8d3d-c53ed8ed6549",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21c6607c-807a-4cd8-9bce-c751b24551e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc007964-32fb-4ac8-b1a9-114bcf224d92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "76cc4c82-1fc0-417a-bcc6-10198063d31e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f238340-41c6-4614-ab0a-ea134cfd4e8f",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2edd8a37-ede7-4975-8f30-c2e0ce2365cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b72ff1af-ebd7-44a9-bec8-9ed82e93cb12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdd3583c-f046-4af2-bff9-6daa4532a00a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2743ea68-4033-497e-9244-6aec04309de1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cccac8d8-9401-4040-b8e9-de1f28d6cc69",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d1a2bdb-05d0-468f-8feb-8b85b2e06c61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ce94575-ed22-4f27-b192-6e903a84e037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38ae75c3-1cad-41f8-8c6f-fcfca0f35c8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc4064d7-3013-4fee-85ea-6df25ef80a7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f671e98c-e2ea-49ad-a53c-4dd21eba3177",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf07147c-86a2-448a-ab2f-4acd95add680",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "976bf96c-deaa-4880-92ef-4cc9924df316"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db16b5ef-fa15-4fdb-b4ae-4fd92ab17282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "bcc5945a-a01e-495c-92e2-4564997bf9be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "767edeea-6c58-429a-a806-97326976a80c",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c47f94-99a3-4843-8c69-8782ca3bf431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d425c4e-a422-43c0-93af-75df558b3a36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c0b42da-ed22-4ba9-974e-611e3556192b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ea951597-069b-479f-a343-782fee01b72c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7f672b1-a4ec-42a1-820f-9bded104cafc",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1598abee-4804-44f3-8b7f-21f0a0b4ae9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "568b2bc7-cf29-46f7-a7b5-f12a0627c6c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b50bdf33-339b-4a6d-99fb-23124dd84b64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "70a177c9-f515-4258-8dd3-0316071f1662"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3e3e12-13ea-4d95-a23c-b806932f97b9",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f13a308-fbfb-4756-affd-40cbd658252f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61e24b9c-bd2d-4ca5-9d6d-7643fd3854d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65082656-d841-4835-858c-8a0d4b749a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "c65b6a22-33fb-4268-8d58-411bdd0e695c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caebb2f6-e6b4-47dd-8133-6a2bf26e8223",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6c79cef-1b00-4ba4-b770-f4073eb2a7a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6750654b-6cf0-418f-ac7a-97e2612420cd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e04c1ac-409f-42de-a6bd-2cfdb572dffa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3aa6b54e-02b6-4e18-9e56-36fe72aecff2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de6160ec-e17a-4855-ae7a-ff7f15857c69",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90f21414-3138-4f2a-943f-127f4f3174ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aecd0a59-8d5c-4dc3-a27f-01bf3e6d5be3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "506e59fa-63d0-4bcc-a3dc-61d0f090961f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d7ba9966-e53a-4428-ba65-0d75f48b45a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8ae5f2-a324-43ee-bee5-4af208e7328c",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f05e13ed-e8ca-473f-aa57-429bda1ff646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52392dab-ce24-4907-9d68-25248c234ce5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9d7beb3-c302-4a98-8945-fc3b1b8c43af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "20980c55-2cf8-40b8-ad5f-33764b39b68c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "474abc9e-6b05-4cbd-803d-38010540b280",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f627f9f-c6c3-423f-ba0a-b7e8e8d232b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20a734c1-b5a5-4b2e-8440-48a3e42a34b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06b48a43-2d85-4801-860e-8b3974085900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c8672bd-082b-49fc-a078-8fac4052e3ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a423db25-d86b-46f7-8460-577c5d526db3",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ec9ac22-9bc2-4e48-9e15-d458dd18e27d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11c89533-71e7-482b-8651-6055d5b0ce41"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df0e5d09-4d2b-4e9c-b639-ca7ab97b22af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "d9a123a8-a3e0-4bb9-b0e8-78f778f7c41b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0a5053-19b8-4bfa-9209-1336b57a7977",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1862c103-893c-4b06-b286-195059254931",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "103a77f9-1fba-4408-8c6f-29cecab68d54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a0d175c-f5a5-4f1e-90cc-b057938a251a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a4b0e83-d027-4fc7-80c2-4d1842f41b38"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3ac4617-a7d3-4bb8-a275-c9a598a54fb6",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4174815c-9324-46bb-b04d-b4ef6fd905a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e46a2fa5-f37f-4072-8156-fe4ec0967d19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba415c7-c008-424e-adc4-88eff95d6203",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a804075b-a0b2-4ada-b60c-fe0ec5c58919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fd5dd6c-e4b3-4894-b2c0-cb22eb8bf27a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a250494-a367-4fa4-a3c4-5389e0bbb0ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "374d5e48-76f0-4243-b412-7302abad8adf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f77c6c8-f9a4-4c70-ad0b-cd2146f55b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4f809c0b-cc93-478d-9e69-7677acb3f5a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "835cb857-27cc-4970-97d9-f8df2d1c98d3",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb516d93-1881-4ea3-9f87-1cf8d11bd619",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c4c0a49-ed45-48f3-bb7b-9c29a8c6ac27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "38128571-660b-427c-858e-36797c3ea0c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d362c690-2410-4750-91b0-3fab72084cf4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6bcbcc6e-23c2-4651-bd26-7a9d0c6d8681",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c56a5205-5255-4227-b865-3ea931715ebe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7582f5e8-0950-4e6c-8133-d2d612fdba43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5ccdd52-6339-45ae-9b0d-335b53fe9b2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2f0b0af0-9536-455a-b27c-44d1ff79f2b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cd80ea2-5612-4a1d-ac95-f29ed4391a3d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b686c0b-7e1c-4e36-856e-c6f44400c3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d9d4e69-dbf1-4f60-8e46-5aba18fb10d6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fba90124-df1c-488f-854f-abffb4e1f99e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fbc367eb-3fd1-4507-8567-e37d48ca2523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fa6b0a5-d935-476b-99c1-e3dbdfd296d9",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8599c6f-fd39-43cd-8ee6-c30b7aa7eb64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80f15ebc-fcff-4b99-aab4-0cacc922fb4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a625df5f-2bdf-4153-9201-10aad63daa07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "28aece5d-30bc-46b6-99c2-3cb030eb0592"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58b22841-63ca-4f54-86d5-bd192f8ad381",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "56e08a05-24b4-46bd-ac14-2344ecce6bea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03ca1a1a-a48d-444a-b02b-d715716ebe69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fda25f4-f649-447a-8a58-00b99bbcd8d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d80cd87d-f19c-484c-a29a-5bf797f51b41"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc2d9849-4e3f-4e9a-8773-665bae58104a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e68f1c-a9f6-4ada-b59e-282c79a1ed52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e794562-9ffa-4cbf-bc5c-4865e7103311"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b109c9ea-76e0-443c-b3fd-a91927d6d0cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ce36fc4e-1966-4e4f-a187-13bc62f588dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f75bd78d-7900-461b-aa15-3dd944c52217",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d4535b7-0e62-4a08-a0bd-40389003e2c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da665f34-2354-42ec-b5dc-3fa86ceb8871"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbb97fa3-a30f-469e-9261-736967f331b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "7b435501-c5c4-4519-9f0a-7facb1852db4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6181dd0a-6558-4d25-9df6-6554b9e65a34",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "372291c3-06ed-4106-8329-3eb7cc30e4be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64708b2d-0810-4bfa-bddb-22eff07579f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5546c935-f2b1-4857-a231-c9e39830c7d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "89646be0-abfb-4d77-b3d1-bbfae590fa21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "276c2019-0eb0-4673-b339-7e26e6e7bd7b",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b620a4fc-0065-4670-b29f-50e8bb466e4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "3761683f-8575-437f-b00d-398202d6b35b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041b75c4-1809-400f-89d3-905073b5aa2c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "757198c4-545a-439a-8c7c-451b0b4ea1eb"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7a50fdcb-34e1-4495-bb24-0865ec691e1d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "31377994-6a3d-4bda-b452-05f28f708767",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8588b13-de18-4870-8e36-62fc631156ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1f6a59cf-97a1-4bf8-8c00-eb960962ac7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59e19a01-bb62-43ce-a235-e2500bdf8168",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "a466f14b-7bf5-4292-8b08-c1d21b12495d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8e44221-7dc2-4a98-8ce6-b116205856aa",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1f0f150-a89c-4495-82cc-1e07b5258387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "22634b5b-1b14-467c-a52c-4cbbf5f845b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a8e138-4449-424a-8cb1-3bb02d63f1b5",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "94f7f630-6ff2-4777-bd5f-74a5840f69de"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "033100ae-280a-4dc1-be32-225017b747b7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "680d1db6-f12f-481a-98b2-937da64c79e5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "58f98984-9529-425a-9a08-2c22f88e35c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9bd76b4c-f5d3-4efb-948d-3365b855e901"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c48db833-28b8-4a01-9af0-4e1b3d53f238",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b3a018cb-1d3e-4766-83f1-2cacc67a35e0"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "a862b573-ec0c-4cc7-91aa-8834b7e4b006",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "77a8a605-2c2a-48ee-9e01-8b19ede3833a"
                }
              }
            ]
          },
          {
            "id": "0b42fc2c-5a4f-488a-8ead-4f211d5349a7",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3e987a88-6eb9-4dfd-b074-5ab6ad6861f5",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "77b0ccef-20b5-40c0-86a3-03000671fe75",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "586ac13d-1b38-4cea-a697-836391264d32"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d402957a-da6f-4782-a1ae-0cc49a82b976",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "8db3ebff-b116-4c55-bd53-708f1b44c652"
                    }
                  }
                ]
              },
              {
                "id": "2952ea4b-2ed3-4261-a82b-7959208136d6",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "604f92db-7356-4674-b806-2320426cc392",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6187993f-155b-4a0d-bd80-edaa10be4221"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ac5423b5-fbe0-42ec-9db6-8f6351417c66",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "77f1cf14-dfb4-4892-9dbf-2f10c22eee06"
                    }
                  }
                ]
              },
              {
                "id": "cb8d9f50-a3c3-4314-ae42-9cb0754a7762",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "14063aeb-6921-42b2-ae26-28336f6c5e7a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "113cdb14-11d5-44c4-b884-9543281b5a30"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "98f2acc2-3f4d-46b2-a221-5512fa0dd4e3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "a54a7a0b-5641-43ad-81fe-90531efe3cbc"
                    }
                  }
                ]
              },
              {
                "id": "37995432-09ea-49c0-ba2b-1847dad3f015",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "fe589eef-6903-40cd-a7a8-dc6c61e8e4bb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c5082ea6-e8f0-4dcb-9e92-c1021a1237e0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9bd0acfa-bb72-48d6-a92b-2d87f84616d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "e0446a1e-aae7-42e7-b92c-b969238f01d9"
                    }
                  }
                ]
              },
              {
                "id": "abaa714f-bcf9-40c9-b1e8-398ea8a9190b",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bca752a4-e2ca-4544-8df4-32c822efd342",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0158e3fa-ed70-4079-b558-f220d28f27ba"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8f6c2293-336c-4052-87d8-54dbe252b3cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "dea13902-2f77-47c8-a749-eea410e8b502"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c1e9ced3-521d-42ee-9ed6-f5a7c7c0e031",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b5c0a225-2b48-48b4-b664-01b3b9729d0e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "611c16f0-2e2b-486a-98c4-782335e54793",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3245769f-a5ba-49eb-b8e9-30e0876d0f7e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "26f618d2-37c0-4658-91fa-02970927202b",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "646111c6-d149-4159-bf37-2cf75b9e2372"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6b0147a2-4df4-4c2e-a95b-d9611249999b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2dd6d8d3-bc9c-4fec-b9ae-67332c41392d"
            }
          }
        ]
      },
      {
        "id": "6b0b356e-1b2e-4e3c-bf84-efe9a4d8c6c8",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "e084d290-5448-4ca1-a46a-c9009965d786",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9ed0c905-bf85-4de1-b9ff-2cd313eb7db0",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d53cceb6-d68b-4e3c-b965-a3cb5bb80d71",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "adbf31de-d3b4-46a9-9ea9-e71a254c95fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c106a690-ab1b-4937-b6cd-d0b5bbe02c25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08871b4f-d3e9-43f3-a798-74ea876ce853",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ac80fc2a-6339-4d89-a8e2-3873f1ae2a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d80d5a0f-a5ed-41d5-8c41-87c689fc89ee",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88e1d886-a9d7-4f5f-a5d0-834232265f44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9265715a-9026-4938-a4fc-b92ecf5e865a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fafd31b-e422-4c43-a303-f5096cdd67d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "be444d97-ff88-457a-a6d8-9ded83e974c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "026ef381-6808-4ba5-8679-3ae305fe4236",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e74bc73-7805-4435-ab64-29bc3d7d2936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d836641c-7fb2-4013-8213-69f355c4dcce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65326920-2d90-4ba5-a3a8-a0d53aa7c543",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "955cc9cb-28a3-4053-a0e1-df779b1e9914"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ada8eafe-9bcb-46e6-9f30-f30ef39f8a13",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "337e5abf-543f-45cc-97a5-50a0b139c6ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7617a53f-4b43-4618-8fe2-96696ddbb6a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4aef386b-2519-47b3-8cfd-7ff6f7e2c25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4794ae2d-49e1-4999-80e3-fc3dee3c2e05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e52317-8144-451a-8b16-8ab4894a3013",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46bd4b16-9ad4-4c5c-a0f1-c2100cc8b655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c857d64-962e-4e92-8222-aa23c940e6c7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6720a70-d1a4-4f4f-ade9-a95160b521bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8fee5953-95ab-43f5-b652-e9a2e242ccf7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "920e638a-bd2b-4382-a61b-992cf3881304",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeb2e5f9-a20d-4c65-a108-0871ea2bd517",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83cb16bc-9b64-4f62-86dd-67791566fb25"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "522f5cce-21a4-47bd-b6b0-6a7089f2bded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6c79c9c-f027-4f91-bee9-d0fc925fa21f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2dd47776-443e-4436-b602-f863842feb34",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a789381-a28a-451e-9e24-dae99cd8fa89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99749081-d7e4-46a9-a12e-b60dd168d019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ff06db-9bfc-4840-9f1d-8f767a55a806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "794b7a67-2a20-499f-a590-ac8d1229f872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "918394fa-dd82-4fea-b916-9ba39e724f1a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c2a4908-9ea7-4782-90ac-5bd7056d9f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8229656-c657-44a8-b00e-326cca247961"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2815b6ee-f058-461f-8ce0-8564753fab75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "94c4f9bf-2f7e-4e68-897f-d1e62cb7c745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edd2db12-a135-4712-9570-7008d89fa0b7",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15779a2-7de2-4ebb-9736-2b9c3bea8e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19746f0c-60b0-4e4a-947c-8088528b3c22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cbc20cd-c220-42b7-a698-2b973c9feb03",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "df63ef4b-982c-46c5-8c29-76ab651f3867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fb3a549-3fad-496b-a1fc-628329cb23ec",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a06a11d8-a23d-4143-bc00-a0c788ae437e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ddce1fa-aea9-4f69-8e20-6a4d33fc1c76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "631e6027-51a5-4692-8897-1072fd8dda82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "90b0f561-79ed-45e3-8bf3-97763a974762"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e95e7a3d-2813-4621-8f45-d4b7852e8d81",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bb96f1e-2670-408b-ab09-f41671a74881",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "02cf1a23-e14c-45b2-9c5b-a3c8328886d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c6b47be-37db-4adb-9798-7a8fdd9780ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "77a0dd8b-241e-49d1-8dc1-1c27c40d2d09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "481c8b8c-a44c-4902-ad2b-68e31a559c1e",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e81217fc-f7af-450f-ae55-8d269193bc42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b408772-609b-45a2-9387-bb17e50c8d09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84c60b5a-760b-451f-9564-5086538510c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0b95ac00-e269-4ac1-bedf-4596af03ced6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e636b96f-10e0-4f30-b1aa-9b67c62ebee9",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0313466-a964-49a1-a5e4-aba486908165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55d2cd67-e6a8-4c14-820a-20a1dc85e8dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840f96df-7323-4a1f-95c1-a723e0b30c4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "585d9e6e-6ae9-47a1-9adf-1e14c8897437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d76a9f79-c7dc-40a7-8631-f30e1454d3b0",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "796ab311-58a5-46a1-bc07-52f19eaaa055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0b24125f-fa23-45e0-82e4-ba4f55bd3c59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6555bb5f-d308-4689-b8ae-57a136496fd5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "adb1d51c-7ea6-4ea6-aad7-75996537ec7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4e1345b-86e8-4b31-babc-869f05265a13",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2418503-4790-4b84-a47c-cb525c734a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df3750c1-b3ff-4bc4-9a42-1ba5ee7001ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d40b8833-a87f-4ee9-97df-b80167037721",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "77dfe5cf-80a5-4715-a629-529b815e6535"
                        }
                      }
                    ]
                  },
                  {
                    "id": "525cc28f-60f8-4e78-873f-869f729563fd",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d01e99a-31c1-4449-82c3-971a70188595",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a6f2d7f-b1a6-4e3d-a7e2-fcf555d00e78"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d960e578-9d80-4503-bee5-753b0f3638c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "629ff0f4-9a76-4052-a017-3dc5cbf24b8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4a7a6234-bff3-46bd-af11-901a7478059e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "120cba7c-cfb4-4845-870c-1ee53c1cb620",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f04dc01-dc10-4986-ae56-bbe5b46626e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00d3bad4-3af8-4ace-a614-9ca4df93772d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ab7ba546-baa8-47ec-97d7-6f8f2746570c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06eca4ce-7bd4-4fa7-93ad-1252a9448cd3",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ab41829-6d93-454b-af46-e6df9de8dfd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5bda266-1b71-4ada-8973-cfb0e30737e7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8135829-7b65-40e6-aa62-9d9a852d3623",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "d8d570bc-e8c6-4d1b-bcbf-d226cbdbb504"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c4d17e-86c5-4e03-aabf-707be4b956f5",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07fe0459-561e-4ebf-ac9f-50ce21f4d5d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cf26072-9fd6-484e-94bf-6ba5e2a949c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6866f208-1ff5-40f0-b768-c1e546c93324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c509a28d-26c0-4b83-bc3e-5cebf2bf4dd8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3317b0e-6517-469e-bc57-bf4c0a3fc70c",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98868503-9182-4f5d-bc72-ba5400ac540f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd5a6d54-a138-47e7-b45d-fe90e3c3d858"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "baae9a1c-9772-4e6a-8b39-4070e7016adf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "28e5227f-297e-40cd-9c82-f9cd3dd5438e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "990cc2c6-3d1f-4b1f-83a8-0ffba6f4f774",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef2fcc2c-c4ba-4df6-abd7-7320edf6c971",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "121f176d-49ae-4e0b-914a-0ec7163c8675"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97eeffe9-1211-486b-a04f-678de5e44300",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3ea3557f-867c-4f8f-b0a3-118c158d32f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "463b9389-6831-4dbb-8d60-a0e3ef62158e",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "781a9fa9-da64-4c3b-b248-b5df9c054606",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09406bd7-b3fc-4ac3-bd2f-acaf733256eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "212d9091-3269-4fcb-85c5-bd1ca96c3d2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "70dd6f80-62da-4ac2-bd99-f8bda15630b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c44c84-856a-4c64-8865-942ed1588919",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea307cf5-6ee5-4a2b-a44b-97d31beab225",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98f09318-cb3b-4908-8858-72653c95de1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffeed8e1-570a-4600-9d56-c3915aa850e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86027335-3b2b-4a24-ace5-e4ea1196e0a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2572e0bd-eccc-4b74-9eff-ab02452d5eb9",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b8cfaf-aab0-40c4-a3c7-2f10dc0c2453",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a2810704-ed14-474c-8cc8-2ab80240eb1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cba124f-1cd5-41f4-8148-f6b7526a927a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "af3837b3-3b35-4eea-ae19-b0973bb5934d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5ba954-43a2-4735-8200-e77dd2d2084b",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c65be1bf-c924-4af1-8e03-b9deb956fd74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e600e9f4-4da1-45b2-8074-b804ca0bbb02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfaa7db-8c87-4ce8-8484-fd9f1d257460",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd0f69ae-8e87-4e38-8fe6-e8df155535be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b29f028d-0b22-460f-8003-9aae573da669",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4eec3113-fbf8-4410-b989-ed767638fb41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62502888-d35d-4d4b-a70a-432cc4c33709"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d1ef857-1d35-4705-9808-aab85d18f684",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71e07059-f03c-42b3-82a4-6ae5ee8fd434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d83cd8e-bd5f-45dc-abd4-7d292eac7824",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "646c0895-be5a-4de4-afaa-d9cdf198b9a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57e419ec-ced5-41dd-b45a-09db5bcd5e72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d92383dc-95b9-4af3-ba51-a80b824ba967",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "138fb3e1-00ec-4cca-a507-b5ca990eb918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17de96ac-db75-4f65-a560-50a3f068a569",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4231bd52-6a10-41d3-ad4b-c91125c90817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b98d57ac-5418-4aa4-b4a3-a5697581cd91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c67491-8b72-4267-8721-c7e4d5698c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9905b058-53b1-4fe4-8e92-9ebd9c523130"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bb3fac7-3429-4e00-bf24-1f5b22d50de7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f315c99b-476b-444c-9cc3-a3c4ee9503e9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e92c8bb0-076e-42a1-a258-c5fb9408d6ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "288c6f29-9b8d-4e6d-aa55-76cfa79fd2ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4281f65-b73c-4c58-acdf-55efb8443834"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85220778-1b96-43d9-88db-78dd207511ac",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb1e2bf3-abbc-4b91-86f3-23310a640e44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb23b6b3-4f06-455e-82d1-0ea2f3f0143e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b69cb47-53f7-437f-877a-99bf7767ae26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "71ddc911-6b77-46bd-9489-3c163162f9ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c5cc79-a8d3-4ef6-9d70-858361333038",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "536e85e5-57d0-4268-a399-aef56ae2b2ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c7acbfc6-27dc-4656-aeeb-d87f6b2e9b16"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69746080-4e0c-4d8a-9ca3-4ccc5014d553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "781eee99-c2ff-47a4-ab72-0b909035ce06"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5925ce-5b1f-4991-93ee-494b106b2d22",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a960837-df36-49cc-9159-23c8c71184ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "570e6654-31d5-44f9-8937-315f5b0f8003"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5cfee19-19ba-476a-88a5-8e63c9bda58a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d380f334-4320-443a-9357-a7942aad3ec7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "9796dd8d-1d9f-4152-b784-cbe390b93cae",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "97c96d10-bb24-47cc-88b6-2b6afdf36680",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c0b4a08-519e-4155-908f-5da256dfea54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "419f89bb-3338-4dba-80f5-5e7700f5b159"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44460150-1e1c-41fb-907c-2dd5886c35db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "76e14214-d492-4810-923f-d8112ea285a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8648ec04-932b-46ff-8773-5423ad46ac2d",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2106ce11-003d-413a-8c1d-a68301818137",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "cbcdaadc-c800-4b60-8e7f-c2e8a564a877"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2087fae5-7196-44d3-965a-070ffde8dd40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4444a6eb-0291-43ee-a1dc-209115355050"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "22ab3b97-46be-45d7-a820-336208189347",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d902a124-43e8-4836-9d25-1815e180935d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "61518e3f-decf-41dd-b97e-a1efe12b9699",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "34ddeae5-1ef6-40d5-a0d6-2b78f129f181"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a9062a0d-9ec2-4fd9-a6a1-734fdc35b707",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "7ac62f43-d6d6-42d3-afbd-cec25eb9a373"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "46c98312-49ac-47b9-be6a-c22581de1379",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "f9cc0fd0-d08e-4dc8-ac72-9b9fa73c40fc"
            }
          }
        ]
      },
      {
        "id": "a09e7983-3bd6-4ca7-b71e-6fe1eef56913",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "092f8ae2-2f7b-43a7-9df5-507a800641d8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "32a982f5-2297-4650-8361-150b7fbbe79c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "41e154b3-103a-4fc6-b462-1c22edc05f74",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97193e6e-d760-4135-9ac8-d8155dc9904b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f82afcea-7c32-4f70-854e-4ef49dbf6a45"
                        }
                      }
                    ]
                  },
                  {
                    "id": "06897c79-cfbe-456d-8e2b-aa7fc505923c",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e104180-ae85-4d14-a27b-2302bf1deea4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "866c0079-9f27-467d-bef3-1e68d2e6ec7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abee04d7-42b4-41bc-a639-84b187babd87",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2239c4d7-ae06-4c1f-b334-d984da1cb539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03c252b8-b3bc-4529-962e-6c6b89a1db51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "165265d2-be0a-43c6-a5e7-ade8c1257339",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3446e9d8-1198-4ffa-9a10-009611ac8be3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16251bc0-4e31-48f6-86d9-18231ad67e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07011aa8-8eed-403a-9fa0-c5baa03b9447",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d171be5d-72f5-48aa-8b0b-c052d42ada85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "79b71c64-da40-4789-8f79-e1d986e0ca9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40e311b0-e657-41e3-9ab6-57693e84efae",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f86cdc44-3cd4-4ee1-8fdf-211826267409",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b1c8908-02c4-48b5-ac72-fe10af35beeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1621009-85d6-4e9d-8800-07e4031d742a",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c39c186-1b41-4a86-b71f-74d8ad82b7cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cabe7f6c-ce53-46af-bbd1-95f98431628d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99286dba-659f-4d22-85ae-b812364c78ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5571801d-2990-4ad7-a399-6a9dccea9ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d69f364d-b778-45a9-ac35-4e449631674a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adae1a5f-dd4e-49a2-9f2d-da614d45cca8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3a765bbe-af7c-4814-90e5-7f6acb1ce2e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c71816b2-eb8f-4c7f-9f66-24487dc6082f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f8dddd0-81ef-4341-ae4a-4bbf6c7429b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13cfceb0-7bfa-4a2b-aa2e-e22c56bfd581",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8273ab01-9745-42a5-b2c6-ac638fba628b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "54cf1ef3-1618-4bef-96b7-55e0ee642965"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5873dd8b-f37d-418b-9a1a-dc8c44810470",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b359f386-700a-4901-a481-d7a6a66677fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83acfff8-ace9-4421-a4ac-3c020d0848a4",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "847a9cf1-0e32-4607-b628-6aa2749cd507",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d35efe58-ea2a-4ec9-908b-34aff33270b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dee2d19-4f62-48f0-af1a-caac0541cda2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ec227e9-c3ee-4667-8849-2a7ea4aff00b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "95301c5d-9102-47fe-bb59-faa5cb452b33",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bf28964-c8a4-4975-bcc3-d851a99fe144",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7983bf51-33c3-4ac5-8c61-3c947ea592f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5abf9ac7-33fe-4c79-a365-b9ec181abd2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7292b52c-6ea8-4ef4-9339-210aec5470f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bb338c9-d135-4fb6-99d3-043bb98a89ad",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59588755-db10-476a-b0f4-25c1a932ba12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6e22e97-bdc1-4b03-848f-a3c82d86f631"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33054431-38e5-4aa2-ae6b-6d4a254d0fde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "845d28a9-713b-4214-916f-df254587eed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f20ac7b-34d3-4aef-9ffb-c615056a1db9",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "34afceaf-1d08-4eab-9943-299bd60e629b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c16544c9-69da-4348-a2ae-b63a3e4aa494"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6372765-b8d8-4a41-bda9-ec859faefcec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "515f3706-c138-460a-b90e-7cb648411eac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb10492e-6866-4932-b2ac-d9b77d869488",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ae2801-9910-4bf4-8d4e-2c289750f98e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "16c9e698-7369-4e14-bbb3-355845d23557"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "faca8537-74ad-4657-967c-85b47ee11648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bf40ab9-8899-477f-a654-e048fc54bf72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdd7ea2b-aa77-482a-b4c8-35d450f11130",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007e2095-c133-4010-8cdf-56c836b6e164",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd440ff3-a93e-41ce-9570-15a4bdf7c7ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03e95bd0-f39f-4ed0-8369-d692d2bf3bdd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f97f64bd-f397-428c-98bc-25bcecc6b8ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf87d572-eb93-4edc-aef8-706087524603",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4026028d-cc14-4989-bfc9-fdda8ae8c3e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8b5ca1eb-4bc9-4e8b-a36c-9949f8b5daab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4302d57-5a5b-448f-b4eb-581024c6f35e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7eecccf6-f57b-4eaf-896a-25310930cc4b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfba2fac-c730-403d-9722-ca39a79bfe7b",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc7d296f-eeb7-4390-8442-c70bdbdc8bfa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a26a529d-c2de-430e-b09f-f402c6b3e323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "784076e3-28ca-4e73-ae9e-2f86c0809ac5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e30332b0-0b67-4d6f-927f-22726da3d3f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fabb70ba-a040-4ddd-9f61-8e073d54be5b",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e0662211-35bd-4ec7-89d1-52c9352a3c03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4ba2df9-39d0-4f52-80cf-b62303224088"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "171bf89a-06f6-4bd9-ae1e-bbb797409581",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed372d9e-cd6b-4401-801e-9f400a7fde88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "555d51e6-d5dd-464f-9621-47158c202eb7",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7933e1dc-d5ae-47c8-a026-6c379c20c5e1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d66a44c2-1c96-4fb5-b010-60c7fda3ff5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e021e4d-6dd0-4ff6-9d45-ce1b6ff0b607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5db2821f-ee97-4526-9184-ebbfc48e0825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e72db53-89e8-41cf-bf6c-c96beb5ee187",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c3e794a-f3f5-4c37-8d20-e5f10211ea78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "455eb565-0589-4bde-b11f-818f2967e087"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5df1fdab-451d-48d1-884c-e45c4a712d3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14785a0a-76bd-41ed-aeb2-e57eff20c787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d064eb-d9c9-47bf-8ff1-e787378196bb",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd6395c-36d6-4eed-91d2-fcada6edaa8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e7763d70-c1e1-408d-9791-abd153eda5bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1504f497-cac5-4630-94a2-50db91447a56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d450215-f47e-457a-8fb6-3139763bab17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3dfc8e8e-49d1-4135-a4a8-7308ac040a58",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9aacc77-be2c-4059-a53c-4a83c814ad2c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59682268-a171-467d-89df-b3e3f44b1292"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d21efee-07c7-4041-88ab-1e3141e394a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9abd7f92-31da-4798-a2d1-088196ca06f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62cf6afd-d604-4507-bced-e1a5b658dfa2",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd134863-fd5f-462e-a85d-0575a09eb0f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23fb2cfb-59df-475d-8da2-24e44bac7b68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f9d27b59-4261-4ec3-ab54-74d26fdf035a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2c062ee3-0c28-45d1-8e5b-ebaec7db1d04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5010e890-40b4-43ef-a89b-270e32c58f80",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f97f3054-9027-40e5-b91d-81b185e048f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "326a5f77-f5b4-4067-aace-0c369957c4de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65748a27-dce0-490d-9750-99df892e1173",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "992af6fc-9c52-4c27-b493-d9ea142edf5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd181553-d9e8-443e-b8ad-545616b8949a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e9441af-8c92-4163-ae41-403da8d66900",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83565f07-cedd-4076-90c9-cc18f584fb85"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c46a2de9-3a92-4310-95e9-ff53529a4d50",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aaebd69a-df99-4855-87e6-13dc852821dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dce54dfe-3596-4aff-8f42-2ce05754de10",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed0af78-64d0-4fda-9f94-bf9329602e04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff8a72aa-b315-48b9-809a-8fd8f7c12a82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ee7540-f1b7-40aa-acba-43c892f2f3cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "312660c6-aa55-40c5-b0ab-7f0becf012b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74074c47-8988-4383-8f96-79cbfd5273b7",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "254615c7-f472-4d32-acdb-130b0492f7e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f08bbcf-5553-4316-a03a-6a6789263730"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61c381a1-d291-46f3-996d-7b28ed9c2257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a1b0027-b2a3-40fe-92dd-b1de277ffad9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "485d9279-cfa5-490a-91b4-e1558518ebcb",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c275174-7e53-4352-8ce2-b12de90f07ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5129ed23-1afe-406f-8627-df93a66a2971"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe5cb8b0-a87f-477f-a61f-3dc3fa69c051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72378819-46ac-4f61-b44c-4ee0b47bf396"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c655c2e-c410-490d-b56b-2cbf2e085eb7",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf57dcc5-75f3-4c39-a690-0b2e88c2ca40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "545349b3-5542-4952-b5df-db029d432309"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "74143f62-b25d-4d73-8dc9-a3ea893095c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2f153cd-8979-49c6-9161-4a039df86c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1334446-995b-499c-814d-7f32c11be9fc",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13d6ac23-3caa-4887-8214-2d603c8b9719",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f1df30d3-f229-48a8-857e-db2f55508111"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "41eb1aeb-b966-4782-9e70-b9779632e493",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a3f4372-8785-4fc6-9fca-58fdf2b19a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d581079e-b45c-41ce-ae87-3d61b1f1bcf6",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa405784-df54-4860-978c-b3b0c11257b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0e8e519c-033d-4786-bb18-aa652705a1d7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "020b68b7-13b0-4ec0-a873-bf6aadc4291e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e003ef8a-9811-4b70-9667-2a2c80879604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a134cf0a-075a-417f-8e21-17fdd31269ba",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33048faf-2b6c-47c5-a377-d09258a46a57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "598576e0-e35f-406e-9b6a-e168aa5e2397"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcdb14df-bab6-409b-b0fb-8ccdb8d7eb13",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a0307ed8-0852-416d-aa70-7ab630d81feb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1fca538-e8c8-45e0-bcba-323d67d52288",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8636b4-3b12-4aec-b363-44a6dea61a9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ea22fa0-f280-4182-ba83-5339ffbb95a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8933b14f-b83f-44da-b1f5-a3b3e42bb605",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d22d9c72-374b-4f1d-a3c7-d41c88ad1a5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3804a463-649a-4309-af2b-c27896af5372",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4297dab-8e54-48d5-a07b-51468b2fd356",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d85b34d-6106-4e6b-8d51-0688d493420e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0375c387-56f5-46a4-9488-edc5a75107fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10e2ff2d-4666-44d9-ba1f-35f2d19eb8bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77990f2d-5717-44e1-9090-d332715f0ffe",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "357e7413-931a-4056-a636-61a06c6b072c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5ac18bcf-40ba-4c12-9b04-04b85e6458ea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08aea7cc-aca7-4abb-be3c-045e6e50b6d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9900ade-b068-4fb9-a62c-81ee5c10ad81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e0c45158-f995-4568-92b2-5067b5bb0e90",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d31cf09d-b205-45d1-9913-6c4d1302a2f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53f085e8-8c90-4063-a470-1591f2e611db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9575498a-ae30-4ec1-97e4-43fbe6c71936",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "649f301a-b6dc-4c79-974f-046213fc7e31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25b41aba-a1ef-4b9d-a7eb-ab310a80d798",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd666fa-b6b9-4dd8-989c-60eccd2f7d5a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da840077-aaf8-4616-a7ab-3c11eb6fc22a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "902d9287-94e3-45ab-85bf-4443dca83a95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27baac6a-c952-4ffd-8a5f-82b8b81e9203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1663ef7-1d1e-4b3a-84cd-5ef66bcfae8f",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdee3d99-ee44-4f3e-8be0-650b2066a804",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a8d949d-f7a8-48b9-8623-d98084f3d018"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5d9cb70-2746-4e6e-8aef-3049f82cb167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f59663e-07f5-4c61-ba51-52609ffa4cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87068297-384e-436a-b884-86eb26a63625",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e9865f9-fdec-4f80-9cdc-aebb53762346",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94a8c8ee-7fc0-4784-be7c-9967d80e42c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "69b94630-302c-4f94-afef-ffefa3520566",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "faee9fc7-e67d-4665-ab84-acf90f6c0f94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3662516a-401c-4468-b4b0-e6f660a920f2",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a726a4b-98f0-4ecb-8d1c-be92e5068c58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52ebdd4a-c218-4bf2-a8b7-059008e6be00"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f09a277-016d-4e59-a033-26b445ad8fb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "358b55b6-7a9d-4119-bf0f-adde52cfcf99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cecf4fa-691e-42f6-a8fc-6e14010c42d8",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "568a6221-e52e-4d84-97f7-bb13276ae4f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "adf5ef10-c857-4418-bc5f-e6b3e66e17f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c784950-9c1d-4f43-8c9e-db74f3e2bd71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "638e8117-7e27-41c8-9b75-95ae03e9846c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88c3bb4e-f15f-4598-8c14-bba835853b9b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a326aad2-93a3-40c1-9fc7-31e08a62afe0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c8a3d5d-c865-4fe1-bb8c-5786dcbb7812"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6c7ddb7-7e19-45bf-9774-696b1f7945e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b1afe3c-1efa-47ba-8ee8-ff0c4b4c1e5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edb5d4d9-3102-43a4-a5fe-2794d5078b9b",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "449218bf-b13f-46d5-8e01-aec0d59328db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2b0b8a6d-c5a1-46e8-b971-6dca3b56bca5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "52071ccb-290b-4bb5-a12f-1ea31f8571d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d24866bd-19bb-4f5c-b10a-acd94ce70b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45cc1805-91f5-4e28-9428-613f338c5d12",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a23cf199-5371-4e6e-8fae-217530087f3e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c7b6a45-5c21-45d1-b501-e004ae1b8871"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "293709c8-2681-4151-9e8b-534780a09ce2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c2a6c53-93db-48f3-92aa-73b7c0b4d91d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ca666c-5149-4348-88a4-ff07bf9c8517",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51888f80-f7dc-41cc-8d5b-21c5e10fd2ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ccfb747d-a702-4a49-beca-0fae1194bf43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30f5ece0-c114-4783-b5c2-7679577b3979",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01021169-7fbd-4755-9455-792ce849bfcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a72feb-5550-499b-818e-d924c3fe26f6",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf6d825b-bd37-4020-8b17-0df511b8a60d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba6a7cd2-6dce-4177-b3f3-4118b1574a53"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fd7d05f-3e00-47c8-834f-4915c4ff693d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "34090c9b-30b9-4653-a1cc-18940e6afff9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ffd3224-02d8-4b5e-8df7-2f9af2f1d1ee",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f5586d9-b485-4991-87a3-17c5f1d36eb1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cede08c9-3ba7-44b8-83ab-3ec227dc9958"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3af3cf3-e8a5-4e2d-9143-94765a04543b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10bb20f1-5dd3-4b72-a9ef-861696c7d611"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d15e341-8e3d-42d9-8d69-1e722d4f1283",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f48412de-d068-4531-a71e-c46e790c9274",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fde5430e-7a35-441d-9db5-7acc4722bbb4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a34fb12-d52b-48f9-b627-f575d1a9c745",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4fa20392-9f19-4d96-9397-34d3a3ecd648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "505630f5-41a4-4a75-a193-b293b11e8fc1",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18e7222a-30f3-4d9a-8bd1-a09293c46fde",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a2e2992-e4d6-43c7-97d4-ca81b949090f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa749464-6d90-4b09-906b-bb74ff4b7a68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04ad6eb3-d3a0-42bf-8603-40766ffc17ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78a2cd1a-7e93-4cda-87f5-b2b01b4213ac",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e22c6ed-bf64-4200-bf0d-6cfcfa505355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7deb6dc3-ad88-41b2-af7a-3c6f5f2d2551"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3ddb60-a749-4d50-87ca-42db652ab454",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7236b5a3-b5e7-436e-866c-430a28d75cdb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b6c2f37-1f07-408f-8070-34b86d72b1cd",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a647644a-5c97-49b3-9825-707278c380eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a91b92a-02fd-4b84-880c-956b93d04a6b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9f7992d-44a6-43d7-b415-7398a7867ffe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a9aba22-486b-4a8b-a772-f756a892c877"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838f8633-d2bb-45eb-87cc-e346240f7146",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3e191a8-18ea-4736-90a2-10d76550f344",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "206deb8b-9011-4f99-909b-ebd2e8fd5f5e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5179623-1508-4a52-b156-aac0cf1071b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "432a7a5c-8d1c-428b-86b3-d5c67e70c1a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6624b2f-d5e7-4297-b6b9-4a21a07c0678",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44678953-1f4c-4c5a-812e-a5afc5fdd5c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "db221017-51f3-4600-a8c4-fa314f4e454a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "daf2bed0-c31c-4ba5-8656-fbe4edde15d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "968e98d4-fb49-448b-818f-714368e59d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b918df62-cfa1-43f5-b636-19deb85eeb84",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2c45368-0dd0-4ccc-b2ef-dc182e6bd7da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5a00a46-a9bf-472d-97eb-446406596e8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf540c9b-71bc-48ae-9ee7-8818cb2e6bdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8524a162-94b6-4a6c-8c4d-74169140eccd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "479639a0-7483-4e21-b120-3a5d17fbeb15",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "891ede31-cc9c-4522-ae3a-83ae3ac480de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d861c81-6d37-4ec1-97c8-f6ccf0b4cac0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3c5f7b4-969c-4b47-a12b-8ed98fdb7776",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "753e19d4-8637-4853-a42b-37fafeab0c98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d308b803-0002-471a-b290-b45019949bf5",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4dd3fe74-5c6f-426b-9deb-f8bfdb05b2c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "027cb0c4-ac56-4456-98f6-46bb171305d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f94a23d-9d3d-4c13-88be-994ed1f5fc37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16b41ed1-6009-4d00-9948-c4a87fee1f7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99ad963c-4bb0-437f-8541-f4ba964b5217",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85f0548f-87f7-44b3-b6cc-f33af85bac71",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d0cf3f3-1c29-4e48-86b6-b86c11653184"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a5f0ec9-1f86-441d-add1-c61567a34e5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11e37fb0-4c27-4f93-8fc4-4d8411c94c08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fea9c3fd-db17-4322-834c-92ee2eb5ad8c",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0375e72-5a7e-4d85-b89a-d3cc804e4988",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad00bba5-2989-4417-a25f-41409eafe19e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6024bc34-892b-4f5b-897a-41b7c7c40cfc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "954b823f-17dd-4f46-b0e7-842b70203364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f9c6fd1-0b16-471e-ad87-c76a2d4e8c62",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "118f8333-633b-49ef-87a4-23fdd08c2775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c870bfb-2b17-4a5d-be67-e9ba430b2b6f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7102d18-84ed-48c3-81b5-b888a7197028",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0074d0f0-2714-4252-88be-ee82816b8ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "382c1842-d491-4e02-9437-bae500e13f5e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aabdc18-deb4-4fc5-9d04-bb3560bf57d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14125810-6388-4540-ad9e-53e8a831bebf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ab582a-911b-4029-9bf1-8e5a0269a9c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ca893cc-461c-4d41-90cc-1d35c9383fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af506f86-be7d-4109-b793-db4a2325c7ac",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "780f2422-8941-4b56-a1df-be34e47d59e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfb1e9be-576b-4f85-b107-64e09ea728b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2987c82-238c-440c-a8a2-9bcb309b7666",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42636723-6665-4102-be86-6810103b6702"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cd80ff8-8d72-44fe-bec7-4a7fc378b890",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b722633-08da-4700-a2ba-b87ad326eb51",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "da5c4b3f-3427-462b-b16a-d2a457749572"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "450024e1-6b55-4b7c-bff5-92c02d423bd2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c71acff-8aed-438c-b675-a5d8f0b50984"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd2f8711-2814-4360-91e4-4bbf7184b381",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c395a77-43bc-4251-b9ee-ad3d5da0417d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8521e187-2f4b-4b65-964c-9187ff5933ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "227479c1-2160-440c-afda-75e7bacd8140",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3ad2f19-28a4-4284-90b2-8c1bfc32c99d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01063951-6147-4d75-9db5-a1803a921ea3",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "253ae584-308d-447f-9a8f-da51e1bb6b4d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d61cd1bc-5746-41e5-ae36-84e3d44e1d9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf103e85-38f2-4405-9fa3-2561d5fdc8d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15820e5e-2eac-4574-9036-022e09051910"
                        }
                      }
                    ]
                  },
                  {
                    "id": "368a4e83-9c53-4760-8e2a-52d8fa59a291",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b469c9e1-2619-4137-987e-aa12e89a34a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92d57b28-46ee-4937-b331-a05dc3892946"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "09cee1f0-43df-44d6-b627-78042db28d6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d236d7fc-b8d7-4379-b16c-da7722ba0147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b571178d-0884-4b11-9b43-6e1a57c2f347",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2c679eb2-6298-42c1-bd9b-2c23fa4b0525",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c1eda909-ef57-4dd2-a103-a5a791bc7221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1ca4c57-7c50-4611-b103-a9fa07c8a114",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "649b4c41-ce51-4fe6-8113-99af92a82010"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d2f9319-70b4-4452-947a-6c3a6ade05d5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5960c7ba-a6d0-45ac-987f-da9ed5ddab20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b2c959ad-b051-4f49-91e0-9d9fe5d58023"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5814e037-280a-4757-93cc-6b1fc47a7c8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "377a3414-bc55-4d2f-83a5-16c6180f841d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abd5fa3f-1f31-419a-82b6-bc29328ea954",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4fb4295-aec0-4e11-9c80-32f6a638c26a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "24ba74e3-8b41-40b7-9c1d-ab48143c31e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3401d3a2-32df-44a5-bcc3-5a421fcc1b87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "075c511b-ae16-4107-8974-90c2f9d00ed4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca4f7fa7-cb00-4657-9b11-cb10e4e8a642",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2e902b4a-36f2-4d09-ace9-0cabe9de0ef0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f4a8588e-7a73-4e87-baf9-2a867a84a729"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a143207e-0551-4abf-aba7-e8fcdbb87b6f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f4d1702-b667-41ab-834d-7acb5c5ec243"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27340a85-e822-487f-a9db-b429313e5ea5",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c2f2ec-9986-4d16-8a6f-8d28eec2c5e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f9273cf-19cb-4915-9070-b15c44042c43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c288c5b5-7a8a-4e45-9ce0-ac147867906d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "95b31c8f-36b6-405e-ad70-4f843685eed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "682daa83-9a5a-4f70-ab50-d5a110b3743e",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa67b9ce-082c-4279-9f8c-ceae236c9155",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4ba99032-3e08-4dde-b80a-55e8b7812082"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4386550-926d-49e6-a561-0ca3716e257f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bfc694c-0c2e-464f-9122-c73bd6b6c2e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "504c5ded-e446-4157-960a-18f0160745f8",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfc40088-ecd5-4dab-a431-06d29c3d3be5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfed2939-9d89-4c50-b097-72b7b96cf864"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db6568e1-d616-4b38-a89e-95f31904679d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8a5cd801-7fc1-4b37-a872-4b9e91115e08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccd26127-6701-4d6d-8275-c5937010a314",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "679a8ff2-704a-43f1-b236-bd58a0fa5814",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee9a9b78-00bd-4abd-95e5-2aa21465b16c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb20daea-ebcb-4e8a-ad9d-394d06ea343d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dd6f80d-401d-459f-ab7c-98a9cfdcf727"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2906ba88-1129-4e2f-a3da-a77d0f5176c8",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b2ceb271-3df1-4a12-9378-831e542654ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ae29b90-49a2-4480-8d5c-5f37a13be851"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a6556a6-424e-4975-9844-280f066eeff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b35d0f7e-a0c0-41c8-b237-6fa823b31b1a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30421aca-2cdb-405b-8696-a434f07ee5d8",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e76857f-a0ea-4e76-aa60-fe8d95e0366c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3f592ade-5e3e-4b71-982d-1cec499f5f8a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "44a97c40-7894-4c50-8227-c3dd88a8dd4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "befba35e-17fc-4de3-b1a4-1fbd17735fa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2af4731c-c597-4575-81e0-3b37932b21bd",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f4ee311-0ada-44f2-bd09-4a4662a2c3bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "43d4278a-a778-4b89-a218-c019de0a1158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb2946b-2451-455d-b842-7321223fa14a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2f40a4b-4425-4789-9d21-b2f9d9e7d8b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e230789-e36e-4120-acf3-fe3f9ff10012",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6031bcd-af4b-4885-b7ea-c5dca9094ef9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04efedbe-d2a8-4963-a04e-f8abedb40684"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d273bbce-e197-4386-92c4-7996a0c0c041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "801ab0a1-a293-4cba-acb4-570b0fd9719d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31d7fd85-4b09-472a-a771-a47093083b32",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c715b6f-2bdc-4139-a768-910c656c2296",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83eea973-2456-4ffe-93e7-b63d788a9324"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d613b24d-209b-4143-953b-43f995fd3df6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50c56535-2f91-4f13-9587-fcdc62a09469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613685dd-d7f1-4017-a953-47960fca8b42",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d96899d-13f1-4143-aec8-48dc93f64c76",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "96a0f614-e46b-4654-b19b-fb3bae162656"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdfdad7f-063a-4092-a327-6921ab25688e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab89a6fc-b32a-46d0-bcce-7c5df7088db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90fb5892-c314-4901-b813-f729615e9058",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d33fe7d3-6f65-4373-b374-0daf020fc886",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "164dc60a-485d-40f3-97bb-b773e77d9cc6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e7abe0-c4f8-4bb6-820a-85e2f7ed1038",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2af0f34e-1af2-4bb3-bc1f-b1b207a249dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecea1ad6-032c-46a0-acad-233775166711",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a6466f6-14a9-4fa2-9eb7-b712abb9177b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aabb0f93-7e8c-4cca-8663-0a481360ba5d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1785d3d1-6ce9-4bae-a22b-d994bbf5ddc3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "43c731f3-a1c9-4ea9-9555-1b3d6f8ff945"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a08ca93-c4d4-4805-937d-029fbe1b885f",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02ad59c8-97f8-478e-bb68-b789d15258c4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dd0e547a-6e6a-4071-b1d1-26fb2ebdc154"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "527312ee-8f46-4eff-9239-99855b3d1bdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b0d364f-d22d-4f6d-8f49-bd925c214943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af4d8a0a-79ad-4841-80e2-adf0c22a57da",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2c3a338-522a-4c2b-91c4-69253db17441",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "89e4a245-ee79-45e8-8681-a38102af204c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d234444-b2ec-4fed-ac3b-911c20fde54f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "21e5122c-a807-4935-91eb-279b550650f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df1d7aa4-eea9-4bf1-a1fe-f345422bb7b2",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "124e527c-faf5-43da-8d5e-44a546473897",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd268217-7a61-4938-8a5a-02b82dd8f9d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a4c67e6-a541-49dc-9f46-ac7dd079830a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca702327-2e24-403a-9656-3a0b24f49dc9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1b8150f-c29a-4773-a6ff-949e8a4e2563",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e64dea3e-7442-4357-849c-39e5407f1fce",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8ba9165a-2189-4325-895b-e979635a6eb9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6479f11-c3a3-4760-b5c7-ee389bb860fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75a5f333-7895-407c-bb13-589926713aae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34156fdc-a386-4b2c-974b-7ff94d2b41b8",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0799cfc-ccf3-4d91-a9d3-367b41d3555b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7dd3436e-8a32-4e2c-b768-c06aad7ed95e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "87aa5b4c-1d29-4935-8a09-669765e11007",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46e279ea-92ef-46ec-9aa0-a4ef769e2e30"
                        }
                      }
                    ]
                  },
                  {
                    "id": "179c30cd-0783-4526-99c6-259d4da7edc8",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dd067cd-d962-4eac-89b0-d3c1bc6d7627",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "40732640-61d3-4ff4-934b-3205d664ae19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f8cdd2d-5bdc-462b-a143-3788cd19752d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8aa2a9e-dee8-4e4a-b959-71a50dc5c4d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88ded195-1bb9-478d-a021-f5e09b4bcd58",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0cfcb88-0e67-4864-9773-7e7e2fe1eb7a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e9b0660-ee27-4e7b-a6f1-2f21b26023b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "48fd94c2-a4a7-4b12-8dd2-f26aaaa4291a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d78cab32-e2ed-40f1-a791-1f7d48bf6a0e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "286d84b8-4053-46c1-9d36-f6281ae32121",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ab44c9d-a2c4-41d3-b462-b99d55166028",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92408fd8-d101-4b00-a0d3-e91a7c70b766"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2338c2c8-1e58-48c6-907f-2117ad602f16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71cf057f-a223-43cd-af21-846ce9891ec2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51502941-7d6b-4554-a3b1-5caba9dd3634",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c591d5ee-01a2-4e6a-adf8-2f9396cef5d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6d86997-636d-4fc7-ba92-c7687272fc72"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37869b81-51ad-4b8c-9163-901f07cdf374",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e5636d1-c151-48d1-ab3b-a7b629c17d34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a14fb459-8ea9-424a-bb65-92be22212149",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c8513d-635c-424b-b20b-e41beb93bfa8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7293192-ef83-4d53-9c47-8575d70a613c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51c81bc2-52f5-4a69-b24b-f7f62de3bd40",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28ad2957-cad6-4905-8c2a-e94dcdbbc28e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0218ce1-ebc8-4fc2-9727-d62f47f3ca9c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6127e88-bde1-4e7e-a6c3-1c5a901cf2b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd40f350-9b8f-4163-b50b-d7b468299860"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7facce00-4d5d-44b5-8122-f72f31629504",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2b98172-02ad-44e2-9dfe-0ac72ee95e86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aea92aa1-ce4e-484b-bb6b-692aa92175af",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c433472-162f-40a5-a55d-aa210e0fc9a6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7d7e689-5205-4efc-9da4-42dde6efb2d5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ab54e1f-d788-4115-a69e-fc6f4a98f100",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "78275d3e-3d6f-42e6-9fa8-994b952013b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1e1a698-cf3a-43b0-b4dd-b013f74856e5",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b78894d8-2280-48f0-a111-e1a920b969f3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36512e24-b588-4685-94bc-353954efb5c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05c93460-f2f5-43e0-865d-b936ca2aef12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "666118fd-f4ff-481e-89de-c58b5844ddd2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faee5b93-4d3e-4482-b696-745686d60ec6",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57993521-2a79-48c8-9cf8-20273f7f35ad",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6848deaa-2eee-4aca-a19a-47ee1326a8aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5574283-8387-434a-81d9-696ef44a3700",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "364c8e53-c745-4ee7-ac03-ba0726f4b22e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "775c101b-a579-4141-b86a-6441b622707e",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b236f42f-57ce-4312-b3b7-27b6fa7686bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "003cd26f-4fc3-41d7-b187-55f61fd774a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e820cc-57d3-4c60-ac83-99e6c6873a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd72b12d-1335-4d45-bab9-87c377195d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "161027c5-eb05-4897-a595-a81a71bce725",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "306870a5-770a-4ad6-8ae8-458bac1f56d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83cbe25f-0bce-400a-b3ec-cc4c9b5f53b5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c15d48d-6a59-4769-a2ed-2e9d150746b7",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90045256-05da-4168-a269-c56cf1a2f2c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1884d9b8-bbc1-4807-b3ad-9a519fd3cdf5",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55fd5606-ca86-46a8-ad51-26784f33df02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57f4532a-96f4-48a6-b1c0-90b75469ae70"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "631f0ba0-d08a-4edc-bfcc-00e9ddc487a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de99f26b-e491-4889-998e-6448b3baa935"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "399e9026-fef7-4c59-b1f7-73ec04a4f067",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b911d3e9-7590-41d2-8935-575b1791b6af"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "4505a430-b02f-488b-b3e1-ea735936948e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "4a54dae9-2b43-4e76-97e3-1c1b1ed1dd92"
                    }
                  }
                ]
              },
              {
                "id": "475c219d-9169-499f-8a24-4af63d796dcb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ec4f58e6-518f-458e-9ed3-ccdadec122a5",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a0af32e-3d22-4f16-a8b5-1dfe9e1cc67a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "4d92ae33-b8c1-4498-b0e1-c61f77c05f4a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "64722314-8784-4074-a12a-9d663c04cca1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3144575-35d2-42f6-8cd6-139e82496859"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65527085-5578-4590-8334-189dd9b2fc01",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe73812-1f05-4251-9a52-52b40f8a16b0",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c3ada056-869b-4f76-856d-d644f2f317ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9a729b0-c84f-4063-962a-764fdd8cb239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3dad3b8-ba92-46c0-a04b-080870ba8268"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0f47680-cd93-48ca-850d-43ce9538a821",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fbae72fb-bf79-40e8-bb19-43b570bf586f"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b34c8dd2-2083-4f5a-b905-24dbea0c2951",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d6b7d70c-ac73-4a85-9036-7d574fbc3abc"
                    }
                  }
                ]
              },
              {
                "id": "85ec120e-cceb-488d-9c25-f9ac7056b870",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "71b80a4c-af25-421c-a915-0fac466387b1",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "135efde8-7145-4239-910b-3f7a8e4a54cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "5ad003a1-5832-4bae-8751-bb84e97d2fef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3638e0e-0df5-4ec2-a444-2b0bacde0fc5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "539c908a-8a5e-4d86-abab-9b9552992a6c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e48daeda-c52e-430c-86de-19a92a7085cb",
            "name": "Positive Testing",
            "item": [
              {
                "id": "6f6f5db9-01c5-40fd-9502-85d2cd52b66d",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "24c707ed-c80a-4009-af90-0720e12ba7e2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "cf06bf9d-47a2-4869-b08a-fc5a9ccf480b"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "520bf8ad-c90e-4417-ab85-a06455f14909",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f63a104d-67ef-43fc-887e-51b8f9f3d56d"
                    }
                  }
                ]
              },
              {
                "id": "29b0fdd4-0b1d-4ef9-9818-d1a22d57e0ae",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "192cef44-6e67-49ac-8988-198918c2a89f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "2b6a80ab-e0d5-4b9e-b5f4-d17b46af3df2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b4b1bbd6-2428-4858-800c-531f850630fd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6801269a-6b7d-4c6a-905d-8c10f7796d05"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5cfba053-0825-499e-be63-c0f9532c49b3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "45a98095-0e16-40d8-b16e-74841f812d9c"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ca905098-09f3-4346-ac98-b5c5b7a8665c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b5379282-afb8-457f-b471-fef755352faf"
            }
          }
        ]
      },
      {
        "id": "571f4462-aa4a-44c1-ab0c-3d9898a54d0c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "df4c1f20-702c-471f-bc6b-749bc3c8f98f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "289b03fe-7b38-4e16-9f88-dd6f1915a896",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "abfa2599-9cb8-423b-bdbb-4003ea59b9e6",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00413b7a-f958-4702-a65d-55d9d47dc06b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "60882ebd-493e-4787-9a99-651fc76adcc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c1cc8df-03d1-4e4d-bc21-849a1a939d44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "723fb836-0730-4f0f-bdb3-520865357527"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b34fd4b6-211a-44f3-927d-cf6471a0419e",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92d88cb-3b02-425d-acd5-ba96945e1768",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a16bad49-f059-406f-922f-e08e25c18635"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2be6da38-c87e-41d5-a63a-5e626c1431b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "07cd6490-bd0c-41f1-8417-7af108afcedc"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "698f320a-d857-4ceb-a4db-9c36d38cfc99",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a409274-08a5-4c84-b1a2-918fd6d1ed97"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "52e8fe6f-3687-4a12-ab94-dc3400295a01",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b707458a-30dc-4d96-bf6b-26c60deb3837"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "687a4d58-cf36-4829-8aa6-575d50ee8697",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "6056431e-afac-42bb-b130-89e1062b3c85"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a0bd8bae-72af-45ac-a77a-d1ed1543e534",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "70ae79e9-76c9-4462-a5b0-ef9829cd003f"
            }
          }
        ]
      },
      {
        "id": "7d2f1233-8e7d-46d1-8dd6-07cf06e7cb73",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6557e4d7-40ca-451f-89b4-55b8c2276a33",
            "name": "Negative Testing",
            "item": [
              {
                "id": "af8f6d7d-af58-4867-8e32-b131ea529e57",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1e8d9a9a-e0c3-46fe-99ad-53ce8d33fd5e",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3183c38a-664b-48f6-b8be-7e813d8f5fb9",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "9325621f-e0f1-4edd-a98b-d7a82a429d58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "561966ab-e86d-4660-a6f3-5086c29211bd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a3ca1f21-0e80-42d3-99f7-bc9c684ca9ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e5563a2-388c-46cf-bf87-2600f2f067a9",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccf35cbc-194a-49b7-816a-a2437f47ed03",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7eabc51b-f5f1-4368-8292-977dc396710a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8aab92a1-1aef-4c1d-a76e-62b5e6f17fa3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "878604fc-5a33-457c-929f-7f6486be44f8"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48685c1f-7138-448d-a516-2bd2e47ae6a3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2d5a0ce3-7727-43a8-8a0e-0c5cb872b248"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "488c31a2-a819-4d1d-9cd6-3acb817f0df8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "79b2f857-9375-4b8c-962e-ba209bd65913"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c5496881-7e81-403a-bdf1-c0727328b86a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "959f38ae-1227-427f-b4ed-83db0d6d69bc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "35bb6457-12aa-4e0b-99f9-a758ab61b257",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "736d5d33-cbcc-40a1-8f0c-eae78e96424b"
            }
          }
        ]
      },
      {
        "id": "6902c514-3b98-45af-8fa7-a9d1d7e6f5b2",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "aaf4c1e9-8a33-4771-801e-8e8975c98229",
            "name": "Negative Testing",
            "item": [
              {
                "id": "cb3c30a1-5079-4b98-9d68-aba33125625b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "12635579-dfe7-4ed1-835d-8ac9d5950161",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4a48e67-7236-4dcf-b5ef-19dd6fd99a36",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "0b51d35b-36c2-47f9-b3d7-4ccf4aaf2b60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "43948967-b87d-48ed-a6ab-28bbf02cc643",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "631d01da-bcd3-45f6-b562-b0f18ed68bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2540832-d2b1-429c-adb9-74b0a90ebd21",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d786a0f-2024-42f7-b348-bdb4e8fd0ae2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "b7c3b3e6-5977-44d1-956f-033da2c670b1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b9824e9-c2da-408b-9ccc-55020b65cd51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3cba3bd7-b191-406e-8b91-37d0649a21f6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "efba49d3-254f-4caf-9565-053f23710665",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b62511bf-bc25-4f22-9447-6efa0cfeed5e"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5614dc88-ee3b-4d43-9f1f-94863d03d389",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54768afb-563c-40d6-875c-beb43abddb34"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "05e4eb6e-6206-427f-b7ee-a4f27f27398f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "030eb3ad-47e0-4b4f-845e-9821ad9e2cfa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "61bc15ff-f45d-4b40-b7e9-3f0c997241b5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d0d4feff-5352-499f-8c72-35c48f1f2240"
            }
          }
        ]
      },
      {
        "id": "fc09d3ca-7b8b-4954-a506-8dc5bd4ba2b9",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fd93f53e-a5bf-4882-94d5-fc5077c602a4",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "56d3f569-e633-4331-8bfd-acb8e5ad694a",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "36a21c9c-ede3-4db9-bb68-b9d325a87e63",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "be743b36-6182-4a70-8dde-1210e98f59d5",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "07dff289-b360-4b06-ac8d-140176e6e610",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 6
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 405,
        "pending": 0,
        "failed": 6
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 432
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 6
      }
    },
    "timings": {
      "responseAverage": 674.2818252376633,
      "responseMin": 8,
      "responseMax": 12739,
      "responseSd": 1963.2471854417638,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1674607117850,
      "completed": 1674607400464
    },
    "executions": [
      {
        "id": "4f6130de-5563-468e-b527-8d443c4bd0f0",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "1d382c63-2e12-41f2-a279-ce4b63f8bdc2",
          "httpRequestId": "dda1cb39-2ec5-4873-b5d1-1758539afa60"
        },
        "item": {
          "id": "4f6130de-5563-468e-b527-8d443c4bd0f0",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "8013e68e-ebc2-49cb-a607-432bbf2c7955",
          "status": "OK",
          "code": 200,
          "responseTime": 67,
          "responseSize": 0
        }
      },
      {
        "id": "c42cf261-b1b4-459e-8b02-b11542b3162a",
        "cursor": {
          "ref": "4ce76201-f870-4c9d-b18e-d2f652f7445d",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "1aa0579f-2278-4e5f-b73e-772b24f15dd0"
        },
        "item": {
          "id": "c42cf261-b1b4-459e-8b02-b11542b3162a",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "6667a316-5f83-4ed5-b072-5e2bbc0bf367",
          "status": "OK",
          "code": 200,
          "responseTime": 8,
          "responseSize": 0
        }
      },
      {
        "id": "2672c5f1-cfc0-4ffc-bea9-5205c5c3aadf",
        "cursor": {
          "ref": "2271eee3-0ac3-4ac1-9e5e-887ed91a5da4",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "6dc1a15e-9526-49c0-8f74-67b637226c95"
        },
        "item": {
          "id": "2672c5f1-cfc0-4ffc-bea9-5205c5c3aadf",
          "name": "did_json"
        },
        "response": {
          "id": "e402c69e-14a5-47fd-8db9-690d5690f4d8",
          "status": "OK",
          "code": 200,
          "responseTime": 332,
          "responseSize": 1012
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a58bd9b-f713-4cfd-af92-ddc49032a24e",
        "cursor": {
          "ref": "89433a97-b365-4120-b59e-8f32e0cd88cd",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c0a360d4-23fe-48c4-acff-87e50b86502d"
        },
        "item": {
          "id": "2a58bd9b-f713-4cfd-af92-ddc49032a24e",
          "name": "did:invalid"
        },
        "response": {
          "id": "a5579c8c-aabc-4b89-ba7a-434da5810a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a58bd9b-f713-4cfd-af92-ddc49032a24e",
        "cursor": {
          "ref": "89433a97-b365-4120-b59e-8f32e0cd88cd",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c0a360d4-23fe-48c4-acff-87e50b86502d"
        },
        "item": {
          "id": "2a58bd9b-f713-4cfd-af92-ddc49032a24e",
          "name": "did:invalid"
        },
        "response": {
          "id": "a5579c8c-aabc-4b89-ba7a-434da5810a47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 38
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0913c463-8478-457f-bba3-52d5efd9292b",
        "cursor": {
          "ref": "a12cfec0-7f41-4c4a-a3b6-c5f8bebbc335",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "8a47ee4c-6b4a-4aca-ab3b-90e32569dcb3"
        },
        "item": {
          "id": "0913c463-8478-457f-bba3-52d5efd9292b",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "51d26588-d17c-4cfe-bf38-df89026b0b1e",
          "status": "Not Found",
          "code": 404,
          "responseTime": 201,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "329a14b3-9dec-4097-aa9b-0d3bc2d82914",
        "cursor": {
          "ref": "6c2cc666-a789-44ab-b835-05b84f401cfb",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "72137acd-f909-44c2-93c3-b501a9e78115"
        },
        "item": {
          "id": "329a14b3-9dec-4097-aa9b-0d3bc2d82914",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "41d4d36e-d774-4799-a424-fc68eba2865c",
          "status": "Not Found",
          "code": 404,
          "responseTime": 93,
          "responseSize": 66
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1abf9883-56e4-4592-b478-629a52fa325d",
        "cursor": {
          "ref": "806546c4-12be-4611-b77d-0fde072fac71",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "5cebbf8e-6466-4fb7-9074-176aa93c71c8"
        },
        "item": {
          "id": "1abf9883-56e4-4592-b478-629a52fa325d",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "691923dd-156a-44ed-b332-f3fe4dbbedf5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb4c722e-4b9c-4c3b-bd53-3e9c7ff894ff",
        "cursor": {
          "ref": "2f2e27a9-d2a5-4f86-9ceb-3dfb56ed36e4",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "17134db8-0a3e-4247-99cc-0002fd9bfa50"
        },
        "item": {
          "id": "bb4c722e-4b9c-4c3b-bd53-3e9c7ff894ff",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1da9caf5-d2da-432a-ad82-83969c5a8ef3",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "bb4c722e-4b9c-4c3b-bd53-3e9c7ff894ff",
        "cursor": {
          "ref": "2f2e27a9-d2a5-4f86-9ceb-3dfb56ed36e4",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "17134db8-0a3e-4247-99cc-0002fd9bfa50"
        },
        "item": {
          "id": "bb4c722e-4b9c-4c3b-bd53-3e9c7ff894ff",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "1da9caf5-d2da-432a-ad82-83969c5a8ef3",
          "status": "OK",
          "code": 200,
          "responseTime": 112,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 200",
              "stack": "AssertionError: expected response to have status code 403 but got 200\n   at Object.eval sandbox-script.js:1:8)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:8)"
            }
          }
        ]
      },
      {
        "id": "23a9ddd5-dff4-4424-b616-1fc7582fb22e",
        "cursor": {
          "ref": "808f2e70-3caa-4356-a15a-ff4c66bb1e54",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "a794f8f0-79ff-4681-bd8f-602ccf37953f"
        },
        "item": {
          "id": "23a9ddd5-dff4-4424-b616-1fc7582fb22e",
          "name": "identifiers"
        },
        "response": {
          "id": "d68fa696-8763-4c59-92bb-542a0c4505bf",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 1028
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72dc18a5-5b34-4dab-b9f7-b33db0086d25",
        "cursor": {
          "ref": "0bdda097-b059-41cb-b8e9-32fbe4288be8",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b35ad4c5-8ddd-4f46-8111-69bc7a7db142"
        },
        "item": {
          "id": "72dc18a5-5b34-4dab-b9f7-b33db0086d25",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "895b696e-0f16-4fa9-b3f3-b594a961ec1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "72dc18a5-5b34-4dab-b9f7-b33db0086d25",
        "cursor": {
          "ref": "0bdda097-b059-41cb-b8e9-32fbe4288be8",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "b35ad4c5-8ddd-4f46-8111-69bc7a7db142"
        },
        "item": {
          "id": "72dc18a5-5b34-4dab-b9f7-b33db0086d25",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "895b696e-0f16-4fa9-b3f3-b594a961ec1e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "483cce7f-cb15-444a-89f3-5e5132ac36e2",
        "cursor": {
          "ref": "ac43e108-9873-43e6-a89d-4f1adcc1349a",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "038639ed-67a1-4f01-b71c-3de108299392"
        },
        "item": {
          "id": "483cce7f-cb15-444a-89f3-5e5132ac36e2",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "c1461324-8c36-4237-82d1-4a6a3559497d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "26f75661-cc1a-432a-8225-aee5f7cd5f6f",
        "cursor": {
          "ref": "1e53a98f-d7b1-4a70-9159-17feebf14380",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "8657fd5c-5e9c-4ccd-bed9-6ac57278eec5"
        },
        "item": {
          "id": "26f75661-cc1a-432a-8225-aee5f7cd5f6f",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "62ca7bb8-cdae-46e5-94ab-ecbd09dcc819",
          "status": "Created",
          "code": 201,
          "responseTime": 149,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:12)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "34eaa46b-b660-4da4-ad5f-51d6c856bf5e",
        "cursor": {
          "ref": "85e47fde-94d5-4bdd-8340-6cb941e0ed31",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "e9e0a112-c850-434f-81e5-d1cb4e1283bf"
        },
        "item": {
          "id": "34eaa46b-b660-4da4-ad5f-51d6c856bf5e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "a1509d14-9c18-4e3f-9bb9-9e9e42117e7a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "930fe79a-a64a-454f-a944-eaa53bb04d43",
        "cursor": {
          "ref": "9f1d68bd-d090-408e-a648-fbbb058c3f95",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "71973a8d-64db-4734-b5ce-16379f589901"
        },
        "item": {
          "id": "930fe79a-a64a-454f-a944-eaa53bb04d43",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "fe2eb9e1-0169-4500-b0af-f15bfe15e4f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "8795fa09-233e-4d9e-8117-32b48262ae41",
        "cursor": {
          "ref": "a83bd310-3792-4e64-b6e2-892f967df1d5",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "001dd87b-d62c-4abc-a17f-ca98fffca908"
        },
        "item": {
          "id": "8795fa09-233e-4d9e-8117-32b48262ae41",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "919a7881-a66d-4a79-9fae-b36877690b94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "e8f0daf8-0863-47d1-902e-2fff86b25f3b",
        "cursor": {
          "ref": "d2d331b6-2a64-4c75-90bc-708c81adceee",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "f83e8f49-0dcd-4872-b970-77ac8106b83c"
        },
        "item": {
          "id": "e8f0daf8-0863-47d1-902e-2fff86b25f3b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "ac982fde-e7f5-40d0-8eaa-b2e8267e61a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "8ba837d2-1bfc-4766-85e5-809f93824d20",
        "cursor": {
          "ref": "e79b2581-e4d1-4c4d-aeb5-708225758d98",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "f77af851-5c61-4745-a591-f7cd3706ae02"
        },
        "item": {
          "id": "8ba837d2-1bfc-4766-85e5-809f93824d20",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "b6f3598e-5a40-4e71-b7c5-a3ad34995bb0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "43da6deb-feaf-4dd6-a9ce-6080c6aa4c5f",
        "cursor": {
          "ref": "9f1913e5-3344-4d82-a743-685c1b1fb382",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "3a16847c-c099-4a28-95cd-0b92e673fd5a"
        },
        "item": {
          "id": "43da6deb-feaf-4dd6-a9ce-6080c6aa4c5f",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "500d1130-0531-4506-a0d9-37d6ee704102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "27d22be8-63cb-4623-bcda-bd760b2b129e",
        "cursor": {
          "ref": "7f7f1ae9-5f46-4feb-8743-83977b389c0f",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "e21b0f5e-adf8-4b38-8fe7-f9cf733404eb"
        },
        "item": {
          "id": "27d22be8-63cb-4623-bcda-bd760b2b129e",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "e6c12588-0933-47ea-9ecd-749d8508ad2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "a2d1a66d-3a99-4ce3-9dda-95b83b5aeae0",
        "cursor": {
          "ref": "c44b268e-3210-487d-8f45-1e086c128984",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "cf9e5350-1732-41cc-8a73-06c78a388fa0"
        },
        "item": {
          "id": "a2d1a66d-3a99-4ce3-9dda-95b83b5aeae0",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "1c4be8eb-6df3-42ba-8f7d-7f4f95ee23b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "c63c494a-4da0-4f4f-aed9-e65c7b89a7da",
        "cursor": {
          "ref": "0556eee7-d314-43d3-8289-34206c578c22",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "aea955fc-95ba-46ad-8311-b40ef01667da"
        },
        "item": {
          "id": "c63c494a-4da0-4f4f-aed9-e65c7b89a7da",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "9d5d9be7-7a7b-4e08-a29c-7c16fa853420",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "080134ff-db48-43d5-a3e5-839391127d38",
        "cursor": {
          "ref": "05713c46-eb8d-456d-9ed4-b2271294d4c9",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d45b63be-078d-440c-8c3f-e8734e1b6d31"
        },
        "item": {
          "id": "080134ff-db48-43d5-a3e5-839391127d38",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "04b4208d-5d81-4e46-857f-81b8da662413",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "b0bff06e-7c69-44e0-b981-e29ec968879a",
        "cursor": {
          "ref": "9dad766c-b85e-40f7-9c0c-95d794776669",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "fe3b161b-1c4b-4ead-adbd-fe1d3379366f"
        },
        "item": {
          "id": "b0bff06e-7c69-44e0-b981-e29ec968879a",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "2c23413a-9201-4049-a057-6c18bc142d8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "8addc4c0-123f-4faf-8519-d90fc2a723f4",
        "cursor": {
          "ref": "060ce14c-63eb-42c2-8de5-a9de47cb1c1b",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f121ecb0-37e7-49ae-8e04-aa47ea7f8264"
        },
        "item": {
          "id": "8addc4c0-123f-4faf-8519-d90fc2a723f4",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "3430cabb-2d0a-4a1d-9945-0eae806bd647",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "c98d6bfc-6665-4826-99bf-aeec1b30d583",
        "cursor": {
          "ref": "65a2721b-90a9-470b-862f-dc01f22c3623",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9f65c359-8cdc-4448-95d1-7a138bef971d"
        },
        "item": {
          "id": "c98d6bfc-6665-4826-99bf-aeec1b30d583",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2c3c945d-2ecd-4b4e-a706-2ae8d884dfb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "f254801c-9977-47cb-9053-a541ff236048",
        "cursor": {
          "ref": "6b44a482-bdf4-4f9a-9d8e-1490d725d26b",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2a6b93e1-86e0-40fc-bd64-c984d6181044"
        },
        "item": {
          "id": "f254801c-9977-47cb-9053-a541ff236048",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "69b058a3-7170-43ba-98c9-5e6cafdfff4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "f12b27a9-abe7-4dcd-bc67-d83b982b148c",
        "cursor": {
          "ref": "23c7db66-78d8-4b9e-bfe5-5247583e3f2c",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "141e3312-73d1-40bb-92c2-2f51dcd53996"
        },
        "item": {
          "id": "f12b27a9-abe7-4dcd-bc67-d83b982b148c",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "33c0c488-a6e6-48b0-ac9f-5af009fd940f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 109,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "871ac1ad-5324-463a-8364-05a521d6de1a",
        "cursor": {
          "ref": "c92212d7-0ef6-4629-ba8c-6aa0a63e5e99",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d21a6f63-c495-4144-ab56-19c56676fa54"
        },
        "item": {
          "id": "871ac1ad-5324-463a-8364-05a521d6de1a",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "213dc6b5-a0cb-433b-a97a-c9954a15e281",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "63bdd73e-7bf7-4628-94f2-60a86ac571ca",
        "cursor": {
          "ref": "1485fb71-b128-4557-8bf3-04a4c936b08a",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "2020ecfe-12a1-4ed2-ab99-dee120ab3d44"
        },
        "item": {
          "id": "63bdd73e-7bf7-4628-94f2-60a86ac571ca",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "ded3ae69-fee9-4992-a9ee-dd11d28a0753",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "f5067f4c-a81b-4bc3-9d00-e7de312209a0",
        "cursor": {
          "ref": "52df0e83-1c62-4f5c-b1d1-f27c1c49cdc3",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "ad2e257b-6968-4209-a9e4-57ca9c489e7f"
        },
        "item": {
          "id": "f5067f4c-a81b-4bc3-9d00-e7de312209a0",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "4884aed1-2729-465d-b3f7-e7b826225dec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "a35008bc-9fa6-4cd9-ae9f-b2808b17d369",
        "cursor": {
          "ref": "aacc9af8-2918-4b8e-95da-f0a818b7d576",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "ce408b43-1e4a-4da1-8578-9187e9a37173"
        },
        "item": {
          "id": "a35008bc-9fa6-4cd9-ae9f-b2808b17d369",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "844c12c0-91a1-4a36-bc45-39f654bd2c24",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "21fa70ec-c5c5-43ed-a29c-9319881c097d",
        "cursor": {
          "ref": "6d9fe10d-8d7a-4d22-8fa4-0fb5d9ab2468",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "bcbc98f7-68ac-4cbf-a29a-3b9f845020fd"
        },
        "item": {
          "id": "21fa70ec-c5c5-43ed-a29c-9319881c097d",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "e1a947e8-9692-43eb-80c8-be99bd6a3282",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "7b14827d-f6af-4cdc-8563-1838052a440e",
        "cursor": {
          "ref": "2cfdfb94-7fbf-4ca5-945c-e5193fa9bf24",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "a3b3799f-6c91-49b2-a386-b5ef4a9011f8"
        },
        "item": {
          "id": "7b14827d-f6af-4cdc-8563-1838052a440e",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "1db1c18b-089a-413d-8272-632fd547fbe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "4d6c1afb-2e3c-487a-b1ab-27d1343290a9",
        "cursor": {
          "ref": "2d3078ec-de87-405d-a1c9-388bf9bbe386",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "79251641-2c8d-4861-9ebe-3b0dad45512e"
        },
        "item": {
          "id": "4d6c1afb-2e3c-487a-b1ab-27d1343290a9",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "244bd996-13e2-4924-9e71-eabc3c3878b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "ff26125e-02a1-4b41-860c-88eb4b7827b3",
        "cursor": {
          "ref": "2a521631-6e24-4d2f-a284-7f48675209c9",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "b04b0714-046d-4874-809d-28d738e27f9b"
        },
        "item": {
          "id": "ff26125e-02a1-4b41-860c-88eb4b7827b3",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "011d0f12-e285-4447-a6f3-6865df45a003",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "d1d55018-df7d-44a4-b591-e7882ab02bf1",
        "cursor": {
          "ref": "8d432bf0-30c3-414e-af14-349512670ee5",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "8aac833c-cf53-41eb-8fcc-2a92d842b6c7"
        },
        "item": {
          "id": "d1d55018-df7d-44a4-b591-e7882ab02bf1",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "c409c064-5b2e-4f89-91ff-a53e73cc2875",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6637,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "dfe92386-2868-46ba-a9e1-d10c1cfae5cb",
        "cursor": {
          "ref": "81b50b96-dd73-4aaf-aa77-31e1cc8f4610",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4990cb8a-6d89-4343-b4dd-a678a2592cef"
        },
        "item": {
          "id": "dfe92386-2868-46ba-a9e1-d10c1cfae5cb",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c0e12ff9-9f3d-4879-9abd-1f59b9435669",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 7466,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "efcb2b3e-796b-40a6-bcd6-df85e0db9a41",
        "cursor": {
          "ref": "723cae8e-863c-4b3c-8653-b5a87ce83188",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "73b077b2-31d6-41dc-b265-548277b5ee33"
        },
        "item": {
          "id": "efcb2b3e-796b-40a6-bcd6-df85e0db9a41",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "1bc2ea0b-03c5-48f1-8b88-fc037a34f350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5035,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "0841eacc-26f9-478c-b47f-79fbc680221c",
        "cursor": {
          "ref": "92ae9332-cdc6-4be9-a9be-ec41ff0a62f6",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "a5f32668-e598-40b0-82bb-d2b82233a4ad"
        },
        "item": {
          "id": "0841eacc-26f9-478c-b47f-79fbc680221c",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "7de4d27e-ace4-4ef7-b7cc-70d95db4aa47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6929,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "81960e33-9f0c-4a95-842f-eee1ec41b47b",
        "cursor": {
          "ref": "7af1ef49-6c7d-41b1-b217-84e70ec8f2d1",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0cae056a-e287-4660-a987-1f7e7fe5ed04"
        },
        "item": {
          "id": "81960e33-9f0c-4a95-842f-eee1ec41b47b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "b9d80b87-f932-4615-9d08-05b2d998c480",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 4683,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "8c0abe71-bbca-49cd-a1c3-6cec08c29057",
        "cursor": {
          "ref": "cbabb9ac-a9fd-4dbe-ba61-6032b2b76c0b",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "3c9d739c-474f-42f0-87a7-d0c7397ba2b2"
        },
        "item": {
          "id": "8c0abe71-bbca-49cd-a1c3-6cec08c29057",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "79839685-02f8-45f4-a70d-9c5665e86849",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "5664c5fe-f53d-4172-998d-7b7b1ef39323",
        "cursor": {
          "ref": "7767c2ab-d03b-42ee-affe-8a0e7ffa0a82",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "8ecab5c1-f85c-4d49-8345-eb03c8ad7d2c"
        },
        "item": {
          "id": "5664c5fe-f53d-4172-998d-7b7b1ef39323",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "1c41abb5-b8b0-4c4f-8fc1-65580e69bfe4",
          "status": "Created",
          "code": 201,
          "responseTime": 7136,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:42)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "7f63090a-ffc0-4ff5-9e0c-9b65a7836cdc",
        "cursor": {
          "ref": "31dbc7d6-b266-438e-b7a9-6529e66aa03f",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "b06bdf49-abe1-4a06-9112-3363fde3c90a"
        },
        "item": {
          "id": "7f63090a-ffc0-4ff5-9e0c-9b65a7836cdc",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "a3af1fff-e821-4749-902b-878e05da765d",
          "status": "Created",
          "code": 201,
          "responseTime": 4653,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "9e7079b2-9b0b-4100-9cc4-3179471e5517",
        "cursor": {
          "ref": "50f5f2cc-aaa7-497a-adf9-3377aadafc94",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ab524082-e684-45e2-8d4b-33178415615e"
        },
        "item": {
          "id": "9e7079b2-9b0b-4100-9cc4-3179471e5517",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "e19600da-e789-4347-ab60-dd51f7914005",
          "status": "Created",
          "code": 201,
          "responseTime": 6707,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "4865578d-c7ef-4383-9cb6-4797f762b4cc",
        "cursor": {
          "ref": "ac7ec559-3904-47f9-860d-b278f3d90007",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "f5811d6a-f7a5-4440-87f2-dfc19867d399"
        },
        "item": {
          "id": "4865578d-c7ef-4383-9cb6-4797f762b4cc",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "38ba77d7-c717-4945-a1eb-6271a60cee9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "81c5d0f2-400a-4c8c-806d-5f23d1a3c6ab",
        "cursor": {
          "ref": "dbd11237-d1d0-4856-bf59-f5fb2d372105",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "fed8eb87-6a4e-4416-8ab2-70621fffc0e8"
        },
        "item": {
          "id": "81c5d0f2-400a-4c8c-806d-5f23d1a3c6ab",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "b464c5a3-b6e2-4d36-9711-d7666ca55be8",
          "status": "Created",
          "code": 201,
          "responseTime": 4651,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "5353d708-c555-4ae5-918d-5ab8d7cd4ac3",
        "cursor": {
          "ref": "a4eaa4bc-5938-441c-9f1a-6f8b3fe330cc",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "4f62b502-812a-4bd8-bab4-31542753ab95"
        },
        "item": {
          "id": "5353d708-c555-4ae5-918d-5ab8d7cd4ac3",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "b85bf536-b6c1-47af-aaac-590f9bbbebb0",
          "status": "Created",
          "code": 201,
          "responseTime": 7336,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "185abdc8-0ffa-48ba-95db-3d072f3c13b5",
        "cursor": {
          "ref": "555abaa2-6c18-49e7-b271-bd9e94556475",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "89a6a9dd-9e97-48f1-8e4b-95cb95df48ca"
        },
        "item": {
          "id": "185abdc8-0ffa-48ba-95db-3d072f3c13b5",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "c99d375b-0820-4ad3-b042-b4e8c6682c38",
          "status": "Created",
          "code": 201,
          "responseTime": 4836,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "8e067dc3-19ee-492f-a536-57128c44b595",
        "cursor": {
          "ref": "634f3648-cef2-447c-871b-65f362b8fb07",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "92c6c673-e1c0-486b-b73f-39bc8a37b47f"
        },
        "item": {
          "id": "8e067dc3-19ee-492f-a536-57128c44b595",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "92ef6a0c-12da-4101-a2cd-28f0c65532d8",
          "status": "Created",
          "code": 201,
          "responseTime": 6696,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "348beb47-9442-4194-8f33-0ec51c476c29",
        "cursor": {
          "ref": "d8780a90-dd68-4a5b-b3d7-8675b3890ff6",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "762c9ea0-999a-4196-8cc7-25c912ce8ca9"
        },
        "item": {
          "id": "348beb47-9442-4194-8f33-0ec51c476c29",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "377f6edf-3796-4350-a1e3-2b23406ef919",
          "status": "Created",
          "code": 201,
          "responseTime": 4965,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "a52becfc-c375-4d89-934c-76b1e684e5e3",
        "cursor": {
          "ref": "f5b5e5ce-c4c8-408c-8e34-921ffd8d47b6",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "2aa3672d-c672-4459-a665-d1766c952600"
        },
        "item": {
          "id": "a52becfc-c375-4d89-934c-76b1e684e5e3",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "cc88c76d-eadd-46cb-9660-2dba453b0bbe",
          "status": "Created",
          "code": 201,
          "responseTime": 6491,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "0e5a0796-4af7-45f5-85ec-3581e7db1f46",
        "cursor": {
          "ref": "1ab09d9e-01f0-459a-a54e-f9417f39cf71",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "0e2caeba-61c6-4120-b289-452c43199c69"
        },
        "item": {
          "id": "0e5a0796-4af7-45f5-85ec-3581e7db1f46",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "4a78d0e4-a6a3-43d8-9110-6b9ca50daec6",
          "status": "Created",
          "code": 201,
          "responseTime": 5425,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:52)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "8e5d0f20-7ebe-43a2-ab4d-321bde0ba436",
        "cursor": {
          "ref": "d6576579-2740-494e-9347-7475bbc8fdd8",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "321001fd-ec87-4707-bf16-1eef345f460d"
        },
        "item": {
          "id": "8e5d0f20-7ebe-43a2-ab4d-321bde0ba436",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "a31c7241-bb56-44d3-a455-19ad4f0cfdf2",
          "status": "Created",
          "code": 201,
          "responseTime": 6039,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:53)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "5b32658e-f21a-4b0d-a5aa-af2100597a9a",
        "cursor": {
          "ref": "5750fcee-8b88-43dd-8998-02ad5acef203",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "7b36cdea-cd77-4f64-9dac-f507e40e0a44"
        },
        "item": {
          "id": "5b32658e-f21a-4b0d-a5aa-af2100597a9a",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "e3e8e747-041e-48ab-9b88-8178c8db306c",
          "status": "Created",
          "code": 201,
          "responseTime": 5529,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "90378b2a-909b-42c6-82c4-bd77a51acf8a",
        "cursor": {
          "ref": "a363498a-a2bf-45e5-9917-03e9ac96c137",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "beb03237-b957-4f2e-a295-26b4e5d577b8"
        },
        "item": {
          "id": "90378b2a-909b-42c6-82c4-bd77a51acf8a",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "a9ab9086-b0d2-47a1-b2d1-4238979c5b34",
          "status": "Created",
          "code": 201,
          "responseTime": 5896,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:55)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "c3e4883f-5cf6-441a-84e2-e8a586bcccdc",
        "cursor": {
          "ref": "56dcf6c0-5c07-4d40-9ade-b5f84ad9e8bc",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "727b75f9-752a-4298-9599-1a60c4130173"
        },
        "item": {
          "id": "c3e4883f-5cf6-441a-84e2-e8a586bcccdc",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "b7e260f5-b4d7-4172-8d57-d7a6501b6dc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 315,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "c619084f-a8e3-41ef-b3cd-0050eda82eb3",
        "cursor": {
          "ref": "ced37db9-381b-4593-b9c2-a6748695e724",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "7828de1a-8441-48fa-9e00-80a92a4c287b"
        },
        "item": {
          "id": "c619084f-a8e3-41ef-b3cd-0050eda82eb3",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "a1f31116-b872-4704-9dcc-06876f45e010",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 337,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "9c5a5636-d8aa-44a7-a18c-a4f1931656a3",
        "cursor": {
          "ref": "59e5392d-fdfd-4d4c-80bf-8639b1ee5920",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "23d59555-f912-403f-bbb9-a7f14e8ed45d"
        },
        "item": {
          "id": "9c5a5636-d8aa-44a7-a18c-a4f1931656a3",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "a41df17a-91a4-4309-ac7c-1b8a0b0915bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "82fec982-d52e-4006-94a3-65c2a35a1640",
        "cursor": {
          "ref": "4acc3914-30bc-4873-bb64-fd7a716c8693",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "063dea0e-2a20-4d1e-a12d-bd8478fbf88f"
        },
        "item": {
          "id": "82fec982-d52e-4006-94a3-65c2a35a1640",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "5999bab2-5fc4-4e67-b567-4c51a344ce0f",
          "status": "Created",
          "code": 201,
          "responseTime": 4941,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:59)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "67904799-2c20-4f43-80a3-0e54db6adf39",
        "cursor": {
          "ref": "76d6af38-1ab2-4231-844c-408a7553c342",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "63abe1dd-693e-411d-8d15-b6d8783be267"
        },
        "item": {
          "id": "67904799-2c20-4f43-80a3-0e54db6adf39",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "38d20ee8-d127-495b-b280-0b193048e20e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "3b82e878-8780-445d-bd53-681416a89ea5",
        "cursor": {
          "ref": "4d8d0cc0-5d60-4cee-963f-813bc7658b1f",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7f0e9533-d726-4887-91c2-648f54c39c14"
        },
        "item": {
          "id": "3b82e878-8780-445d-bd53-681416a89ea5",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "9199a081-580e-45da-bb93-7c830fb27ac4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "3085f268-02b2-4db3-995e-313a121c99ad",
        "cursor": {
          "ref": "df902834-0f0f-43a7-9bdc-954321224e7e",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "c6a7a61b-0991-4d27-859a-22c67d4bae5f"
        },
        "item": {
          "id": "3085f268-02b2-4db3-995e-313a121c99ad",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "941dfa8e-43f2-4893-b5d7-b0d4c2754af5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "893cb550-96df-4936-9768-60f475736cd0",
        "cursor": {
          "ref": "b1c5b55d-ec6d-425b-9240-b14f378ac940",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b89dfe8e-42d9-4bef-a850-36a7de4f1064"
        },
        "item": {
          "id": "893cb550-96df-4936-9768-60f475736cd0",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "b3c0a66e-1b96-4214-858f-07363fad90dc",
          "status": "Created",
          "code": 201,
          "responseTime": 6411,
          "responseSize": 709
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:63)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "15c37e85-46d1-4039-bfaf-041515acf87d",
        "cursor": {
          "ref": "32517a6b-05aa-40a0-a10b-249c7ce4a365",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "17b19e94-1c20-4cbe-b5e3-c4532c10e2f7"
        },
        "item": {
          "id": "15c37e85-46d1-4039-bfaf-041515acf87d",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "e178a757-deda-4d97-9f83-796f86126883",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 161,
          "responseSize": 74
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "7633d191-d3b6-4f31-a56b-a136b9dabf27",
        "cursor": {
          "ref": "25f93ffd-1598-4c76-807b-bd5346a72b39",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "c80dc9cb-5f89-47b1-9996-e0b24d8e50a3"
        },
        "item": {
          "id": "7633d191-d3b6-4f31-a56b-a136b9dabf27",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "5d7d45c9-ff88-4af3-8493-d6ada2ad5e57",
          "status": "Created",
          "code": 201,
          "responseTime": 4954,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "12ce6e23-1139-43ca-8ff8-36fd9744721c",
        "cursor": {
          "ref": "77cebe73-6613-4c7a-b557-b409215ebb78",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "c6804090-f20b-42c5-9214-01036f165696"
        },
        "item": {
          "id": "12ce6e23-1139-43ca-8ff8-36fd9744721c",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "f9a1b7b2-70e6-4b93-b767-63e0d1be78aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "f218611a-7b3d-4ae1-bf50-cb57fd95e090",
        "cursor": {
          "ref": "d053a85b-c886-4191-acb3-03774ae25875",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "5f4e8ef3-9fc7-4887-930e-65b32288711c"
        },
        "item": {
          "id": "f218611a-7b3d-4ae1-bf50-cb57fd95e090",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "0037d7cd-e6ac-43bb-9b13-7e35c9e520f2",
          "status": "Created",
          "code": 201,
          "responseTime": 6147,
          "responseSize": 707
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "318879d3-4bdd-4d40-b29b-9102b7a3b81e",
        "cursor": {
          "ref": "305ed7b5-9f72-42cf-a7db-3245fa2fec75",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "17894377-c6ee-43d6-a64e-0047976f4d20"
        },
        "item": {
          "id": "318879d3-4bdd-4d40-b29b-9102b7a3b81e",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "8ec8099c-fe31-4d39-81cb-accb3c289655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5362,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "d743dd5e-e7c7-4668-b0c2-bc7e4cd78616",
        "cursor": {
          "ref": "c3b99560-268d-4bcb-929b-fe8531e533e2",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "44960c51-6d56-482a-bc24-e71d07b0bd34"
        },
        "item": {
          "id": "d743dd5e-e7c7-4668-b0c2-bc7e4cd78616",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "946c520d-54a9-4a7e-8790-8634c1510054",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 6024,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "380021f1-ce57-4038-8741-1e1f0727aa43",
        "cursor": {
          "ref": "1b3887d1-a48f-4f2a-8191-d25413ed7731",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "cd91c1f6-d98a-4bd9-8a39-ee330eab4111"
        },
        "item": {
          "id": "380021f1-ce57-4038-8741-1e1f0727aa43",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "2428287e-52ee-4ea7-97f9-e5028365db49",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 353,
          "responseSize": 78
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "72865b55-6ec0-4d5c-b78c-a1be82e832b9",
        "cursor": {
          "ref": "2b06c542-4f69-4a26-814c-d4aa75aacd17",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b11393a3-8674-45fc-b52a-c3d8b957bee9"
        },
        "item": {
          "id": "72865b55-6ec0-4d5c-b78c-a1be82e832b9",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "dea045d0-ec24-41a0-8601-8e67f776dedc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 5043,
          "responseSize": 83
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "a256d0a2-800c-4481-9d7e-b62db4088d49",
        "cursor": {
          "ref": "ebe283ae-cca5-4c3e-a398-d4d8419956fd",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "7a7d6f6e-18d8-4f0d-bc36-8f08826e8ff7"
        },
        "item": {
          "id": "a256d0a2-800c-4481-9d7e-b62db4088d49",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "5e915beb-c011-4250-a5f8-570971a8ba37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "47a43a43-24b9-442d-996c-ee12f4758d4b",
        "cursor": {
          "ref": "83172e1d-42b1-481a-9928-515f567c3c4f",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "95902ae7-8611-4358-be7f-9622bb7c9cf3"
        },
        "item": {
          "id": "47a43a43-24b9-442d-996c-ee12f4758d4b",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "9f03921a-130b-49ce-adcf-1e3a10993ba6",
          "status": "Created",
          "code": 201,
          "responseTime": 8102,
          "responseSize": 694
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:73)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "1b252e4c-0236-49e3-acb2-0060a6e79c68",
        "cursor": {
          "ref": "3793886b-bbcc-471b-88fe-7cd2386038d4",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "99ab89cb-f0cb-42ac-a0a6-3c6a76180e2f"
        },
        "item": {
          "id": "1b252e4c-0236-49e3-acb2-0060a6e79c68",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "7fdddbb8-e335-4d70-b675-073410786ab5",
          "status": "Created",
          "code": 201,
          "responseTime": 9689,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:74)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "d1ecb980-f2a0-459d-b13c-facdfae669d9",
        "cursor": {
          "ref": "81d62977-4867-402b-a8b6-e5d71a274efd",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "a519805d-f74a-4e04-9322-b38d915ec83b"
        },
        "item": {
          "id": "d1ecb980-f2a0-459d-b13c-facdfae669d9",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "33469ef0-4d0c-4275-a660-c506f36358e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "b099634e-29f3-4dda-a446-13b9a68b9d6f",
        "cursor": {
          "ref": "3afcbc6a-f4e0-4d83-a6aa-14f05ab9ea44",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "98e0fe77-0415-4af3-bd32-d34016b74843"
        },
        "item": {
          "id": "b099634e-29f3-4dda-a446-13b9a68b9d6f",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e27dc4b1-be7b-4101-9a20-528085be0333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "0e763600-9a52-46c1-a0ce-b6dbd4922ef8",
        "cursor": {
          "ref": "b73b45ec-b1e5-4a6a-ab49-d2b9de6fd02a",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "5ceb80da-ed6b-475f-b1f7-e7ad78124d80"
        },
        "item": {
          "id": "0e763600-9a52-46c1-a0ce-b6dbd4922ef8",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "cc9e359c-4980-4bd3-9a08-f469001d0725",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 91
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "83ba9f1f-c134-4811-bbb5-9ea7aab8b07f",
        "cursor": {
          "ref": "b2e432fe-7bbf-4185-8394-c74cbcd130f7",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "5fa2c61b-2ada-4340-a4d7-f6ce2137ed36"
        },
        "item": {
          "id": "83ba9f1f-c134-4811-bbb5-9ea7aab8b07f",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "087359c1-4488-4968-9331-ac89e4e2eb64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "ecf19282-e34e-49cb-afc6-dcafe0c9d524",
        "cursor": {
          "ref": "691d0db0-d9be-4c24-b2a0-196f7f9c2d3f",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "52db1722-52d1-436c-a1bf-ef38cab3101e"
        },
        "item": {
          "id": "ecf19282-e34e-49cb-afc6-dcafe0c9d524",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "8ff61e9a-1577-41bf-a225-e51e94a6849d",
          "status": "Created",
          "code": 201,
          "responseTime": 8328,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:79)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "94767282-cee3-4b0e-a498-09e0b0963aba",
        "cursor": {
          "ref": "7921f9e5-d96c-421c-ae86-a272f408ca1e",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "2b2ce9cd-c194-4357-9647-01e576cd45f9"
        },
        "item": {
          "id": "94767282-cee3-4b0e-a498-09e0b0963aba",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "6d76556a-0a64-4bb9-882f-66c1e36b7262",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "7f238340-41c6-4614-ab0a-ea134cfd4e8f",
        "cursor": {
          "ref": "6180626f-8c8c-41af-9f49-8941c19fb961",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "d9316f06-35ba-4823-b13b-fe14ce18876b"
        },
        "item": {
          "id": "7f238340-41c6-4614-ab0a-ea134cfd4e8f",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "0f44e12a-265b-4bd2-a400-f04a330d4c09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "cccac8d8-9401-4040-b8e9-de1f28d6cc69",
        "cursor": {
          "ref": "39ef195b-3e36-4421-a806-ffdbff6980ab",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "280ad5c5-332f-4e9a-9cac-9c879cc14e18"
        },
        "item": {
          "id": "cccac8d8-9401-4040-b8e9-de1f28d6cc69",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "cdb38f07-b8d0-4b8a-8d94-be44039f6592",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "f671e98c-e2ea-49ad-a53c-4dd21eba3177",
        "cursor": {
          "ref": "adde6cf2-d6af-4a0b-a2a4-f08898e22451",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "1ef94a7e-4905-4ce3-8ddd-35fd20284f35"
        },
        "item": {
          "id": "f671e98c-e2ea-49ad-a53c-4dd21eba3177",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "15ca2872-ad41-468f-97b3-38e077e972d6",
          "status": "Created",
          "code": 201,
          "responseTime": 9415,
          "responseSize": 694
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:83)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "767edeea-6c58-429a-a806-97326976a80c",
        "cursor": {
          "ref": "4cb5ee40-805d-4b00-a2b4-e3f6916745d2",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "f88e71c2-f88d-443e-87c5-f0cd700997b2"
        },
        "item": {
          "id": "767edeea-6c58-429a-a806-97326976a80c",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f16db68d-e798-4287-9cbd-8159e1bb187c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 840,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "e7f672b1-a4ec-42a1-820f-9bded104cafc",
        "cursor": {
          "ref": "359ee97d-8bbb-4127-9c08-b82d22c90691",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "acef7915-c3e5-4e65-8608-7ac23b3755f4"
        },
        "item": {
          "id": "e7f672b1-a4ec-42a1-820f-9bded104cafc",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "fc50e50b-b80a-4cf6-b4ad-ae84fa398962",
          "status": "Created",
          "code": 201,
          "responseTime": 12739,
          "responseSize": 695
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:85)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "1c3e3e12-13ea-4d95-a23c-b806932f97b9",
        "cursor": {
          "ref": "bca5c8ed-4e18-4df8-8bb2-850113772097",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "060af53f-f1d6-44c7-8bab-4e46920851cc"
        },
        "item": {
          "id": "1c3e3e12-13ea-4d95-a23c-b806932f97b9",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f054b77b-b370-41aa-b2f4-c9b16295008e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 320,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "caebb2f6-e6b4-47dd-8133-6a2bf26e8223",
        "cursor": {
          "ref": "87f402c2-6ed9-4c9a-b4f0-477cd95d281b",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "5b36a3fd-34bf-4680-8754-5716b0ca2095"
        },
        "item": {
          "id": "caebb2f6-e6b4-47dd-8133-6a2bf26e8223",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "6460e5dc-115c-4fa7-adf0-430384b85f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "de6160ec-e17a-4855-ae7a-ff7f15857c69",
        "cursor": {
          "ref": "241cef55-296c-428c-8f1a-0d3f1e961fdc",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "1445a6f4-e6f5-4734-8c24-6d016cd09c94"
        },
        "item": {
          "id": "de6160ec-e17a-4855-ae7a-ff7f15857c69",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "6d8c44ae-9ce9-4863-b717-36472418b4fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 115,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "8d8ae5f2-a324-43ee-bee5-4af208e7328c",
        "cursor": {
          "ref": "1a12cf10-4446-4cd6-8c61-2a6665c5aefa",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "78f3cc8f-18ce-40c1-b264-6449ef619f01"
        },
        "item": {
          "id": "8d8ae5f2-a324-43ee-bee5-4af208e7328c",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "f0a48b76-c2ee-4838-9555-7f975003d66e",
          "status": "Created",
          "code": 201,
          "responseTime": 9211,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "474abc9e-6b05-4cbd-803d-38010540b280",
        "cursor": {
          "ref": "092d68d5-74c2-45ae-a9bf-d9790e99c550",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "ab09b85b-8e7d-42df-b264-7e13c1a444a1"
        },
        "item": {
          "id": "474abc9e-6b05-4cbd-803d-38010540b280",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8dd357b1-76fa-4828-9395-2c3b2b0c85dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 517,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "a423db25-d86b-46f7-8460-577c5d526db3",
        "cursor": {
          "ref": "059cb67f-280e-48fb-a0c2-24d7fbace22e",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "aafc41af-0d0d-4171-b215-f1cdac21b830"
        },
        "item": {
          "id": "a423db25-d86b-46f7-8460-577c5d526db3",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "6b363256-17b5-4273-8038-32fe851f16f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 251,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "6e0a5053-19b8-4bfa-9209-1336b57a7977",
        "cursor": {
          "ref": "b30ed7c0-2948-436a-9377-90130a5e407e",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "943a6fd2-8702-459c-a211-19b711e9fdf4"
        },
        "item": {
          "id": "6e0a5053-19b8-4bfa-9209-1336b57a7977",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "9519fc94-202e-4d8f-be5d-61045e37eabb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 635,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "c3ac4617-a7d3-4bb8-a275-c9a598a54fb6",
        "cursor": {
          "ref": "3ab4e041-6c61-4b2c-be1c-dfedfa03e51f",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "35f8b40a-5883-40d4-956f-8820f546d674"
        },
        "item": {
          "id": "c3ac4617-a7d3-4bb8-a275-c9a598a54fb6",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "bf9960ca-e40b-452f-b12e-58485b6fdffe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 226,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "1fd5dd6c-e4b3-4894-b2c0-cb22eb8bf27a",
        "cursor": {
          "ref": "e4f01137-ce09-4b65-ad6e-09c8ce3d450a",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "c1fd88a2-733b-4c72-9680-0ceaa666cfac"
        },
        "item": {
          "id": "1fd5dd6c-e4b3-4894-b2c0-cb22eb8bf27a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "cb6d7a04-ceb1-40f7-841e-546b7c45a17b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "835cb857-27cc-4970-97d9-f8df2d1c98d3",
        "cursor": {
          "ref": "c2078338-3ffe-46a1-946d-b71c8c20c04d",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "fbf4529e-4943-4c55-8f3f-2fc6be0a4050"
        },
        "item": {
          "id": "835cb857-27cc-4970-97d9-f8df2d1c98d3",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "8a527029-74c5-400e-9d3f-edd22f90282d",
          "status": "Created",
          "code": 201,
          "responseTime": 9042,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "6bcbcc6e-23c2-4651-bd26-7a9d0c6d8681",
        "cursor": {
          "ref": "832a47f4-c4ba-4463-a8e1-bed8b9683f82",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7485f46c-5d2d-4669-bbe2-aef41f9c8140"
        },
        "item": {
          "id": "6bcbcc6e-23c2-4651-bd26-7a9d0c6d8681",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "32db2bc2-7b0a-483a-abdc-cf64eb81ad8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "2cd80ea2-5612-4a1d-ac95-f29ed4391a3d",
        "cursor": {
          "ref": "38554ef4-b9f9-4249-869c-944a4b958f94",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "a7f0ec4a-81c2-44ba-940c-ce2f0d3f64ba"
        },
        "item": {
          "id": "2cd80ea2-5612-4a1d-ac95-f29ed4391a3d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "de8504b4-9f67-4c9b-94aa-4dd8cac4ff5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "1fa6b0a5-d935-476b-99c1-e3dbdfd296d9",
        "cursor": {
          "ref": "a7c8aaff-5cc0-4013-a6c3-8fb0a9068a3f",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "16847d0e-d72f-4b4f-bd82-78d80736702a"
        },
        "item": {
          "id": "1fa6b0a5-d935-476b-99c1-e3dbdfd296d9",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "e41143ff-4efa-4b89-abfe-9a179e36fd09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "58b22841-63ca-4f54-86d5-bd192f8ad381",
        "cursor": {
          "ref": "e551d6d8-44e8-4801-80d5-8506cebf1100",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "37de6ea7-e126-4efc-a024-1f2e84227805"
        },
        "item": {
          "id": "58b22841-63ca-4f54-86d5-bd192f8ad381",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "6c579120-699f-42d6-8ce4-0d96f34ef321",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "fc2d9849-4e3f-4e9a-8773-665bae58104a",
        "cursor": {
          "ref": "83064e90-b2a9-48d6-8340-03b4a0e6c781",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "427bfe79-5cec-4814-a295-8b189fd556e2"
        },
        "item": {
          "id": "fc2d9849-4e3f-4e9a-8773-665bae58104a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "b4b90365-2782-45ef-8fb4-7260bfea1fe7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "f75bd78d-7900-461b-aa15-3dd944c52217",
        "cursor": {
          "ref": "33ebbc76-f95b-468d-89e4-1cf5e88a61c2",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "bf7d7415-e13d-445a-b8a9-d6317d3250f2"
        },
        "item": {
          "id": "f75bd78d-7900-461b-aa15-3dd944c52217",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "ecffa057-ccbe-408b-880f-35a68b01d6b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:101)"
            }
          }
        ]
      },
      {
        "id": "6181dd0a-6558-4d25-9df6-6554b9e65a34",
        "cursor": {
          "ref": "83727f73-6ae9-4e7b-a097-c9e4b7c40067",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "aa0175eb-2797-4fd9-bc3d-6cc34e9b847f"
        },
        "item": {
          "id": "6181dd0a-6558-4d25-9df6-6554b9e65a34",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "63fa7ff8-949f-40f9-94e2-b97945ac6f34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:102)"
            }
          }
        ]
      },
      {
        "id": "276c2019-0eb0-4673-b339-7e26e6e7bd7b",
        "cursor": {
          "ref": "71611a82-97eb-4101-b406-b9b69974890b",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "1b5aa37d-0509-4b5c-8d92-87db1429a26a"
        },
        "item": {
          "id": "276c2019-0eb0-4673-b339-7e26e6e7bd7b",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "76f784b2-66c4-413c-8148-2d881c31a019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:103)"
            }
          }
        ]
      },
      {
        "id": "31377994-6a3d-4bda-b452-05f28f708767",
        "cursor": {
          "ref": "0c67e9a3-c386-4f35-85c8-80866fa54f90",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "f9400f4b-552e-4394-ac08-90dadd1864fd"
        },
        "item": {
          "id": "31377994-6a3d-4bda-b452-05f28f708767",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "fd4d661e-3390-448f-843a-038ed2cd2a5f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 80,
          "responseSize": 73
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8e44221-7dc2-4a98-8ce6-b116205856aa",
        "cursor": {
          "ref": "cc791533-cf89-4b05-a14c-3978e087b68e",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "ab21a4a8-d135-494f-8305-37af7f23eb3d"
        },
        "item": {
          "id": "a8e44221-7dc2-4a98-8ce6-b116205856aa",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "935f7088-c161-4589-a265-d5581050747e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 35
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "3e987a88-6eb9-4dfd-b074-5ab6ad6861f5",
        "cursor": {
          "ref": "def3258d-4506-4305-85ff-e6846051e17d",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "2b633f05-692c-4154-8997-6f6aa680d837"
        },
        "item": {
          "id": "3e987a88-6eb9-4dfd-b074-5ab6ad6861f5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "d996b12d-4cc6-499b-89aa-a3e3e24754aa",
          "status": "Created",
          "code": 201,
          "responseTime": 8553,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:106)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:106)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:106)"
            }
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 4,
              "test": "response credentialSubject matches request credential.credentialSubject",
              "message": "Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'credentialSubject' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:5:106)"
            }
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 5,
              "test": "response issuanceDate matches request credential.issuanceDate",
              "message": "Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuanceDate' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:6:106)"
            }
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 6,
              "test": "response proof.created is close to 'now'",
              "message": "Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'proof' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:7:106)"
            }
          }
        ]
      },
      {
        "id": "2952ea4b-2ed3-4261-a82b-7959208136d6",
        "cursor": {
          "ref": "ea58312d-1900-4bfc-b280-37aae59c86b6",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "fed23b68-d378-4ddd-9f23-a6ead7fdbd5c"
        },
        "item": {
          "id": "2952ea4b-2ed3-4261-a82b-7959208136d6",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a9180f63-c8ab-4ae7-9cb6-83daf0e4df5f",
          "status": "Created",
          "code": 201,
          "responseTime": 8452,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:107)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:107)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 3,
              "test": "response issuer matches request credential.issuer.id",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:4:107)"
            }
          }
        ]
      },
      {
        "id": "cb8d9f50-a3c3-4314-ae42-9cb0754a7762",
        "cursor": {
          "ref": "f4273a4d-dad8-4552-bf2b-7a17ab430ad8",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "a78250cb-62fd-48c1-b0bb-3f294cf656f5"
        },
        "item": {
          "id": "cb8d9f50-a3c3-4314-ae42-9cb0754a7762",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "1142ad5a-0f7e-40c0-9405-de521eab34ea",
          "status": "Bad Gateway",
          "code": 502,
          "responseTime": 7131,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 502",
              "stack": "AssertionError: expected response to have status code 201 but got 502\n   at Object.eval sandbox-script.js:1:108)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:108)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:108)"
            }
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response credentialSubject.id matches request credential.credentialSubject.id",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:108)"
            }
          }
        ]
      },
      {
        "id": "37995432-09ea-49c0-ba2b-1847dad3f015",
        "cursor": {
          "ref": "0848b4e6-ef12-480d-ad3a-c0754ffe9d9b",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "d313661e-231e-49e9-88b6-c79c0042585f"
        },
        "item": {
          "id": "37995432-09ea-49c0-ba2b-1847dad3f015",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a4d3289c-81d0-4a78-81c2-5d52bca0be41",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:109)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:109)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:109)"
            }
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 3,
              "test": "response proof.created matches request options.created",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:4:109)"
            }
          }
        ]
      },
      {
        "id": "abaa714f-bcf9-40c9-b1e8-398ea8a9190b",
        "cursor": {
          "ref": "9058add0-b859-4321-a6f9-9df24980e1c2",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "fe610f81-cfae-4db1-aa74-683ee97b93f9"
        },
        "item": {
          "id": "abaa714f-bcf9-40c9-b1e8-398ea8a9190b",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "9f9d9c27-b662-4072-92d4-84c7ca0dfae0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 503",
              "stack": "AssertionError: expected response to have status code 201 but got 503\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "d53cceb6-d68b-4e3c-b965-a3cb5bb80d71",
        "cursor": {
          "ref": "b4520bcd-0d76-491e-8b22-5d06da4d6514",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e53b2b9a-8898-4c2d-9099-1c88f6eb723f"
        },
        "item": {
          "id": "d53cceb6-d68b-4e3c-b965-a3cb5bb80d71",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1c78531d-2320-42a6-a8e2-f1b12d793377",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "d53cceb6-d68b-4e3c-b965-a3cb5bb80d71",
        "cursor": {
          "ref": "b4520bcd-0d76-491e-8b22-5d06da4d6514",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "e53b2b9a-8898-4c2d-9099-1c88f6eb723f"
        },
        "item": {
          "id": "d53cceb6-d68b-4e3c-b965-a3cb5bb80d71",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1c78531d-2320-42a6-a8e2-f1b12d793377",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:111)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "d80d5a0f-a5ed-41d5-8c41-87c689fc89ee",
        "cursor": {
          "ref": "e3697a4d-892a-4113-ac9c-83936ef908aa",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "26723b79-bbc5-4156-b8b7-5c49741a97f7"
        },
        "item": {
          "id": "d80d5a0f-a5ed-41d5-8c41-87c689fc89ee",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1c21220f-3d5d-4408-8c1b-517f359fd3f5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 82,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "d80d5a0f-a5ed-41d5-8c41-87c689fc89ee",
        "cursor": {
          "ref": "e3697a4d-892a-4113-ac9c-83936ef908aa",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "26723b79-bbc5-4156-b8b7-5c49741a97f7"
        },
        "item": {
          "id": "d80d5a0f-a5ed-41d5-8c41-87c689fc89ee",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "1c21220f-3d5d-4408-8c1b-517f359fd3f5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 82,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:112)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "026ef381-6808-4ba5-8679-3ae305fe4236",
        "cursor": {
          "ref": "d58421cb-8c2f-44e0-a61a-32cb23b8bd61",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "692882ba-99e2-45da-9fbc-2491ed8b402a"
        },
        "item": {
          "id": "026ef381-6808-4ba5-8679-3ae305fe4236",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1a434fee-9c55-4265-83e1-1c1e8e0ff3de",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "026ef381-6808-4ba5-8679-3ae305fe4236",
        "cursor": {
          "ref": "d58421cb-8c2f-44e0-a61a-32cb23b8bd61",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "692882ba-99e2-45da-9fbc-2491ed8b402a"
        },
        "item": {
          "id": "026ef381-6808-4ba5-8679-3ae305fe4236",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "1a434fee-9c55-4265-83e1-1c1e8e0ff3de",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:113)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "ada8eafe-9bcb-46e6-9f30-f30ef39f8a13",
        "cursor": {
          "ref": "727911e1-21bd-4bb3-ab15-c81d34a4fa36",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f340aa0a-d04e-467c-98fd-66f1bc52ef46"
        },
        "item": {
          "id": "ada8eafe-9bcb-46e6-9f30-f30ef39f8a13",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "15f4bd42-41e3-4078-89ba-2956df1917ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "ada8eafe-9bcb-46e6-9f30-f30ef39f8a13",
        "cursor": {
          "ref": "727911e1-21bd-4bb3-ab15-c81d34a4fa36",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f340aa0a-d04e-467c-98fd-66f1bc52ef46"
        },
        "item": {
          "id": "ada8eafe-9bcb-46e6-9f30-f30ef39f8a13",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "15f4bd42-41e3-4078-89ba-2956df1917ee",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:114)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "f4e52317-8144-451a-8b16-8ab4894a3013",
        "cursor": {
          "ref": "45a7da50-09cf-461a-b9dd-b4a2091e7c57",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7ecc7ae0-ed92-4c54-ba81-278fb33d9edd"
        },
        "item": {
          "id": "f4e52317-8144-451a-8b16-8ab4894a3013",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3bedc7a0-7e64-41db-b68a-038f9b549031",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "f4e52317-8144-451a-8b16-8ab4894a3013",
        "cursor": {
          "ref": "45a7da50-09cf-461a-b9dd-b4a2091e7c57",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7ecc7ae0-ed92-4c54-ba81-278fb33d9edd"
        },
        "item": {
          "id": "f4e52317-8144-451a-8b16-8ab4894a3013",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "3bedc7a0-7e64-41db-b68a-038f9b549031",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:115)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "920e638a-bd2b-4382-a61b-992cf3881304",
        "cursor": {
          "ref": "fd55702e-6e43-49e6-879d-42bd82c8662d",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1a1d24fc-065d-4706-b165-db7b661a148b"
        },
        "item": {
          "id": "920e638a-bd2b-4382-a61b-992cf3881304",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4c0d1c64-6f6a-4325-a54c-3c42429b9e11",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "920e638a-bd2b-4382-a61b-992cf3881304",
        "cursor": {
          "ref": "fd55702e-6e43-49e6-879d-42bd82c8662d",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1a1d24fc-065d-4706-b165-db7b661a148b"
        },
        "item": {
          "id": "920e638a-bd2b-4382-a61b-992cf3881304",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "4c0d1c64-6f6a-4325-a54c-3c42429b9e11",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:116)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "2dd47776-443e-4436-b602-f863842feb34",
        "cursor": {
          "ref": "40f056ee-f245-41b2-85b8-9f48dfc92398",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "dc6b10f5-62e5-405f-ad59-ce280279bdf2"
        },
        "item": {
          "id": "2dd47776-443e-4436-b602-f863842feb34",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f6a32ef1-4d26-4167-9e65-2d352b81f6e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "2dd47776-443e-4436-b602-f863842feb34",
        "cursor": {
          "ref": "40f056ee-f245-41b2-85b8-9f48dfc92398",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "dc6b10f5-62e5-405f-ad59-ce280279bdf2"
        },
        "item": {
          "id": "2dd47776-443e-4436-b602-f863842feb34",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "f6a32ef1-4d26-4167-9e65-2d352b81f6e2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "918394fa-dd82-4fea-b916-9ba39e724f1a",
        "cursor": {
          "ref": "94a1868b-d4bc-4138-963b-e7ead9ca3f67",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3be0c38e-a395-4d71-9ca5-d6958fd9d5ae"
        },
        "item": {
          "id": "918394fa-dd82-4fea-b916-9ba39e724f1a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "517d1cc4-016f-4998-ba5b-acdb40500146",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "918394fa-dd82-4fea-b916-9ba39e724f1a",
        "cursor": {
          "ref": "94a1868b-d4bc-4138-963b-e7ead9ca3f67",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3be0c38e-a395-4d71-9ca5-d6958fd9d5ae"
        },
        "item": {
          "id": "918394fa-dd82-4fea-b916-9ba39e724f1a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "517d1cc4-016f-4998-ba5b-acdb40500146",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:118)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "edd2db12-a135-4712-9570-7008d89fa0b7",
        "cursor": {
          "ref": "e713cff8-7277-4a43-a99d-a2e375a6153b",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8afdb729-7e96-4d66-ad00-ba8ef1c32746"
        },
        "item": {
          "id": "edd2db12-a135-4712-9570-7008d89fa0b7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f7b7010e-12a1-408e-a60e-83c66f6f6375",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "edd2db12-a135-4712-9570-7008d89fa0b7",
        "cursor": {
          "ref": "e713cff8-7277-4a43-a99d-a2e375a6153b",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "8afdb729-7e96-4d66-ad00-ba8ef1c32746"
        },
        "item": {
          "id": "edd2db12-a135-4712-9570-7008d89fa0b7",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "f7b7010e-12a1-408e-a60e-83c66f6f6375",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:119)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "7fb3a549-3fad-496b-a1fc-628329cb23ec",
        "cursor": {
          "ref": "1f8858b9-4cfc-418f-a4c4-1d297988a23d",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "eaf9ec79-6f33-43ac-b519-65cd3fc31836"
        },
        "item": {
          "id": "7fb3a549-3fad-496b-a1fc-628329cb23ec",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a5e3edc0-7715-450d-b020-24856d0d4086",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "7fb3a549-3fad-496b-a1fc-628329cb23ec",
        "cursor": {
          "ref": "1f8858b9-4cfc-418f-a4c4-1d297988a23d",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "eaf9ec79-6f33-43ac-b519-65cd3fc31836"
        },
        "item": {
          "id": "7fb3a549-3fad-496b-a1fc-628329cb23ec",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "a5e3edc0-7715-450d-b020-24856d0d4086",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:120)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "e95e7a3d-2813-4621-8f45-d4b7852e8d81",
        "cursor": {
          "ref": "16d2ad90-c67e-4dc4-aa9c-3e60d6cc649a",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b435c086-0b59-482b-ac2c-5750aa3e23d3"
        },
        "item": {
          "id": "e95e7a3d-2813-4621-8f45-d4b7852e8d81",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2fa21588-6ca5-46ce-a2eb-c1a0df733647",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "e95e7a3d-2813-4621-8f45-d4b7852e8d81",
        "cursor": {
          "ref": "16d2ad90-c67e-4dc4-aa9c-3e60d6cc649a",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "b435c086-0b59-482b-ac2c-5750aa3e23d3"
        },
        "item": {
          "id": "e95e7a3d-2813-4621-8f45-d4b7852e8d81",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2fa21588-6ca5-46ce-a2eb-c1a0df733647",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "481c8b8c-a44c-4902-ad2b-68e31a559c1e",
        "cursor": {
          "ref": "51157650-f5d5-46d5-941e-726b8071bc9a",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0b45de3b-e83b-48cd-b74f-64cab1b6e031"
        },
        "item": {
          "id": "481c8b8c-a44c-4902-ad2b-68e31a559c1e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "043ffe7e-5671-4cbd-a3ef-9e30d84a7526",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "481c8b8c-a44c-4902-ad2b-68e31a559c1e",
        "cursor": {
          "ref": "51157650-f5d5-46d5-941e-726b8071bc9a",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "0b45de3b-e83b-48cd-b74f-64cab1b6e031"
        },
        "item": {
          "id": "481c8b8c-a44c-4902-ad2b-68e31a559c1e",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "043ffe7e-5671-4cbd-a3ef-9e30d84a7526",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "e636b96f-10e0-4f30-b1aa-9b67c62ebee9",
        "cursor": {
          "ref": "f810834d-bb98-4e38-8f62-cf2e78df40fb",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "614302f4-d6f2-440a-af0f-5f24421cfc12"
        },
        "item": {
          "id": "e636b96f-10e0-4f30-b1aa-9b67c62ebee9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "46f89cfd-72d2-42ed-8d1a-655e5684f31a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "e636b96f-10e0-4f30-b1aa-9b67c62ebee9",
        "cursor": {
          "ref": "f810834d-bb98-4e38-8f62-cf2e78df40fb",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "614302f4-d6f2-440a-af0f-5f24421cfc12"
        },
        "item": {
          "id": "e636b96f-10e0-4f30-b1aa-9b67c62ebee9",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "46f89cfd-72d2-42ed-8d1a-655e5684f31a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:123)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "d76a9f79-c7dc-40a7-8631-f30e1454d3b0",
        "cursor": {
          "ref": "4b6b0a95-4914-45ea-88e1-f8ab8c0c7af3",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7fcc6363-6342-4ef8-a690-f0ec1b456fa5"
        },
        "item": {
          "id": "d76a9f79-c7dc-40a7-8631-f30e1454d3b0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0ad3d175-49cb-4e58-a3d8-b449c891d75b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "d76a9f79-c7dc-40a7-8631-f30e1454d3b0",
        "cursor": {
          "ref": "4b6b0a95-4914-45ea-88e1-f8ab8c0c7af3",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "7fcc6363-6342-4ef8-a690-f0ec1b456fa5"
        },
        "item": {
          "id": "d76a9f79-c7dc-40a7-8631-f30e1454d3b0",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "0ad3d175-49cb-4e58-a3d8-b449c891d75b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:124)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "e4e1345b-86e8-4b31-babc-869f05265a13",
        "cursor": {
          "ref": "932b20f6-60bf-4c1b-9d4c-4f766d423ace",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2d658c44-c531-4a65-a612-5c51e7756f5a"
        },
        "item": {
          "id": "e4e1345b-86e8-4b31-babc-869f05265a13",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d3d04b6b-4d6a-438f-a85b-cda5116a4eeb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "e4e1345b-86e8-4b31-babc-869f05265a13",
        "cursor": {
          "ref": "932b20f6-60bf-4c1b-9d4c-4f766d423ace",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "2d658c44-c531-4a65-a612-5c51e7756f5a"
        },
        "item": {
          "id": "e4e1345b-86e8-4b31-babc-869f05265a13",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "d3d04b6b-4d6a-438f-a85b-cda5116a4eeb",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:125)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "525cc28f-60f8-4e78-873f-869f729563fd",
        "cursor": {
          "ref": "71b08790-0925-48a8-85c3-42bcc99e0e59",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "81107501-b8ff-4afd-8b9f-fe76de9d4e60"
        },
        "item": {
          "id": "525cc28f-60f8-4e78-873f-869f729563fd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1400de53-453b-4af1-be7b-081aabdc5b9f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "525cc28f-60f8-4e78-873f-869f729563fd",
        "cursor": {
          "ref": "71b08790-0925-48a8-85c3-42bcc99e0e59",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "81107501-b8ff-4afd-8b9f-fe76de9d4e60"
        },
        "item": {
          "id": "525cc28f-60f8-4e78-873f-869f729563fd",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1400de53-453b-4af1-be7b-081aabdc5b9f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:126)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "4a7a6234-bff3-46bd-af11-901a7478059e",
        "cursor": {
          "ref": "c207a6c2-caae-4f7e-809d-14a02aa30445",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "61745f04-b902-4878-a9f8-170f03d7b236"
        },
        "item": {
          "id": "4a7a6234-bff3-46bd-af11-901a7478059e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a7d0e2a7-4e4e-40e7-b6ca-86925f6d8de5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "4a7a6234-bff3-46bd-af11-901a7478059e",
        "cursor": {
          "ref": "c207a6c2-caae-4f7e-809d-14a02aa30445",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "61745f04-b902-4878-a9f8-170f03d7b236"
        },
        "item": {
          "id": "4a7a6234-bff3-46bd-af11-901a7478059e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "a7d0e2a7-4e4e-40e7-b6ca-86925f6d8de5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:127)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "06eca4ce-7bd4-4fa7-93ad-1252a9448cd3",
        "cursor": {
          "ref": "b71cdc3f-7d78-4bd9-ab77-c506cb6df496",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "57d7461b-72fc-4f9a-9860-ad0266086d38"
        },
        "item": {
          "id": "06eca4ce-7bd4-4fa7-93ad-1252a9448cd3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e309c015-09de-4b2c-a0c0-4f0ef9b69dc6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "06eca4ce-7bd4-4fa7-93ad-1252a9448cd3",
        "cursor": {
          "ref": "b71cdc3f-7d78-4bd9-ab77-c506cb6df496",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "57d7461b-72fc-4f9a-9860-ad0266086d38"
        },
        "item": {
          "id": "06eca4ce-7bd4-4fa7-93ad-1252a9448cd3",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e309c015-09de-4b2c-a0c0-4f0ef9b69dc6",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:128)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "e0c4d17e-86c5-4e03-aabf-707be4b956f5",
        "cursor": {
          "ref": "a8b6a1d0-7c5a-4139-bb9e-7cb60fd810fe",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "600f8560-21f8-4819-af7d-5659087002fd"
        },
        "item": {
          "id": "e0c4d17e-86c5-4e03-aabf-707be4b956f5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1540fd53-af4b-4260-9c94-c17dc5080e4e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "e0c4d17e-86c5-4e03-aabf-707be4b956f5",
        "cursor": {
          "ref": "a8b6a1d0-7c5a-4139-bb9e-7cb60fd810fe",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "600f8560-21f8-4819-af7d-5659087002fd"
        },
        "item": {
          "id": "e0c4d17e-86c5-4e03-aabf-707be4b956f5",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "1540fd53-af4b-4260-9c94-c17dc5080e4e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:129)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "d3317b0e-6517-469e-bc57-bf4c0a3fc70c",
        "cursor": {
          "ref": "f6428994-081e-4af9-8f16-2756c951e8b1",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "529063f8-76e8-4337-a071-8670fdb879d6"
        },
        "item": {
          "id": "d3317b0e-6517-469e-bc57-bf4c0a3fc70c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a0ae86ef-7a88-478a-862f-3377118737ba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "d3317b0e-6517-469e-bc57-bf4c0a3fc70c",
        "cursor": {
          "ref": "f6428994-081e-4af9-8f16-2756c951e8b1",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "529063f8-76e8-4337-a071-8670fdb879d6"
        },
        "item": {
          "id": "d3317b0e-6517-469e-bc57-bf4c0a3fc70c",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "a0ae86ef-7a88-478a-862f-3377118737ba",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:130)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "990cc2c6-3d1f-4b1f-83a8-0ffba6f4f774",
        "cursor": {
          "ref": "aa87e4be-802f-4a0a-8baf-d2dc2c313540",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c9295a65-5d92-4b3d-adf4-9a8ced35ecf0"
        },
        "item": {
          "id": "990cc2c6-3d1f-4b1f-83a8-0ffba6f4f774",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d93fc791-fe13-4880-9cb3-4dcda1b46ddc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "990cc2c6-3d1f-4b1f-83a8-0ffba6f4f774",
        "cursor": {
          "ref": "aa87e4be-802f-4a0a-8baf-d2dc2c313540",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "c9295a65-5d92-4b3d-adf4-9a8ced35ecf0"
        },
        "item": {
          "id": "990cc2c6-3d1f-4b1f-83a8-0ffba6f4f774",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d93fc791-fe13-4880-9cb3-4dcda1b46ddc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:131)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "463b9389-6831-4dbb-8d60-a0e3ef62158e",
        "cursor": {
          "ref": "76a4e4bc-131b-48ca-9a59-a388a7157dd5",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0636ecd1-c00a-404f-8f13-0f9e77fc7ddd"
        },
        "item": {
          "id": "463b9389-6831-4dbb-8d60-a0e3ef62158e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "89911a1d-7435-461b-a411-1326ee8cc79e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "463b9389-6831-4dbb-8d60-a0e3ef62158e",
        "cursor": {
          "ref": "76a4e4bc-131b-48ca-9a59-a388a7157dd5",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "0636ecd1-c00a-404f-8f13-0f9e77fc7ddd"
        },
        "item": {
          "id": "463b9389-6831-4dbb-8d60-a0e3ef62158e",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "89911a1d-7435-461b-a411-1326ee8cc79e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:132)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "30c44c84-856a-4c64-8865-942ed1588919",
        "cursor": {
          "ref": "a9bed3a3-8570-41f7-a7e6-8108830277fc",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "11b03b68-3042-4608-bb65-b6852644c769"
        },
        "item": {
          "id": "30c44c84-856a-4c64-8865-942ed1588919",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1d80d0ea-df1d-48b3-a259-28c278dfa50e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "30c44c84-856a-4c64-8865-942ed1588919",
        "cursor": {
          "ref": "a9bed3a3-8570-41f7-a7e6-8108830277fc",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "11b03b68-3042-4608-bb65-b6852644c769"
        },
        "item": {
          "id": "30c44c84-856a-4c64-8865-942ed1588919",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "1d80d0ea-df1d-48b3-a259-28c278dfa50e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:133)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "2572e0bd-eccc-4b74-9eff-ab02452d5eb9",
        "cursor": {
          "ref": "ef90b556-4f13-4bde-9536-4d450f6d6b37",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2a91de5d-193f-49e5-b89f-8d535ac47f34"
        },
        "item": {
          "id": "2572e0bd-eccc-4b74-9eff-ab02452d5eb9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1cc778f8-f510-4923-abb8-f899483880e4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 79,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "2572e0bd-eccc-4b74-9eff-ab02452d5eb9",
        "cursor": {
          "ref": "ef90b556-4f13-4bde-9536-4d450f6d6b37",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "2a91de5d-193f-49e5-b89f-8d535ac47f34"
        },
        "item": {
          "id": "2572e0bd-eccc-4b74-9eff-ab02452d5eb9",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1cc778f8-f510-4923-abb8-f899483880e4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 79,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:134)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "fe5ba954-43a2-4735-8200-e77dd2d2084b",
        "cursor": {
          "ref": "23fffe2a-30dd-4421-bdde-a22a532eebf8",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e1a5e85d-0cbb-4a72-a218-dc855bcd0ab8"
        },
        "item": {
          "id": "fe5ba954-43a2-4735-8200-e77dd2d2084b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "cb1263a1-ddc5-4e27-bdea-d8b5e3bf6733",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "fe5ba954-43a2-4735-8200-e77dd2d2084b",
        "cursor": {
          "ref": "23fffe2a-30dd-4421-bdde-a22a532eebf8",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e1a5e85d-0cbb-4a72-a218-dc855bcd0ab8"
        },
        "item": {
          "id": "fe5ba954-43a2-4735-8200-e77dd2d2084b",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "cb1263a1-ddc5-4e27-bdea-d8b5e3bf6733",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:135)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "b29f028d-0b22-460f-8003-9aae573da669",
        "cursor": {
          "ref": "798dce6c-1e1e-414f-8fca-e89b2b845427",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "80ccc087-b2b3-41d0-90b9-6139af401b20"
        },
        "item": {
          "id": "b29f028d-0b22-460f-8003-9aae573da669",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0074c5c9-f8d9-4806-b504-0735e79df49b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "b29f028d-0b22-460f-8003-9aae573da669",
        "cursor": {
          "ref": "798dce6c-1e1e-414f-8fca-e89b2b845427",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "80ccc087-b2b3-41d0-90b9-6139af401b20"
        },
        "item": {
          "id": "b29f028d-0b22-460f-8003-9aae573da669",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "0074c5c9-f8d9-4806-b504-0735e79df49b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:136)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "1d83cd8e-bd5f-45dc-abd4-7d292eac7824",
        "cursor": {
          "ref": "778a1ae3-69dd-4811-8bd5-02425ae92a00",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9da8bad2-2cfa-4068-834e-731b682036e3"
        },
        "item": {
          "id": "1d83cd8e-bd5f-45dc-abd4-7d292eac7824",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1486718e-bcf0-43b2-984f-5bc0557a9c35",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "1d83cd8e-bd5f-45dc-abd4-7d292eac7824",
        "cursor": {
          "ref": "778a1ae3-69dd-4811-8bd5-02425ae92a00",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "9da8bad2-2cfa-4068-834e-731b682036e3"
        },
        "item": {
          "id": "1d83cd8e-bd5f-45dc-abd4-7d292eac7824",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "1486718e-bcf0-43b2-984f-5bc0557a9c35",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:137)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "17de96ac-db75-4f65-a560-50a3f068a569",
        "cursor": {
          "ref": "a988ad25-d048-4c8d-84ab-7935e0b6b81d",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "51a78d67-a056-467b-bcf2-d2781b593daa"
        },
        "item": {
          "id": "17de96ac-db75-4f65-a560-50a3f068a569",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "792781fc-3a7a-4888-95f3-f1043f2bd8c0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "17de96ac-db75-4f65-a560-50a3f068a569",
        "cursor": {
          "ref": "a988ad25-d048-4c8d-84ab-7935e0b6b81d",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "51a78d67-a056-467b-bcf2-d2781b593daa"
        },
        "item": {
          "id": "17de96ac-db75-4f65-a560-50a3f068a569",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "792781fc-3a7a-4888-95f3-f1043f2bd8c0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:138)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "4bb3fac7-3429-4e00-bf24-1f5b22d50de7",
        "cursor": {
          "ref": "30590397-1bc2-4cf9-9faf-4c8eb6e89074",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7dd74dff-ebb4-430a-95ef-c269cc06caf8"
        },
        "item": {
          "id": "4bb3fac7-3429-4e00-bf24-1f5b22d50de7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1fe78e80-9e4f-4d3a-836a-faa061c3485d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "4bb3fac7-3429-4e00-bf24-1f5b22d50de7",
        "cursor": {
          "ref": "30590397-1bc2-4cf9-9faf-4c8eb6e89074",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "7dd74dff-ebb4-430a-95ef-c269cc06caf8"
        },
        "item": {
          "id": "4bb3fac7-3429-4e00-bf24-1f5b22d50de7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "1fe78e80-9e4f-4d3a-836a-faa061c3485d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:139)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "85220778-1b96-43d9-88db-78dd207511ac",
        "cursor": {
          "ref": "20ee3211-cc6d-42ae-8ebd-1a987ff97bf2",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "56269473-2c23-4e75-b2fe-bcc5d0ef4fff"
        },
        "item": {
          "id": "85220778-1b96-43d9-88db-78dd207511ac",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ad1ccbae-6fb9-46c1-8c40-18795e1ae756",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "85220778-1b96-43d9-88db-78dd207511ac",
        "cursor": {
          "ref": "20ee3211-cc6d-42ae-8ebd-1a987ff97bf2",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "56269473-2c23-4e75-b2fe-bcc5d0ef4fff"
        },
        "item": {
          "id": "85220778-1b96-43d9-88db-78dd207511ac",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "ad1ccbae-6fb9-46c1-8c40-18795e1ae756",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "88c5cc79-a8d3-4ef6-9d70-858361333038",
        "cursor": {
          "ref": "fbbe1f7c-181d-4759-b593-9f1d12e98087",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "45a4ba50-9e8f-433c-ad16-846e911346b8"
        },
        "item": {
          "id": "88c5cc79-a8d3-4ef6-9d70-858361333038",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "17569376-7f19-45b6-b96b-7c9c002c8094",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "88c5cc79-a8d3-4ef6-9d70-858361333038",
        "cursor": {
          "ref": "fbbe1f7c-181d-4759-b593-9f1d12e98087",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "45a4ba50-9e8f-433c-ad16-846e911346b8"
        },
        "item": {
          "id": "88c5cc79-a8d3-4ef6-9d70-858361333038",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "17569376-7f19-45b6-b96b-7c9c002c8094",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:141)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "3d5925ce-5b1f-4991-93ee-494b106b2d22",
        "cursor": {
          "ref": "1573da5e-4fa5-4942-8542-f2c66486784e",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6e016a11-7a2c-4f4c-8e89-02b273632c3e"
        },
        "item": {
          "id": "3d5925ce-5b1f-4991-93ee-494b106b2d22",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "909971b2-97d7-4795-b5dd-eb5ce19818b4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "3d5925ce-5b1f-4991-93ee-494b106b2d22",
        "cursor": {
          "ref": "1573da5e-4fa5-4942-8542-f2c66486784e",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "6e016a11-7a2c-4f4c-8e89-02b273632c3e"
        },
        "item": {
          "id": "3d5925ce-5b1f-4991-93ee-494b106b2d22",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "909971b2-97d7-4795-b5dd-eb5ce19818b4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:142)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "97c96d10-bb24-47cc-88b6-2b6afdf36680",
        "cursor": {
          "ref": "1e677006-477c-41f7-a97e-52c27fb09975",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3e6e18f6-1b87-45d3-9a0e-a37d766f3541"
        },
        "item": {
          "id": "97c96d10-bb24-47cc-88b6-2b6afdf36680",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "140a4c37-47f6-468d-a33f-2f9a2b25ce84",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "97c96d10-bb24-47cc-88b6-2b6afdf36680",
        "cursor": {
          "ref": "1e677006-477c-41f7-a97e-52c27fb09975",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "3e6e18f6-1b87-45d3-9a0e-a37d766f3541"
        },
        "item": {
          "id": "97c96d10-bb24-47cc-88b6-2b6afdf36680",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "140a4c37-47f6-468d-a33f-2f9a2b25ce84",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "8648ec04-932b-46ff-8773-5423ad46ac2d",
        "cursor": {
          "ref": "82145904-c1a3-418f-a1cb-dfa3b146a2c1",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0b1ea51c-c5a0-4c95-aa14-22e932cdaea6"
        },
        "item": {
          "id": "8648ec04-932b-46ff-8773-5423ad46ac2d",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "692331f3-c380-48e4-87df-506eaabc6f1d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "8648ec04-932b-46ff-8773-5423ad46ac2d",
        "cursor": {
          "ref": "82145904-c1a3-418f-a1cb-dfa3b146a2c1",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "0b1ea51c-c5a0-4c95-aa14-22e932cdaea6"
        },
        "item": {
          "id": "8648ec04-932b-46ff-8773-5423ad46ac2d",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "692331f3-c380-48e4-87df-506eaabc6f1d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "41e154b3-103a-4fc6-b462-1c22edc05f74",
        "cursor": {
          "ref": "ec9f0dee-f508-46c1-8040-0a5abaca95f9",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d12c32c5-235e-4b28-bc22-6c36a4897bf5"
        },
        "item": {
          "id": "41e154b3-103a-4fc6-b462-1c22edc05f74",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b045e3d8-99b6-4a54-ab96-0c9854c718f3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "41e154b3-103a-4fc6-b462-1c22edc05f74",
        "cursor": {
          "ref": "ec9f0dee-f508-46c1-8040-0a5abaca95f9",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "d12c32c5-235e-4b28-bc22-6c36a4897bf5"
        },
        "item": {
          "id": "41e154b3-103a-4fc6-b462-1c22edc05f74",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "b045e3d8-99b6-4a54-ab96-0c9854c718f3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:145)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "06897c79-cfbe-456d-8e2b-aa7fc505923c",
        "cursor": {
          "ref": "e5e85809-98dd-4e9d-a779-a00aaefb267c",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "cf6217b9-e875-49bc-8c72-d1f6d3421e8f"
        },
        "item": {
          "id": "06897c79-cfbe-456d-8e2b-aa7fc505923c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "611e554e-6d56-4b90-8345-7cf2cddaaebd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "06897c79-cfbe-456d-8e2b-aa7fc505923c",
        "cursor": {
          "ref": "e5e85809-98dd-4e9d-a779-a00aaefb267c",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "cf6217b9-e875-49bc-8c72-d1f6d3421e8f"
        },
        "item": {
          "id": "06897c79-cfbe-456d-8e2b-aa7fc505923c",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "611e554e-6d56-4b90-8345-7cf2cddaaebd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:146)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:146)"
            }
          }
        ]
      },
      {
        "id": "abee04d7-42b4-41bc-a639-84b187babd87",
        "cursor": {
          "ref": "ab270e3d-ffce-46da-a9d7-80d2d23a4763",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a7b59cc7-ec71-40be-bd50-2caa7336428f"
        },
        "item": {
          "id": "abee04d7-42b4-41bc-a639-84b187babd87",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2ccea79c-0cfa-4909-ab4d-e03db1e28223",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "abee04d7-42b4-41bc-a639-84b187babd87",
        "cursor": {
          "ref": "ab270e3d-ffce-46da-a9d7-80d2d23a4763",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "a7b59cc7-ec71-40be-bd50-2caa7336428f"
        },
        "item": {
          "id": "abee04d7-42b4-41bc-a639-84b187babd87",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "2ccea79c-0cfa-4909-ab4d-e03db1e28223",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:147)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "165265d2-be0a-43c6-a5e7-ade8c1257339",
        "cursor": {
          "ref": "8bd82fbb-2730-4384-b99f-bbacea76e7bb",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "de049017-cb9e-42e3-900a-11932f9bb45b"
        },
        "item": {
          "id": "165265d2-be0a-43c6-a5e7-ade8c1257339",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e77a1ddd-679c-46b5-80a6-46159672fd12",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "165265d2-be0a-43c6-a5e7-ade8c1257339",
        "cursor": {
          "ref": "8bd82fbb-2730-4384-b99f-bbacea76e7bb",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "de049017-cb9e-42e3-900a-11932f9bb45b"
        },
        "item": {
          "id": "165265d2-be0a-43c6-a5e7-ade8c1257339",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "e77a1ddd-679c-46b5-80a6-46159672fd12",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:148)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "07011aa8-8eed-403a-9fa0-c5baa03b9447",
        "cursor": {
          "ref": "29379907-3ec9-4651-8e14-cbadb5453280",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8a62f35f-6bb0-42f8-95fb-eb58939021e5"
        },
        "item": {
          "id": "07011aa8-8eed-403a-9fa0-c5baa03b9447",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2c2038b5-282a-4b22-9f05-40b059be0b9b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "07011aa8-8eed-403a-9fa0-c5baa03b9447",
        "cursor": {
          "ref": "29379907-3ec9-4651-8e14-cbadb5453280",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "8a62f35f-6bb0-42f8-95fb-eb58939021e5"
        },
        "item": {
          "id": "07011aa8-8eed-403a-9fa0-c5baa03b9447",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "2c2038b5-282a-4b22-9f05-40b059be0b9b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:149)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "40e311b0-e657-41e3-9ab6-57693e84efae",
        "cursor": {
          "ref": "b0fe7c75-fcad-454d-9438-08ed74fa927b",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4ba7c743-d49b-498c-b1c7-b65e826a0c89"
        },
        "item": {
          "id": "40e311b0-e657-41e3-9ab6-57693e84efae",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3fe921fb-4ea1-40fd-b3c2-b673a6252a52",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "40e311b0-e657-41e3-9ab6-57693e84efae",
        "cursor": {
          "ref": "b0fe7c75-fcad-454d-9438-08ed74fa927b",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "4ba7c743-d49b-498c-b1c7-b65e826a0c89"
        },
        "item": {
          "id": "40e311b0-e657-41e3-9ab6-57693e84efae",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "3fe921fb-4ea1-40fd-b3c2-b673a6252a52",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:150)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "c1621009-85d6-4e9d-8800-07e4031d742a",
        "cursor": {
          "ref": "b5e25805-e5c0-4654-92b3-eeabb020a8ee",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "17d2e0bb-4e86-49b6-93db-84cc4f669058"
        },
        "item": {
          "id": "c1621009-85d6-4e9d-8800-07e4031d742a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "87d0a980-955a-44d6-8e42-d66d3ac3edbd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "c1621009-85d6-4e9d-8800-07e4031d742a",
        "cursor": {
          "ref": "b5e25805-e5c0-4654-92b3-eeabb020a8ee",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "17d2e0bb-4e86-49b6-93db-84cc4f669058"
        },
        "item": {
          "id": "c1621009-85d6-4e9d-8800-07e4031d742a",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "87d0a980-955a-44d6-8e42-d66d3ac3edbd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:151)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "d69f364d-b778-45a9-ac35-4e449631674a",
        "cursor": {
          "ref": "f792d492-b8fb-4b1a-bf02-b9e26429345e",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b42f4f17-c3b3-42e6-8074-e5026b6695bc"
        },
        "item": {
          "id": "d69f364d-b778-45a9-ac35-4e449631674a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e763e825-275c-46ad-b035-6ecb08b536b7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "d69f364d-b778-45a9-ac35-4e449631674a",
        "cursor": {
          "ref": "f792d492-b8fb-4b1a-bf02-b9e26429345e",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "b42f4f17-c3b3-42e6-8074-e5026b6695bc"
        },
        "item": {
          "id": "d69f364d-b778-45a9-ac35-4e449631674a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "e763e825-275c-46ad-b035-6ecb08b536b7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "13cfceb0-7bfa-4a2b-aa2e-e22c56bfd581",
        "cursor": {
          "ref": "62527553-959b-41fd-b3cd-36e572e75ecb",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "19e56eba-b33e-4d77-9b76-19baad480c11"
        },
        "item": {
          "id": "13cfceb0-7bfa-4a2b-aa2e-e22c56bfd581",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "127be601-e580-43c9-bc96-b7d2136b46a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "13cfceb0-7bfa-4a2b-aa2e-e22c56bfd581",
        "cursor": {
          "ref": "62527553-959b-41fd-b3cd-36e572e75ecb",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "19e56eba-b33e-4d77-9b76-19baad480c11"
        },
        "item": {
          "id": "13cfceb0-7bfa-4a2b-aa2e-e22c56bfd581",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "127be601-e580-43c9-bc96-b7d2136b46a0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:153)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "83acfff8-ace9-4421-a4ac-3c020d0848a4",
        "cursor": {
          "ref": "857d00e1-01bb-487f-ad0c-44fbb2e5f50e",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "6be7f5ef-e6b9-45c8-9c25-359d6c298067"
        },
        "item": {
          "id": "83acfff8-ace9-4421-a4ac-3c020d0848a4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7651ef64-8b20-4dc4-ab52-e86e5fe9ba2f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "83acfff8-ace9-4421-a4ac-3c020d0848a4",
        "cursor": {
          "ref": "857d00e1-01bb-487f-ad0c-44fbb2e5f50e",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "6be7f5ef-e6b9-45c8-9c25-359d6c298067"
        },
        "item": {
          "id": "83acfff8-ace9-4421-a4ac-3c020d0848a4",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "7651ef64-8b20-4dc4-ab52-e86e5fe9ba2f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:154)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "95301c5d-9102-47fe-bb59-faa5cb452b33",
        "cursor": {
          "ref": "3011c814-3f41-4067-8ff7-5452650f803d",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b3ed3143-ea65-4231-b230-c4189394a418"
        },
        "item": {
          "id": "95301c5d-9102-47fe-bb59-faa5cb452b33",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e90531e0-205a-4358-a27e-c7da632cde2c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "95301c5d-9102-47fe-bb59-faa5cb452b33",
        "cursor": {
          "ref": "3011c814-3f41-4067-8ff7-5452650f803d",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "b3ed3143-ea65-4231-b230-c4189394a418"
        },
        "item": {
          "id": "95301c5d-9102-47fe-bb59-faa5cb452b33",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "e90531e0-205a-4358-a27e-c7da632cde2c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "1bb338c9-d135-4fb6-99d3-043bb98a89ad",
        "cursor": {
          "ref": "643e2dc6-9353-4aff-9c98-8bcafe6033da",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d3844505-be60-4ec8-8c6c-a4c96c70d8ee"
        },
        "item": {
          "id": "1bb338c9-d135-4fb6-99d3-043bb98a89ad",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "bcde15aa-fac7-458c-833b-ab22031536c0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "1bb338c9-d135-4fb6-99d3-043bb98a89ad",
        "cursor": {
          "ref": "643e2dc6-9353-4aff-9c98-8bcafe6033da",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "d3844505-be60-4ec8-8c6c-a4c96c70d8ee"
        },
        "item": {
          "id": "1bb338c9-d135-4fb6-99d3-043bb98a89ad",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "bcde15aa-fac7-458c-833b-ab22031536c0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:156)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "3f20ac7b-34d3-4aef-9ffb-c615056a1db9",
        "cursor": {
          "ref": "6c3b1ada-4d3b-4606-aea4-c703a1cd6302",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6d426568-8e4b-4736-9539-23e2690dd5a4"
        },
        "item": {
          "id": "3f20ac7b-34d3-4aef-9ffb-c615056a1db9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "844c0b52-5ad2-4efc-bf46-667fdb2c94d3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "3f20ac7b-34d3-4aef-9ffb-c615056a1db9",
        "cursor": {
          "ref": "6c3b1ada-4d3b-4606-aea4-c703a1cd6302",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "6d426568-8e4b-4736-9539-23e2690dd5a4"
        },
        "item": {
          "id": "3f20ac7b-34d3-4aef-9ffb-c615056a1db9",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "844c0b52-5ad2-4efc-bf46-667fdb2c94d3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:157)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "bb10492e-6866-4932-b2ac-d9b77d869488",
        "cursor": {
          "ref": "1e2c2646-6ba4-4dd4-b30a-e980ae655e60",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c77355af-e64f-4ac5-be9d-b018b3a9e8a8"
        },
        "item": {
          "id": "bb10492e-6866-4932-b2ac-d9b77d869488",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bdaaee06-1d32-420a-be13-13ec9d9ef5e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "bb10492e-6866-4932-b2ac-d9b77d869488",
        "cursor": {
          "ref": "1e2c2646-6ba4-4dd4-b30a-e980ae655e60",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "c77355af-e64f-4ac5-be9d-b018b3a9e8a8"
        },
        "item": {
          "id": "bb10492e-6866-4932-b2ac-d9b77d869488",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "bdaaee06-1d32-420a-be13-13ec9d9ef5e5",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:158)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "bdd7ea2b-aa77-482a-b4c8-35d450f11130",
        "cursor": {
          "ref": "7c782932-c6fe-4b6f-bf29-92a3a1f61a19",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5a44d457-c134-478b-9238-ff5ff05c9323"
        },
        "item": {
          "id": "bdd7ea2b-aa77-482a-b4c8-35d450f11130",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "49204811-d314-42ba-880a-28ec9a9b939f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "bdd7ea2b-aa77-482a-b4c8-35d450f11130",
        "cursor": {
          "ref": "7c782932-c6fe-4b6f-bf29-92a3a1f61a19",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "5a44d457-c134-478b-9238-ff5ff05c9323"
        },
        "item": {
          "id": "bdd7ea2b-aa77-482a-b4c8-35d450f11130",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "49204811-d314-42ba-880a-28ec9a9b939f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:159)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "cf87d572-eb93-4edc-aef8-706087524603",
        "cursor": {
          "ref": "18806a1e-d97b-4073-a6f2-869eb3a8b8c4",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "78de3ec7-0b1d-4249-8469-d47da39620b0"
        },
        "item": {
          "id": "cf87d572-eb93-4edc-aef8-706087524603",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "63ff10d7-2f08-47ec-9415-4755c9ef91ec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "cf87d572-eb93-4edc-aef8-706087524603",
        "cursor": {
          "ref": "18806a1e-d97b-4073-a6f2-869eb3a8b8c4",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "78de3ec7-0b1d-4249-8469-d47da39620b0"
        },
        "item": {
          "id": "cf87d572-eb93-4edc-aef8-706087524603",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "63ff10d7-2f08-47ec-9415-4755c9ef91ec",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:160)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "cfba2fac-c730-403d-9722-ca39a79bfe7b",
        "cursor": {
          "ref": "b05275b6-083f-4e63-9f37-7c26fe87022d",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0ebd70c0-03c5-4fb5-b621-609851da6647"
        },
        "item": {
          "id": "cfba2fac-c730-403d-9722-ca39a79bfe7b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8fc9a89f-3680-4c89-b4d4-f24ee886a1cd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "cfba2fac-c730-403d-9722-ca39a79bfe7b",
        "cursor": {
          "ref": "b05275b6-083f-4e63-9f37-7c26fe87022d",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "0ebd70c0-03c5-4fb5-b621-609851da6647"
        },
        "item": {
          "id": "cfba2fac-c730-403d-9722-ca39a79bfe7b",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "8fc9a89f-3680-4c89-b4d4-f24ee886a1cd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:161)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "fabb70ba-a040-4ddd-9f61-8e073d54be5b",
        "cursor": {
          "ref": "b70185ad-0136-49c4-acf4-2eb1397b83b6",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "822180e8-bd3b-4245-b7a8-5a479b0a39c7"
        },
        "item": {
          "id": "fabb70ba-a040-4ddd-9f61-8e073d54be5b",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "e22258e1-af75-40f2-9241-f2e832f36dc3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "fabb70ba-a040-4ddd-9f61-8e073d54be5b",
        "cursor": {
          "ref": "b70185ad-0136-49c4-acf4-2eb1397b83b6",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "822180e8-bd3b-4245-b7a8-5a479b0a39c7"
        },
        "item": {
          "id": "fabb70ba-a040-4ddd-9f61-8e073d54be5b",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "e22258e1-af75-40f2-9241-f2e832f36dc3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:162)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "555d51e6-d5dd-464f-9621-47158c202eb7",
        "cursor": {
          "ref": "759a1039-1ce2-4776-85ab-6a65f2c8ba70",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e55e6677-3684-4b04-a6d4-f133db214c99"
        },
        "item": {
          "id": "555d51e6-d5dd-464f-9621-47158c202eb7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9b2729f9-aaa6-434a-9bfd-302bf726d4cc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "555d51e6-d5dd-464f-9621-47158c202eb7",
        "cursor": {
          "ref": "759a1039-1ce2-4776-85ab-6a65f2c8ba70",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "e55e6677-3684-4b04-a6d4-f133db214c99"
        },
        "item": {
          "id": "555d51e6-d5dd-464f-9621-47158c202eb7",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "9b2729f9-aaa6-434a-9bfd-302bf726d4cc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:163)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "4e72db53-89e8-41cf-bf6c-c96beb5ee187",
        "cursor": {
          "ref": "efdd04a2-9f7b-48dd-85db-1132529a42ff",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "70754138-68a5-4abb-b1cd-9e77f22cc054"
        },
        "item": {
          "id": "4e72db53-89e8-41cf-bf6c-c96beb5ee187",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "50860a4a-8bb6-4a94-8c42-6b3c39b78d60",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "4e72db53-89e8-41cf-bf6c-c96beb5ee187",
        "cursor": {
          "ref": "efdd04a2-9f7b-48dd-85db-1132529a42ff",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "70754138-68a5-4abb-b1cd-9e77f22cc054"
        },
        "item": {
          "id": "4e72db53-89e8-41cf-bf6c-c96beb5ee187",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "50860a4a-8bb6-4a94-8c42-6b3c39b78d60",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:164)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "26d064eb-d9c9-47bf-8ff1-e787378196bb",
        "cursor": {
          "ref": "fa16fdc3-018b-4d76-a5cd-d25a0b6d74c5",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "bebac49d-90ef-4d9a-b56c-4a952bbb430f"
        },
        "item": {
          "id": "26d064eb-d9c9-47bf-8ff1-e787378196bb",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b423eca1-ebb5-4f27-93a2-6752ec1b78d1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "26d064eb-d9c9-47bf-8ff1-e787378196bb",
        "cursor": {
          "ref": "fa16fdc3-018b-4d76-a5cd-d25a0b6d74c5",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "bebac49d-90ef-4d9a-b56c-4a952bbb430f"
        },
        "item": {
          "id": "26d064eb-d9c9-47bf-8ff1-e787378196bb",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "b423eca1-ebb5-4f27-93a2-6752ec1b78d1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:165)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "3dfc8e8e-49d1-4135-a4a8-7308ac040a58",
        "cursor": {
          "ref": "8449bf79-69f3-4a74-a582-5154b7452f2a",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "89e1a65a-9bd5-4f10-9fdf-faded5400b43"
        },
        "item": {
          "id": "3dfc8e8e-49d1-4135-a4a8-7308ac040a58",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "03e314b6-9dc6-4c9d-b36b-9e8d11d39a33",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "3dfc8e8e-49d1-4135-a4a8-7308ac040a58",
        "cursor": {
          "ref": "8449bf79-69f3-4a74-a582-5154b7452f2a",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "89e1a65a-9bd5-4f10-9fdf-faded5400b43"
        },
        "item": {
          "id": "3dfc8e8e-49d1-4135-a4a8-7308ac040a58",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "03e314b6-9dc6-4c9d-b36b-9e8d11d39a33",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:166)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "62cf6afd-d604-4507-bced-e1a5b658dfa2",
        "cursor": {
          "ref": "a51a43cd-24d5-4f00-9b55-be982d12126f",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "2f577a49-c013-45e3-9e05-53b75b090a0d"
        },
        "item": {
          "id": "62cf6afd-d604-4507-bced-e1a5b658dfa2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "442e1eda-6554-4469-83fa-7fba3913645c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "62cf6afd-d604-4507-bced-e1a5b658dfa2",
        "cursor": {
          "ref": "a51a43cd-24d5-4f00-9b55-be982d12126f",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "2f577a49-c013-45e3-9e05-53b75b090a0d"
        },
        "item": {
          "id": "62cf6afd-d604-4507-bced-e1a5b658dfa2",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "442e1eda-6554-4469-83fa-7fba3913645c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:167)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "5010e890-40b4-43ef-a89b-270e32c58f80",
        "cursor": {
          "ref": "a85e62fe-8825-4b67-93cd-6ea2589977f4",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2de0d64c-e155-4454-89d3-ed9d80cda516"
        },
        "item": {
          "id": "5010e890-40b4-43ef-a89b-270e32c58f80",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c1027b94-9a6d-4274-9289-596df2cb1316",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "5010e890-40b4-43ef-a89b-270e32c58f80",
        "cursor": {
          "ref": "a85e62fe-8825-4b67-93cd-6ea2589977f4",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "2de0d64c-e155-4454-89d3-ed9d80cda516"
        },
        "item": {
          "id": "5010e890-40b4-43ef-a89b-270e32c58f80",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "c1027b94-9a6d-4274-9289-596df2cb1316",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:168)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "dd181553-d9e8-443e-b8ad-545616b8949a",
        "cursor": {
          "ref": "67e22c8c-8b14-4dad-9c2f-9d8086fe8deb",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "937f527b-de71-4459-9545-6acbc24c393f"
        },
        "item": {
          "id": "dd181553-d9e8-443e-b8ad-545616b8949a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "aa9b93ed-9336-4a6b-b64d-e672d586554a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "dd181553-d9e8-443e-b8ad-545616b8949a",
        "cursor": {
          "ref": "67e22c8c-8b14-4dad-9c2f-9d8086fe8deb",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "937f527b-de71-4459-9545-6acbc24c393f"
        },
        "item": {
          "id": "dd181553-d9e8-443e-b8ad-545616b8949a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "aa9b93ed-9336-4a6b-b64d-e672d586554a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:169)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "dce54dfe-3596-4aff-8f42-2ce05754de10",
        "cursor": {
          "ref": "60b55a90-5b82-460a-87b7-5f88dbb1b116",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6fe33044-dcc8-423b-842d-af705271a6d4"
        },
        "item": {
          "id": "dce54dfe-3596-4aff-8f42-2ce05754de10",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1574e1a8-a27b-4b7c-86b4-a53366548b28",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "dce54dfe-3596-4aff-8f42-2ce05754de10",
        "cursor": {
          "ref": "60b55a90-5b82-460a-87b7-5f88dbb1b116",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6fe33044-dcc8-423b-842d-af705271a6d4"
        },
        "item": {
          "id": "dce54dfe-3596-4aff-8f42-2ce05754de10",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "1574e1a8-a27b-4b7c-86b4-a53366548b28",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:170)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "74074c47-8988-4383-8f96-79cbfd5273b7",
        "cursor": {
          "ref": "c4b87ccd-5854-490d-a742-627447ab3e00",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "46f22aa3-1c15-4b2d-8caf-ffe8bd9aa8f3"
        },
        "item": {
          "id": "74074c47-8988-4383-8f96-79cbfd5273b7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b158dea1-aa46-421a-9d82-05916c9c9315",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "74074c47-8988-4383-8f96-79cbfd5273b7",
        "cursor": {
          "ref": "c4b87ccd-5854-490d-a742-627447ab3e00",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "46f22aa3-1c15-4b2d-8caf-ffe8bd9aa8f3"
        },
        "item": {
          "id": "74074c47-8988-4383-8f96-79cbfd5273b7",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "b158dea1-aa46-421a-9d82-05916c9c9315",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:171)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "485d9279-cfa5-490a-91b4-e1558518ebcb",
        "cursor": {
          "ref": "1a0f0f68-728c-4769-bf2b-0ee2fec29d38",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6db9ee43-4b74-46bf-a522-2c5b61a60fbe"
        },
        "item": {
          "id": "485d9279-cfa5-490a-91b4-e1558518ebcb",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4380bff2-4f7e-4e5b-b8de-b1606925ee9c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "485d9279-cfa5-490a-91b4-e1558518ebcb",
        "cursor": {
          "ref": "1a0f0f68-728c-4769-bf2b-0ee2fec29d38",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "6db9ee43-4b74-46bf-a522-2c5b61a60fbe"
        },
        "item": {
          "id": "485d9279-cfa5-490a-91b4-e1558518ebcb",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4380bff2-4f7e-4e5b-b8de-b1606925ee9c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:172)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "6c655c2e-c410-490d-b56b-2cbf2e085eb7",
        "cursor": {
          "ref": "7d4b2dcc-b43c-42c4-8f24-99493bec2391",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c74d619c-0206-4879-884a-3a4b4331eb66"
        },
        "item": {
          "id": "6c655c2e-c410-490d-b56b-2cbf2e085eb7",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "732f18c0-0323-4da4-a500-b9c608607105",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "6c655c2e-c410-490d-b56b-2cbf2e085eb7",
        "cursor": {
          "ref": "7d4b2dcc-b43c-42c4-8f24-99493bec2391",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c74d619c-0206-4879-884a-3a4b4331eb66"
        },
        "item": {
          "id": "6c655c2e-c410-490d-b56b-2cbf2e085eb7",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "732f18c0-0323-4da4-a500-b9c608607105",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:173)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "a1334446-995b-499c-814d-7f32c11be9fc",
        "cursor": {
          "ref": "a0ac9ce6-937f-4adb-8ae4-5926f4aeabea",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "164137b3-80f1-4450-83ef-0f4f5da9dc3e"
        },
        "item": {
          "id": "a1334446-995b-499c-814d-7f32c11be9fc",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f5030f05-b39f-4c27-b06b-d8cfbd656330",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 86,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "a1334446-995b-499c-814d-7f32c11be9fc",
        "cursor": {
          "ref": "a0ac9ce6-937f-4adb-8ae4-5926f4aeabea",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "164137b3-80f1-4450-83ef-0f4f5da9dc3e"
        },
        "item": {
          "id": "a1334446-995b-499c-814d-7f32c11be9fc",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "f5030f05-b39f-4c27-b06b-d8cfbd656330",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 86,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:174)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "d581079e-b45c-41ce-ae87-3d61b1f1bcf6",
        "cursor": {
          "ref": "39c9f5b0-f559-4404-83e8-b3439acbe4c0",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "20e9a86e-87d8-4fbb-b576-4155de6f68ab"
        },
        "item": {
          "id": "d581079e-b45c-41ce-ae87-3d61b1f1bcf6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "26f89608-1d86-4d64-8441-aaa9b2dbb9e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "d581079e-b45c-41ce-ae87-3d61b1f1bcf6",
        "cursor": {
          "ref": "39c9f5b0-f559-4404-83e8-b3439acbe4c0",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "20e9a86e-87d8-4fbb-b576-4155de6f68ab"
        },
        "item": {
          "id": "d581079e-b45c-41ce-ae87-3d61b1f1bcf6",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "26f89608-1d86-4d64-8441-aaa9b2dbb9e1",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:175)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "a134cf0a-075a-417f-8e21-17fdd31269ba",
        "cursor": {
          "ref": "ebcdf87e-c48c-4110-9015-a4055d22d1f7",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e5cd323e-3443-49d5-be2a-6dffd8336ac7"
        },
        "item": {
          "id": "a134cf0a-075a-417f-8e21-17fdd31269ba",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e383d177-f235-4214-8fad-d0b69b953be4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "a134cf0a-075a-417f-8e21-17fdd31269ba",
        "cursor": {
          "ref": "ebcdf87e-c48c-4110-9015-a4055d22d1f7",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "e5cd323e-3443-49d5-be2a-6dffd8336ac7"
        },
        "item": {
          "id": "a134cf0a-075a-417f-8e21-17fdd31269ba",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "e383d177-f235-4214-8fad-d0b69b953be4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:176)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "e1fca538-e8c8-45e0-bcba-323d67d52288",
        "cursor": {
          "ref": "7241e581-9863-4474-a433-b13a6dd59b43",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3e4fa6b0-bc4a-4c3a-9918-24dba0a8c62c"
        },
        "item": {
          "id": "e1fca538-e8c8-45e0-bcba-323d67d52288",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c7d385e5-8d46-4ab2-bbfa-7434a2e2d5de",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "e1fca538-e8c8-45e0-bcba-323d67d52288",
        "cursor": {
          "ref": "7241e581-9863-4474-a433-b13a6dd59b43",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "3e4fa6b0-bc4a-4c3a-9918-24dba0a8c62c"
        },
        "item": {
          "id": "e1fca538-e8c8-45e0-bcba-323d67d52288",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "c7d385e5-8d46-4ab2-bbfa-7434a2e2d5de",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:177)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "3804a463-649a-4309-af2b-c27896af5372",
        "cursor": {
          "ref": "73c44152-c621-4164-a1ca-441a7d8be03d",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c481c6bc-bb6d-4a94-9085-524903e822ef"
        },
        "item": {
          "id": "3804a463-649a-4309-af2b-c27896af5372",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "294e5e38-0a15-4342-97dd-fec30ca5a4b3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "3804a463-649a-4309-af2b-c27896af5372",
        "cursor": {
          "ref": "73c44152-c621-4164-a1ca-441a7d8be03d",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "c481c6bc-bb6d-4a94-9085-524903e822ef"
        },
        "item": {
          "id": "3804a463-649a-4309-af2b-c27896af5372",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "294e5e38-0a15-4342-97dd-fec30ca5a4b3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:178)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "77990f2d-5717-44e1-9090-d332715f0ffe",
        "cursor": {
          "ref": "9ed1e175-6086-42ba-a582-9b5548271c25",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "de2e0b4f-64bc-4d40-9ecf-4c134acd749c"
        },
        "item": {
          "id": "77990f2d-5717-44e1-9090-d332715f0ffe",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4d402ac1-3b5b-4b77-9b8b-b5eaa7565664",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "77990f2d-5717-44e1-9090-d332715f0ffe",
        "cursor": {
          "ref": "9ed1e175-6086-42ba-a582-9b5548271c25",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "de2e0b4f-64bc-4d40-9ecf-4c134acd749c"
        },
        "item": {
          "id": "77990f2d-5717-44e1-9090-d332715f0ffe",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "4d402ac1-3b5b-4b77-9b8b-b5eaa7565664",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:179)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "e0c45158-f995-4568-92b2-5067b5bb0e90",
        "cursor": {
          "ref": "06f45ee5-8e87-49b8-9d0e-a00cced8b041",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2e829d04-1270-47c9-b0f0-50be79ffbc10"
        },
        "item": {
          "id": "e0c45158-f995-4568-92b2-5067b5bb0e90",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ba97c4a4-d7bd-4981-9a91-13930928400c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "e0c45158-f995-4568-92b2-5067b5bb0e90",
        "cursor": {
          "ref": "06f45ee5-8e87-49b8-9d0e-a00cced8b041",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "2e829d04-1270-47c9-b0f0-50be79ffbc10"
        },
        "item": {
          "id": "e0c45158-f995-4568-92b2-5067b5bb0e90",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ba97c4a4-d7bd-4981-9a91-13930928400c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:180)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "25b41aba-a1ef-4b9d-a7eb-ab310a80d798",
        "cursor": {
          "ref": "7ba695ae-010a-4e50-95b4-5c2e0a23e8a3",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b5242bc2-6eb7-42c2-af69-cc27e390bd8b"
        },
        "item": {
          "id": "25b41aba-a1ef-4b9d-a7eb-ab310a80d798",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "be13f48b-67e6-4f11-9767-aea4297d6ce0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "25b41aba-a1ef-4b9d-a7eb-ab310a80d798",
        "cursor": {
          "ref": "7ba695ae-010a-4e50-95b4-5c2e0a23e8a3",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "b5242bc2-6eb7-42c2-af69-cc27e390bd8b"
        },
        "item": {
          "id": "25b41aba-a1ef-4b9d-a7eb-ab310a80d798",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "be13f48b-67e6-4f11-9767-aea4297d6ce0",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:181)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "d1663ef7-1d1e-4b3a-84cd-5ef66bcfae8f",
        "cursor": {
          "ref": "3e63de44-dc98-4d79-98d2-6380c1c1bd5e",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0073c972-0589-4674-bf9b-5065a5d23eaa"
        },
        "item": {
          "id": "d1663ef7-1d1e-4b3a-84cd-5ef66bcfae8f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7c5dee3a-e92e-479a-a762-c92df9b41a6d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 71,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "d1663ef7-1d1e-4b3a-84cd-5ef66bcfae8f",
        "cursor": {
          "ref": "3e63de44-dc98-4d79-98d2-6380c1c1bd5e",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "0073c972-0589-4674-bf9b-5065a5d23eaa"
        },
        "item": {
          "id": "d1663ef7-1d1e-4b3a-84cd-5ef66bcfae8f",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7c5dee3a-e92e-479a-a762-c92df9b41a6d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 71,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "87068297-384e-436a-b884-86eb26a63625",
        "cursor": {
          "ref": "f1e0f11a-b564-44fc-8509-8bd542641c40",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0f992487-a3ac-4337-af77-d1cb14b9fb9c"
        },
        "item": {
          "id": "87068297-384e-436a-b884-86eb26a63625",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8774b17d-4a6f-4c54-b24b-1a48b32787bc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "87068297-384e-436a-b884-86eb26a63625",
        "cursor": {
          "ref": "f1e0f11a-b564-44fc-8509-8bd542641c40",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0f992487-a3ac-4337-af77-d1cb14b9fb9c"
        },
        "item": {
          "id": "87068297-384e-436a-b884-86eb26a63625",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8774b17d-4a6f-4c54-b24b-1a48b32787bc",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "3662516a-401c-4468-b4b0-e6f660a920f2",
        "cursor": {
          "ref": "87ea56fb-f1a8-4c58-8832-98b2b6f63859",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "99406b21-7313-482c-ac3e-e8869cb9b01f"
        },
        "item": {
          "id": "3662516a-401c-4468-b4b0-e6f660a920f2",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6b9486a0-3ce8-4dcd-a809-33f0efb66f1c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "3662516a-401c-4468-b4b0-e6f660a920f2",
        "cursor": {
          "ref": "87ea56fb-f1a8-4c58-8832-98b2b6f63859",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "99406b21-7313-482c-ac3e-e8869cb9b01f"
        },
        "item": {
          "id": "3662516a-401c-4468-b4b0-e6f660a920f2",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "6b9486a0-3ce8-4dcd-a809-33f0efb66f1c",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "4cecf4fa-691e-42f6-a8fc-6e14010c42d8",
        "cursor": {
          "ref": "7a2c0406-fe78-467a-a665-d5e444c07177",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "cf2d36ce-326b-44cc-94a0-e304b6e02bde"
        },
        "item": {
          "id": "4cecf4fa-691e-42f6-a8fc-6e14010c42d8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5d051a23-7232-4c76-a5ce-c3d1bbee113d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "4cecf4fa-691e-42f6-a8fc-6e14010c42d8",
        "cursor": {
          "ref": "7a2c0406-fe78-467a-a665-d5e444c07177",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "cf2d36ce-326b-44cc-94a0-e304b6e02bde"
        },
        "item": {
          "id": "4cecf4fa-691e-42f6-a8fc-6e14010c42d8",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "5d051a23-7232-4c76-a5ce-c3d1bbee113d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "88c3bb4e-f15f-4598-8c14-bba835853b9b",
        "cursor": {
          "ref": "8130c6b1-95fb-4ccd-953a-16b01be4c91c",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "546cf65b-ddac-4c46-87f9-f056a8564219"
        },
        "item": {
          "id": "88c3bb4e-f15f-4598-8c14-bba835853b9b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "330c1ced-78f6-475c-b24e-9dff7950c1aa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "88c3bb4e-f15f-4598-8c14-bba835853b9b",
        "cursor": {
          "ref": "8130c6b1-95fb-4ccd-953a-16b01be4c91c",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "546cf65b-ddac-4c46-87f9-f056a8564219"
        },
        "item": {
          "id": "88c3bb4e-f15f-4598-8c14-bba835853b9b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "330c1ced-78f6-475c-b24e-9dff7950c1aa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "edb5d4d9-3102-43a4-a5fe-2794d5078b9b",
        "cursor": {
          "ref": "c5b71e2c-f9cb-4114-8e35-26cbe4c6fdad",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "67be7b7c-61e2-4672-aa4a-c5484dd25cf0"
        },
        "item": {
          "id": "edb5d4d9-3102-43a4-a5fe-2794d5078b9b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "3e25152b-86c6-4c21-88cc-9fac5983b2ed",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "edb5d4d9-3102-43a4-a5fe-2794d5078b9b",
        "cursor": {
          "ref": "c5b71e2c-f9cb-4114-8e35-26cbe4c6fdad",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "67be7b7c-61e2-4672-aa4a-c5484dd25cf0"
        },
        "item": {
          "id": "edb5d4d9-3102-43a4-a5fe-2794d5078b9b",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "3e25152b-86c6-4c21-88cc-9fac5983b2ed",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "45cc1805-91f5-4e28-9428-613f338c5d12",
        "cursor": {
          "ref": "459962e4-04e7-48f5-99d1-5b8f50a7eef2",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "90f6c004-6d91-4a42-8b5e-45caa2a234ef"
        },
        "item": {
          "id": "45cc1805-91f5-4e28-9428-613f338c5d12",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2fd45529-5916-4136-8af9-3895a0c67004",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "45cc1805-91f5-4e28-9428-613f338c5d12",
        "cursor": {
          "ref": "459962e4-04e7-48f5-99d1-5b8f50a7eef2",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "90f6c004-6d91-4a42-8b5e-45caa2a234ef"
        },
        "item": {
          "id": "45cc1805-91f5-4e28-9428-613f338c5d12",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2fd45529-5916-4136-8af9-3895a0c67004",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "a3ca666c-5149-4348-88a4-ff07bf9c8517",
        "cursor": {
          "ref": "a8e32106-4b11-439d-907f-3908d4e8840c",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9c920e49-8876-4509-aaad-93e0dc1090f4"
        },
        "item": {
          "id": "a3ca666c-5149-4348-88a4-ff07bf9c8517",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1ce4837c-c124-4d7a-bae1-74854131cc7b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 90,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "a3ca666c-5149-4348-88a4-ff07bf9c8517",
        "cursor": {
          "ref": "a8e32106-4b11-439d-907f-3908d4e8840c",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "9c920e49-8876-4509-aaad-93e0dc1090f4"
        },
        "item": {
          "id": "a3ca666c-5149-4348-88a4-ff07bf9c8517",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "1ce4837c-c124-4d7a-bae1-74854131cc7b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 90,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "f4a72feb-5550-499b-818e-d924c3fe26f6",
        "cursor": {
          "ref": "0b092976-227b-475c-a276-b0d826ad8255",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "30fbd6c8-7985-4166-bd95-c9f64600f973"
        },
        "item": {
          "id": "f4a72feb-5550-499b-818e-d924c3fe26f6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fbbaf8f4-9486-4de9-9bde-16e90740ed20",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "f4a72feb-5550-499b-818e-d924c3fe26f6",
        "cursor": {
          "ref": "0b092976-227b-475c-a276-b0d826ad8255",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "30fbd6c8-7985-4166-bd95-c9f64600f973"
        },
        "item": {
          "id": "f4a72feb-5550-499b-818e-d924c3fe26f6",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "fbbaf8f4-9486-4de9-9bde-16e90740ed20",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "3ffd3224-02d8-4b5e-8df7-2f9af2f1d1ee",
        "cursor": {
          "ref": "e5a28eba-ca23-4974-9234-c6c79f0d2546",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "610fa30e-6d60-4486-bf52-170d442edc65"
        },
        "item": {
          "id": "3ffd3224-02d8-4b5e-8df7-2f9af2f1d1ee",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c804c8fc-9f99-4149-89d0-1a02b08b9ee4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "3ffd3224-02d8-4b5e-8df7-2f9af2f1d1ee",
        "cursor": {
          "ref": "e5a28eba-ca23-4974-9234-c6c79f0d2546",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "610fa30e-6d60-4486-bf52-170d442edc65"
        },
        "item": {
          "id": "3ffd3224-02d8-4b5e-8df7-2f9af2f1d1ee",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c804c8fc-9f99-4149-89d0-1a02b08b9ee4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "0d15e341-8e3d-42d9-8d69-1e722d4f1283",
        "cursor": {
          "ref": "4c1fd47e-7532-4a6c-90b3-06865940017e",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f4584f0a-1d1f-4b21-8619-f8f6de7128af"
        },
        "item": {
          "id": "0d15e341-8e3d-42d9-8d69-1e722d4f1283",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a800a7ab-e060-49ce-bcd6-3d6da9f07c91",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "0d15e341-8e3d-42d9-8d69-1e722d4f1283",
        "cursor": {
          "ref": "4c1fd47e-7532-4a6c-90b3-06865940017e",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "f4584f0a-1d1f-4b21-8619-f8f6de7128af"
        },
        "item": {
          "id": "0d15e341-8e3d-42d9-8d69-1e722d4f1283",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "a800a7ab-e060-49ce-bcd6-3d6da9f07c91",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:192)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "505630f5-41a4-4a75-a193-b293b11e8fc1",
        "cursor": {
          "ref": "5b83a8c6-c4b2-490a-ba4d-8e7d821efb65",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1e18ea29-7439-4357-8465-5f1b8f318b15"
        },
        "item": {
          "id": "505630f5-41a4-4a75-a193-b293b11e8fc1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9042de6e-c937-4a2c-9a92-d76380bd8a25",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "505630f5-41a4-4a75-a193-b293b11e8fc1",
        "cursor": {
          "ref": "5b83a8c6-c4b2-490a-ba4d-8e7d821efb65",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "1e18ea29-7439-4357-8465-5f1b8f318b15"
        },
        "item": {
          "id": "505630f5-41a4-4a75-a193-b293b11e8fc1",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "9042de6e-c937-4a2c-9a92-d76380bd8a25",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:193)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "78a2cd1a-7e93-4cda-87f5-b2b01b4213ac",
        "cursor": {
          "ref": "6f972df3-93e9-4043-8235-c8dca99c3ab9",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "bd432cfd-70cd-49dd-9389-07a09aadcba4"
        },
        "item": {
          "id": "78a2cd1a-7e93-4cda-87f5-b2b01b4213ac",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "896c2430-e976-4c86-a273-3663a9d1d4a4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "78a2cd1a-7e93-4cda-87f5-b2b01b4213ac",
        "cursor": {
          "ref": "6f972df3-93e9-4043-8235-c8dca99c3ab9",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "bd432cfd-70cd-49dd-9389-07a09aadcba4"
        },
        "item": {
          "id": "78a2cd1a-7e93-4cda-87f5-b2b01b4213ac",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "896c2430-e976-4c86-a273-3663a9d1d4a4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:194)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "9b6c2f37-1f07-408f-8070-34b86d72b1cd",
        "cursor": {
          "ref": "48d8c0fc-bd5c-4d12-aac8-403bfd0f84e1",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "886d4e61-57fd-4e3f-963c-05bbf7e7b2df"
        },
        "item": {
          "id": "9b6c2f37-1f07-408f-8070-34b86d72b1cd",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "28fe4dbf-ec1b-44f0-8c93-398dfafd81e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "9b6c2f37-1f07-408f-8070-34b86d72b1cd",
        "cursor": {
          "ref": "48d8c0fc-bd5c-4d12-aac8-403bfd0f84e1",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "886d4e61-57fd-4e3f-963c-05bbf7e7b2df"
        },
        "item": {
          "id": "9b6c2f37-1f07-408f-8070-34b86d72b1cd",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "28fe4dbf-ec1b-44f0-8c93-398dfafd81e9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:195)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "838f8633-d2bb-45eb-87cc-e346240f7146",
        "cursor": {
          "ref": "106aa9d5-035f-4cb9-965e-9e181644f3ae",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ed93cfa8-5535-4753-8883-9967670e663a"
        },
        "item": {
          "id": "838f8633-d2bb-45eb-87cc-e346240f7146",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "98da70ca-2e60-4676-b54e-0d5ed53496be",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "838f8633-d2bb-45eb-87cc-e346240f7146",
        "cursor": {
          "ref": "106aa9d5-035f-4cb9-965e-9e181644f3ae",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "ed93cfa8-5535-4753-8883-9967670e663a"
        },
        "item": {
          "id": "838f8633-d2bb-45eb-87cc-e346240f7146",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "98da70ca-2e60-4676-b54e-0d5ed53496be",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "b6624b2f-d5e7-4297-b6b9-4a21a07c0678",
        "cursor": {
          "ref": "c8b6cc32-c71b-4fc7-9e15-187933d5671e",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "96feb16c-820a-41da-9c2a-bccb504ecce0"
        },
        "item": {
          "id": "b6624b2f-d5e7-4297-b6b9-4a21a07c0678",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "884b9042-7ce3-4a86-bf68-467811526a7b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "b6624b2f-d5e7-4297-b6b9-4a21a07c0678",
        "cursor": {
          "ref": "c8b6cc32-c71b-4fc7-9e15-187933d5671e",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "96feb16c-820a-41da-9c2a-bccb504ecce0"
        },
        "item": {
          "id": "b6624b2f-d5e7-4297-b6b9-4a21a07c0678",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "884b9042-7ce3-4a86-bf68-467811526a7b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "b918df62-cfa1-43f5-b636-19deb85eeb84",
        "cursor": {
          "ref": "0b633fd2-63f0-48da-a81d-a5dea7dfe65b",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f94ea3d0-7ccb-4b9e-8e56-41489282eec0"
        },
        "item": {
          "id": "b918df62-cfa1-43f5-b636-19deb85eeb84",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "6fdc0cea-d05e-4d41-a554-547a2a9b6e34",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "b918df62-cfa1-43f5-b636-19deb85eeb84",
        "cursor": {
          "ref": "0b633fd2-63f0-48da-a81d-a5dea7dfe65b",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "f94ea3d0-7ccb-4b9e-8e56-41489282eec0"
        },
        "item": {
          "id": "b918df62-cfa1-43f5-b636-19deb85eeb84",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "6fdc0cea-d05e-4d41-a554-547a2a9b6e34",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "479639a0-7483-4e21-b120-3a5d17fbeb15",
        "cursor": {
          "ref": "c4923fbb-f1d5-47ba-be87-eb4f711449ba",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "7ee16689-4778-4d7c-8b47-15837e247b8d"
        },
        "item": {
          "id": "479639a0-7483-4e21-b120-3a5d17fbeb15",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9b698358-21b2-4015-95eb-80b3d8048b20",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "479639a0-7483-4e21-b120-3a5d17fbeb15",
        "cursor": {
          "ref": "c4923fbb-f1d5-47ba-be87-eb4f711449ba",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "7ee16689-4778-4d7c-8b47-15837e247b8d"
        },
        "item": {
          "id": "479639a0-7483-4e21-b120-3a5d17fbeb15",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9b698358-21b2-4015-95eb-80b3d8048b20",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:199)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "d308b803-0002-471a-b290-b45019949bf5",
        "cursor": {
          "ref": "00329483-f2bc-4374-b405-4fa0eefd0c38",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ca0a1090-891f-4933-9cd4-9d544f9f953e"
        },
        "item": {
          "id": "d308b803-0002-471a-b290-b45019949bf5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "dc145511-deb1-4c89-9598-1d7fc7bc9c78",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "d308b803-0002-471a-b290-b45019949bf5",
        "cursor": {
          "ref": "00329483-f2bc-4374-b405-4fa0eefd0c38",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "ca0a1090-891f-4933-9cd4-9d544f9f953e"
        },
        "item": {
          "id": "d308b803-0002-471a-b290-b45019949bf5",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "dc145511-deb1-4c89-9598-1d7fc7bc9c78",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "99ad963c-4bb0-437f-8541-f4ba964b5217",
        "cursor": {
          "ref": "8dc48b5c-4082-4ffa-b207-d1362dd05ec7",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c57862a3-a3a5-44c3-b938-d5feaa4043b8"
        },
        "item": {
          "id": "99ad963c-4bb0-437f-8541-f4ba964b5217",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e62c13f6-8f68-4249-a130-86d7a5108137",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "99ad963c-4bb0-437f-8541-f4ba964b5217",
        "cursor": {
          "ref": "8dc48b5c-4082-4ffa-b207-d1362dd05ec7",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c57862a3-a3a5-44c3-b938-d5feaa4043b8"
        },
        "item": {
          "id": "99ad963c-4bb0-437f-8541-f4ba964b5217",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "e62c13f6-8f68-4249-a130-86d7a5108137",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:201)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "fea9c3fd-db17-4322-834c-92ee2eb5ad8c",
        "cursor": {
          "ref": "4ad4c660-bf94-4a72-9167-9fcac1c61207",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "fa848425-f09c-4cc1-abfb-1a31e4fe2d3b"
        },
        "item": {
          "id": "fea9c3fd-db17-4322-834c-92ee2eb5ad8c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c1f23668-8b68-404a-b082-6967fe255581",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "fea9c3fd-db17-4322-834c-92ee2eb5ad8c",
        "cursor": {
          "ref": "4ad4c660-bf94-4a72-9167-9fcac1c61207",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "fa848425-f09c-4cc1-abfb-1a31e4fe2d3b"
        },
        "item": {
          "id": "fea9c3fd-db17-4322-834c-92ee2eb5ad8c",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "c1f23668-8b68-404a-b082-6967fe255581",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:202)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "5f9c6fd1-0b16-471e-ad87-c76a2d4e8c62",
        "cursor": {
          "ref": "01bbadf9-0581-41ce-907e-6c20738c2db7",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4547e6ff-d197-4b67-9c74-4c120d59fec6"
        },
        "item": {
          "id": "5f9c6fd1-0b16-471e-ad87-c76a2d4e8c62",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "406c1ce2-8657-4870-8987-3c2726ecb165",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "5f9c6fd1-0b16-471e-ad87-c76a2d4e8c62",
        "cursor": {
          "ref": "01bbadf9-0581-41ce-907e-6c20738c2db7",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "4547e6ff-d197-4b67-9c74-4c120d59fec6"
        },
        "item": {
          "id": "5f9c6fd1-0b16-471e-ad87-c76a2d4e8c62",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "406c1ce2-8657-4870-8987-3c2726ecb165",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:203)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "382c1842-d491-4e02-9437-bae500e13f5e",
        "cursor": {
          "ref": "47be91ff-8115-4d15-9387-6f46425484d5",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b1e3aae1-29a9-4b80-9b22-c601d28c8c0c"
        },
        "item": {
          "id": "382c1842-d491-4e02-9437-bae500e13f5e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b74c3efa-7a89-4341-935f-feb5a034fa1b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "382c1842-d491-4e02-9437-bae500e13f5e",
        "cursor": {
          "ref": "47be91ff-8115-4d15-9387-6f46425484d5",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "b1e3aae1-29a9-4b80-9b22-c601d28c8c0c"
        },
        "item": {
          "id": "382c1842-d491-4e02-9437-bae500e13f5e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "b74c3efa-7a89-4341-935f-feb5a034fa1b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:204)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "af506f86-be7d-4109-b793-db4a2325c7ac",
        "cursor": {
          "ref": "f0b549f3-8c55-416b-aebd-2d693dd1e2a3",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "86f6b148-0e31-47ca-a37f-d4345e61847d"
        },
        "item": {
          "id": "af506f86-be7d-4109-b793-db4a2325c7ac",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f72254fa-7c61-4402-ac04-30a25c302b0e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "af506f86-be7d-4109-b793-db4a2325c7ac",
        "cursor": {
          "ref": "f0b549f3-8c55-416b-aebd-2d693dd1e2a3",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "86f6b148-0e31-47ca-a37f-d4345e61847d"
        },
        "item": {
          "id": "af506f86-be7d-4109-b793-db4a2325c7ac",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "f72254fa-7c61-4402-ac04-30a25c302b0e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "9cd80ff8-8d72-44fe-bec7-4a7fc378b890",
        "cursor": {
          "ref": "6def29d0-60d0-41dc-ba3f-1f0127ddec6d",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "081689f6-cc57-45ad-8a0e-cc1852466ca0"
        },
        "item": {
          "id": "9cd80ff8-8d72-44fe-bec7-4a7fc378b890",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b9b85cd6-f6b1-437d-9c58-5c11f10c5481",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "9cd80ff8-8d72-44fe-bec7-4a7fc378b890",
        "cursor": {
          "ref": "6def29d0-60d0-41dc-ba3f-1f0127ddec6d",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "081689f6-cc57-45ad-8a0e-cc1852466ca0"
        },
        "item": {
          "id": "9cd80ff8-8d72-44fe-bec7-4a7fc378b890",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "b9b85cd6-f6b1-437d-9c58-5c11f10c5481",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "dd2f8711-2814-4360-91e4-4bbf7184b381",
        "cursor": {
          "ref": "3293e610-c74f-4aa8-90d9-dfdfa4c7b52f",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e327c921-4dce-4ead-8342-3e8f5240b509"
        },
        "item": {
          "id": "dd2f8711-2814-4360-91e4-4bbf7184b381",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2884c941-826a-4223-b256-5497a198d7ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "dd2f8711-2814-4360-91e4-4bbf7184b381",
        "cursor": {
          "ref": "3293e610-c74f-4aa8-90d9-dfdfa4c7b52f",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e327c921-4dce-4ead-8342-3e8f5240b509"
        },
        "item": {
          "id": "dd2f8711-2814-4360-91e4-4bbf7184b381",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "2884c941-826a-4223-b256-5497a198d7ac",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "01063951-6147-4d75-9db5-a1803a921ea3",
        "cursor": {
          "ref": "e7edf71c-ac9b-43c3-8473-6d3f8b77e7b3",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e56478fa-abbd-489b-b5b2-b2a391c231eb"
        },
        "item": {
          "id": "01063951-6147-4d75-9db5-a1803a921ea3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "90a40746-7d4f-45bb-9339-5b9d5da949e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "01063951-6147-4d75-9db5-a1803a921ea3",
        "cursor": {
          "ref": "e7edf71c-ac9b-43c3-8473-6d3f8b77e7b3",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "e56478fa-abbd-489b-b5b2-b2a391c231eb"
        },
        "item": {
          "id": "01063951-6147-4d75-9db5-a1803a921ea3",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "90a40746-7d4f-45bb-9339-5b9d5da949e8",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "368a4e83-9c53-4760-8e2a-52d8fa59a291",
        "cursor": {
          "ref": "50ef9f07-0fd3-4bdf-90d7-cf4964f2cedd",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "677178c5-5dc8-45bf-aac6-923faf9dbc28"
        },
        "item": {
          "id": "368a4e83-9c53-4760-8e2a-52d8fa59a291",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f78419ff-7443-4941-9cbe-d5ab72a02823",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "368a4e83-9c53-4760-8e2a-52d8fa59a291",
        "cursor": {
          "ref": "50ef9f07-0fd3-4bdf-90d7-cf4964f2cedd",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "677178c5-5dc8-45bf-aac6-923faf9dbc28"
        },
        "item": {
          "id": "368a4e83-9c53-4760-8e2a-52d8fa59a291",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "f78419ff-7443-4941-9cbe-d5ab72a02823",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "b571178d-0884-4b11-9b43-6e1a57c2f347",
        "cursor": {
          "ref": "9a335cbf-1419-4069-9deb-7d265ae227fc",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e33dc7d9-7e7b-462f-8b3b-bdbb05a1c57c"
        },
        "item": {
          "id": "b571178d-0884-4b11-9b43-6e1a57c2f347",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "9549f839-437a-4533-8b19-811394131e7a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "b571178d-0884-4b11-9b43-6e1a57c2f347",
        "cursor": {
          "ref": "9a335cbf-1419-4069-9deb-7d265ae227fc",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e33dc7d9-7e7b-462f-8b3b-bdbb05a1c57c"
        },
        "item": {
          "id": "b571178d-0884-4b11-9b43-6e1a57c2f347",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "9549f839-437a-4533-8b19-811394131e7a",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:210)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "6d2f9319-70b4-4452-947a-6c3a6ade05d5",
        "cursor": {
          "ref": "1dac0e6e-0974-472f-8efb-f8d522a7245d",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "96c10a70-d1b9-445a-b1f1-5f21353cd3e3"
        },
        "item": {
          "id": "6d2f9319-70b4-4452-947a-6c3a6ade05d5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "680bab3c-c073-429d-91ed-e0d5bf3eb747",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "6d2f9319-70b4-4452-947a-6c3a6ade05d5",
        "cursor": {
          "ref": "1dac0e6e-0974-472f-8efb-f8d522a7245d",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "96c10a70-d1b9-445a-b1f1-5f21353cd3e3"
        },
        "item": {
          "id": "6d2f9319-70b4-4452-947a-6c3a6ade05d5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "680bab3c-c073-429d-91ed-e0d5bf3eb747",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:211)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "abd5fa3f-1f31-419a-82b6-bc29328ea954",
        "cursor": {
          "ref": "01a2d4e0-f5da-4fa9-84fa-2cedca9e6ee6",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2fe39a61-3a77-4fad-a4df-833d97184bef"
        },
        "item": {
          "id": "abd5fa3f-1f31-419a-82b6-bc29328ea954",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4bf6d385-b09f-4394-839c-77b21f0491ad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "abd5fa3f-1f31-419a-82b6-bc29328ea954",
        "cursor": {
          "ref": "01a2d4e0-f5da-4fa9-84fa-2cedca9e6ee6",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "2fe39a61-3a77-4fad-a4df-833d97184bef"
        },
        "item": {
          "id": "abd5fa3f-1f31-419a-82b6-bc29328ea954",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4bf6d385-b09f-4394-839c-77b21f0491ad",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:212)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "ca4f7fa7-cb00-4657-9b11-cb10e4e8a642",
        "cursor": {
          "ref": "c1549f47-bfc4-484a-a7aa-cdfcf10768ac",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f98d6c59-0680-40d1-85a2-845a072afa9e"
        },
        "item": {
          "id": "ca4f7fa7-cb00-4657-9b11-cb10e4e8a642",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "773b7a17-09a7-4b16-81be-89c368d6bd1f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "ca4f7fa7-cb00-4657-9b11-cb10e4e8a642",
        "cursor": {
          "ref": "c1549f47-bfc4-484a-a7aa-cdfcf10768ac",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "f98d6c59-0680-40d1-85a2-845a072afa9e"
        },
        "item": {
          "id": "ca4f7fa7-cb00-4657-9b11-cb10e4e8a642",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "773b7a17-09a7-4b16-81be-89c368d6bd1f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:213)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "27340a85-e822-487f-a9db-b429313e5ea5",
        "cursor": {
          "ref": "d46dd34e-c4b0-4b35-9fd8-c504b7211ce8",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "1f910849-c868-4517-9167-29e9f86c0d51"
        },
        "item": {
          "id": "27340a85-e822-487f-a9db-b429313e5ea5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "bacdc006-9956-47be-b422-bcb257310bf4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "27340a85-e822-487f-a9db-b429313e5ea5",
        "cursor": {
          "ref": "d46dd34e-c4b0-4b35-9fd8-c504b7211ce8",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "1f910849-c868-4517-9167-29e9f86c0d51"
        },
        "item": {
          "id": "27340a85-e822-487f-a9db-b429313e5ea5",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "bacdc006-9956-47be-b422-bcb257310bf4",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:214)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "682daa83-9a5a-4f70-ab50-d5a110b3743e",
        "cursor": {
          "ref": "85cf78f5-36ae-474a-b560-6627a691dc8e",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "698b7f59-df9e-42ce-882f-b3f0a05aa087"
        },
        "item": {
          "id": "682daa83-9a5a-4f70-ab50-d5a110b3743e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7746accb-d87c-40d8-8762-b38c7bd297d3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "682daa83-9a5a-4f70-ab50-d5a110b3743e",
        "cursor": {
          "ref": "85cf78f5-36ae-474a-b560-6627a691dc8e",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "698b7f59-df9e-42ce-882f-b3f0a05aa087"
        },
        "item": {
          "id": "682daa83-9a5a-4f70-ab50-d5a110b3743e",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "7746accb-d87c-40d8-8762-b38c7bd297d3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "504c5ded-e446-4157-960a-18f0160745f8",
        "cursor": {
          "ref": "412bd79a-8c20-40a6-94eb-9186516b82ad",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "53f1d2b8-4d04-466a-b65c-43d59b8e7395"
        },
        "item": {
          "id": "504c5ded-e446-4157-960a-18f0160745f8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8fe380eb-b0a7-4597-9e3f-746319f716d2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "504c5ded-e446-4157-960a-18f0160745f8",
        "cursor": {
          "ref": "412bd79a-8c20-40a6-94eb-9186516b82ad",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "53f1d2b8-4d04-466a-b65c-43d59b8e7395"
        },
        "item": {
          "id": "504c5ded-e446-4157-960a-18f0160745f8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "8fe380eb-b0a7-4597-9e3f-746319f716d2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "ccd26127-6701-4d6d-8275-c5937010a314",
        "cursor": {
          "ref": "53d57c67-7440-428b-8ce5-796131080d38",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ef7ecc0a-db64-40ac-ab3e-ae6b351fb6ef"
        },
        "item": {
          "id": "ccd26127-6701-4d6d-8275-c5937010a314",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "80b16435-d800-4b4e-a015-4df961b0f3d7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "ccd26127-6701-4d6d-8275-c5937010a314",
        "cursor": {
          "ref": "53d57c67-7440-428b-8ce5-796131080d38",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ef7ecc0a-db64-40ac-ab3e-ae6b351fb6ef"
        },
        "item": {
          "id": "ccd26127-6701-4d6d-8275-c5937010a314",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "80b16435-d800-4b4e-a015-4df961b0f3d7",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "2906ba88-1129-4e2f-a3da-a77d0f5176c8",
        "cursor": {
          "ref": "f09f0c73-7956-45c7-8a8f-704a8d617e83",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "fc7c13a5-4cef-4401-a90f-9256042c742f"
        },
        "item": {
          "id": "2906ba88-1129-4e2f-a3da-a77d0f5176c8",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1ec888db-405e-4594-8a04-f4c7d4947162",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "2906ba88-1129-4e2f-a3da-a77d0f5176c8",
        "cursor": {
          "ref": "f09f0c73-7956-45c7-8a8f-704a8d617e83",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "fc7c13a5-4cef-4401-a90f-9256042c742f"
        },
        "item": {
          "id": "2906ba88-1129-4e2f-a3da-a77d0f5176c8",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "1ec888db-405e-4594-8a04-f4c7d4947162",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:218)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "30421aca-2cdb-405b-8696-a434f07ee5d8",
        "cursor": {
          "ref": "80f8ead5-7f27-416e-89f7-b517c502f3cf",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "78a3bb35-4c0e-406d-aa3a-bf52501e968b"
        },
        "item": {
          "id": "30421aca-2cdb-405b-8696-a434f07ee5d8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d5357aa7-15cd-4f3d-b800-07580388651e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "30421aca-2cdb-405b-8696-a434f07ee5d8",
        "cursor": {
          "ref": "80f8ead5-7f27-416e-89f7-b517c502f3cf",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "78a3bb35-4c0e-406d-aa3a-bf52501e968b"
        },
        "item": {
          "id": "30421aca-2cdb-405b-8696-a434f07ee5d8",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "d5357aa7-15cd-4f3d-b800-07580388651e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "2af4731c-c597-4575-81e0-3b37932b21bd",
        "cursor": {
          "ref": "3e79812b-479e-45e6-9430-b8dfa9190a2e",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "dbfa50fd-1e8b-4c83-930c-704fb9b7f54d"
        },
        "item": {
          "id": "2af4731c-c597-4575-81e0-3b37932b21bd",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "74e7b165-0732-4f78-a573-d0fb1dc60c4b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "2af4731c-c597-4575-81e0-3b37932b21bd",
        "cursor": {
          "ref": "3e79812b-479e-45e6-9430-b8dfa9190a2e",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "dbfa50fd-1e8b-4c83-930c-704fb9b7f54d"
        },
        "item": {
          "id": "2af4731c-c597-4575-81e0-3b37932b21bd",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "74e7b165-0732-4f78-a573-d0fb1dc60c4b",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "7e230789-e36e-4120-acf3-fe3f9ff10012",
        "cursor": {
          "ref": "61e20bf3-6bb4-4a1a-81b7-21b6712b1e15",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "177e5646-4851-498c-b546-ce816205cf85"
        },
        "item": {
          "id": "7e230789-e36e-4120-acf3-fe3f9ff10012",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8de56f11-d18f-491d-be54-c8bb7226d864",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "7e230789-e36e-4120-acf3-fe3f9ff10012",
        "cursor": {
          "ref": "61e20bf3-6bb4-4a1a-81b7-21b6712b1e15",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "177e5646-4851-498c-b546-ce816205cf85"
        },
        "item": {
          "id": "7e230789-e36e-4120-acf3-fe3f9ff10012",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "8de56f11-d18f-491d-be54-c8bb7226d864",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "31d7fd85-4b09-472a-a771-a47093083b32",
        "cursor": {
          "ref": "4d0a1c07-4eaa-46b0-80cf-6c644e20256e",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "05148b70-35c3-4731-8191-33aa15a9c1fd"
        },
        "item": {
          "id": "31d7fd85-4b09-472a-a771-a47093083b32",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fcb9b8b6-e3bc-42ec-aef3-759a30444577",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "31d7fd85-4b09-472a-a771-a47093083b32",
        "cursor": {
          "ref": "4d0a1c07-4eaa-46b0-80cf-6c644e20256e",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "05148b70-35c3-4731-8191-33aa15a9c1fd"
        },
        "item": {
          "id": "31d7fd85-4b09-472a-a771-a47093083b32",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "fcb9b8b6-e3bc-42ec-aef3-759a30444577",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 72,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "613685dd-d7f1-4017-a953-47960fca8b42",
        "cursor": {
          "ref": "5e167e23-653b-43ba-a6b2-db460cb94dd6",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "766506d3-6e21-487a-baca-5a5c35f9efb6"
        },
        "item": {
          "id": "613685dd-d7f1-4017-a953-47960fca8b42",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "de004a84-1608-4882-9fb2-483daf02de22",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "613685dd-d7f1-4017-a953-47960fca8b42",
        "cursor": {
          "ref": "5e167e23-653b-43ba-a6b2-db460cb94dd6",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "766506d3-6e21-487a-baca-5a5c35f9efb6"
        },
        "item": {
          "id": "613685dd-d7f1-4017-a953-47960fca8b42",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "de004a84-1608-4882-9fb2-483daf02de22",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "90fb5892-c314-4901-b813-f729615e9058",
        "cursor": {
          "ref": "69629b9a-db53-4fa3-97f5-5b5885553f83",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e46c8cb7-6d7c-41ea-a232-f02abf0c6823"
        },
        "item": {
          "id": "90fb5892-c314-4901-b813-f729615e9058",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7217d421-ef59-4f24-b105-245965bef4dd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "90fb5892-c314-4901-b813-f729615e9058",
        "cursor": {
          "ref": "69629b9a-db53-4fa3-97f5-5b5885553f83",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "e46c8cb7-6d7c-41ea-a232-f02abf0c6823"
        },
        "item": {
          "id": "90fb5892-c314-4901-b813-f729615e9058",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7217d421-ef59-4f24-b105-245965bef4dd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "ecea1ad6-032c-46a0-acad-233775166711",
        "cursor": {
          "ref": "0775d322-7e70-49aa-a4bf-5d63ed93158c",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "af8812b4-b3fb-403a-aa06-16428cfa327e"
        },
        "item": {
          "id": "ecea1ad6-032c-46a0-acad-233775166711",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "fd00df4f-db11-42fb-8601-a31b3f6014ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "ecea1ad6-032c-46a0-acad-233775166711",
        "cursor": {
          "ref": "0775d322-7e70-49aa-a4bf-5d63ed93158c",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "af8812b4-b3fb-403a-aa06-16428cfa327e"
        },
        "item": {
          "id": "ecea1ad6-032c-46a0-acad-233775166711",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "fd00df4f-db11-42fb-8601-a31b3f6014ce",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:225)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "9a08ca93-c4d4-4805-937d-029fbe1b885f",
        "cursor": {
          "ref": "e811b199-eb8c-4396-8496-f95ae3a3215e",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "016652d7-7bca-48d6-aaed-39b12e6bc6e9"
        },
        "item": {
          "id": "9a08ca93-c4d4-4805-937d-029fbe1b885f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3bd8cff7-974c-440b-8d8e-347f93a49c0f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "9a08ca93-c4d4-4805-937d-029fbe1b885f",
        "cursor": {
          "ref": "e811b199-eb8c-4396-8496-f95ae3a3215e",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "016652d7-7bca-48d6-aaed-39b12e6bc6e9"
        },
        "item": {
          "id": "9a08ca93-c4d4-4805-937d-029fbe1b885f",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "3bd8cff7-974c-440b-8d8e-347f93a49c0f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:226)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "af4d8a0a-79ad-4841-80e2-adf0c22a57da",
        "cursor": {
          "ref": "17cf91ff-f381-4d5e-9ae5-7f0758a5764d",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "57982a64-ae52-4ad8-baca-3538bf73ca05"
        },
        "item": {
          "id": "af4d8a0a-79ad-4841-80e2-adf0c22a57da",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1a1bde35-ddea-4e31-b93e-3f115865c017",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "af4d8a0a-79ad-4841-80e2-adf0c22a57da",
        "cursor": {
          "ref": "17cf91ff-f381-4d5e-9ae5-7f0758a5764d",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "57982a64-ae52-4ad8-baca-3538bf73ca05"
        },
        "item": {
          "id": "af4d8a0a-79ad-4841-80e2-adf0c22a57da",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "1a1bde35-ddea-4e31-b93e-3f115865c017",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:227)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "df1d7aa4-eea9-4bf1-a1fe-f345422bb7b2",
        "cursor": {
          "ref": "9b4173a7-6b7c-4208-9ed1-9e4a1e900a68",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0a5e3052-f390-40bc-a7bd-1bab6c065623"
        },
        "item": {
          "id": "df1d7aa4-eea9-4bf1-a1fe-f345422bb7b2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0cee44b3-0958-4d19-b777-f70e0bd2b3dd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "df1d7aa4-eea9-4bf1-a1fe-f345422bb7b2",
        "cursor": {
          "ref": "9b4173a7-6b7c-4208-9ed1-9e4a1e900a68",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "0a5e3052-f390-40bc-a7bd-1bab6c065623"
        },
        "item": {
          "id": "df1d7aa4-eea9-4bf1-a1fe-f345422bb7b2",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "0cee44b3-0958-4d19-b777-f70e0bd2b3dd",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "c1b8150f-c29a-4773-a6ff-949e8a4e2563",
        "cursor": {
          "ref": "e5147982-eaca-4def-acd0-1d1b2b464256",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "bdfa463b-dba1-485c-b853-ab322ca79595"
        },
        "item": {
          "id": "c1b8150f-c29a-4773-a6ff-949e8a4e2563",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8bb39876-09cd-41c5-8afa-43e304f2a136",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "c1b8150f-c29a-4773-a6ff-949e8a4e2563",
        "cursor": {
          "ref": "e5147982-eaca-4def-acd0-1d1b2b464256",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "bdfa463b-dba1-485c-b853-ab322ca79595"
        },
        "item": {
          "id": "c1b8150f-c29a-4773-a6ff-949e8a4e2563",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8bb39876-09cd-41c5-8afa-43e304f2a136",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:229)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "34156fdc-a386-4b2c-974b-7ff94d2b41b8",
        "cursor": {
          "ref": "93f19748-c57b-45af-8fa8-edba3e9c7832",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "68592a40-0cc8-45c3-b0e6-71eda0b1318a"
        },
        "item": {
          "id": "34156fdc-a386-4b2c-974b-7ff94d2b41b8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7561fada-9d6d-42b2-b6e1-3c1807e89564",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "34156fdc-a386-4b2c-974b-7ff94d2b41b8",
        "cursor": {
          "ref": "93f19748-c57b-45af-8fa8-edba3e9c7832",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "68592a40-0cc8-45c3-b0e6-71eda0b1318a"
        },
        "item": {
          "id": "34156fdc-a386-4b2c-974b-7ff94d2b41b8",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "7561fada-9d6d-42b2-b6e1-3c1807e89564",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 76,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:230)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "179c30cd-0783-4526-99c6-259d4da7edc8",
        "cursor": {
          "ref": "843a19be-d4fb-4151-9b60-0dc9edee5931",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "14974b06-4c33-42bc-9902-3e98c31b3f3b"
        },
        "item": {
          "id": "179c30cd-0783-4526-99c6-259d4da7edc8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f8f9cb70-bc3e-40aa-9c82-78674992f4f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "179c30cd-0783-4526-99c6-259d4da7edc8",
        "cursor": {
          "ref": "843a19be-d4fb-4151-9b60-0dc9edee5931",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "14974b06-4c33-42bc-9902-3e98c31b3f3b"
        },
        "item": {
          "id": "179c30cd-0783-4526-99c6-259d4da7edc8",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f8f9cb70-bc3e-40aa-9c82-78674992f4f9",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 75,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:231)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "88ded195-1bb9-478d-a021-f5e09b4bcd58",
        "cursor": {
          "ref": "0d7a32d7-ab32-4e28-8662-3ef841ef8ca2",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6cfb99c2-82b4-4b3c-b1fb-822feacdbab4"
        },
        "item": {
          "id": "88ded195-1bb9-478d-a021-f5e09b4bcd58",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "fd465841-befd-4793-b6cd-7bc8a88b91f3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "88ded195-1bb9-478d-a021-f5e09b4bcd58",
        "cursor": {
          "ref": "0d7a32d7-ab32-4e28-8662-3ef841ef8ca2",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "6cfb99c2-82b4-4b3c-b1fb-822feacdbab4"
        },
        "item": {
          "id": "88ded195-1bb9-478d-a021-f5e09b4bcd58",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "fd465841-befd-4793-b6cd-7bc8a88b91f3",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "286d84b8-4053-46c1-9d36-f6281ae32121",
        "cursor": {
          "ref": "12a21625-6e36-410e-b2f8-fb783461dfbe",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "7410a039-654f-4f24-b8d4-143d1a745fc1"
        },
        "item": {
          "id": "286d84b8-4053-46c1-9d36-f6281ae32121",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5fc96a73-87e9-4371-aaa1-b47305940672",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "286d84b8-4053-46c1-9d36-f6281ae32121",
        "cursor": {
          "ref": "12a21625-6e36-410e-b2f8-fb783461dfbe",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "7410a039-654f-4f24-b8d4-143d1a745fc1"
        },
        "item": {
          "id": "286d84b8-4053-46c1-9d36-f6281ae32121",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "5fc96a73-87e9-4371-aaa1-b47305940672",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "51502941-7d6b-4554-a3b1-5caba9dd3634",
        "cursor": {
          "ref": "75636f36-8c83-4202-b010-2bd691ca5edd",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3904c6c3-6129-47d8-9dfd-f53f65a93ebe"
        },
        "item": {
          "id": "51502941-7d6b-4554-a3b1-5caba9dd3634",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6e6b631f-017d-4350-a59d-da593bede8d2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "51502941-7d6b-4554-a3b1-5caba9dd3634",
        "cursor": {
          "ref": "75636f36-8c83-4202-b010-2bd691ca5edd",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "3904c6c3-6129-47d8-9dfd-f53f65a93ebe"
        },
        "item": {
          "id": "51502941-7d6b-4554-a3b1-5caba9dd3634",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "6e6b631f-017d-4350-a59d-da593bede8d2",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "a14fb459-8ea9-424a-bb65-92be22212149",
        "cursor": {
          "ref": "24f09e19-1be8-4af9-adea-13d433b21594",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4c6b0afd-49e3-49b8-b857-8bd86353bdcd"
        },
        "item": {
          "id": "a14fb459-8ea9-424a-bb65-92be22212149",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7478ae38-5386-4cf9-a6fe-e32d548aeb51",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "a14fb459-8ea9-424a-bb65-92be22212149",
        "cursor": {
          "ref": "24f09e19-1be8-4af9-adea-13d433b21594",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "4c6b0afd-49e3-49b8-b857-8bd86353bdcd"
        },
        "item": {
          "id": "a14fb459-8ea9-424a-bb65-92be22212149",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7478ae38-5386-4cf9-a6fe-e32d548aeb51",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:235)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "f0218ce1-ebc8-4fc2-9727-d62f47f3ca9c",
        "cursor": {
          "ref": "887aae22-a177-410e-ab05-4b9cb48e9e97",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "96e76ee8-aa43-4f15-8e09-4b7a05b565c5"
        },
        "item": {
          "id": "f0218ce1-ebc8-4fc2-9727-d62f47f3ca9c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e6d17715-d958-4983-9b72-f86c398c2a74",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 85,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "f0218ce1-ebc8-4fc2-9727-d62f47f3ca9c",
        "cursor": {
          "ref": "887aae22-a177-410e-ab05-4b9cb48e9e97",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "96e76ee8-aa43-4f15-8e09-4b7a05b565c5"
        },
        "item": {
          "id": "f0218ce1-ebc8-4fc2-9727-d62f47f3ca9c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "e6d17715-d958-4983-9b72-f86c398c2a74",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 85,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "aea92aa1-ce4e-484b-bb6b-692aa92175af",
        "cursor": {
          "ref": "e141065a-8ef1-4541-93ba-1f913f376420",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "477bc856-6802-4cc2-88a4-188794b2a2cc"
        },
        "item": {
          "id": "aea92aa1-ce4e-484b-bb6b-692aa92175af",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1780ee1f-3291-470d-ac5c-f5e5a954a621",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "aea92aa1-ce4e-484b-bb6b-692aa92175af",
        "cursor": {
          "ref": "e141065a-8ef1-4541-93ba-1f913f376420",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "477bc856-6802-4cc2-88a4-188794b2a2cc"
        },
        "item": {
          "id": "aea92aa1-ce4e-484b-bb6b-692aa92175af",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "1780ee1f-3291-470d-ac5c-f5e5a954a621",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "c1e1a698-cf3a-43b0-b4dd-b013f74856e5",
        "cursor": {
          "ref": "8dac572d-3ff7-40a2-92a5-ad28a2c59908",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "44fa920b-3f40-42f5-a34a-640bad3bb32f"
        },
        "item": {
          "id": "c1e1a698-cf3a-43b0-b4dd-b013f74856e5",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "048bfcfd-38c8-436b-941c-60ac73c15747",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "c1e1a698-cf3a-43b0-b4dd-b013f74856e5",
        "cursor": {
          "ref": "8dac572d-3ff7-40a2-92a5-ad28a2c59908",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "44fa920b-3f40-42f5-a34a-640bad3bb32f"
        },
        "item": {
          "id": "c1e1a698-cf3a-43b0-b4dd-b013f74856e5",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "048bfcfd-38c8-436b-941c-60ac73c15747",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "faee5b93-4d3e-4482-b696-745686d60ec6",
        "cursor": {
          "ref": "69aec2f7-9fdc-416c-8185-f58df78bbfdb",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "92f90f65-eeb4-4984-9fd6-124d7fa37a64"
        },
        "item": {
          "id": "faee5b93-4d3e-4482-b696-745686d60ec6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1619be12-974e-48c6-aad7-159b1ba09642",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "faee5b93-4d3e-4482-b696-745686d60ec6",
        "cursor": {
          "ref": "69aec2f7-9fdc-416c-8185-f58df78bbfdb",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "92f90f65-eeb4-4984-9fd6-124d7fa37a64"
        },
        "item": {
          "id": "faee5b93-4d3e-4482-b696-745686d60ec6",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "1619be12-974e-48c6-aad7-159b1ba09642",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "775c101b-a579-4141-b86a-6441b622707e",
        "cursor": {
          "ref": "362025b8-68c4-4ab3-9562-1ff752a276d1",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b4a53c53-52aa-4ba1-9d28-daca5b617930"
        },
        "item": {
          "id": "775c101b-a579-4141-b86a-6441b622707e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "46dd1bd7-638e-4ceb-aafd-dcea608cd21e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "775c101b-a579-4141-b86a-6441b622707e",
        "cursor": {
          "ref": "362025b8-68c4-4ab3-9562-1ff752a276d1",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "b4a53c53-52aa-4ba1-9d28-daca5b617930"
        },
        "item": {
          "id": "775c101b-a579-4141-b86a-6441b622707e",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "46dd1bd7-638e-4ceb-aafd-dcea608cd21e",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "161027c5-eb05-4897-a595-a81a71bce725",
        "cursor": {
          "ref": "5ad42c78-3d2b-4843-89dc-1829c48d6d1d",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d22d3d86-6748-4129-ac42-32ac202fe0ec"
        },
        "item": {
          "id": "161027c5-eb05-4897-a595-a81a71bce725",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "397a644a-ca6d-4795-a491-4680a883f6fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "161027c5-eb05-4897-a595-a81a71bce725",
        "cursor": {
          "ref": "5ad42c78-3d2b-4843-89dc-1829c48d6d1d",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "d22d3d86-6748-4129-ac42-32ac202fe0ec"
        },
        "item": {
          "id": "161027c5-eb05-4897-a595-a81a71bce725",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "397a644a-ca6d-4795-a491-4680a883f6fa",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "1884d9b8-bbc1-4807-b3ad-9a519fd3cdf5",
        "cursor": {
          "ref": "ad6a298c-6249-42b6-9b26-0a2125de598a",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7bbfc702-ef41-40a1-98ff-4528257b03ca"
        },
        "item": {
          "id": "1884d9b8-bbc1-4807-b3ad-9a519fd3cdf5",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9ae75db9-54a9-4080-af89-6bba99240862",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "1884d9b8-bbc1-4807-b3ad-9a519fd3cdf5",
        "cursor": {
          "ref": "ad6a298c-6249-42b6-9b26-0a2125de598a",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "7bbfc702-ef41-40a1-98ff-4528257b03ca"
        },
        "item": {
          "id": "1884d9b8-bbc1-4807-b3ad-9a519fd3cdf5",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "9ae75db9-54a9-4080-af89-6bba99240862",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 503",
              "stack": "AssertionError: expected response to have status code 400 but got 503\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "ec4f58e6-518f-458e-9ed3-ccdadec122a5",
        "cursor": {
          "ref": "7ec0a967-48ac-448d-bf33-5efb6c84f38a",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "353d8d2d-42bd-44c0-b290-da5b4a60cbcc"
        },
        "item": {
          "id": "ec4f58e6-518f-458e-9ed3-ccdadec122a5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4183d553-2972-4076-a4a8-3f6c8a5a1b93",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "ec4f58e6-518f-458e-9ed3-ccdadec122a5",
        "cursor": {
          "ref": "7ec0a967-48ac-448d-bf33-5efb6c84f38a",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "353d8d2d-42bd-44c0-b290-da5b4a60cbcc"
        },
        "item": {
          "id": "ec4f58e6-518f-458e-9ed3-ccdadec122a5",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "4183d553-2972-4076-a4a8-3f6c8a5a1b93",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 503",
              "stack": "AssertionError: expected response to have status code 401 but got 503\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "65527085-5578-4590-8334-189dd9b2fc01",
        "cursor": {
          "ref": "b72b2c98-0361-4da4-86fe-c93ae819f2fb",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "28910aef-dfa6-4008-a072-53f308fbe2a2"
        },
        "item": {
          "id": "65527085-5578-4590-8334-189dd9b2fc01",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "061641d5-c822-488c-bb4b-d5d22243447d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "65527085-5578-4590-8334-189dd9b2fc01",
        "cursor": {
          "ref": "b72b2c98-0361-4da4-86fe-c93ae819f2fb",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "28910aef-dfa6-4008-a072-53f308fbe2a2"
        },
        "item": {
          "id": "65527085-5578-4590-8334-189dd9b2fc01",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "061641d5-c822-488c-bb4b-d5d22243447d",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 503",
              "stack": "AssertionError: expected response to have status code 403 but got 503\n   at Object.eval sandbox-script.js:1:244)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:244)"
            }
          }
        ]
      },
      {
        "id": "71b80a4c-af25-421c-a915-0fac466387b1",
        "cursor": {
          "ref": "ba6437bf-e452-4bdf-a3ca-64ff3a140486",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "31019dd8-4a93-415e-bad0-210c9e516424"
        },
        "item": {
          "id": "71b80a4c-af25-421c-a915-0fac466387b1",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "7d338a80-a461-4425-b6d2-e524f58d1349",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "71b80a4c-af25-421c-a915-0fac466387b1",
        "cursor": {
          "ref": "ba6437bf-e452-4bdf-a3ca-64ff3a140486",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "31019dd8-4a93-415e-bad0-210c9e516424"
        },
        "item": {
          "id": "71b80a4c-af25-421c-a915-0fac466387b1",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "7d338a80-a461-4425-b6d2-e524f58d1349",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 74,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is false",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "6f6f5db9-01c5-40fd-9502-85d2cd52b66d",
        "cursor": {
          "ref": "9b514689-eedc-491e-aa52-1dff4a0a983a",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "94bc581f-f4be-465f-82e3-7b6b40509d2f"
        },
        "item": {
          "id": "6f6f5db9-01c5-40fd-9502-85d2cd52b66d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e49e5cbd-afb0-4c75-999c-7e32986b1e8f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "6f6f5db9-01c5-40fd-9502-85d2cd52b66d",
        "cursor": {
          "ref": "9b514689-eedc-491e-aa52-1dff4a0a983a",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "94bc581f-f4be-465f-82e3-7b6b40509d2f"
        },
        "item": {
          "id": "6f6f5db9-01c5-40fd-9502-85d2cd52b66d",
          "name": "credentials_verify"
        },
        "response": {
          "id": "e49e5cbd-afb0-4c75-999c-7e32986b1e8f",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "29b0fdd4-0b1d-4ef9-9818-d1a22d57e0ae",
        "cursor": {
          "ref": "8e2d0299-41ce-4b09-8abe-0239661a3c89",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "acb56c47-c8ff-4cdc-9647-b82598c48394"
        },
        "item": {
          "id": "29b0fdd4-0b1d-4ef9-9818-d1a22d57e0ae",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "523acc54-3523-431c-99c0-9aadad6badde",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "29b0fdd4-0b1d-4ef9-9818-d1a22d57e0ae",
        "cursor": {
          "ref": "8e2d0299-41ce-4b09-8abe-0239661a3c89",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "acb56c47-c8ff-4cdc-9647-b82598c48394"
        },
        "item": {
          "id": "29b0fdd4-0b1d-4ef9-9818-d1a22d57e0ae",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "523acc54-3523-431c-99c0-9aadad6badde",
          "status": "Service Temporarily Unavailable",
          "code": 503,
          "responseTime": 73,
          "responseSize": 162
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 503",
              "stack": "AssertionError: expected response to have status code 200 but got 503\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 2,
              "test": "response verified is true",
              "message": "Unexpected token '<' at 1:1\n<html>\n^",
              "stack": "JSONError: Unexpected token '<' at 1:1\n<html>\n^\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "abfa2599-9cb8-423b-bdbb-4003ea59b9e6",
        "cursor": {
          "ref": "598c5b28-9bf3-4f0f-b138-c69fd8401b82",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "335d7fcd-f0ae-49ec-912b-0afc2abc2712"
        },
        "item": {
          "id": "abfa2599-9cb8-423b-bdbb-4003ea59b9e6",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "abfa2599-9cb8-423b-bdbb-4003ea59b9e6",
        "cursor": {
          "ref": "598c5b28-9bf3-4f0f-b138-c69fd8401b82",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "335d7fcd-f0ae-49ec-912b-0afc2abc2712"
        },
        "item": {
          "id": "abfa2599-9cb8-423b-bdbb-4003ea59b9e6",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "abfa2599-9cb8-423b-bdbb-4003ea59b9e6",
        "cursor": {
          "ref": "598c5b28-9bf3-4f0f-b138-c69fd8401b82",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "335d7fcd-f0ae-49ec-912b-0afc2abc2712"
        },
        "item": {
          "id": "abfa2599-9cb8-423b-bdbb-4003ea59b9e6",
          "name": "presentations:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:248)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:248)"
            }
          }
        ]
      },
      {
        "id": "b34fd4b6-211a-44f3-927d-cf6471a0419e",
        "cursor": {
          "ref": "e2f2ba89-0ca5-492b-a208-2d204472ee44",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3d7d34d7-75c2-4581-9054-1df1f219f5af"
        },
        "item": {
          "id": "b34fd4b6-211a-44f3-927d-cf6471a0419e",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "b34fd4b6-211a-44f3-927d-cf6471a0419e",
        "cursor": {
          "ref": "e2f2ba89-0ca5-492b-a208-2d204472ee44",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3d7d34d7-75c2-4581-9054-1df1f219f5af"
        },
        "item": {
          "id": "b34fd4b6-211a-44f3-927d-cf6471a0419e",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "b34fd4b6-211a-44f3-927d-cf6471a0419e",
        "cursor": {
          "ref": "e2f2ba89-0ca5-492b-a208-2d204472ee44",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "3d7d34d7-75c2-4581-9054-1df1f219f5af"
        },
        "item": {
          "id": "b34fd4b6-211a-44f3-927d-cf6471a0419e",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:249)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:249)"
            }
          }
        ]
      },
      {
        "id": "1e8d9a9a-e0c3-46fe-99ad-53ce8d33fd5e",
        "cursor": {
          "ref": "79b872d8-6127-4c92-9b0a-2e98de69427f",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "69cb46b3-873e-4861-932d-d90175beabd7"
        },
        "item": {
          "id": "1e8d9a9a-e0c3-46fe-99ad-53ce8d33fd5e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1e8d9a9a-e0c3-46fe-99ad-53ce8d33fd5e",
        "cursor": {
          "ref": "79b872d8-6127-4c92-9b0a-2e98de69427f",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "69cb46b3-873e-4861-932d-d90175beabd7"
        },
        "item": {
          "id": "1e8d9a9a-e0c3-46fe-99ad-53ce8d33fd5e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1e8d9a9a-e0c3-46fe-99ad-53ce8d33fd5e",
        "cursor": {
          "ref": "79b872d8-6127-4c92-9b0a-2e98de69427f",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "69cb46b3-873e-4861-932d-d90175beabd7"
        },
        "item": {
          "id": "1e8d9a9a-e0c3-46fe-99ad-53ce8d33fd5e",
          "name": "presentations_prove:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "1e5563a2-388c-46cf-bf87-2600f2f067a9",
        "cursor": {
          "ref": "94411210-d6ec-463b-ad61-b2193555eacb",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "82c9eaaa-05a8-4f18-a2cc-f62337b759cc"
        },
        "item": {
          "id": "1e5563a2-388c-46cf-bf87-2600f2f067a9",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "1e5563a2-388c-46cf-bf87-2600f2f067a9",
        "cursor": {
          "ref": "94411210-d6ec-463b-ad61-b2193555eacb",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "82c9eaaa-05a8-4f18-a2cc-f62337b759cc"
        },
        "item": {
          "id": "1e5563a2-388c-46cf-bf87-2600f2f067a9",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "1e5563a2-388c-46cf-bf87-2600f2f067a9",
        "cursor": {
          "ref": "94411210-d6ec-463b-ad61-b2193555eacb",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "82c9eaaa-05a8-4f18-a2cc-f62337b759cc"
        },
        "item": {
          "id": "1e5563a2-388c-46cf-bf87-2600f2f067a9",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "12635579-dfe7-4ed1-835d-8ac9d5950161",
        "cursor": {
          "ref": "dcc11acd-d60c-44b8-8ef2-549b68d07157",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "3c5985bf-4735-40af-910f-3427469bfbac"
        },
        "item": {
          "id": "12635579-dfe7-4ed1-835d-8ac9d5950161",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "12635579-dfe7-4ed1-835d-8ac9d5950161",
        "cursor": {
          "ref": "dcc11acd-d60c-44b8-8ef2-549b68d07157",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "3c5985bf-4735-40af-910f-3427469bfbac"
        },
        "item": {
          "id": "12635579-dfe7-4ed1-835d-8ac9d5950161",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "12635579-dfe7-4ed1-835d-8ac9d5950161",
        "cursor": {
          "ref": "dcc11acd-d60c-44b8-8ef2-549b68d07157",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "3c5985bf-4735-40af-910f-3427469bfbac"
        },
        "item": {
          "id": "12635579-dfe7-4ed1-835d-8ac9d5950161",
          "name": "presentations_verify:missing_auth"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "f2540832-d2b1-429c-adb9-74b0a90ebd21",
        "cursor": {
          "ref": "5c02da5a-297e-4c84-8f88-f5ee3747ee2e",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a6dda10b-c13c-4e01-a001-f77c3b37a7b3"
        },
        "item": {
          "id": "f2540832-d2b1-429c-adb9-74b0a90ebd21",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "f2540832-d2b1-429c-adb9-74b0a90ebd21",
        "cursor": {
          "ref": "5c02da5a-297e-4c84-8f88-f5ee3747ee2e",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a6dda10b-c13c-4e01-a001-f77c3b37a7b3"
        },
        "item": {
          "id": "f2540832-d2b1-429c-adb9-74b0a90ebd21",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      },
      {
        "id": "f2540832-d2b1-429c-adb9-74b0a90ebd21",
        "cursor": {
          "ref": "5c02da5a-297e-4c84-8f88-f5ee3747ee2e",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "a6dda10b-c13c-4e01-a001-f77c3b37a7b3"
        },
        "item": {
          "id": "f2540832-d2b1-429c-adb9-74b0a90ebd21",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {},
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected { Object (id, _details, ...) } to have property 'code'",
              "stack": "AssertionError: expected { Object (id, _details, ...) } to have property 'code'\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "JSONError",
              "index": 1,
              "test": "response validates against schema",
              "message": "Unexpected token u in JSON at position 0",
              "stack": "JSONError: Unexpected token u in JSON at position 0\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}