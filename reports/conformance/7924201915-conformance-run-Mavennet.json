{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "3e9de142-adad-463f-b1a1-09cabb369a23",
        "name": "Clear Cache",
        "item": [
          {
            "id": "56caf760-1537-4b46-af99-531990b7ba11",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4277762f-24eb-4a5c-a11f-01e5ab3cd305",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "65ab02f0-6d9b-4ecb-9cbb-36aa5b7c4418"
                }
              }
            ]
          },
          {
            "id": "e56e60f8-91db-4a2b-907e-25522763e3c6",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1a3dcffb-e0d5-464b-aa78-56decd96d233",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "2c03a5c9-d579-4c83-8ce2-ada34db49138"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "4cd94da9-0364-41ac-9c4a-e1cb5ebfa6c3",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "38bcc4e1-1be7-46d9-b53f-36811370f7b6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "863657af-eff4-401f-88b9-963e30178842",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "98632f8d-70bf-4e38-bf1d-61b8b230ed46",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1d345f23-e4d3-472c-b83d-8060f857057b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5efb0c6b-a186-480c-a9a5-9b3a446a07ee",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "bc64b01a-6e95-45df-b292-a52a45c36ea2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "02a8b980-da18-43bc-8725-d3beab52d046",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "4120dfab-14ee-4a35-83c4-d565d7257174"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "11350118-00ac-4a01-bdbe-e112bc0592cc",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "0d9d53a4-45f6-4b62-afac-a3dcbe54ce36"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f39ce30d-2553-4e1a-a0b2-fd645bb82dd3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0a4abca4-343a-4a75-a592-49dce0744112"
            }
          }
        ]
      },
      {
        "id": "695b328a-645a-4273-8f80-d13e684d48ad",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "bab3be71-fdc9-4807-a8b5-d1567a3c0eeb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "611efdaa-9086-40e5-b830-7ec10085588d",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "f14ed5ae-fab1-4665-b581-4839a9961800",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5349a2a9-2cb6-4301-a2ed-2bfd6997e09e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5c149286-a4e8-4418-93c9-3cca5b15e694"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5085233-73cb-4647-8e12-644cfb0707a5",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2099c68-551e-491a-9460-ecb8895c7a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ea05c65-02e8-4946-a37c-e30e95dd1840"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3e58743-e9ed-4778-bbaa-51ce63a16d20",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "384d6899-9a0d-40b6-8471-c954a13bfd32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f95b2e28-88bd-4d73-a522-74265156da47"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ccd87df5-50bb-4b01-86ad-0d9dfe56ac16",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "243e8904-90f1-4428-904b-90f5249611cb",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f5abae6-ea71-4ce2-96d1-c2e223c53bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c71901d7-b3bc-45c6-a0a2-2bdda3ef1954"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a555863e-76cb-45ec-809a-5930099bfd02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cdeb1066-6625-4f02-95d6-e9e14bdb7777"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "a8d78d2f-c407-4378-845f-2c091d076a43",
            "name": "Positive Testing",
            "item": [
              {
                "id": "a4b5f895-2cf1-46ef-a5ef-863363a66199",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a10ca0c-63a8-4de4-bf58-b3e4cdaa450b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "481cb64b-f8ff-4cd3-859e-4602d75f5eb9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ca6d90ea-33d6-4c83-9dfa-e9b0bca1c4d5",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "23876c5a-2a46-46b4-9712-14340c090890"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "f1c2024a-54a1-404b-b3d0-f70cb1854041",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e2706547-4be3-4965-8dbc-ef04280ae61d"
            }
          }
        ]
      },
      {
        "id": "435bb675-542f-4608-bee5-3599e7790fc4",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "25b5b112-3d69-482a-bb09-e9051dfad1e9",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2d9c5d88-c287-4a2c-bb4b-8000161f7977",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "84f448a9-aeb7-4cc7-bdd1-138f8a10737b",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "599346a4-0727-4536-affb-3c9c240a87d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb585c94-8127-4dc9-891f-afaf4edbca37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be4e9667-f68c-416a-8cf2-98acc4d7955c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c2e6458b-9515-4e4a-a898-b84959e9a13b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d9a28f1-daed-4bb2-9a8d-136eedc63208",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce4705b-12fc-4f81-af38-8e25ba35b61e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2055f875-2468-4739-b53b-9ecd4b409ec2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35d53985-241e-4d3a-8ca3-05077034bebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e19a7573-58f4-4db5-ba48-c87fed456093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfb9a565-9911-4524-9582-fcc48d3a76ec",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "76c5d175-2de8-4373-ac1a-ea8754479683",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce4254a3-2fb3-4b2b-a4b0-409e7ecde648"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4df9d06-9347-40b0-8b4d-a7290963ee44",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ca91b284-e20c-4a46-904e-e3af41e5f40d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e64663c6-6910-43a3-9360-cadc52d4e2f2",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "567c83eb-af5b-4ab8-9425-d854fd3e9030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed993128-745e-4490-a750-407347ad364e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd4948c5-c828-4b57-ae4d-b2634552d127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ab78864f-5beb-4b6b-88fa-7ec5df9b1b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "565dad15-71fb-47d2-9891-f99dcac454bf",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "085e0e55-61b0-454a-9f70-97b2388919e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3c76043-43c4-4b77-98a1-ed31c59d98bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "240f9100-f03c-4820-ab49-2baa96a1444b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3549605d-d3f7-4043-9ceb-595329c3cb94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ec8b42c-0ce6-4ee1-8c2d-45da4e163c9b",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16d65e26-ff24-4aa6-adce-71051d410d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1a3b547-1ec0-4eac-9200-a876db1c58f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "817dde90-f8bd-4c0e-9100-eddc3b1bf09b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b088acf4-e226-40ae-8713-400644764c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2059ab1c-6c4a-4577-ba8c-34de2b2ca2c0",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6194d838-55cf-4a2e-8782-19cdab46c5cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9b83ec2-1654-4ffa-8a71-f2071ec30635"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da9ffb59-18f0-46c9-b6c6-c9467144323c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "37ac9090-52d6-42a6-8dc8-a7cb4e569854"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cabfb002-a0bf-4494-ba42-ca859fb431bd",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5155782-8ecd-4451-bde6-bdf21165db94",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e9db0e4-bb40-4ae8-9623-2d94f75ebefc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd322d2b-62fa-44d4-8ca4-2bb21f901047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "98ae4f8e-987c-4e29-b985-46af6e96903f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e493afb4-4eec-4587-b832-8915be11fbc3",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4b2ec90-1586-477c-9314-9fbd0ef1bbe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83720d7e-d16d-4b92-a589-1bf80f443d0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c6dbcc9-0b6b-4c41-b666-aa17048c9b82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bd481cc9-48de-42fd-a719-d26cb4ed87cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c70de8c-6dd9-4eba-b407-0f14a8436330",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09950103-6b4f-4407-8955-2599079db899",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aa97058a-6889-4faf-bfa7-11d5ad3af5ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0327957-63a6-4bad-b2b3-9da78a2fa316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b3bb11c3-ead0-4e5b-a3f3-4e4b96bcfa01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a52ea911-5ab1-4fa6-abfc-fb1aca659c32",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97b9609a-426a-46bc-9557-ee4bb04af66b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f2e8ed9-680b-4c25-b631-dc03bc0a751f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99035c9d-a743-4d36-a1ef-2d6564d9c385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d533bff-96b0-4ca2-8f8b-865931ff7a50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11fc5d12-046b-4108-ae0d-e9561354b9ff",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7784a4c-d53b-48b8-8739-bf372aced28d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15739c26-1b60-4fd7-b1f7-b65e04f2b3f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2bdf3fb-cbac-4819-947f-38d317c4d158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bff6c1a3-15ee-4ca0-95d1-ef82961480da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36de0296-060d-40dc-8bb3-7e421c8491f3",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebdbe566-3b25-4116-8c65-55358f153c14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "649ec9ad-9494-4bd9-8099-ea06854bebea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80c837d4-7b0d-4655-bb8e-800f60f89d57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "20fa1b7e-7588-412e-870f-f69430765f0d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80f8ffd4-cbcf-44cc-96db-4934852c7714",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51e9dd37-a15c-4273-8fb2-a3c301174252",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1009514-b036-4a73-a613-1b25f9ed58f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e26c1a50-3b81-4e41-8471-2470bff41a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a57fb076-0f7b-44eb-8e2c-706ddf85bbaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "552c2dd3-5d6e-432c-837e-5756e2243287",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6daed8e-7d87-4804-8dc6-ef757ef7a914",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38242118-6ffe-4259-9be8-1003b5c0a527"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01288ce-0da5-4ecc-8a54-5a4565b949dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50fa2e33-50e3-46d3-a4c3-0ffc28ed61c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fbab29-02f5-4bce-86c0-a2141fef574e",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4716813-b618-4be7-a31a-1f4637874aac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1520bda0-4ed0-45c5-8129-6cc13ad57e8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cedd226e-13cc-412b-b6b5-42a7651ec9f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "53b955df-bd01-44c3-8854-07912106b0de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03a25e12-e5e2-4d52-b8ac-61d1f3622470",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eadf60d0-ad23-4006-b039-3a496db4fc72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58256dfd-8bb4-4353-8c39-d32e859c6fef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "35aa19cc-b928-4ee2-ad58-3c83d3efa167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5755f63-8ec7-4e68-b591-9e149643400e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3adba053-cc05-4377-aaca-fb26c896f60b",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "085b1c84-9fc2-41a8-8214-ede95b256b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5dba66f-3ba6-4855-9d45-c5b29a11fd80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f7cf81a-b3f9-49e9-b44d-e0c7e9f6f8b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "73e564d2-68ce-42b4-88ea-84954b5d2fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc323a13-3ef0-4349-afe4-6ff57ff80726",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6216abdb-40b4-4178-9006-1c342582c6c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50f54ae4-c280-49cc-9e54-44fc7c2c600e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6375ec00-11c5-49a6-a5f9-2826d90b2521",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "856fa435-6803-43ef-9536-5c26e7852fe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "346b66ae-ccc6-4b67-a42f-e34dc8797a8c",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dfef768-be0d-4518-9de9-2b9eadcd538b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43b8042b-6122-403b-9cc7-b0c0e5c08497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "273651af-260a-4bec-b506-3e11fc1c67cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "5e55699e-6860-46ef-a6e7-db658ac516f4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36ee729c-1960-4d4e-ac17-7ad380ce8a38",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfb15bc6-2867-4e07-b453-1c434f5b7c74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "be99f608-fd7b-42de-9196-936349256fcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e130a5a-8536-4341-b9fa-bc5d4eae4ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9196d1db-19ca-4aab-9ff4-bdabeda73f5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c86e592-0bd0-4d50-af27-cbb5bd5da12a",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66e447e-a11c-4e29-a55f-4b0dd7331c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bdf535e-2386-4a8e-bc15-5393044b968c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f00994d-72ad-4433-b5fe-bcafd2cef9d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6fc984b3-e1b0-4410-845e-33db2a16b051"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e0d822b-fccd-4eeb-87d9-57222f9df1af",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8556734f-4a5d-4807-b17c-f58179ab972e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2bdca4b-ada5-47e8-a335-6cd90ffe96ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7fc98c0-f93a-4328-81d3-36582d2fb1c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2791a4e1-ea8a-4261-8117-4027f455d66a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "599687f5-3c73-4636-8869-31b4620b23f5",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa72929e-bd2d-4f72-a65b-ad7759e110db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca3c97a9-5956-4231-b020-39eaf23eda63"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6c42ddd-e810-4aa9-8265-7ac718435518",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffbccb7b-e277-4a29-8928-e3ed1e79ce31"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c146f9c-8039-4b1a-82bc-cdac13adcdcc",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23c854c2-bca2-4f5e-a46f-bf8f1dc159c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54483a75-7e27-4896-b0ff-021da5b57d5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ac304c-d189-4427-aef1-52f1faefcd65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f827741-e3b5-477e-9d97-8e70ed08bcd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc65edb6-e800-4a76-b5ca-cee6b362dbf9",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf1d90a-7e05-416d-9702-122a22ee594c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0683a790-660a-48a1-bec0-e76b740cc154"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6a9fcea-08d5-4e47-b32e-599f7a4c4f37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "be1895c2-aa8f-49e7-b6d0-c74714c92dd6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9c79b68-dfa8-4eef-9fe4-08ef73cca2ad",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cc670d1-281c-42d2-8216-69ca181fab3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c50d9f50-3151-4931-971a-deeb3f90253b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "656f98c5-49c3-4ee8-8d65-777da14a93f9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "99ea7818-456d-4770-b3a1-7d3579fa7c3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9107bda2-6d0f-44f0-ad28-78809ce5bcc8",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a562ea-64e1-49e0-a973-4e63d8dbd52b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f57021aa-959f-4675-9101-60f8130bf355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65ada72e-6026-43f8-a2ce-4aeb7437b2f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f178d2e-1c6b-425f-925f-6c9d9d639f8a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "572e9b72-f2b4-402e-a7b5-f899904f98b6",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27129ad6-b95b-42e7-9e70-f5d1f48a31c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8efe01b9-ba12-40b3-93df-f522c167f5cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f37e9270-77f1-4c7b-856f-68bafd82aec0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3cb84c34-8588-4f3c-8f94-eedb47a9355b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f3bfead-bc88-477c-94f0-13f2f20c8a39",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bad8a2b-38d9-44fa-b6b8-d898b0ed4834",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b7def292-04d4-443a-b9e8-65bdb8086cc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a2ccf77-fa44-4ad8-a442-bf78c0f280e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5e2bedd-4b36-4d17-95e6-a9491bd9a3b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f7d3d86-bbff-4adb-959e-68842a0e86a7",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d62ceb4f-70d9-4584-a93f-7bc51b59d907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "464617f5-a8d2-4a38-a547-8dd192c8adee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d3af61-3004-4dc0-8b5a-098435c42fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "1a1809f0-35cb-4b1c-ae1a-c46bd79fe84f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70c9c167-4943-4c77-909f-2bbd9cd9ce73",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "654371be-3ac7-4dff-977e-c2a90f16554d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b28a9d27-3f6b-4dff-9c79-bc9a28c42ed3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62c43cbd-94da-4604-9a2f-6ec224f584ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "491e9d0d-9cf6-4479-a511-b3e80737f882"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d39337e7-ae98-4d3b-bf42-fddf1636092b",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df24e5b6-b2b8-4272-ab60-d77014d0c0f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8374cf2-134f-44f3-a141-7aa718918fa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "58831246-493a-4f5a-be53-448714e1f679",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c7c104cf-d169-4428-91b1-fba17ace8638"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd0e94f1-5b32-42a1-b007-f81a5c7aa380",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5255cbf5-59ff-4708-a4a4-546673bf8c6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1ee8448-372a-4f0f-817a-bb6fbf4af9e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f5adf94-6744-4122-ad45-fcf57da4b752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "17883e8a-fb50-4620-927d-3bd00726eb05"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760df1c6-771f-4329-a376-c9a773ec83d1",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c46a89d-7340-4d20-841f-928ebc31922a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "338adfff-8621-40e9-9a73-600483f6b49a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0aa2eaa-4386-421e-b39e-6f041ff698fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "45725e04-e832-438a-bf30-25da3a349c6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28c85f97-73a9-48c8-a874-4912f7048145",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a26d1911-9c4f-44aa-b8ca-61c23c6a72ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c2af7699-ca66-443b-8ca6-4f31b733061f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0494774-0339-47ca-a9df-cf979be9a28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "789f6935-df55-465f-8942-23973978a72b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a3cc971-ddf2-4cb6-aa8f-cea0a9064f3b",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb2e340-8785-4c75-91b1-48a3d39f7dd2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9cc40dc8-ec0a-4527-8409-0125f9d2a991"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17a77d63-d14f-4273-befd-8262d618e1fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e187da7-ca22-42dc-b107-332e99f9fea9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7af154c0-1542-4b48-9969-09cb7efd530c",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5bba74f6-bed8-43b8-8a8e-a4ed8a97dcab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "430ed9f8-989c-466f-b9c6-3a371c153c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18c635ac-0d72-4005-b8e4-d764b0c6ffe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb60cbfd-d188-4f75-af59-391dbf5b09d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85657be6-83c9-47fe-88ff-a8aa18e8db62",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70b51d1-27e2-4253-b647-bdb226775e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c92472f-2936-4f23-975a-de422f145c53"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b638396-8636-450e-b19e-2e224e212315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4643df4b-63bf-4fb9-a353-7bc88250f310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20c4804d-3ed4-4f18-85c5-f814b6dae111",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7af9895f-02d2-4ee3-8197-4037595ccffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c5bfda8-98d9-4854-9237-5097b02f580d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92e4fe1-097a-46d6-8393-e76bf27080ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "450e998c-90fe-4274-b756-2572501cbbac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b5d24f9-307c-4f02-8fb9-e0914885ad54",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4cac31fc-b8d2-495f-a783-09a149fc2539",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "05c4c53c-916b-405a-8c31-e1da4a220696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6f8d3c8-08ab-4403-bdc6-99d538006337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "49acd48c-94a2-4c76-b96c-e99a1a94df62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "365b60b4-21cb-4b53-8eb4-ba35e7d18040",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62df3f57-abe1-49dc-9f1d-27ac0d708a63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c0ca64c-21c7-4a9a-b1ef-5e1b0b994b5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3b2ed5e-cc4c-4b60-8d37-6a216d2a7ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "38c9d868-54a7-45d1-8326-630418b61423"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b70036a-3b27-4535-af4a-0bfcc413dbd0",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7038dc4a-5d09-494b-9113-68d5b1978bb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9dd81d1d-61f6-4dea-8e2d-dca45027ad8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da23ca22-423f-4392-bfed-fd9ef5136b30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c6273e34-8162-440f-9a58-05f8342540b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fbf7d41-f06e-43cb-9b1c-0dbcd2b1763c",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "131720af-9977-46bc-8237-4e9448ab2e96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2fc8422-b6b4-41c8-85dd-9b43e1beb30b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3cff54-fa3c-4ded-bcbf-f05c9430b16d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "26c07861-6b6d-4a58-8dc6-14c07d7bc299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3fa70ab-3db4-415c-a936-9ab29294a674",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d139209-9903-42f2-84d0-9a46a2e90fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "96fbba39-b469-4605-acbd-9766fa1cd59a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7aa6d54-45eb-45c6-885e-677ba4b037b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b7e2d1-42e6-4ccc-bd4c-32f4c9b3fdeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8cdd2fd6-a5b0-4981-81ef-00a733ea420e",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "235719cc-8454-48c8-959b-2347e311cee9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea068a99-b9ec-4ccf-8927-6c8850231243"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8450adf4-eccf-464d-b29a-358ba428c656",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a5c2baeb-a699-4f92-a2a3-c1c165be0deb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee7559ad-2088-414c-869f-c2d02f6588b1",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "77dcee43-e341-4810-8730-663629c27abd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb6198a5-33b4-4be0-ac73-f57d5cd24ad1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "880717b1-95d5-41cc-afab-aa245b67f9e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d026469d-91e5-40a9-b0e7-31a3a12bfec7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a97768a-2acd-4621-9c9e-5d412086796a",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f425fbe2-2454-4313-8b46-d76ef6a00aa4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "afe3f95c-7639-4e0b-ad2a-46fefae2e22c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa5ade41-1f31-41e5-b313-97d4f03dfbd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1df3eb87-034d-40d7-b7b9-47778d996496"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2057d3a-d207-47cd-a220-939e893b6d4c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38fbf627-9022-4ae1-af34-4d69b83a6d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54f5e15f-b481-4cd1-8abe-3332922ec0a7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04d671cb-ba61-4bb7-a1c4-48eae3f6fc32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "069222cb-b426-46d8-97b2-aca6d1ff12e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0d261bf-9868-42db-bd79-bae5b5977bd6",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "438382c5-a085-4f8f-8ddb-930a3e9440aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b2578c1-9b14-480e-b7c0-795912577fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1096cd5-6633-427b-8ed4-57d8845e5eb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bd17ca2c-c96d-4a66-aff6-967814946d6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45717c35-da5a-44ef-9a42-a4d331fd9095",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9197180b-e1c3-46f1-81e5-336c5a64e81e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b74a708d-2591-428e-90e3-56aa0f1b2df6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "469b33df-0daf-4eef-bd55-2ddfb14735b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "eeda6042-b93b-4470-abeb-5fe25005cf9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81e99775-f5d0-46ba-a7e4-8f810194c1d5",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d22bf9c-9a5e-40cf-a39d-0e94d0905c7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5e393d2-4c13-48ba-806c-4369b58e1b58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3750f85d-a969-43df-8f46-af573219ff74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8d41426d-0db5-4447-8a74-22a740017e34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "231e0847-07ac-4a92-be1b-b8cf237a840e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "757552b8-447e-4dd5-a5c3-257b7aeeef66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8bfd311-491d-43d3-a48d-03c075619b5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3a881be-28c8-4090-8078-72d2116f30b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f12c6803-3a58-4be4-8525-200013c9d8d6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922775c8-befb-4239-b680-92665d2ae95e",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec40ae91-cdd4-4058-9c7a-7d1635ec235f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad67989-118d-487f-a55e-95d26547ab55"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "521a1637-e840-40a9-916c-6817fd217982",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "30fa5866-f27c-488a-9eca-e3f4b70f9720"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcf3a965-43ec-4f9b-b01c-d8bbbcac60d9",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5727e750-e973-4ada-bc57-e7101d692558",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99cf9c6a-4293-4dbe-bde0-b27bbea422f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a40b74b-c2c6-424f-8556-963e1f3b40dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5bc14aa-d79c-4752-a845-4ef1f5396fd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91ba3427-f1f7-4a02-9ee3-518aaa400c77",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87475ce-fd58-431c-882f-47514f9946d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78f399e5-9d62-4962-b5b5-b034a7bd535b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0db6ea95-3619-4a61-88a5-716ecd80eff6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "b518d838-f11d-41b0-97da-1d9cb51a2e72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f02610bb-5fcc-49f3-9ff5-81ff414f2819",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0052783-9206-44da-aaf0-16dc8feb3c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c00bd675-1b9f-4ba1-91d5-869a7c6e022e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c13a50-c7ef-4081-83fa-0601f94c6af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "f74474f5-3fc6-4507-94e8-3cc5610be40a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e719b19c-5a88-46df-9eca-e37ece4b1c7d",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebaf3386-ec5e-45f8-b473-68dee93a753d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1923153b-e320-4dc9-b91b-026e14100c04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f459242-82b2-4e3a-9967-e1f9ed757646",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "07675c4d-acfa-4fe0-acb9-d8dfba37cf24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2b5c7cd-3d68-46f7-8689-dd526ed34542",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b0cd59e-31a5-414a-836b-a25e9fdd7324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6799689-fd65-4a8f-8ca4-160b4f0e72d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6788a515-6e80-4549-9fd6-ce9458779124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "da6a4889-2d86-4fa7-a292-0401d3495500"
                        }
                      }
                    ]
                  },
                  {
                    "id": "090697e0-da06-437b-85fe-bc8db6e79d59",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "109ebd80-466f-46ff-9d0b-22b2d06db0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9a4323c8-8bb3-4aca-93de-a6e165fc8de6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193f5303-c189-4b5f-8f42-5c5858b0aca4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f74093d6-02be-430b-bbbf-49a6884a8b19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9564b9-1ee2-4d1c-ac64-3b4992543c32",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0532a356-4359-4f31-86bf-56ca3ac07ee6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "569b5337-3243-497f-8ec4-978d86d9004d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "884c330b-d1cc-452d-9dca-ac4c578fb5eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "0bca2ffd-63ab-4000-a639-e4e70b777850"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93986651-e8f5-4d94-93f7-0d73843f32d4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4318a82b-8b4b-4afb-9e25-55a462feaaf7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47fe60bb-0f72-4987-9fb8-a5e0adff319d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cac20c28-c88b-43e2-a159-843fa23441c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f266413-ac36-40cb-8041-2a6a6317aa5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b40e6e1-70d1-473e-9223-20fe39f748b4",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70ac9c05-b3b2-4ff2-a182-4287405c19f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86c56ca7-87f0-499c-8a77-1157a620b804"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25e15d87-3692-4124-ba10-61d319825deb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6c3118d-2599-4ab6-87e3-6cede2509f91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f97748a-c44f-4d37-9614-cc439379fabc",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b6252f-0795-4bea-91c4-05c0a3af11c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7cc54cfb-7caf-4a18-8346-83cbe619cda1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8efd76e-7594-4697-8256-c3440af72cd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "54486b3a-3383-4c71-8718-101c0867cd25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8450eebc-910c-409b-ae0b-a15135981c91",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebec3d71-73af-45a4-9a5f-6888415ffaf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37daa3a7-5659-4e65-9284-02e18970c256"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d87790-233a-4968-b5e9-401763f6fcca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "57458051-f981-49e3-bf6e-b8a4fb4a13f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acc9fc5d-e039-4825-8094-7709dd311d6b",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "788eb491-6765-45cb-8d26-d6c3e7c51e6f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9efdc2ce-05cc-4e38-ab5d-bf9a5f1b4a5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a0090da-a804-4367-906e-b87db121162c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c9be7bff-938e-410d-9d40-b9101f3cb5ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4af78c3-c89c-44d8-ace5-b4068341f174",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb5e7610-1875-40b4-a552-c58b507eb482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c347b1a1-1db5-481d-bacf-b8d76aea961c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc0de67-94a1-495c-9357-10264c8a0c0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f1c48391-680c-4d21-a877-9f44c9e558e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "275b26e2-51ac-4d66-81ad-ca3d6dc793ff",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7537a36f-7145-4d02-bfaf-e58df4ecc9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b2f481e-cbe2-449c-bb4d-c45217aa6b62"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a98dd898-dad8-4e35-8775-e61161abf159",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "700ec333-136b-4b23-921f-866af00a486f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2ba8ee0-5ac8-4d0b-b66e-eb582c45a7ee",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea681c2d-305b-459d-b4c9-5e9b5c1392e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ac4daf77-49e4-46fe-844b-301bfaf81fa4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70fde5a9-abf2-46b9-ac85-789a06ac71bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "918c4772-9ba5-43f2-ab53-4d9e63281a37"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32e0e92a-3832-4bc0-9a59-08238ac8f744",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f79add9-a369-4d32-8b0e-5e583b0b467d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a161dcf6-63e8-4a0c-94bb-49e6a72488ba"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "499218fa-1af4-4f35-a201-d558e29b3ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cf5d89b2-e277-4173-bbba-37d7adbb9ef7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c52f8f0-8837-4b2f-8bd0-a122e33c6468",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04adc852-a400-4c37-b93c-00107a8fa9d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef3c9864-34a8-489a-ac02-b9d9a96da6b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bbfc1bf-4682-4353-b8a1-6e539ecabcc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0ba2a242-da04-4b4c-9c4f-455767d0e2db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cfc5b0a-6e21-4b5c-9117-a02a7b98c32f",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e596de4-020f-476c-bf21-efbf1b66d737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd198dbf-6034-4ab3-9901-b2d5770e1876"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39984537-01a3-4254-ac59-381219dfd692",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c22c419f-9427-43ab-91a7-94597510edf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6627166f-35a2-462b-9ecc-b4cb3b554bec",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b979918-812e-44d4-8c78-1d8b3c9fa622",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31774255-0dcd-4954-88b5-d68c8affc0e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "032e01a6-8611-49e0-a03d-ff24b87625e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "715f315e-3c97-455b-8601-1a5cbc1de17d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fc9705c-6f3c-4be9-8079-0c1ea72921d7",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d95decea-0f30-4103-8d39-3f8b48aa55a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "833c8881-0250-4b9f-a84c-028ca725d58a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4364bda1-6e43-4e75-9985-223f4f34af5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6bd7d401-bbb0-4b14-8575-0f7dfcde933c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3679a0d8-9d45-4a59-a7a4-380715474d7d",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3a32933-713b-4592-99f2-72cdbe785766",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8d7749b-e870-4a9b-a113-d7d99ed38c7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a85cfa43-9be2-4b59-960e-8cf574e3d56c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ae5003cd-5e28-4583-bf72-f3e1a6de069c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1860fa95-0207-42fb-99cf-51aa2cd50bae",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06d101b5-a3dc-4218-a481-a5bc49828182",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2297651-a567-4902-a90e-200f8a118acf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5733156f-3b93-4b04-b3c8-878cebd930d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e770d465-a0d2-410e-b1f0-d03f58a8610e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fd42755-b2a7-4c4d-a505-80ca01603faa",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98d343d5-d139-4654-a8ea-1bba8ade3f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67a426b7-b936-4700-b328-c7a0dcc1e93b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "271e4f4a-f222-4a13-a513-08a255f18f47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e6ad0f7a-ec8a-4fe1-a22c-2e3805585abf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01108b4c-c26e-4763-9659-767e2d018bbc",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7256816c-3f4b-45a0-a09c-90a67c6979bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dcc070b-a471-4840-a78d-deccb0dea8bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4920de1-c652-4f33-8c29-69235d9b7123",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d00b4273-9789-4ac3-830f-43ed60a9343b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ffe8cf6-c699-4876-bf68-113b242efc11",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15b0e6b6-1721-41c1-b605-42fbad3cde89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29590446-7de3-4515-ad86-2a01ab1d6dcf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1f15724-0c12-4172-b62f-5c1f61778b2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "09cdb65b-300f-48d3-bc40-670d73ae4b9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a16d58-4757-41d5-805e-3471d023b42e",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f713abf-7291-455a-9525-1a644fd79183",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47ad3448-d521-485f-b8a8-a02d7cb86adc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18067189-6fc2-400a-8252-55c66c1e49c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "908e1f86-72db-4616-92b8-f6e06cebfdc6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19d8c950-bb9a-484d-8110-768a161530d7",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e84bedb4-8563-4195-9d02-3e215c798ddd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba2aa4f2-8259-4824-9b6e-c74d5068a60e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cecc104-b28a-40fa-aeed-3265641a8db9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "5c4ebe03-9233-4f8b-8b12-273595614494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997a853f-0483-4af4-8024-196b43438adf",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf9daaab-c66f-4124-9d96-a84de1b46341",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "736c155c-0707-487b-be75-bf591179a94f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32137f70-0b05-4a85-b9c8-b1e7c764751c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b37c8770-f860-4d77-9a0b-4840dfdfc816"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9feffb2-795b-431b-a7c1-0cbba7f8451d",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac1a9b40-227a-4fd3-82a8-b97b419fa273",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbe4c371-195b-41b2-9dc1-aeb3ec2fe6ee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc9bcf48-5200-406f-9fde-db87f2f13f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a247a1e-6b96-4874-bf92-571f0ac30169"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b227922a-003b-43ea-81c6-5795857d82bc",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f3edd96-e53e-49dc-ab91-faa1ff2793c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f55585e5-0534-45fc-9027-c1b42282ab83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bc28a29-6b44-40ac-9b70-7f24aab22dde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9df50a2d-1d6c-40a1-8bd6-8b76bd34a9a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0197bbad-c3d5-483a-bcc1-892203503548",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75a010b3-e760-45bb-ae1e-e5dfe1d37eb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "966c35ce-02f4-4c8d-b157-234108956410"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d8c2e33-f431-45c4-b7d0-7c3931818872",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3f0a103f-39f5-4a5a-898b-9a01e921fdfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6eeb099a-3464-451a-82b9-faef56d9f33a",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6bc1aa7e-6528-423e-8f82-02e29384cc21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cf46b54-1798-426c-9a40-af809e7a73fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e68faad8-cb71-49fd-a148-ade27b1ca49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cb93dfe6-a61a-44ac-8267-c5b2c201f8c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3d86f5f-2749-4bfe-935a-ca591cf064d0",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e8eb70-7e50-4b92-ae0b-351c2310bb92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "590da409-2c7c-4d95-b373-b454f5e8adc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12e8c47b-3654-4036-b4bc-c2812fb94390",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "62d1b04a-3064-4798-bca9-e230ff090aa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "604f720a-2f97-4a54-b8f4-544ec80412ee",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25e76901-70d5-43c0-8898-f66004633963",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc97a4f9-f7eb-4e06-aa9e-e70f5185005b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03d65862-fd43-44e9-aa3e-0f90e756700b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7db1ac11-7ce8-4501-8634-bdee6462a47d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1095dd90-969a-403f-b987-3091d42560ca",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd1fc7df-3853-4c21-89ac-530259d2d37b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eb0cf3f2-25f5-4597-8d1e-47d55b69bd0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75483eb9-5266-4eb8-a968-07d572a365fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf832dc0-15c8-4276-b345-5c2bf61fcc5b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92085059-8436-4e99-99a7-c0a6209b4926",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8541b826-274c-4b4b-bf4e-24227ec284b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d707cb8-3412-421a-9ede-2053694fb0fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e382401e-c331-41d3-94fc-10905d1b558c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f3c11b53-6889-43ab-9147-e8197243876b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e542b800-69de-4054-ad7a-6ddb7d71173b",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f750486c-6b72-4f8d-aca2-b607d10b47c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d0a42ea-6aa6-4635-9777-df76228cc85a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a85f94d-ab22-45f7-8ca5-2a71a0f7b860",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "1f5c11d5-eb51-4fee-9c98-fd85afd7ef3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13e246ce-daeb-4ae2-a5af-1eb67a663e77",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2397c695-84af-43c2-b07d-06ffd759e5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d9a8c741-f662-4072-b9ad-9e7f55a60708"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d266ea-27f4-498f-ad9c-79a2d1871c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "5e1c9f5e-174d-4478-9f02-a21a447c7e66"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7fe042a8-dbdc-4d2f-baf1-bfbd2dbc0fd8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "1a2edc1d-8fbe-430d-8100-d6a4d2e309b7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b13d1e9-70b1-404f-9004-63b41c624b86",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e949de55-ba86-49ce-bc86-161d649cdec0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c32a82-9c8d-48df-9489-5f9321d4a120",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3a829e58-f5d0-4389-9941-1db142d0330d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6495dd0c-925b-455f-854a-9704957a26f9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "faa05b2a-9d58-414b-9041-8f6d469987a1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fda44b84-d002-4e57-9a02-e02d89e782e8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "23f984ff-f426-4442-bc0e-a8e9c599816c"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "af36c055-8fe5-44c8-bb1e-b76c3f84993a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "cb400e54-9b00-4dab-90da-8af9dbb19439"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "71e9e923-0278-458c-b18a-528f6b156aca",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a3451c01-d7e0-4968-9a96-4fef68c4ded8"
                }
              }
            ]
          },
          {
            "id": "d8d30785-1b19-4a97-90bf-8a94c03c85d0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "d67ff04c-1987-4334-8607-77913d7a9723",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "18f99207-d0fc-4190-aea1-a42dd0425d89",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa772322-de12-480f-acb1-b0c23a26124c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "29483b43-d4c8-4950-9dab-6efae6ded891"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a088289-1643-433b-a511-f233ea68d1e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fbdb8494-1851-4f97-b537-31dc1efd8a9d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "e6ace50b-095c-4f68-b2d2-8c9d9091ffee",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce80dce5-74b8-4aa9-a32a-e6af52560a6c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "dd93a15c-24c9-46c7-b148-eeff6931215e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5c777b33-193c-458c-affc-7f3b3be10d9b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "beb09861-8ea9-4be8-b921-6cf53c666a45"
                    }
                  }
                ]
              },
              {
                "id": "71a3cf9e-5e65-4ce4-b10e-a2b51310480a",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "83aa9e73-637f-48b3-afce-d7e64e66ca96",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9cb9b253-3c9f-49d4-bd95-8b6ef57b828f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0194293f-3600-46a5-b5db-c4c422cd7e04",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a954657d-8f6d-46ab-bf8e-74e001f4836b"
                    }
                  }
                ]
              },
              {
                "id": "c86bd9c3-f935-4524-957a-492955bed60e",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5988740b-4c78-4410-b124-edddddd3ea28",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7bcf1fac-edd7-421b-a286-0dca89a10090"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "4235dfd7-9ea2-4e21-a7bd-8be823fd4d71",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3d7ff5de-37c3-4733-9d1b-0266605fef0f"
                    }
                  }
                ]
              },
              {
                "id": "96d8e920-2d78-4424-a322-ef61d2fb4904",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "97596685-b5c2-4848-966c-a14e6d2eb96d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "121ce418-a980-4a5d-9734-c0795819170c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "95d5fd79-ef74-4e45-85ea-a3e761604547",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "e93abec1-92ca-4ab1-84d3-9591e008a141"
                    }
                  }
                ]
              },
              {
                "id": "fd47faac-f362-4fc7-803f-99521d0223a7",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ca44a1f5-854c-4bea-b088-c4504f667520",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "e7500a1b-8ecf-433e-b6cc-efe250f08c8d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "28e44cfd-ffc1-43cd-abde-f376cc45f804",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "fff955fd-11dc-4802-8bcd-dfa4137dc42b"
                    }
                  }
                ]
              },
              {
                "id": "d0b09eed-b813-439a-a13d-a1b19ebcbd38",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "43bf2d32-c5e4-4506-ae33-5199ea717a60",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce5c384b-26f2-45a5-8f82-509a65f80872"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "51153038-94f7-4c21-9b13-255d81d98f97",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "aa327519-c414-4382-8569-d399d471d63a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "f0cec6e3-8cfa-4637-90d1-ebc29ad26c4f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "685b05b9-bb2f-4ac5-825f-eae8dc9885d2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ca6d82f8-b446-4f60-835b-0f1df319f8ce",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "81ce2f5c-6c5b-428d-b6f8-ef3468383fb4"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f5ea09fc-d13f-429d-a137-00dadaa4e733",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "05a5f242-afd7-46db-ace3-b73ecf2b1a14"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a93b3ddd-93ae-448d-be9f-6af74ee61976",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ddc9da23-9e10-4809-87dd-84fdb9e1c069"
            }
          }
        ]
      },
      {
        "id": "6d765d2e-f332-4264-815c-5b38f58e3be5",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "5f78164d-ca6a-4531-8513-b9422e6df8a3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "34503a76-f129-48ed-a401-37507eccb443",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "83108534-1a74-454e-8bbf-b9b08c235c21",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "388377ef-78b9-4d42-a073-1751f67ae892",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d37520ed-d1c0-41fb-879e-b894a355ac6e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3409e025-0fa2-48e7-ae0b-2967b759934e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "7c273aff-5f44-4eba-aeb5-c122f77f0cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d40ec68a-a712-4c15-b0e3-6dd714fe0872",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04cf3bea-5ca7-445f-a6a0-d7e97be214ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1d1cdeb-3ce5-459f-ba01-fc7f47e4215e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "624b7dfe-46e4-41ab-9361-32a6b3b9697a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "578ed15f-f275-42ee-9a56-b4e34a5e1ff5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c14555c7-a6aa-40d2-bc1d-d06c1f83ddbc",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "802cdb35-8c69-48ed-86a2-1d9855bffd2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "213a0103-cb9b-4553-8bd5-9c4fe6c9270f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9b4e98e-3257-4bf6-aa66-9a137ff54ce2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "74e6ae99-f63b-407b-a88e-0a7447e76b7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3e53d8d-b7d4-43b7-ba41-60144b057802",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e27fed80-e620-4f77-9cfc-08625d408ea5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56111634-69f0-48d6-b028-c8c7dde24245"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f8ac77-1324-4024-9426-e033b74a4bdc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ca3d2b1-7732-4cd0-b7ec-a101a47800bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a634a55-700e-422f-9d81-92f1400b808b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61f88d3f-3add-40aa-a136-3cf114879bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fcb301b-511b-4dfd-8045-a04330bebaa1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0168f348-ebb9-4ab2-80fa-e6e5b32bb4a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dfd32f8-47d2-4be5-865b-58d8a2e879e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1428687e-f211-4a81-8842-2777e4186884",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7627d7b-462c-4d1e-95ab-2750ba7639c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b97dea2c-0dbe-4943-afe1-d3cbad19d9bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cae93aa-2305-4507-aa98-3fa4cf45c7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c5b7f729-bc1a-4b8e-af17-4d09bd00481e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a9501b9-5717-4c4f-b196-33999e9f9c67",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24ec9387-b7cf-4c4c-9524-20ed4740ab5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee7239c1-330e-4037-83e0-385e77fdba5f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebf2c164-fab2-4d8d-b743-6b505fbd3a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "7858fb5e-458f-4fe8-90e2-687794725b3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5e70c89b-c273-4877-816d-a6e4bd54753a",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd7479aa-6a8b-490f-a741-7fedf8527269",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb97ba40-4e5c-4f7a-b814-d02453b33be2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d1553c-94f4-47ba-8bf8-1b24bcd49eb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9c166572-2135-4fe4-b1eb-cb960aba4bb8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e0c8d8c-0b22-4d31-aedc-aff55c5c4b78",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0891c504-548a-4abb-ba78-f6eb593ed821",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0da1966-a140-4843-96f6-9222bd6ec80a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2af1958-33f7-4d32-846a-2faaec2488ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a25e3e84-1f4c-474e-bbdd-e8b6aaab74e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0583b4b1-7b82-43f4-9382-b64dafb21d13",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6309bc5e-8500-4ef8-92ad-8b1d43db2671",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cfbbd14-e2c6-410f-90ac-d9671d0c64db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9134985e-eb4d-4ef1-85f0-799c4c4aad76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3067a5f1-a861-49e1-88fd-cfa179f9e9fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44aa25e8-8a24-42f5-9cf1-37e7bcaed7b4",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4d55083-3c75-42ad-b25b-d2b8ffe7d76c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40e95829-f4cd-4457-a289-f8ede84dc8fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3457610-0ad6-4daf-af46-159c8c840d19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "923a3a6c-6dc5-4427-bd1b-7e792a0f5e19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da1ba8c9-769a-4924-97dd-c1d9d96a8f20",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0e8f6bb-d7ec-41ad-8e74-c179debd9ca5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aab5931a-0c50-44d4-a8c6-868fc26b1db5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3aeb5361-f548-4a8b-8c0b-1760e4fec91a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4e86fcbf-43a1-49f7-912b-99ff916552ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a69c30-8f24-44e2-a744-80c9db059541",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f661bca-974c-43e2-825d-749dcb4c1047",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa7a14f1-3906-45d6-946d-13041f07e984"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716ba775-a243-4301-8088-3ca36f6b5c2f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "8e02f4b2-0409-431e-9cf9-f90e980e6184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "590999d7-7f18-4723-ad51-e06f527c85a1",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f399c96b-a10c-47cf-8d46-ce318d25e0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00ab55d2-dbc5-4df5-b141-669d681cc26d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c4d3776-0bc9-4e6f-95eb-3f10ac43bad4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "f6326898-5e2e-47a4-b158-c80eec5ed1ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "132e4c82-cec2-4d83-a71e-703e546f9b82",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a5eb0d-d5bb-48ce-95bf-27d661921dbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de418de3-7348-4f6a-af77-d3b7066d8bda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d96b7cf8-b4ba-48df-a11c-f1e64dcbf0ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "f17e0c20-3971-46a8-9390-4c0131cb7dd0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26f12186-be41-4a14-a5b1-3e1228a98121",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d36f824-b799-41c8-8a59-dea8b463f832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d34cf7f-6f4c-4f84-ae9a-166565329bf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aef73ca9-0c7f-4cb0-9b3e-7bbb2c29c88b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "fbff83b9-e403-441d-a212-6042c83611f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7084c026-de84-447a-a50a-81ac4f425203",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a31bf3f-fa0d-4c55-88fe-d51dee64ba70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "772ddcd3-7d1d-4812-8520-1fff9437be75"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f55fc51c-cabc-4010-b42e-f4ff255fd02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "61bfd1ba-9056-45fc-8719-d86e60d9af9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc60aadd-a616-4111-ba39-b8e2ecfd84f7",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4577750f-2c6a-4f4e-a0ae-d6ea13848a19",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84d3847f-9d05-48cd-ac9f-9db288277710"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53e33abc-ec2d-458e-a40e-c2270576bb16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "baae3366-0268-42c0-9f96-be55af7e4911"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e1e03955-5d18-42e1-9aa5-dba8f1f4d4c1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20ba8988-a077-4f5d-8f4e-9e025f0533bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "25f8b871-8baf-4d5b-8f4f-f8a719e282c0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "363ac9c0-9fa9-4f88-9e5d-389a29a6bb18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b29ead1c-241d-4d12-8598-4e8af8e5c316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "042a99a6-6df7-4b8b-9684-2159fca00e6d",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "096e6fe0-77c5-4e73-b0a2-b390c28da841",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f24443-f8fe-4486-b011-a0f801052032"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b7cfe49-02c3-4242-b19e-a3ce012a0fbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6af50703-194a-4510-80f0-a6894f67656d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e9deaa-0222-428c-9cc7-9ce9ee0f1874",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c006a72d-cb3d-40d6-a8f4-933d1586282f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "102166cf-6602-4f33-91ce-9237dadc8bb7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc82b2b4-0bdb-4597-878d-27b8a7c60006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fd0668d7-ba94-45f1-8951-83b501a0257b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74ab9f46-a7b6-47f1-8c4e-42b9f6f62bd4",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d5c0d7c-815d-4c8b-b113-e575403e1a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bce09d7e-9c74-484d-ab10-4a19c8baee99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ba7a7cf-aca2-4f2f-9687-cc5ed04ef509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8202cda4-4a9b-4a1a-a533-8dcb1ac08fd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2665300-b84d-4ce8-88eb-d2b703800e6f",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e38c9ce-6321-4fb1-8b1c-8680682e1668",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c02c1b0-afe1-4509-b635-3b577710cce1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d3437b2-1e45-4185-8d9e-4082132e5920",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "effae232-0a4d-437c-8f2e-634063dea1c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94b58582-a08a-4435-a0a8-27855d81c76c",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad429a0b-44a0-41ab-a77a-3a4da294b21a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce083074-9fa7-436c-94e5-05c6fba1012c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "893076f4-4631-4cd3-b2c8-71a5e357b01b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2592298-a46f-4aa6-9d1e-d9890363ee1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc687e36-7baf-4e40-b460-62645d844469",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61453fff-a2ca-426b-91f8-13e88be863d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3814af9c-3fc9-4722-9b6e-397f19714eee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f20a3ae0-16a1-45db-8d16-48e2967eaf11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "611ceac5-68f4-4fe3-ad16-17b46690a248"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cba5a6e-bf7c-4ed1-a8e1-4152c71f979c",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0457470-2e89-4c9d-8ea1-1bcf9bb33669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d440d5f7-d7dd-431f-9376-5e4eb958d0ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe10c6d-9cca-46aa-9767-a04a140da906",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8047f7bb-b8f5-422f-9676-d810586143c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2477611b-99ac-4d3d-8a91-68e7dc812afa",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1dcafd9-63ca-4f17-b91f-6968e4134bad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4917e702-22e3-4b36-9c55-8f3f9bb4cfe6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7dc5623d-5d27-4aae-8a7e-ee504a979b00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "80d33a41-d75d-4e87-a53d-e1a0096a8be1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ac292c34-c6c3-482d-b314-983d7f845878",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "97615b16-574a-4065-a19f-04a8b6797bff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e6d0f54c-3c50-42cd-b765-a4ce2c8c9494"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "626e8a5b-3bf8-42f5-b530-1beae45b9e06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "603abc83-9f6c-46f6-a993-9d530f284da6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5598642c-7d11-4b5f-8801-7fe18d7aeff9",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0435a290-8e4a-4c17-8d23-0b585eee43b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6d7bff8-2157-49d3-9218-782d245620e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa2d7e38-d2b7-4278-ae4e-86fa5f0a13e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "831b9cfb-3577-4e04-8e4b-302f5d111468"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8fc9a968-8878-4ad7-9015-be70681e9631",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e7a8bb-6bf1-4775-962b-d0395ba399c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e096c21f-1c3c-43a5-8d0b-a3ee0c110b0b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75050372-48be-46e5-a0f6-1295bbfe814d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4e1ba75b-5481-40d8-82bf-418cc9077ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef5c8309-1476-47b9-b0e3-3b863b975e65",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9734e240-8cf2-4615-85f3-e19e9006f710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61869908-419e-42c1-90ae-c606cb237ade"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6ad03d4-63d7-4c4b-9812-a4e0d99d3574",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9a4c4191-255c-4c5d-9f8a-4c9d2b4fc502"
                        }
                      }
                    ]
                  },
                  {
                    "id": "600b1a40-7a06-427e-998a-6275ac296bda",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60186d39-f92d-4b38-b657-8efbcdb701a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c44f2ea5-eafa-4f31-9149-20233877d702"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb5e039d-3449-4fd3-8ad4-7e5b2db836a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfae74ba-f5a4-4dd8-ac4e-15bcda0efbe7"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "dea8196a-d357-4768-8e9b-1cd9b92ae707",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b1479bc0-9e7a-4ccf-9c9e-a93224da30a6",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "705285ce-f965-47a8-a82e-68b0a27ae264",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8db94940-7c4e-448c-affa-f983188fe5ce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "863fd9ba-5d46-439e-8335-c8fb8214f1d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1d7ba400-76dd-41c7-b0f9-bd3095c1e7a1"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66af5f35-59af-4bc6-b76d-e7fb6d4b2e7f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5c379d2c-670b-41fe-bcc6-fdaf1ae21277"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e37a3d58-3e2f-4b5c-b08d-3bf7cb5ef884",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "68022325-21af-4956-8f7e-0502132bda5c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c80a801e-6de5-46ec-bd0c-3c25c77c024e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "13cee0d0-f4cc-424f-8d5a-db204d0c12ef"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9ac3df9d-5005-493d-9e2b-686d61c7ed45",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2c90ce67-fea7-4bab-b34f-8494cb949b28"
            }
          }
        ]
      },
      {
        "id": "75431694-751f-4627-a19b-6c6115d4daf6",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "04172a40-f699-4658-9aa7-9c05a6576189",
            "name": "Negative Testing",
            "item": [
              {
                "id": "8c70bafc-0dc2-4f57-9c60-03d801730c96",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "8e0924df-86d8-4074-9098-675f59256fdc",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6e4cef8-30a2-49d3-9d42-6d9dfcbf1e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8bd10c38-c1aa-46e0-8487-4b80252a4497"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c35e49d-b44c-4171-a5a5-05ae3b23ea4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "162a0f63-6879-4592-a05e-88d6d45fe48e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72d867d0-7940-4e92-b256-0cbf2c9755f8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09bbcaf8-7c52-4fa9-8e2e-d30970a39994",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf2cec7b-cfc5-4849-9ad7-75e968f30812"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aaf2bc4-034b-4f35-a21c-0e8e5fd79c1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "80fa882d-aec5-4d2b-bf7b-1bf6b0945abd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72ac89b1-34f1-468f-87f4-4a43866e0ed0",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bde56336-3fa0-40da-a7ec-02266af435c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "919c5508-f62f-4486-ab7a-dde02744f355"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e91bd56-22c1-4764-9981-7f82c62ad7ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1b3f8067-9939-468d-abbb-bbf579b54ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef7e1790-4766-44b8-ba98-0c5f994cb6dc",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d5f9faa-8c1e-4d12-be67-82a03a20b4fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8190d4d8-430e-44eb-8036-bf4c226a6792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bea7d5fe-f4f6-444d-bfb7-c2945c846d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4ce8d18-16a7-4bae-abdf-09b32f14e10a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db0ef1b-bcf0-438b-8148-6d0dff6282e9",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e4ebb13-9e48-4aeb-8f89-005c70159067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c1059a08-a109-41f1-b891-925ac575c2a1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a174fd0-c351-425e-bafc-54221ff2753b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a67f7bbb-d3be-44a8-a96a-54a7d5bc0627"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5faaec10-9233-4ff5-80cd-9d5a38d5ee0b",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23de07bf-82a4-45f5-ad8b-113343601f02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4fa6173-a266-4e78-92b6-547572130cbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f7d0de16-f76e-4122-824f-a81fb79748b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d7053ddf-c547-42d9-b708-0a6e5b66fd64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "789992ab-0b08-4c58-8057-d189cd3623e0",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "955b9198-93dd-4c81-9fa4-473a57d17387",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf6cd0e1-aee4-4e84-aeca-f1943e389305"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "944aee7a-c361-434f-8bb0-8b94c74329df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f24c7bd5-6a65-4c4a-9ce3-eec603be7ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ff51f99-ea38-4dfc-a51d-0f7a40aecd85",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7ca97ae-6740-4e12-a8cf-6166b40bf7cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c1695d1-da00-454e-bf02-9bda537e512b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443d9e7f-165c-42d9-a239-96602ed99168",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "fcf381db-303c-4106-bcd3-7c7a646d1373"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b27fb6d-0a74-4e68-84b8-a71ca554d05d",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f2f4007-540b-4ca2-bc83-aa0967b8bd56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7024a25a-e0d1-480a-b32f-9315143c77f1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f818fe3-9f00-4a15-89b4-6ac7dcf010ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cd66e90e-dc4b-41ea-bb6f-5094610392b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1295bb50-0c14-4242-9aa8-7497eebdb2df",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e5f1599-3e31-4a69-8c91-925e158a2f1c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff5c453e-8980-417b-b5b7-77a11f09c1ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b8578e5-e1aa-4bde-a0cd-92b5e9a62ea6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "2e39f985-eac6-48c9-aaca-e9e8c160ce08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afceef6e-a8d0-4806-8a7f-fa80060b9d79",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8953da6-b581-48b4-9db4-ec3dc368c324",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff9cab4e-2683-4f96-b079-d4666a06c438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5c19d8-e677-43cd-9717-d6d1c6818385",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "50e9d09d-6aad-447e-bf83-b031618e2a6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3091efce-21ef-4c22-bbcf-60f3beef0fca",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f490ca6d-5cf6-4d8c-8984-1f7077c4cfce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "859b2bf1-fdaa-4c52-b072-43e9d7042117"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2528b9c-06c4-49e3-895f-0e8c87b509df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "48da9fca-b03e-4b2a-8910-20fd82b23ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8be5471f-e882-441e-8db3-dc7c9d926b16",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b428146-92cb-483e-a043-8cb53f7e655b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a4dddc1-36c9-46ea-8831-194a02884e3d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0e7a3b0-fd77-4d26-b4dd-2878e2caa4e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "86e50a7b-f58c-495c-92c0-d4cd7f1ae5aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4c045b5-82e2-443d-823e-97b851133cc5",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e46183ab-1685-4ce6-a91d-a5852958b3ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1f9e9c9-a15f-4d86-9894-5861f26c71bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "016b85ab-e72d-4698-95b4-2b8fd1af94c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "43d36257-1783-43f9-8644-4b0b8ed807d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e6cccef0-2ee6-4fda-b65f-54e58fac515a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0c39f54-7646-400d-9f1c-b948213c690c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "406d92b4-12cd-4bcf-86e3-0fa3752adab2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2faa90e-3197-4a98-a883-fc2633162c0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "436b344e-cd3d-4647-9c6e-340a482e406d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7558c1b3-944e-4657-9d28-c8298c330924",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccf09b4a-ee52-4357-ba59-c4cb77cf6c41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf464907-98ed-44c5-9f24-8522f0c6df86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f4ba379-3507-44f2-a920-655de91ea2f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "409719e6-f64e-4c9d-ba0b-e4ae00d22be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7c348a7-e173-4e40-9cff-4abdd78c0f73",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d80936a9-e0fe-491d-9f18-d11ea77e712e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f24ac809-1b79-42b0-bf21-a9af4039991b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9046659b-6786-4752-afb7-1102252feca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "6d0bce1b-8d37-4e6e-a583-2c8bf0a9729b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee86d418-1ff5-471b-8602-8db37711feec",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0768ff82-2581-4799-bc6b-97b043cb3130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f4eb0d5-202a-49ae-92e9-3366c1a9940f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ba4c707-ceb0-4c07-a20e-d94d9b4f8ec3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a615f9c1-1425-4aaf-b8d9-1f6a404f3b04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e0c97d-dae4-4d1d-8691-dfd257a6be64",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ced722-81b6-4b6b-b1bb-e4f30e240c36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5e9c6da9-193c-48ff-85de-bc0f5ae6f05e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a4d0ff84-8082-4b79-8a41-22d1a174100f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e59f5b1-3956-4ccc-b308-e731d64807fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f3798b1-a3c0-4ec0-ae2b-e58f91a8384b",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bda377da-d19f-4ee1-84bd-ec64e292adf2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17858713-84f1-4aaa-aa0f-1cfce86c48bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9b690cc-8033-4ea1-9293-7bdd22586fd7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "65f2c4bd-c8cb-4e5a-9b17-915da9e213c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8faabd4-63c4-445c-8e31-921fb916b1d6",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0616d0a7-c22d-46b4-87b4-9814ecf75126",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4d258b2-96ff-4e3d-81ba-543dcf0be216"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f42854d2-08d5-4477-854d-d17079a021a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bffef277-d124-4288-9291-70673bda2664"
                        }
                      }
                    ]
                  },
                  {
                    "id": "546f2bb5-4174-413e-b16c-73ccd638de19",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83d0a7fd-cb95-4d4d-82b9-218cf2ee221e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81a3ef2d-e42d-47c1-807f-c41623dd03ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "370bb3f7-764d-486b-9794-df084dcf2d4c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "56d7eb3e-1fa8-453d-9848-662505ffd5bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "624bf149-d975-499a-9e05-ff25133e97b9",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0377b5d8-ce52-46b1-ba9f-7f1e74dd7d97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aeae6953-e75b-4186-a01a-df2a22335867"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c58d82-a1d5-4d2f-870c-e941dc2454d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3916b7aa-0417-4610-94c9-5d9aca37e099"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24329f89-96ca-4e9a-a3d9-36c23a4767ee",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d5221e-c94c-453a-aec7-697dcbcfaec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86897e4c-bee6-4159-95b5-0ac5bc3f836d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eacd1a7-616c-4650-a0de-dbfbf8dd6b1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "440cb7fb-567d-4876-9d8a-ed5260d5729a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5f5301a-84a7-49d3-a4e1-89576e20b181",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bf1c9e5-fe72-4e61-874d-10a81cb31c4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84a1b96c-5e69-43d8-9875-8dff5368e2b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ef1950-60df-4ebf-bb18-e2b78186c3a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d4554726-e562-4c20-9673-b906361c5317"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37b48125-95b7-4600-a924-6b00695ea816",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "810c8e04-a54d-4673-96be-159785524a5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cb9fc8ce-b42a-4136-bf21-806c3c38a259"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a31d982-25b4-456d-adb4-0d80ff4115fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2aa90b6b-1db3-42ef-9cee-d2a303c15294"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86cb3b68-52da-4cdb-96ae-59c77d9fe299",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b49bc71-b35b-4163-be9a-274380f3444c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b3407c0f-beed-4679-9914-61843f81d776"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce5532a5-8d2e-4931-9b38-aa2b262c8200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e27cad6-98a5-4dfc-b968-0ff57458ef27"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29a870ad-e2f3-41b0-adb7-e941328eea0d",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8883d7b-733a-41d3-a9c7-b016f00f782f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c1603c3-2d4b-452c-b7bd-2db4d7c4b8a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5150e9ec-a33d-4691-93d2-def4832eba95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b3190cf-33f6-4b2c-b5d0-a13cc0f93bdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c0a0c4a-78aa-4477-9a6a-4e0a618ac82e",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2847302f-bdf9-4e52-a6aa-c4e60de2f2ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d1f681e-2b38-4cfd-a1c5-8fa4fd69820c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace71abe-d5be-4f2c-8e49-5d82f591e900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b6ae98c-ed94-45be-915e-dc70883883ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ce857da-0fd5-4b66-be39-42898630802a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aae8ca24-b5c9-4113-b8c4-08719d322091",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6b0e137-c584-412d-ab38-dc5ef514794b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b495fc86-81da-4f9a-ae1e-7a1954bd184d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19530e02-ec85-40ee-bb17-0fefc01c13d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46397fe8-7380-42f2-844c-1a7bbc10bafc",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e1b5f49-4807-4077-aeaa-48c3d511c4aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d165690b-15bd-485a-b7de-d85fee340f20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa7c967-8e14-4cb3-9858-ced260e400ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "978edf3b-c353-45e6-a701-99bd16caa4da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a169e1-8acf-4256-bd51-45613c93a11b",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49a793d1-7fa9-4c6e-ba73-c721a75eb14c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8c6d17a-2921-480b-a5d1-3777508800b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7242ad60-93a1-4660-9c8a-3d1da83e8996",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6100329e-1cd1-41f2-8317-471f1341f988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd5bd0df-82e1-4c1a-a7d4-7dc0cc756338",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0cab0692-0081-48d2-933c-ad9ed9b2bf3f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ffd06ef-d3c9-4ecf-b378-9cabebc64797"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "538f6af6-f186-4358-b987-ced49198a51b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5595a72e-3dd4-407b-8d2d-8dce18a0ef83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f23512b3-de3a-4b76-8fb9-4124847c7742",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55c59540-1344-489f-bb88-a4e479604981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3707544-d60c-4103-aea4-6a7153e5cd6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ddeca56-fd33-4e97-bff0-fe7f6aebfe5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "366748ec-98b3-47af-ba23-a593296bb839"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e7678c-4d42-4620-ad13-cc270d727858",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecca0f79-f760-413f-a25a-2f8898c39ad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57ac562b-0c65-4cf3-938a-b277f226dca6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0524d74f-ef9e-4a73-ba0f-59170c461206",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "59a75656-11d3-435a-b5bb-be1e28c8e71e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "480eb97c-7ef3-4a7b-b6bb-f8b18ba8e04f",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "19e5af32-e640-48e0-8113-fecdd30cf3a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "17507c85-b5be-46d6-a720-346c3e614bd3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6317cdf8-3bf2-4625-9940-d1d69acf7c52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "94f0436b-3da8-4b39-a8bf-73e6875c7219"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ca240a-42f6-4af2-9762-e83f66539026",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70d0c9a7-2b0e-4782-8724-fe050229cae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "149abe06-7c86-425b-a6d3-40ea220ffd0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4eea62b-1db9-4aab-8469-a81d259046a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cdeb06ae-4f22-451b-9191-0d1d00d2cec1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "39d70973-1505-45e0-b7e4-6588a45e8dce",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "363e950e-e930-48f7-aa02-b62e20a50c95",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc91d382-8ae1-406a-9081-3d61f1bc1a5d",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "53723528-b79d-4cf8-b1fe-ad5ba5f23d58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16c84ee1-be91-4bfb-8b43-dca9c1d81c64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6ebc5cb-4130-4a8d-8f4c-39c6828b3be9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "90194ba6-9573-466d-af9e-1c4ca8bd955a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76d34476-ec83-4a2d-8605-84024d8856a0"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "189e5b07-de21-478a-87bc-bc6a4c69fa89",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6be3f2f8-87b7-4151-9c63-ec29f9bb89de"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "27c0b9f4-e657-4ab6-ae03-1a6b3cdc9e3e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "83a41897-f5e9-4951-8d89-5beb2b9c563d"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "79214a0c-c959-4498-8e10-11e8dd90459f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "fbe9b4bd-e37c-4dc1-b3ec-cf28acc63911"
            }
          }
        ]
      },
      {
        "id": "6c48c33b-f725-445f-829e-5e2ed7fbb294",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "c8a4f9bd-ea8d-4535-a7da-7f307d5a5b2a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "c2d9307a-adff-4a64-afd9-22ab4c84b06e",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "514c3276-d4fc-4ce3-91eb-0428186a74f9",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "05698e1a-2f74-47a3-aefa-5d4bb9813af5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d98d0704-bdfc-4791-bd90-c386ef0f9a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "babea234-a2cc-4cb6-9a78-dd4825d85e19",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "748f7019-84b5-48f5-9fb9-e9ba034840d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1798b448-cb3f-4e34-b496-063103159eb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeaa2a21-6118-4978-bd37-994f19b648e9",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d498916f-2d24-47fb-a3d9-29026575a051",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4516c60e-e8df-4c62-bb52-cd0cbfc93814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "794c64d7-70d4-42a5-8ca8-49a4a5ce2bac",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46888ee1-7e2b-4ad6-a1c2-da8694caa7c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acacfa18-a2b1-4ab6-b88e-d22fae7d63d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87426984-f8c7-4284-8a9d-76bfd2a78539",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "485c7735-892b-4beb-b3d1-9bb37e2dfb1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "36dac3b4-0454-4a61-b701-d598e4827bba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "561fab66-e89f-4432-a324-309c9498968a",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "670ed5e6-d859-4b0b-98fe-89b0d37dc87e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6543c527-fed3-4116-99c8-d2515e5016cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5e28783-d505-4241-85e5-9fe59283aef9",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a48bf513-f145-47c8-848a-70c5285fae20",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "984201e8-a074-4b13-a23b-d100f31e8371"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f610ddda-03d6-4fc7-b770-5a2a81ccc8f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d3850ea-25df-4ee1-84ed-55b99bb413f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c6faa6d-408f-41f9-a730-e8d42050b87e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "988e40ce-afec-4a4d-b873-fc003d8d2962",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0625e603-67b1-4861-b960-29ccc08c5837"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff85fc0-5479-4c18-8145-c8151e3a2de8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "eabc1305-285a-4e21-80a9-da9bcb5f6b7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67541527-16f9-42c3-9ad3-b5236f33bd6e",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "107cf688-2063-46a2-87c5-7c6cb6de8e35",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "afdd53c4-485e-435c-92e2-5ce80148e647"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f153395e-b644-4265-b694-d920ba2b517a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61d5df01-5316-4d1a-a109-ce7f67a5c2c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0864174e-ddf3-4fe0-9737-ded2c31e280b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4463cb04-b04d-487b-953f-33cd921ca08c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f76ed1ad-5400-4f78-8702-27bef82ae76e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab8da2d-9685-4395-abb9-0d13d91be65e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7d91e994-4b5b-47fb-a872-95f84c1203ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b5ac536-e5e6-4396-97b0-eba7c6edf8c5",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f939d12-ccbc-444e-a1ba-0807fab6356e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e88e1ec8-0285-486c-a412-a956d249cf33"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c44eb59-30b2-47c9-98fd-115e616e36db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "464964f8-a43f-4182-be36-b0a0d3d45d43"
                        }
                      }
                    ]
                  },
                  {
                    "id": "353aa2ee-da53-495e-ac63-6c1e770ac4e2",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63339c8d-9d3f-4ee1-b30b-1eeb64b45258",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ea052029-0a1e-4f46-bf85-6a647658a65f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e475202d-7e7f-40c5-ade5-18323b59e341",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8560fabf-54a5-4aea-aa99-816e0c79699f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12cad527-e9d6-4967-868c-00c1c0b56400",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef43ea29-e403-4a44-9971-7f1a76136b2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4c84bd6-4dab-4c87-9484-8248659df8be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50e6ba5b-06f8-4ea9-b9c6-86f88ac3319b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "397d25ec-769a-4433-b08d-4153feda8e9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47426f0b-e707-45fa-9959-886ca1197247",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87c02c26-bbd0-478b-b8e9-23fb23e75d05",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5319bb1f-f9f5-4f56-81d7-08cb84a8f85b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68d59d89-335d-4229-9af4-31477768515d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a24be39b-f36b-4797-8668-de660c145551"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abe90206-abeb-4225-90ef-14a31ef94515",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d16e0582-47e7-4bdb-b677-37d0f57fb83d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08eafe84-2fe0-4a9d-8b88-5a1330cb8ae9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "501d316c-a963-4aad-a3b5-92b5609e852d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fdc349e-8950-4251-8ce8-8016f31e43ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7206bb80-16f3-4297-9a73-235a9dcb1f93",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ebbab82-2bf8-414d-91e6-1ee6b090aedf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "207d142f-5fef-48bd-a565-045741a60125"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83aca28e-294e-479e-8958-5bcad3c6b681",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6739c4d2-d22e-4ae3-84d9-4a15ca69b691"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7fec25c-bc65-468b-8489-711ed4a970b6",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd31926c-1b98-433f-b7b1-e49257a5cfdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e359d6d5-d78e-4f17-983b-3266d6fc058f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ed39a99-1989-4ca7-aa43-9f4529c225b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6efcead9-b51a-4a93-8ccb-404db9064ddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bdbd7ef-b513-470a-b010-9548d6dd6228",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c790f61d-12fc-423d-8b6b-b901658060a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e567b33d-0d37-4ee0-886e-d3c217031425"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b9db397-15a4-47e4-9074-da805e7f97f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67653c68-8424-4de6-8275-3f72d7598dbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9f969128-56f6-4892-8e67-5c98756ed7e7",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0a3b839-d98c-4dcd-9309-2c2f7259fc8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8483b667-dec0-44d0-9509-985e9d58bc5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c309046c-0443-4f2e-b20d-e016fa371d36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9930b1b-3676-46c2-9ae5-12dec90b6fcd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e90997-3e35-4793-bc78-8d429267bbd6",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be252b58-df53-48e2-a2c7-2b649480b0d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "575f0dab-2f5f-4cb2-bf86-c12fedcbb999"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "65ab0ac5-6a1f-42db-9feb-d4232313a7b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14ca9ea9-4ad4-4f2c-97e9-c6f8ecd6cd6f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03642dca-6596-4553-bd5a-005295a7a52a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d99278ed-a173-4212-9bfa-6fcede658a40",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b563f229-76bc-4cb1-a55f-5dd0a04b8456"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "392505a8-ced7-4bde-92a7-dd592714766e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "843fd3a5-5529-4622-9418-a1a0e4287c1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f5c1295-b9ce-4da6-91d2-e783971da15e",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40c66bdd-048c-46c0-a1a1-420e19e747a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b70a3d54-a01d-4bd3-829e-95fda58f37dc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdef25a5-4d50-443b-b95e-698a98db3c30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "409ca90c-b5fe-4de1-a42d-953e689779a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9f9d946-5300-468e-aa13-bb880ff4ea75",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b025634-5b1d-4db9-a544-5ca9fc8e5caa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0391524c-070e-4461-b7ab-9a6d602da53b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6880a1da-b8f1-4e36-bd04-c1e0d1439775",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3363f995-aa96-4b3b-b8d2-53582d14c819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67bdeb9-ba5b-40ad-bcf0-e32900f44e6a",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "177ff4e3-46d8-42a0-921d-a2c560ed6c68",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3b93e695-1789-4e76-82e7-395bd21975f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6dbc114-62b9-4405-aa9e-a5f1b3309448",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b8c9440-89e2-4257-84b6-c990de89779c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b423708f-7bee-491a-b59c-b61a55096b7f",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61539613-152c-4d2e-b1b7-a0873b5a0bec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e5382120-c209-4f54-b95d-3fcb782b1e86"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b40db3f1-fea1-422d-a07e-d188797f95b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05ce0629-3dab-45f1-b200-c0ed10aff778"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f73a44e7-4464-4bb6-a9eb-c24891ac9878",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b7d5fc8-8f01-4c47-ad5d-535473036e31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3b94b76-fb6d-4bfd-a05b-8cf0893d75de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0adeeb25-2b61-43da-844f-b112187146a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f27fde6e-9de3-4cdd-afc9-cbd30c342dcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "750fcc53-7327-4b64-af4a-5defadb5f886",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "772d51f7-c6b1-418c-959c-71af8742537c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "261ad694-aa6b-4702-b8b6-54a2f4077431"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ecfec70-3361-4417-8ecf-662dfc3b1922",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6811f186-69d8-40f9-b2c3-c1355f8847be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65216966-f744-42f6-9b2c-17dfd3246ca1",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3606c9e2-8a66-4f91-9375-545a389c8e3b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b2a1f313-ac38-42ab-8890-f9f1815d909c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8ee7d8e1-acda-4546-b36e-093414c2a3eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72dc3dc9-da96-4395-b217-b1d4d1bed548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef152813-ba52-4902-a2b8-f4bce5cc84cc",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94fe19a6-fc79-448f-a66f-d28eeee912b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "993c95f5-2ab8-42bc-9766-50dd665e491b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3213a2d-fa9a-4516-bb6b-ea36022f96ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20ea02eb-0298-42df-bba5-cb94aaf6ea5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a57d26-9dad-4c8f-adb0-3f275c9315fb",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55326eba-b532-40c5-8077-bdd442a135e5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78ec9436-7851-49a9-ab62-f7d43498f5d2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18e9469b-6fd8-4f74-b113-812e0040f441",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89432e60-bf8b-4a59-97a3-d5ca01f67ca4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "df71cb3f-0403-4e18-b233-877ecf1ba4c8",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84b4f331-b48e-4e2b-85a9-5cc4e47bec66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "75a87461-eb93-4d41-9f8e-fb4604663d9f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "012dbf1d-7b37-4b02-a76d-6ccc706860b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "15d47f7d-bd45-46f0-a3d7-13920f7740bf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5e4236e-8f17-4fe3-8b61-46cc9a38ed79",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aa9aaf1-e4c5-4bd6-bcca-5506b589d48d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a13b4904-5895-4328-8c46-839f5c8bfc54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ed88dc6-8816-4f73-91f5-0bcdce04502a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a1971848-ae1a-4358-b9f1-06c71d00e589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81756bc-9859-427f-8fcf-98abe6030e0d",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9573ee4f-d61f-4ebd-bb64-e44630153e79",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d14a5f8c-3682-426f-b1b0-77a5cfd74c19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f66341db-70c4-4de5-ad32-fa71442f0149",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbaf5b94-2a20-4b5e-bb5f-66c49dda28b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58d96621-6a75-454a-ab2c-2ca7af9508ae",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f0d4628-d511-4c40-948f-19d083df2540",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "37e5e407-cc58-4d41-baa6-645339d9a034"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73a53dc7-3a62-4673-b009-9a83e9088011",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c4fedee-2cd1-45d6-865d-8ded3680f352"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73dc176e-7fb2-4aeb-b8cd-3763a6f3dab1",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5a51512-825c-43c5-a27f-01bb4e992816",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aba93c4a-7ce1-4cc8-b009-8903b9c370a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83ffcf7e-5412-4fb6-acaf-0f42b4e246a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7cd8c5e-2709-464b-a841-1aac10b738bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52d3145c-5d25-43f8-8bc9-12421a5aec6f",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd93bcf-f193-442e-8555-b1a7c1e3caf1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a6e270b6-4f55-48f6-bed3-3a7f792174f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "97621cc3-e6e9-4dfe-bbfc-8bdbec8d1794",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89f32f74-50c6-48cd-a102-1336620750c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a365ea1f-fae7-4fbc-873a-33fcc8d987f7",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d6870b-92d8-4604-a31d-dc9cbf64d035",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fe60770-e127-4f6b-a844-9e621935750c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "631933ea-2b38-4d72-a42d-8bf613b174fb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a057c8d-591f-490a-9f61-57a4cbe2f1d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02c61b2f-666c-4c7c-aed8-c9b02cbef8e9",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4eb4f4be-edd8-4caa-9556-d97d30308491",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20089924-cc30-4df7-978d-9b01bdd25b10"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3db66725-01c4-4156-b773-83af05cf2bb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5a40c3e-7569-46ef-adfa-4eef856fae7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a688978-dcaf-4ca9-9536-9964a63ef19e",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c3698ce-84fc-47ff-9715-6f07c9bc19ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3507c5b-60e9-460b-b942-4ca435b26323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c2bdcb3-3dc4-4538-a172-77a639b3f22f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d2a5c59-54e5-4410-8b1a-2e04b6d7c00a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3df8dbd1-314f-462c-ba78-e67e99a2565c",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "791584fb-3cf2-4aa4-b7b4-7a4cd71e8521",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54f40a21-6612-4bcc-9d96-09a53000f479"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ec3b40a-ce92-45f8-9c41-ea15fcc66a87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3695f1fb-7841-4949-8b8e-1c162a5f9306"
                        }
                      }
                    ]
                  },
                  {
                    "id": "360859f7-a6ac-4ee0-b35d-c49e6b723959",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fb57b24-ddef-4a3d-8bf7-9ca6c8df5e29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa4b42ac-c980-4bac-850d-4e78370be8b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "692db1d7-833c-4dd1-b397-40a46e3a2945",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d294d4c-e96b-4fbf-8e75-d90c8cc484ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15139aab-84a4-4517-a441-6697f9632133",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae608c9b-f8a7-4974-8f21-32f86e7bbe28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "104e22d5-7f64-4f8b-8bc7-281f2bf41fa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f991e175-2224-40ac-87b4-d9feb1d17056",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6bee9a3-e264-4696-ad0c-eb9fedb37ef2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dcf2c675-59db-422e-b05a-49bd4f8758d6",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a08e0cc-bbea-47fd-969f-678a20ce2382",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cee1e8c-d147-4010-88ab-650775e14d84"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bceed1b-4518-436f-887b-5617b7d9eeed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68ddc16b-3f84-4f79-b48b-3b13b3e594cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02e266a7-d284-48d6-8bbd-b3cea4327094",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26fffbe6-777c-45d5-b0a5-214a32233840",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bb02bf1-1d34-480d-9826-831da7744c5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c39b016a-97bf-4442-ab5a-feb972dae61a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edabedd3-3c03-4d4b-8d74-ad3e0f866650"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e18ac1a2-2608-4893-ad88-3fada62238a3",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309f2392-cb5a-4459-b2f3-92720116a5aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa785ca4-df78-4f3a-9021-e3d137832212"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1009eb47-a0b8-4e58-b9cf-e839801c7b5f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3bba8666-f5ab-4393-90fa-a480953f6c90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a931ded5-3dc4-4ece-825d-403392231954",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e17a2f6-3d55-453b-9a4f-847538494345",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9deb5b5c-d9ce-4ccc-a418-409ba74517fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78ea867e-fc63-423d-9764-f89da1076c10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "127639b8-7cd8-4ab3-8839-521dae202c20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9625f22f-76ad-4c44-92fd-d2d6906c40fb",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bb0b07b-8f0f-4813-9a9c-f94e26416bca",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "73b27516-faa7-4e67-8e25-3ce2f4418d28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e509c684-fa82-48ad-8b39-935d61786944",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e1f9aa2a-0ae5-4f29-b76a-136bb6dd0684"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e9f26c6-faab-4664-8534-ef4e1c9bb2a9",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc18a448-ba46-41b5-88dd-81f53a7de2ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "579c1ea4-9fbe-4c09-ba39-8eed36eddf7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a6caed4-7730-4c47-aaec-f93b8689693d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f6ec931-0a49-46b2-b0c6-bd7f2f6303ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68edd452-260a-4d02-8fba-c526fa1ff324",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5ea36f4-533a-46ab-8f45-7728953353a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e22c0aa5-4cd8-49f8-a392-7dd4cc326d7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cc97500-1ab0-45da-bec7-7473885e7b80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9c69454-56b8-4cb9-ae9d-5f0951ac35ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21cd7eae-6ea5-427f-b8bf-cbbdf31c7d2d",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb26a50-b692-438d-860c-e1a6adeb3889",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48ca6893-c04b-47b8-9330-608bc7636bdf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe2aceb3-8d79-43f7-bb71-4f9bfd280162",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48320885-5201-4e46-82fc-e7e9d99a2ce3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5ad63636-a637-4bbf-94cd-b128f7c2c310",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1b745ed-2c7d-4d35-8049-053b265ea716",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "256cc724-fbee-493d-8650-d2ec09b489ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5dc6e902-5d19-4a9f-a1f0-5bcecd5b5497",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "828ad09a-04a2-4fb5-92df-fcbbd6bd5d9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9e53f95-ea22-4907-af64-8ae6e49bc7f0",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "374c8baf-5dc6-4faa-b66d-1a43fcf139f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "278f42ee-efab-4df0-8d65-238d6a0528e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "274e410d-7147-46ae-8526-3cdc0514f700",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "945dda0f-b05b-46c1-877d-769f906d0b94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f1b16b-5572-4f3c-90fc-2c39af7b4f07",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d91cb390-0ab9-4bb6-a0f7-8d3ab6cf66df",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c85552d3-d334-4dbd-896b-2f46871e18a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "af2963a2-fece-4b13-89d6-22f5345d63c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80088b55-958e-4b6c-a5f8-93d31b7c50f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f1bda70-2112-4c1d-aeef-79ec77a8c9ce",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0289bece-b21e-4006-a1a6-21f75cb3d0af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "81930a79-4fa8-45a6-9d43-b52a026fe1e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "012cec93-cd3e-417f-8954-2b5807d6133f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b399794a-7397-431f-a70d-3c122d126c47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cde50c64-b73f-4b1d-a05a-1506172bc66f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1db41b6e-6151-4582-9661-bfcb356a410c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8424b7e-eac4-4083-9b73-fb87062abf04"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d6359a6-3c7b-42d0-be92-72a91cfe4433",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "541a70d2-7daa-400f-add8-50c109564be0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c96b679c-a3c3-4027-8e35-518c60a269e5",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50a4e1e4-7356-4fb3-8f54-ce6983b6182f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbce71a4-8817-4ba3-abce-979abff201e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b519650-5b08-45b6-a1d7-5142f77f72c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59f88f3b-f6ec-41c0-96e8-eea5b8d72b77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79cfa065-21c7-4e44-952d-735397e9d428",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3780403-d870-4986-9643-b9e66ac209a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cbfd083-a0c0-4a3c-8444-0c991db48e0a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9dda75d-c900-4084-abef-6accbf8900ae",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "751aae09-6531-4df9-8aa4-ea5f58d79c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1866df95-76a0-4ea3-bf8d-97ed345d60d9",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae64271-43dd-459c-8dd7-49f8204bf029",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ca0f5b5e-91d0-4b48-9fb1-b73a99a34d77"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecba8226-6ad5-4746-8d01-612aed227795",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e51585c0-b680-4aba-bd77-6bc62f80fb3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9965ea1-849a-4a6f-be8d-c07986b2a9bc",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb4f2083-c015-44b8-ad5b-a927f9ad48d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e9489d5c-d124-4080-adbe-96a6b3e221d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9b23cf7-5f64-43c4-8103-068bd8e35b12",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87ec4996-bc80-475f-bb4e-b425c34ee41a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e86fdde-256b-4304-be7a-134f83f16511",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb1472a5-46e7-4259-872f-54301706ca0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f17ad96b-3cbb-4f69-93ee-ab05b2c00536"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "add36f74-d4d0-4b8c-b62f-2050c9ca1833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d853f95-a56c-4eaf-b064-37e8230adf47"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16d73b90-4c09-4fe3-b97b-d4b274eed863",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81074a09-ee65-4eb1-bc0d-8ffdf1c205a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a03ff2c9-bf53-4d03-ad2d-ea4da81da9ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "888607a9-b27e-40ea-9efd-62d5df6d7914",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30a8ac3c-5021-47af-9aef-4c9fcde7d493"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ebc6a5e-f7f1-4f81-9a35-ec9f852ce4d6",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "501b9374-9927-483d-a59b-549b9374a213",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30ebf1de-23b5-4ff5-b512-c2360150c0a0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "405df33e-4906-48ca-ae04-8c3e3224893f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "218684a3-7797-49d1-9bbd-105db5b7c041"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9664d3bc-20cd-4f26-891b-769052e9ba05",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c4586f2-8ded-447e-b65e-b2f481635c7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fb7e7c8-7ec2-47fd-ba68-64704bf7c98a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16b4ec5f-3b4a-4c9d-bec6-5487a8267770",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1eba25b8-b9d9-4600-a650-8068f6beac09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f85ccafe-109a-472b-b046-bcfcd098655d",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14fc199-6dd0-4a47-8155-1423007f2870",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f414f85f-0a42-4789-8395-5935253fa2ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a23f8cbd-428a-4e2d-8511-db48ca3e7c1e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39b1ac31-b47a-4d93-9787-cc631dc178e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6ab56a1-2f9e-42b8-8729-92eaf965d335",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8029ec0-cab7-4c7a-91ea-253cbee34b8e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0d8330b1-e330-42b3-9d35-711054c63ca3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed267a5b-0819-4690-8ef5-3f90024a482e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "553c9295-bf3e-4255-a734-90abf48d5e00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d417eac-c63b-441c-83ec-7ed160ea4ec5",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0b5f18f-d749-4bf3-a0c5-6cec04c13127",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62428561-e53c-4a6e-b99b-6821c01552ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7849d0b8-f69d-4c51-b236-a3d1f390c898",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7be56926-62a0-4923-a0f0-65927cc3f51d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b57ac649-e7b6-4f2b-8a51-f02407c4cd28",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "307eb349-b4da-4723-a558-e2419beb85fe",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9b47e12-e4be-4189-a7a9-4cc88c45a5e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4bf5067-f9c2-4c4c-97b0-538a634e07cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "724845ad-6780-4821-ab94-e401927cbc17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97418b18-e3d8-4bd8-987e-88ff0f2ebe9a",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86b8234a-d560-48ce-aa84-63e990178ffb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e9254521-7086-4367-bcd4-8dcc6afd7957"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e19729b-71ad-4816-87ec-8c6588c0467e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "354cc19c-d22e-4f42-9c36-39898b40858e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d975c65-aa96-457b-aa05-47af0adc75b0",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc76338f-06f9-4d5d-942d-3c4563674d08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "62dd3e9f-58dd-4254-8f23-0fb43977b289"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "278ba38a-c784-4a51-abd7-9cfe42413f44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7456a512-10e9-45c6-b62b-10e32e3b2907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56547d97-b29e-43b9-9c7d-b044e9584efe",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f0a5f5e-c274-422a-bfae-8c53066611d5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b45699ae-6e36-4b75-be1f-9a765084285d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "950e67a1-4c64-40bf-b47b-4c837bc112d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bfef50f-ab7d-4dc2-b59d-093b1e2b1939"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a63308a-8b23-4837-8fd1-615371107eed",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfb14e05-9ede-4d6a-b2ec-9fd7187e17f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50c01261-e624-49a2-94e4-24eb817f9c7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d56f2c-97d8-41cb-a271-b28661c719b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c618924-95aa-49b9-ad78-bb6915b4d2b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2504e250-1e26-4cee-afb6-84e7189f090e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b867b10-db5c-40be-8dc4-f9adfbdd234b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3df5f15c-48c0-46b7-b690-ddfaf7593e6e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04767db0-e7fe-4ca2-a0ec-4ad8f1c4e304",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfca3790-9548-4b7c-8d97-5ecbdd59dfdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "204575f7-b428-4c5b-9012-552f384d6a7a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08b5785f-425f-4cad-9fb8-638777bd7a8b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "04426c3e-06e3-45f8-ba45-9af1df6099cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f0219fc-999b-4a7d-aab6-13576c52af54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "517cc3b0-04cb-4898-b7d3-3ca6bbd9c0a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba4486ff-1ec8-4387-b3ed-631db9a372db",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d803dae7-f28b-48d9-9603-e2d9c93dccbd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "755d20e0-efb0-40e8-9a0f-51f01f2f786b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc19d41b-44ab-45f4-b1bb-df76c89ee95b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12f8b54b-04a3-4fe1-b599-07f5ca59e831"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59ef4ea7-7b59-42c2-80f3-a9937a7fd7bd",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca1e4d94-5d97-42b5-9e3a-2b72b11481a1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "80916605-f691-445a-a362-213c82cd4458"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e56a31f7-5105-4fd4-b571-5e7f9f5d9f05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48bae897-2e4d-4e56-9c93-4247be38e37f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57a44d71-e1fe-4684-9a1b-5d070e7d453b",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "539a63f1-5df3-4457-a65f-5d413df79c49",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1c076f1f-d0be-4f33-8601-e79da4a654af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1542cc82-671e-4e32-bccb-8d6371a00391",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b65e7667-894a-41ca-b47b-1961bc63f5e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "781def1f-62ea-4a2b-af90-d6362671c2ff",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5208a8b7-0f0c-403e-a540-e90c5cef8621",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "133fd80d-f524-4d1d-8d9c-c166186e4494"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "086943d1-16f2-4071-8bde-ac9c64d9a3b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b599176-ac88-40f1-b988-ec6b30398405"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78ebf651-95a8-4d28-97ab-6cb6f63505d8",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0291388-3d5c-4dda-bbdb-6254eea6f8cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "13b117ba-2c49-409c-b632-fb8cb0515546"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1c30937-d220-45f7-9e1e-dd9ce5913009",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b451f70-2e53-48fb-9612-56bc2d402cd9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdeb3cbe-3abe-4aab-8866-ea5bb55d88db",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d8b8f4d-9e3c-4261-b2da-00cf7b473f1b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1aeb7458-7916-4088-9c7c-9c99e81d1332"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9868aedd-0e99-4382-bc99-2b812ec363ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "247fb0d2-2783-49a1-9795-86b15c6e45eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8030299-9b90-4ad7-8132-8c5f325a1ebf",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ec1e5e3-0f6c-4766-af9f-c7cec42ca663",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f3450691-6a10-43de-9e3d-732872490901"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a39bc0b-0999-48a6-81d7-41a4d628c070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9fe36bd-a60c-434e-a3a2-97744b09c09a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e4c757b-e32f-498f-b1df-9eb6f2846f3b",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6b40d988-7a3b-4247-a811-2345755634dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc68a013-ce0d-49dd-abbe-d2e372f7087f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93dacef0-de20-4cdc-93dd-ad018cebdc72",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "07b00cdc-339c-4a97-9798-48f13fee445a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe3d43dc-07a6-443f-bd17-2dd04c5e628d",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f8c7e5-388f-48a7-bca4-02a8ca7c5d5b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "432333c3-3563-481e-8048-3ad79bbeb05a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f118a92d-4b7b-44a5-bc2f-718a6b537e81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc1a275c-3c73-45f9-a2a7-be42f7bb83dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "932c5267-6138-4984-8fce-f02fad674179",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce308fdc-9ec6-4f41-8511-0265873713a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c4c5a81a-f9e8-4a4c-b2e2-4ea8049748cb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b62dbcc8-7dbf-4962-8467-0e1f31a08544",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d270fe99-32f5-4727-8717-ab943a9f2289"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a73c0d6-36ca-43ec-8162-ed02cdb4354a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b1f7ef3-aa56-4b3f-a9d7-2aa3d7d24931",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3aaaf908-29a3-4bd3-aeec-83e2e2b055a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67367799-2718-40f2-a399-b14384f016ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71f8d6c7-b84e-473d-adc2-74523dd20285"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1846b86d-68f3-44cf-89a9-6cde76902495",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c124dc69-45c8-43b6-a30a-1fd1e47a1c9c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f45b245-a4b8-4a9f-9f1a-c1037c30082d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "177e0104-6149-4a43-b5f0-d6a2d999a29d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a0d8916-330b-48b2-b09a-5847567a1237"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6b1ebc8-c2dd-49be-baaa-1ea1ed7fdaba",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2aeee88d-46d1-49f6-bcce-60d074b0c07b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "09ef37ed-911d-412a-ae0f-0bd35768fb5f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "166b5b49-026c-4427-bb30-a5dda06f8d08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dac9eea2-8002-4972-97f9-0c4fd0e80eb3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb5ae476-e79d-4287-b8e5-584aaeea0920",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ca729b6-1c24-4d1b-a829-c2de7f870425",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6929162e-aa19-48de-bf28-847503a3c797"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f0acd20-0931-4de1-a113-298b89ae46e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5ca2f465-6c9a-4bf9-8ee0-088ba83eca42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57bcb1d-d267-4e21-85ab-bf3f25715136",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59ea5d41-15b7-4abc-a025-410988779d9d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dc7d5e60-249b-46fa-aeeb-970b795926cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "590e22c8-8db9-4e8e-bcd8-16f50c93da0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d19178c8-d01b-4095-a2e0-c983d59b50ca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee8622fe-e808-4beb-a1aa-ecb00eda03b9",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff16ac64-8f00-4130-a79d-63b0893ba03c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e58af47-41c4-423c-9dfa-80ddaf70ccc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "916ca818-dd57-4267-9cbe-24e704f80646",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c15f7ee-450a-4216-acac-a7dd6cd80f65"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2125fc42-8b62-461f-bb5f-e2b0b23e3ffc",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fee40766-1188-4af8-b727-81d204056c57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4bd2c5de-5429-4217-9f65-33c9713cd960"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f256d387-f5c9-4cab-a4e7-e2af27b3e36f",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b890f1a4-f160-4d85-b6db-36a8e45bd548"
                        }
                      }
                    ]
                  },
                  {
                    "id": "245ff451-2e6d-4edb-9560-6d4f72ecc94f",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e881806-c324-4605-843e-0ce2bce79263",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "50454035-c4bd-468d-ada0-594f4037cebb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "454c270a-54de-4390-b571-e93fb5eea95b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f36aef98-7284-4512-aaae-36dbf7c43d07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b9b5028-7aa9-413e-a78b-8ac8f6f5dd60",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffd12f47-cb0d-4ee9-a2e7-c01a0a6cd621",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8dd0f16b-1557-4017-aa26-9356cb6d7645"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e7e9492-1858-425f-913e-3089d656156e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "345394b0-d555-4071-b242-1f09def4463f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cf309df-11c8-4218-a878-77c79b4cc3a0",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c017a191-5ccf-4b38-8f1a-495c5270fa31",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f9653ea-7b99-4444-8ae3-3bd593b249dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3824524-e321-442a-9277-e1b0116e0c8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a22adaf-4965-40a5-96ae-3c5c91bc6364"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a208481e-53a0-4056-8d41-eed9cdb85490",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40532ced-310e-443c-878d-868b1ab404f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a966bcc-9eb0-41ae-92db-c0d520500718"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "724175bb-17e8-4ecb-a68f-eb4ef3d4bea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1277c0f4-0d81-4b5c-a7d2-991ca5b74f58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be7f1ae3-7e28-440c-8554-f9cfabd249bd",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf607754-8663-4243-ba0a-c8d1ae7196dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6e965543-33e3-41af-aa91-8be503702860"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1bc82c5-c616-429f-b650-07a66a373c0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7312102b-ce11-469b-b4d5-bf69fc3c1c76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83a1ede4-3459-4919-bcd9-77f4592dabb1",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d163ce95-53b5-4b26-b70b-5c55084bfeb7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d754601-de90-48ad-842b-f8a378207ad1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aaef8f97-b24a-4503-8df5-c9639a970bbe",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48211f3b-ab6f-4190-b1ee-465dc75009f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1d20332-fb0c-463c-b2cf-9029fcbad534",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eab8ddc6-d8c0-4846-99db-b4b2f6cd2b3c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "19e47c2f-421d-4119-93e2-3a09cab7ec1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a24e5ff-bef6-4892-841a-efb389171147",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ad2c93c-ff6f-4f19-a36e-182ba3ec9c72"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a5536078-a146-4485-ad4f-7b9ab348b38e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8c08d870-c115-471c-878f-f3cbc37380fd"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c5ea49e0-d9a0-437a-83bd-b3599b62a498",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ce8c8262-a6b6-419b-be4b-0dec0ee18b80"
                    }
                  }
                ]
              },
              {
                "id": "75b47411-93f3-4506-80d1-146d634c6f5c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "ba2e7dab-1549-4afb-a033-76d7518ba11b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df32ec95-da90-43a8-9aa1-7ea4fb8cf9fd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "13ab0bd1-d013-4143-a7b7-69678a2b2429"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6a57e6a-ff71-4a81-84b7-6a44a4a248a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "025ffb36-66f0-47dc-b389-324241946a71"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "877e870b-21f5-4aea-9b1f-a31abdd4a927",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0c872301-da6d-4358-b7e7-8ee978a51dc8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "bd3986c5-a5e6-4be7-bc27-3328d8916e4b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "166df65d-d954-4c22-be4a-7500855f46de"
                    }
                  }
                ]
              },
              {
                "id": "ca2f7ce8-7435-4f05-bab4-00f31f22145a",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "0957167b-0f00-4443-a725-c68a55352cce",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9da2d4b-3797-4a84-a915-e2de8dec0361",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a8849ba5-a885-4b00-8378-947184781a69"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f24e518-871d-4259-89e4-e0312f475cce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9e2c6bb-5d34-461e-98c6-a57fd1295e3b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "e9066143-97c2-49fb-b87d-f510827cbbc0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2b934d75-f665-40da-b28a-745e0eaeb0fd",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "166fa356-4fec-44ea-b726-8709e0dc5763",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "61ea2ad5-3b05-456f-a43d-b556885a14c0"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f81126bb-bc70-4d85-bd7f-17fb2a2c2a30",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae3a1324-6d86-40b9-a6a3-d1910c49ff71"
                    }
                  }
                ]
              },
              {
                "id": "761f8241-34ab-4b12-998d-8264acd19458",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "3aa92141-1ea5-4fa3-b791-c532629d4739",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "c8cdec77-4892-4f36-b6ea-e6eadf8bda75"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5508d70c-42b0-493a-abe6-3349c218db95",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b9c763f0-6b2d-4adf-b9e4-0608bc42ac1b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a6590d6b-2f3e-4589-9336-1f66222f300c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "64d27435-6be3-4b0a-bab5-1c0aa58806ce"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1b40d263-d94f-4201-89d5-354a2bb41b19",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7e581f98-b268-4507-9378-7a34cc57a79c"
            }
          }
        ]
      },
      {
        "id": "7be8da73-d779-4fe8-949b-ce73c48625ad",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "58266384-0ddf-4fdf-9230-fde26495a90a",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9383e837-4d49-4933-8db8-4fc91eabe193",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d634ca8b-fffe-4901-82ea-71bffa37e646",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cd0a147-c342-4649-98a1-6043d7474f04",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "047aac71-0943-439c-86be-49c96e23a7e5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4c2622e-4930-416c-b786-3e57c1203b4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c3c5112e-52c3-46e9-9ee6-7b9bda13a527"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e8534c0c-f6f7-49b0-83d4-b7b743161a8e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f0f97e85-a8b5-425e-a55f-34345eaa3334"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "1f5c25ae-8c59-444e-b20c-21c07cd94201",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "69b949aa-2bc9-4b7b-b09c-dff33841d13c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2879a007-2c6c-4b55-b845-112ecc4096aa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "134a3722-96f7-4021-92a2-7fd0fbbf6a64"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e4aabc1a-1c11-405d-abda-56856b2c78b6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "81a79fae-9cd4-43ee-8b3f-530fe6f1526a"
            }
          }
        ]
      },
      {
        "id": "ca5deb75-df71-4411-b1ef-69e158aed5d9",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "6088a15a-bb43-4b0a-bd27-4ca8e8c26a29",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0467d0ab-1a36-4e85-accb-d46ef28810da",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7dc956b4-cf9b-4692-933a-6f2d6f6e5110",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c69c933-09bd-4ac9-81a5-1f8bf02570e3",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2604748e-3305-4d11-b89f-5091630555e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "80e2faa0-c037-4841-91b9-e82998b04e88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d1e18bde-d5b5-4e8f-aa1f-4515047bfc13"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d2589656-52a7-43b6-a20b-47a4c43b4126",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "88612e41-382a-4edf-9ec8-c30d6822455c"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "46bab3f2-4a97-40f5-96ea-4ad10a22e6be",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5dd6b456-1af1-4cec-bb65-5d83b6c4e7da"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "154214d5-51a3-462d-9ada-95568e3305ad",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c4333a6f-f4d5-404b-8044-4f7f9679de2e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "19f02c7e-1ab0-42a2-be0b-f860c1e4a739",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d10c4ba7-22d6-49f8-b78b-41aa727fd225"
            }
          }
        ]
      },
      {
        "id": "71c36521-414e-40d4-bc5d-e50308f60ac5",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "1a065030-9de5-495a-a30e-93d44e1cd2be",
            "name": "Negative Testing",
            "item": [
              {
                "id": "352a9ffd-3705-4909-9383-87b1d0c74a17",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2243b4dc-befd-4e47-83c4-33bd8f397dff",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c5fdd01-1471-4122-acc3-7d23eba31c32",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9d23d3d7-9ebc-433a-9409-3c07778e6430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9134f06b-41ab-4c7a-b7a3-27dbc7c3bfcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b213afa0-f0b4-465c-a684-422485cba2a6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fa89dd4b-ec80-46b6-9a47-9aac0e3cd7c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c187febf-ae28-421b-9fa2-cda2b7fc59fa"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "84e2d22b-2bd3-44c7-822b-daa3163899f8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "344c582b-7945-40c8-bfc2-f5c44391fe6c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fe2afc74-a5a1-475d-8df7-a8f034738f1b",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "11e4b001-bdaf-48bd-a0cc-89cb061ebb82"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "683b456c-6d0a-4de4-974a-4390c5dd9c02",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4e52f9a1-db28-4023-9a19-694f58ac40c0"
            }
          }
        ]
      },
      {
        "id": "771b454a-fedf-4937-9507-2ae9bb02b2f7",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "905364a7-ed77-4721-9e9d-83ebad9d210b",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7efe5bb3-9995-4c65-aeb2-5c0e903df553",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8adcf01e-de17-4d16-aa58-8716ae5b5b8a",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "4aa92ba4-70b0-417d-9b59-e00cde3eaa1a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "84c84871-ccff-4fb4-b7b6-621d3c4d29fe",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 63.70877192982452,
      "responseMin": 6,
      "responseMax": 785,
      "responseSd": 84.64739720084621,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1708043609173,
      "completed": 1708043636419
    },
    "executions": [
      {
        "id": "56caf760-1537-4b46-af99-531990b7ba11",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "e4311658-fe5c-4ae3-bada-46b98e87f9f7",
          "httpRequestId": "5dd9ed7b-6565-41d2-9f84-5c8188854aa2"
        },
        "item": {
          "id": "56caf760-1537-4b46-af99-531990b7ba11",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "b62ff677-5101-4097-a9cc-04d74d7f6740",
          "status": "OK",
          "code": 200,
          "responseTime": 39,
          "responseSize": 0
        }
      },
      {
        "id": "e56e60f8-91db-4a2b-907e-25522763e3c6",
        "cursor": {
          "ref": "06a4f1a2-0011-4e48-95a9-10a53d5b425f",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "53665cd2-83ea-4f40-ad75-8610acfd7844"
        },
        "item": {
          "id": "e56e60f8-91db-4a2b-907e-25522763e3c6",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "0402401c-2a46-414b-afac-8c1f3d002268",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "863657af-eff4-401f-88b9-963e30178842",
        "cursor": {
          "ref": "f0116022-7fdd-41d9-930a-251e1ceb4a5d",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "1531efc7-2806-4b40-b7b9-f09f8247289e"
        },
        "item": {
          "id": "863657af-eff4-401f-88b9-963e30178842",
          "name": "did_json"
        },
        "response": {
          "id": "8e04a390-1c0a-49b2-8fa8-8e2e45667b9d",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14ed5ae-fab1-4665-b581-4839a9961800",
        "cursor": {
          "ref": "696957b9-ecd5-4b26-97aa-2150f08e904b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "58a0bd0e-9da8-4928-a849-b684b037e45b"
        },
        "item": {
          "id": "f14ed5ae-fab1-4665-b581-4839a9961800",
          "name": "did:invalid"
        },
        "response": {
          "id": "9113505c-b23c-406f-bda3-a7cf94241553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f14ed5ae-fab1-4665-b581-4839a9961800",
        "cursor": {
          "ref": "696957b9-ecd5-4b26-97aa-2150f08e904b",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "58a0bd0e-9da8-4928-a849-b684b037e45b"
        },
        "item": {
          "id": "f14ed5ae-fab1-4665-b581-4839a9961800",
          "name": "did:invalid"
        },
        "response": {
          "id": "9113505c-b23c-406f-bda3-a7cf94241553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5085233-73cb-4647-8e12-644cfb0707a5",
        "cursor": {
          "ref": "aea8b213-3218-430c-af3f-8430187e37ef",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "68a3b570-ffe8-4aa7-82f6-f2257722cc8a"
        },
        "item": {
          "id": "c5085233-73cb-4647-8e12-644cfb0707a5",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "83292a2d-a02a-4a64-a2ea-b8bb38c4f090",
          "status": "Not Found",
          "code": 404,
          "responseTime": 139,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3e58743-e9ed-4778-bbaa-51ce63a16d20",
        "cursor": {
          "ref": "a99f650b-dc34-4ea9-a59a-f7ff65f5f37c",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "68e1abd0-3e22-47fa-be5c-056138a8e659"
        },
        "item": {
          "id": "b3e58743-e9ed-4778-bbaa-51ce63a16d20",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "aedd3ae3-c581-4821-824b-a95298ea51f8",
          "status": "Not Found",
          "code": 404,
          "responseTime": 39,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "243e8904-90f1-4428-904b-90f5249611cb",
        "cursor": {
          "ref": "f9481ef3-6ced-4331-aec0-6eed7f9845a0",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "61593b95-ac31-4df8-a11a-897d68353b04"
        },
        "item": {
          "id": "243e8904-90f1-4428-904b-90f5249611cb",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "bc3a3bfc-13f1-49ed-8efc-52520abfc862",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 23,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4b5f895-2cf1-46ef-a5ef-863363a66199",
        "cursor": {
          "ref": "a649abf6-2d50-495c-9475-14c361b07ae7",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "07c30808-83af-42ae-8259-df3345e75ba2"
        },
        "item": {
          "id": "a4b5f895-2cf1-46ef-a5ef-863363a66199",
          "name": "identifiers"
        },
        "response": {
          "id": "bf5f2ec1-7cd7-4fed-9a15-c4e6ac9fc561",
          "status": "OK",
          "code": 200,
          "responseTime": 75,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84f448a9-aeb7-4cc7-bdd1-138f8a10737b",
        "cursor": {
          "ref": "e3f20a80-92ae-4f57-8b61-edbaeee7a443",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ae4711ec-f8f6-4fa8-8e16-ef8faf70e774"
        },
        "item": {
          "id": "84f448a9-aeb7-4cc7-bdd1-138f8a10737b",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "5c36e676-6727-488c-91d5-3c5235213e0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d9a28f1-daed-4bb2-9a8d-136eedc63208",
        "cursor": {
          "ref": "1461f06a-7886-4ed5-9966-86999678420f",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "5cbf5cf1-50c5-4ddb-89eb-7da448b966df"
        },
        "item": {
          "id": "0d9a28f1-daed-4bb2-9a8d-136eedc63208",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "86b9aa69-c681-416c-b482-f91b8a57163c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfb9a565-9911-4524-9582-fcc48d3a76ec",
        "cursor": {
          "ref": "a14f5e72-66d1-4d78-abdb-d0fddef73eca",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "1e0952bc-7c4c-47ca-8620-e0fef302fa9c"
        },
        "item": {
          "id": "bfb9a565-9911-4524-9582-fcc48d3a76ec",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "64cf4e83-904f-4107-983b-c7d7f13758e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e64663c6-6910-43a3-9360-cadc52d4e2f2",
        "cursor": {
          "ref": "15790c50-d373-400e-8aab-c70cd90cc5ba",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "f432a4f0-487d-4669-b48e-3693a2653faa"
        },
        "item": {
          "id": "e64663c6-6910-43a3-9360-cadc52d4e2f2",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "88835e06-191d-4142-99bf-60787f038f62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "565dad15-71fb-47d2-9891-f99dcac454bf",
        "cursor": {
          "ref": "c90efafd-8db4-4fe8-9988-a9e24bd3bb6a",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "1b2adae4-2326-498b-9269-2bfaf0d0fbcf"
        },
        "item": {
          "id": "565dad15-71fb-47d2-9891-f99dcac454bf",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "53a822dd-9051-41ab-ba14-c7c8c1613478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ec8b42c-0ce6-4ee1-8c2d-45da4e163c9b",
        "cursor": {
          "ref": "89987216-dba9-434d-bb68-9addbe29b1c9",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "07d69269-d4c1-4ae9-8f14-7b62e9e8bf3c"
        },
        "item": {
          "id": "7ec8b42c-0ce6-4ee1-8c2d-45da4e163c9b",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "b2944394-0433-4078-af15-384815f62082",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2059ab1c-6c4a-4577-ba8c-34de2b2ca2c0",
        "cursor": {
          "ref": "f5f0a8c8-dd5f-46a1-b140-a87ba958a243",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "85b11a2a-aabc-49de-8ae8-499a3f7cded1"
        },
        "item": {
          "id": "2059ab1c-6c4a-4577-ba8c-34de2b2ca2c0",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "36fba1da-209f-4cfc-bdf1-9a2859a3dfb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cabfb002-a0bf-4494-ba42-ca859fb431bd",
        "cursor": {
          "ref": "d824ddf0-8800-4e7e-80d8-808532c76c7d",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "20919f9d-e999-4d20-a131-6becf15dc9ca"
        },
        "item": {
          "id": "cabfb002-a0bf-4494-ba42-ca859fb431bd",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "1425a556-7a44-4f4e-b24c-a608f9229722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e493afb4-4eec-4587-b832-8915be11fbc3",
        "cursor": {
          "ref": "1ad4a44e-ff2d-4dd8-91c2-c3a7ab40dc29",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "3a738360-30ba-4bb4-acb4-534f29b61ceb"
        },
        "item": {
          "id": "e493afb4-4eec-4587-b832-8915be11fbc3",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b8e676a7-1af3-4d34-a5a8-bad4ecf1f07e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c70de8c-6dd9-4eba-b407-0f14a8436330",
        "cursor": {
          "ref": "9511a733-ead0-4614-8603-bbbef8f82c38",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "39c6e248-c132-4fa0-ac53-cdf876cee570"
        },
        "item": {
          "id": "2c70de8c-6dd9-4eba-b407-0f14a8436330",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "212d2420-6a60-44e1-a686-b1a7bd669e43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a52ea911-5ab1-4fa6-abfc-fb1aca659c32",
        "cursor": {
          "ref": "6e40f16b-d3e7-4a46-9e9c-f884daf26d1c",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "57421771-5ff7-4873-bce5-50c91f36cdf7"
        },
        "item": {
          "id": "a52ea911-5ab1-4fa6-abfc-fb1aca659c32",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0a77ccdc-a16d-4df3-bee3-008b2020f837",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11fc5d12-046b-4108-ae0d-e9561354b9ff",
        "cursor": {
          "ref": "9e8b8444-0dde-46c1-bf87-f692b13a3974",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "efe7c6a3-c54f-479b-be48-bd90ba10e865"
        },
        "item": {
          "id": "11fc5d12-046b-4108-ae0d-e9561354b9ff",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "715b3199-9290-4e61-aaa0-5ea69776679d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36de0296-060d-40dc-8bb3-7e421c8491f3",
        "cursor": {
          "ref": "db98aa6f-54fb-423e-90b4-3a6f649952ba",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "feffb896-d226-448b-8cf0-bdc072a52d41"
        },
        "item": {
          "id": "36de0296-060d-40dc-8bb3-7e421c8491f3",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "e502d970-f8bd-4d65-aeb4-c70c0bf4b625",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80f8ffd4-cbcf-44cc-96db-4934852c7714",
        "cursor": {
          "ref": "81be3d94-6b16-41fc-b25f-a1ccdf78f9d8",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "d539a878-a20c-48a2-a9fe-6484d79a4e98"
        },
        "item": {
          "id": "80f8ffd4-cbcf-44cc-96db-4934852c7714",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "49dfd7c4-119b-4858-bed4-e57035391995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "552c2dd3-5d6e-432c-837e-5756e2243287",
        "cursor": {
          "ref": "3e7e4b1b-4c84-4dad-9951-1e0ea8143c81",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "ba1b5f1d-125f-4f1e-88e0-beb7eb5f6a2f"
        },
        "item": {
          "id": "552c2dd3-5d6e-432c-837e-5756e2243287",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "5a3fc12d-5ac8-49c2-abef-39152f0bcf55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80fbab29-02f5-4bce-86c0-a2141fef574e",
        "cursor": {
          "ref": "a5f68a6f-bbea-4349-8905-491ec647b17b",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "a1e0d889-912b-4216-8a03-eaa0b1c5a836"
        },
        "item": {
          "id": "80fbab29-02f5-4bce-86c0-a2141fef574e",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "c16587af-e36f-4afa-9617-72d6763ccb2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03a25e12-e5e2-4d52-b8ac-61d1f3622470",
        "cursor": {
          "ref": "71fdcb16-e6e5-4e64-86c3-0833d5b3546a",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d534afed-7744-44d3-a494-a2905bed7c54"
        },
        "item": {
          "id": "03a25e12-e5e2-4d52-b8ac-61d1f3622470",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0d03940a-07b5-4697-8ab5-3b222d5869b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3adba053-cc05-4377-aaca-fb26c896f60b",
        "cursor": {
          "ref": "cf4f04da-bb04-44fb-84b0-7258f04b071b",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "f055538a-c44f-45c7-97a0-22958f380b91"
        },
        "item": {
          "id": "3adba053-cc05-4377-aaca-fb26c896f60b",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "b226d107-a12d-4f6e-9482-29badb05565a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc323a13-3ef0-4349-afe4-6ff57ff80726",
        "cursor": {
          "ref": "09fc4e88-5dbf-4ecd-bb0c-7e2204fe07a4",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "056458d4-c785-4be9-bd18-5dab9224025b"
        },
        "item": {
          "id": "cc323a13-3ef0-4349-afe4-6ff57ff80726",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "43778c72-7332-4404-b92b-db4cb8aa653e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "346b66ae-ccc6-4b67-a42f-e34dc8797a8c",
        "cursor": {
          "ref": "34afbc0a-089e-4efa-ba4b-cbfb5303dc61",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "e7012f41-8e79-4345-af10-30349f491bc4"
        },
        "item": {
          "id": "346b66ae-ccc6-4b67-a42f-e34dc8797a8c",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "be8c4c38-ca20-4706-b766-41c177492a31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36ee729c-1960-4d4e-ac17-7ad380ce8a38",
        "cursor": {
          "ref": "5a981cd7-4f38-4f17-81c1-eb7e226869d0",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "511c0c9f-ea8e-4a34-8144-cb32307254ae"
        },
        "item": {
          "id": "36ee729c-1960-4d4e-ac17-7ad380ce8a38",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1a5760e3-745f-419c-8264-693d0a8a1320",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c86e592-0bd0-4d50-af27-cbb5bd5da12a",
        "cursor": {
          "ref": "da508780-3972-490a-9b0f-cc094b8826e8",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "52b570fa-730e-45f6-9ea3-6a90f52d9bb3"
        },
        "item": {
          "id": "2c86e592-0bd0-4d50-af27-cbb5bd5da12a",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "94704b3f-a783-4e66-9ddb-822b785f2322",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e0d822b-fccd-4eeb-87d9-57222f9df1af",
        "cursor": {
          "ref": "fabc1710-25cd-4e10-8820-a0e2eda03e57",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "04f44af9-1aca-4f9a-98b0-5e9937407058"
        },
        "item": {
          "id": "2e0d822b-fccd-4eeb-87d9-57222f9df1af",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "fa34689f-648a-4679-aca0-132099fe29c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "599687f5-3c73-4636-8869-31b4620b23f5",
        "cursor": {
          "ref": "f5b16c19-a906-4316-9377-75e759f053c4",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "d10571ed-1c38-4ca6-8939-8f07ee164a63"
        },
        "item": {
          "id": "599687f5-3c73-4636-8869-31b4620b23f5",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "ea2a2b34-07cd-4c8c-b7ce-5c17e3293bc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c146f9c-8039-4b1a-82bc-cdac13adcdcc",
        "cursor": {
          "ref": "bbe37c6a-14f4-4643-b509-f913314e88c7",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "37c6deaa-943c-4b21-a345-7996e0890237"
        },
        "item": {
          "id": "1c146f9c-8039-4b1a-82bc-cdac13adcdcc",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "98b0b709-b2c4-4bf4-859d-ccce61bf6894",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc65edb6-e800-4a76-b5ca-cee6b362dbf9",
        "cursor": {
          "ref": "bcad1311-ba12-41d4-bead-780a5257981a",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "dc74109b-b66b-45b9-a925-138f237c9853"
        },
        "item": {
          "id": "bc65edb6-e800-4a76-b5ca-cee6b362dbf9",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "b5e572ef-1a67-4d58-a834-9200e47ff741",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9c79b68-dfa8-4eef-9fe4-08ef73cca2ad",
        "cursor": {
          "ref": "82e6d2e7-e7aa-4008-980a-0a085a6e7b3c",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "9a98a535-e0ac-4dd5-a244-beaa7b300144"
        },
        "item": {
          "id": "f9c79b68-dfa8-4eef-9fe4-08ef73cca2ad",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "8758af78-76ae-4a7f-a0f9-a077a2920055",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9107bda2-6d0f-44f0-ad28-78809ce5bcc8",
        "cursor": {
          "ref": "de134846-d7af-4725-a7fa-18729913e275",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "1258e8de-e611-4422-9c16-436f48f11018"
        },
        "item": {
          "id": "9107bda2-6d0f-44f0-ad28-78809ce5bcc8",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "f65f0bae-5b63-4193-b132-1024ca5fca46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "572e9b72-f2b4-402e-a7b5-f899904f98b6",
        "cursor": {
          "ref": "999e2cae-a2df-49dd-a937-4b8265e3ca47",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "4ee4e331-50b9-44a6-893a-0241058eeb92"
        },
        "item": {
          "id": "572e9b72-f2b4-402e-a7b5-f899904f98b6",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "aeedb09b-1d32-4961-9c3a-8463bc10cd44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7f3bfead-bc88-477c-94f0-13f2f20c8a39",
        "cursor": {
          "ref": "95e6a412-4fb2-475b-b871-45108574f72f",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "52cd487e-96da-4d7f-bfd9-b316cc36b209"
        },
        "item": {
          "id": "7f3bfead-bc88-477c-94f0-13f2f20c8a39",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "ee61f02f-57df-4963-be81-02d62e9b323c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f7d3d86-bbff-4adb-959e-68842a0e86a7",
        "cursor": {
          "ref": "35fb7f0c-0cf3-4e97-a438-622a2f21c077",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "446ca80a-99d3-4cd6-ac7c-8da135b5bb97"
        },
        "item": {
          "id": "3f7d3d86-bbff-4adb-959e-68842a0e86a7",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "a323d8cc-372b-44a8-a05f-1ae89b948e1d",
          "status": "Created",
          "code": 201,
          "responseTime": 785,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "70c9c167-4943-4c77-909f-2bbd9cd9ce73",
        "cursor": {
          "ref": "1cdac892-8588-4108-937c-190289639c36",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "8092f468-706f-44d2-a4d8-0a67a3afe179"
        },
        "item": {
          "id": "70c9c167-4943-4c77-909f-2bbd9cd9ce73",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "02974545-6649-4c76-8707-7a7a17fd82f0",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "d39337e7-ae98-4d3b-bf42-fddf1636092b",
        "cursor": {
          "ref": "07f3f03e-054e-4254-bb55-013b8fefcb9e",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "b527073e-b389-44ed-88f1-042e93a90b60"
        },
        "item": {
          "id": "d39337e7-ae98-4d3b-bf42-fddf1636092b",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "7528fb4a-803f-46b5-bec0-a190b49885fd",
          "status": "Created",
          "code": 201,
          "responseTime": 292,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "fd0e94f1-5b32-42a1-b007-f81a5c7aa380",
        "cursor": {
          "ref": "f4f4c110-a5fa-4ca7-bb7b-d1ed4a00b67b",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "e59dadbd-04c7-4b19-9e7c-1e1c1573024b"
        },
        "item": {
          "id": "fd0e94f1-5b32-42a1-b007-f81a5c7aa380",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "b8fe90cc-005e-4927-b236-de8feec791ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760df1c6-771f-4329-a376-c9a773ec83d1",
        "cursor": {
          "ref": "3ef9a01f-8276-4e65-9762-a4a8fe8acf85",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "f92b046a-cf56-4763-8409-137412aa60cb"
        },
        "item": {
          "id": "760df1c6-771f-4329-a376-c9a773ec83d1",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "d870f991-d4fb-4f5c-b119-9b8a5b51159e",
          "status": "Created",
          "code": 201,
          "responseTime": 287,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "28c85f97-73a9-48c8-a874-4912f7048145",
        "cursor": {
          "ref": "e94bf500-91fd-4a21-bdfd-9a00bc6f9a73",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "a3a54bcb-0629-4307-ad8f-a5fac3861b8f"
        },
        "item": {
          "id": "28c85f97-73a9-48c8-a874-4912f7048145",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "5113c772-c15a-4f79-9afa-a91f71a5dba8",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "9a3cc971-ddf2-4cb6-aa8f-cea0a9064f3b",
        "cursor": {
          "ref": "936bfd59-9da5-44f3-a24a-478c4cd13f38",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "243a66af-da85-49e9-aca3-3d7900278d6a"
        },
        "item": {
          "id": "9a3cc971-ddf2-4cb6-aa8f-cea0a9064f3b",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "b2e87e78-5e7e-48ea-b053-fe37dccc7b9c",
          "status": "Created",
          "code": 201,
          "responseTime": 293,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "7af154c0-1542-4b48-9969-09cb7efd530c",
        "cursor": {
          "ref": "20cdf593-2c89-4c14-9acb-6522bf17a1ec",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "50ac5f76-a82c-458b-a53a-62f534426bc9"
        },
        "item": {
          "id": "7af154c0-1542-4b48-9969-09cb7efd530c",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d77cae2d-e2c5-4813-aa57-d243b4fb2aeb",
          "status": "Created",
          "code": 201,
          "responseTime": 282,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "85657be6-83c9-47fe-88ff-a8aa18e8db62",
        "cursor": {
          "ref": "4e2c81aa-3308-485c-958a-45486f5e817c",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "5d259aa6-f51d-4c9d-924d-5a58d0b9f36f"
        },
        "item": {
          "id": "85657be6-83c9-47fe-88ff-a8aa18e8db62",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "b962a770-9aa0-4f96-9fe3-ac50cf387673",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "20c4804d-3ed4-4f18-85c5-f814b6dae111",
        "cursor": {
          "ref": "ff940f2b-bd66-44fa-8a1e-b32d78d5098e",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "618d1f7e-0161-49d6-a4c4-a6a21898b5bf"
        },
        "item": {
          "id": "20c4804d-3ed4-4f18-85c5-f814b6dae111",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f8d8f8b2-07df-4967-b759-60f31d193cd4",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "9b5d24f9-307c-4f02-8fb9-e0914885ad54",
        "cursor": {
          "ref": "563378d1-ee23-48fe-9133-0dc25c9e1f8a",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "ea0cc8bd-528a-4e33-867d-7ae3740bbe0b"
        },
        "item": {
          "id": "9b5d24f9-307c-4f02-8fb9-e0914885ad54",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "e56e83ae-5d61-49f4-b252-79eadaebd56a",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "365b60b4-21cb-4b53-8eb4-ba35e7d18040",
        "cursor": {
          "ref": "e12a72c4-f2c2-4ea8-b35d-a9b5210cc86d",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "7eef10c5-2b89-4928-b118-53c5b9c48a95"
        },
        "item": {
          "id": "365b60b4-21cb-4b53-8eb4-ba35e7d18040",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "4c4164bc-e7ac-4160-acaa-23178ba88e33",
          "status": "Created",
          "code": 201,
          "responseTime": 277,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "9b70036a-3b27-4535-af4a-0bfcc413dbd0",
        "cursor": {
          "ref": "c6e6397e-74a0-4d3d-a2ab-f55b0dadedf3",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8e093b97-111d-4c12-b00b-ae083d717695"
        },
        "item": {
          "id": "9b70036a-3b27-4535-af4a-0bfcc413dbd0",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "94741de0-723e-4129-8fb4-554b6794f3b1",
          "status": "Created",
          "code": 201,
          "responseTime": 311,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "4fbf7d41-f06e-43cb-9b1c-0dbcd2b1763c",
        "cursor": {
          "ref": "bc2eb12e-489c-46d6-9145-39de038ebf26",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "967ce13b-e93a-42ed-bbd7-e83188153a77"
        },
        "item": {
          "id": "4fbf7d41-f06e-43cb-9b1c-0dbcd2b1763c",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "2bdc3803-2da9-4f9e-bfa7-bb9651164025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3fa70ab-3db4-415c-a936-9ab29294a674",
        "cursor": {
          "ref": "6ab05064-6683-4983-ae16-67c5220c3ee2",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "a13a753a-9ae2-40fe-aa3c-661a3bb2910d"
        },
        "item": {
          "id": "d3fa70ab-3db4-415c-a936-9ab29294a674",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "378169a4-9079-444e-bdb8-2363bbee7555",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8cdd2fd6-a5b0-4981-81ef-00a733ea420e",
        "cursor": {
          "ref": "bbeeb78a-cdf1-4f55-8ebe-78337dbb7a06",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "31739e89-5020-4f1b-8e0f-45ef8609844d"
        },
        "item": {
          "id": "8cdd2fd6-a5b0-4981-81ef-00a733ea420e",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "3ac6e4e8-a5b1-45e3-9e86-71d8886f5351",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee7559ad-2088-414c-869f-c2d02f6588b1",
        "cursor": {
          "ref": "396e7de0-61dc-4b70-a857-8f06cfbe04b4",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "d08c0b14-580c-4b68-9823-27ddd274d79a"
        },
        "item": {
          "id": "ee7559ad-2088-414c-869f-c2d02f6588b1",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "87a6e1b1-c8e3-4adb-8abe-2914c5871b8e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a97768a-2acd-4621-9c9e-5d412086796a",
        "cursor": {
          "ref": "dec4ff18-0cff-4dd7-8a3c-ceb56e64cfdb",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "f67b9c9f-cad7-45db-bd32-67832e871cab"
        },
        "item": {
          "id": "7a97768a-2acd-4621-9c9e-5d412086796a",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "50c05bd7-8642-484a-98f0-e330be6ac2c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2057d3a-d207-47cd-a220-939e893b6d4c",
        "cursor": {
          "ref": "f89670c4-6039-4096-a216-5b180aec74f7",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "16d4864a-5892-43ae-9fcf-81c58fe81388"
        },
        "item": {
          "id": "a2057d3a-d207-47cd-a220-939e893b6d4c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "240b9aef-a107-4e8e-afd4-81b1137309fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0d261bf-9868-42db-bd79-bae5b5977bd6",
        "cursor": {
          "ref": "10f99f2a-9dfe-456c-9284-2f8e401fddce",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "870a6a60-9dea-449f-9768-600e9d0fc88b"
        },
        "item": {
          "id": "c0d261bf-9868-42db-bd79-bae5b5977bd6",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6a5ff30b-3cd4-489e-94a0-19cb89f3c998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45717c35-da5a-44ef-9a42-a4d331fd9095",
        "cursor": {
          "ref": "e8280186-1d42-417b-9794-4e899b64e23e",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "2f9d5414-6d41-49f5-a1d8-64c47150cbd9"
        },
        "item": {
          "id": "45717c35-da5a-44ef-9a42-a4d331fd9095",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "6135d02a-cd0f-4454-8445-2e2fb7dbf874",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81e99775-f5d0-46ba-a7e4-8f810194c1d5",
        "cursor": {
          "ref": "e7902300-cb73-4fbf-89ea-974e423d6ee2",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "96774d9e-8243-4cb1-a5a3-8a746a22b694"
        },
        "item": {
          "id": "81e99775-f5d0-46ba-a7e4-8f810194c1d5",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "27d7522a-327f-4b44-923f-730737d819f9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "231e0847-07ac-4a92-be1b-b8cf237a840e",
        "cursor": {
          "ref": "c124e7a1-d073-4519-b4f2-ad507209a072",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "475ad708-41dc-4aff-aacb-810e23aa6309"
        },
        "item": {
          "id": "231e0847-07ac-4a92-be1b-b8cf237a840e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "ba91c2fe-64cb-4619-a63e-e4b4d94169a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922775c8-befb-4239-b680-92665d2ae95e",
        "cursor": {
          "ref": "b6480e5f-5d4d-4c61-bb12-afa167b41991",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "22a1d242-fe20-4b59-ba24-2aa3be3cc45b"
        },
        "item": {
          "id": "922775c8-befb-4239-b680-92665d2ae95e",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "cb6f358d-6166-4469-babc-085b6cce4edf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcf3a965-43ec-4f9b-b01c-d8bbbcac60d9",
        "cursor": {
          "ref": "89c2c431-8200-4c01-b37a-3e951de79cf2",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b2e8700b-49a5-4981-bc6d-a736f7ae650c"
        },
        "item": {
          "id": "fcf3a965-43ec-4f9b-b01c-d8bbbcac60d9",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "af1afc4c-d318-4bb0-9c09-06f69c23b769",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91ba3427-f1f7-4a02-9ee3-518aaa400c77",
        "cursor": {
          "ref": "ee1a4347-c892-4102-aa46-c9a2c021026b",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "31926ff5-b355-4012-b55c-f5df2cdfb4ee"
        },
        "item": {
          "id": "91ba3427-f1f7-4a02-9ee3-518aaa400c77",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "8c44f652-770f-4964-b34c-0713fcfcc88a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f02610bb-5fcc-49f3-9ff5-81ff414f2819",
        "cursor": {
          "ref": "fcc5ce19-200b-4820-8f1c-827c076de8ef",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "30080260-ec7c-4e25-83c8-b62820869903"
        },
        "item": {
          "id": "f02610bb-5fcc-49f3-9ff5-81ff414f2819",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "4bb77091-be7f-4a10-83e1-aa9e5ff8d225",
          "status": "Created",
          "code": 201,
          "responseTime": 259,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "e719b19c-5a88-46df-9eca-e37ece4b1c7d",
        "cursor": {
          "ref": "1908f0bc-fddc-477f-9c8c-d0c3507ea88e",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "85d5f0ae-e532-47c7-aba9-a3ebfaf219cf"
        },
        "item": {
          "id": "e719b19c-5a88-46df-9eca-e37ece4b1c7d",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "fe664d21-a8cb-47af-a09f-4ea7ecdf39db",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "f2b5c7cd-3d68-46f7-8689-dd526ed34542",
        "cursor": {
          "ref": "96c6b896-1e46-4663-91ca-2d85e16f674f",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "6452e546-09b5-4823-91fe-bb0ac396dbe2"
        },
        "item": {
          "id": "f2b5c7cd-3d68-46f7-8689-dd526ed34542",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "f058b3dd-ad44-4fb4-a960-05a5485a311a",
          "status": "Created",
          "code": 201,
          "responseTime": 281,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "090697e0-da06-437b-85fe-bc8db6e79d59",
        "cursor": {
          "ref": "bdea8cc9-e820-4d56-a97e-97339bf7b87d",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "3b5d05d4-db20-426b-b245-041b41166157"
        },
        "item": {
          "id": "090697e0-da06-437b-85fe-bc8db6e79d59",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "03925475-f344-4854-ae38-012328524cfc",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "db9564b9-1ee2-4d1c-ac64-3b4992543c32",
        "cursor": {
          "ref": "c20d9b0f-c907-4ede-bc9f-59ae2841c6d9",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "329feb85-14c5-4330-ac42-eae5341a2dad"
        },
        "item": {
          "id": "db9564b9-1ee2-4d1c-ac64-3b4992543c32",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "ea3bb3fe-b138-4832-88fa-b99e27458970",
          "status": "Created",
          "code": 201,
          "responseTime": 286,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "93986651-e8f5-4d94-93f7-0d73843f32d4",
        "cursor": {
          "ref": "1609dd4a-1010-4545-a574-dff64795a7ff",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "98756974-aa0e-48af-95a2-af5bd4fe3438"
        },
        "item": {
          "id": "93986651-e8f5-4d94-93f7-0d73843f32d4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "8e24f4cc-77c7-4a99-8b55-cf4c2c1e3de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b40e6e1-70d1-473e-9223-20fe39f748b4",
        "cursor": {
          "ref": "4c2a7cfd-fd1c-495a-87ed-43c8b257c583",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "27f80f23-b023-4c12-923c-70d4b550730e"
        },
        "item": {
          "id": "5b40e6e1-70d1-473e-9223-20fe39f748b4",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b6e5b5b6-ba6f-46a5-b798-efa36790d368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f97748a-c44f-4d37-9614-cc439379fabc",
        "cursor": {
          "ref": "2e521266-e45b-489d-add3-704926e3bcd6",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "65f19324-58a7-40a7-8f02-8b504dfaeee6"
        },
        "item": {
          "id": "0f97748a-c44f-4d37-9614-cc439379fabc",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "a0d6fa29-adee-4dba-8e9b-b21fb0ebd03e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8450eebc-910c-409b-ae0b-a15135981c91",
        "cursor": {
          "ref": "4a8b67c1-f91b-46ae-9354-0fdf84ea31f9",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "4ea5038e-dd48-49ae-a3aa-9e73ab923a76"
        },
        "item": {
          "id": "8450eebc-910c-409b-ae0b-a15135981c91",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "ac5f0138-415a-4fda-a1a6-1097209253d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acc9fc5d-e039-4825-8094-7709dd311d6b",
        "cursor": {
          "ref": "4f88265c-1215-41d2-83c0-43a8c19b1f8a",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "8146e6c7-1a4f-4977-a88a-98eaaa3dc6ce"
        },
        "item": {
          "id": "acc9fc5d-e039-4825-8094-7709dd311d6b",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "66e0c312-12c0-4acf-b02b-fe5d96a48dc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4af78c3-c89c-44d8-ace5-b4068341f174",
        "cursor": {
          "ref": "ae03c4fa-af41-41ed-a7e8-d2ae865bad50",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "58aaa1ee-406e-4457-8111-a64f67cda232"
        },
        "item": {
          "id": "f4af78c3-c89c-44d8-ace5-b4068341f174",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "5db75a95-edfd-40c0-8332-6b8a2c5f15ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "275b26e2-51ac-4d66-81ad-ca3d6dc793ff",
        "cursor": {
          "ref": "0ff02ffa-a38c-4e1b-ba25-099c28544d38",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "c049502d-6f55-46bc-ac97-2a057bf9cab5"
        },
        "item": {
          "id": "275b26e2-51ac-4d66-81ad-ca3d6dc793ff",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "87cee3d7-1212-42e9-b707-e541f26c4148",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2ba8ee0-5ac8-4d0b-b66e-eb582c45a7ee",
        "cursor": {
          "ref": "7fedd532-08d6-4cf3-92c1-7e3edf7a283f",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "73fc3bf2-30f3-40fa-943c-cfe448cbed08"
        },
        "item": {
          "id": "a2ba8ee0-5ac8-4d0b-b66e-eb582c45a7ee",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "d750e50f-7838-407f-913a-2215252b2fe8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32e0e92a-3832-4bc0-9a59-08238ac8f744",
        "cursor": {
          "ref": "e60df085-e67e-4a1a-8fe8-702d0688b4bf",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "d440d043-800c-4fad-a300-d1a7f568a252"
        },
        "item": {
          "id": "32e0e92a-3832-4bc0-9a59-08238ac8f744",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "f68987d6-d1c5-4313-98fa-bfdbeccefc5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c52f8f0-8837-4b2f-8bd0-a122e33c6468",
        "cursor": {
          "ref": "30405dd0-fb1c-452c-af2b-2c16037dae82",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "1b932eb6-598d-4075-9c24-3aced8ac6ebe"
        },
        "item": {
          "id": "4c52f8f0-8837-4b2f-8bd0-a122e33c6468",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "16f1b315-5dca-46b9-beab-ef8ac1fbb824",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cfc5b0a-6e21-4b5c-9117-a02a7b98c32f",
        "cursor": {
          "ref": "732152d0-29a4-4f27-bc7e-8ceb90799a72",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "cd9154ab-21a4-4d3e-8dfb-908e76c1c02f"
        },
        "item": {
          "id": "3cfc5b0a-6e21-4b5c-9117-a02a7b98c32f",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "f87befec-d86e-4c68-95fb-30a4cb6e1945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6627166f-35a2-462b-9ecc-b4cb3b554bec",
        "cursor": {
          "ref": "46e8ea78-7f80-44f9-893d-bbf5db0a6ec4",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "571e817a-3b6d-4e1b-9551-54870ddf1886"
        },
        "item": {
          "id": "6627166f-35a2-462b-9ecc-b4cb3b554bec",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "7cb0ed08-df73-4b2c-b897-3cb217de1237",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fc9705c-6f3c-4be9-8079-0c1ea72921d7",
        "cursor": {
          "ref": "1b3b8087-b1d4-40c5-8973-2d8f3cfefafc",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "c225cc75-b686-4ab2-a9b2-831adeba1467"
        },
        "item": {
          "id": "9fc9705c-6f3c-4be9-8079-0c1ea72921d7",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "4a2faf31-22b9-46be-a57a-3c30d68ae6e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3679a0d8-9d45-4a59-a7a4-380715474d7d",
        "cursor": {
          "ref": "6f0251b8-1adc-47d0-94a9-d60cf1e9dabd",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f77ce794-db7b-41ac-816e-c5199206f8c9"
        },
        "item": {
          "id": "3679a0d8-9d45-4a59-a7a4-380715474d7d",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "302c29d7-6596-47c7-9a34-a022755b06d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1860fa95-0207-42fb-99cf-51aa2cd50bae",
        "cursor": {
          "ref": "ac4b6d30-3917-4322-92fe-81bb3cd32ef2",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "18d4c81d-4bd7-44eb-97d9-c822083c9abe"
        },
        "item": {
          "id": "1860fa95-0207-42fb-99cf-51aa2cd50bae",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5d2fb54b-ef79-491c-8671-ced5d219f6fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fd42755-b2a7-4c4d-a505-80ca01603faa",
        "cursor": {
          "ref": "5734a5e2-9e07-4cd2-8fc4-92061c8ec753",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "52d398be-9be2-425e-a54a-0f86a2aa79d9"
        },
        "item": {
          "id": "8fd42755-b2a7-4c4d-a505-80ca01603faa",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "43cfc063-7e78-4217-960c-22a672a0e29a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01108b4c-c26e-4763-9659-767e2d018bbc",
        "cursor": {
          "ref": "667899f2-3a2b-47d5-8d23-bca2a667b7a5",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e3c15707-82d4-4e6f-9535-715e072ff433"
        },
        "item": {
          "id": "01108b4c-c26e-4763-9659-767e2d018bbc",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "3c288a77-9f99-4bbb-875d-0de837009bf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ffe8cf6-c699-4876-bf68-113b242efc11",
        "cursor": {
          "ref": "64d34d86-c7a1-440e-995c-fa782a5f2d2a",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "b53ffbff-1b37-41b0-8793-f448c26568ff"
        },
        "item": {
          "id": "7ffe8cf6-c699-4876-bf68-113b242efc11",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "3495b4e3-9533-40b4-a8e5-4019a52ee861",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a16d58-4757-41d5-805e-3471d023b42e",
        "cursor": {
          "ref": "1d71c14a-d34b-4575-bf76-7d57b15ba5ee",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "dc042dbc-725d-498c-8992-4264f007b5e1"
        },
        "item": {
          "id": "61a16d58-4757-41d5-805e-3471d023b42e",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9e44dad1-169e-4fc3-8b2b-2a099275b9cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19d8c950-bb9a-484d-8110-768a161530d7",
        "cursor": {
          "ref": "a8e85e8e-1a4d-41d0-9027-bed17dfe11e6",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "dab78b75-1693-411a-8763-36d5a399716b"
        },
        "item": {
          "id": "19d8c950-bb9a-484d-8110-768a161530d7",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "28f21529-318f-42cb-93e5-f01fa8e288e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "997a853f-0483-4af4-8024-196b43438adf",
        "cursor": {
          "ref": "03b5abdc-0cff-4262-862c-fef0b5a9f8da",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b4878d48-913d-4157-9b8d-83199ea1a721"
        },
        "item": {
          "id": "997a853f-0483-4af4-8024-196b43438adf",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "d6d6199f-e501-4f90-9b8c-0808333aa530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9feffb2-795b-431b-a7c1-0cbba7f8451d",
        "cursor": {
          "ref": "482b1518-231a-45c7-a04e-6eaa3be12a6d",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "a4cd5c15-0ca9-4548-bb47-497430b3ef64"
        },
        "item": {
          "id": "b9feffb2-795b-431b-a7c1-0cbba7f8451d",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "bb8666a2-e5e7-4a80-a075-c4500a395920",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b227922a-003b-43ea-81c6-5795857d82bc",
        "cursor": {
          "ref": "e77f1499-c788-40c7-943c-d56c43fad1fe",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "9105c631-2be3-40cb-b99e-67899c22f4e2"
        },
        "item": {
          "id": "b227922a-003b-43ea-81c6-5795857d82bc",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "90e9f808-25e1-4f04-b7e6-79d121b41516",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0197bbad-c3d5-483a-bcc1-892203503548",
        "cursor": {
          "ref": "2c2df540-6ebf-4fd6-85ef-a285643940fd",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "3322a32d-5059-4bc2-a3ce-6436d9475563"
        },
        "item": {
          "id": "0197bbad-c3d5-483a-bcc1-892203503548",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "a2f8f556-79f9-4555-b2f6-ea2c4455168a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6eeb099a-3464-451a-82b9-faef56d9f33a",
        "cursor": {
          "ref": "e6009be4-54f8-4381-92cf-bf8b519dd191",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "1db9f836-f3a9-491b-9797-1b9e9e45d128"
        },
        "item": {
          "id": "6eeb099a-3464-451a-82b9-faef56d9f33a",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a3f93135-8979-42a4-846e-86d85dd867dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3d86f5f-2749-4bfe-935a-ca591cf064d0",
        "cursor": {
          "ref": "468b8766-3c0c-4bd1-9ab1-b3c6e506d877",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "8350851f-cadd-4565-a412-6494a874b9df"
        },
        "item": {
          "id": "c3d86f5f-2749-4bfe-935a-ca591cf064d0",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "32cfb3d3-96af-41f0-8ef2-89dd05a59b4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "604f720a-2f97-4a54-b8f4-544ec80412ee",
        "cursor": {
          "ref": "5689e18f-3b49-4e4b-b550-6e1679c7fe6e",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "5a227913-16c5-4f1d-9829-557b759ec177"
        },
        "item": {
          "id": "604f720a-2f97-4a54-b8f4-544ec80412ee",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "f5f93a3b-78e5-4e62-8412-eb5da07cf106",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1095dd90-969a-403f-b987-3091d42560ca",
        "cursor": {
          "ref": "60364735-49af-4e65-9fac-d4bb15af75f9",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "1b0ca4d0-7295-401d-a10b-b7e7e866c3a7"
        },
        "item": {
          "id": "1095dd90-969a-403f-b987-3091d42560ca",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "cef8bf09-0935-44a8-b5ec-0ec55bd97af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92085059-8436-4e99-99a7-c0a6209b4926",
        "cursor": {
          "ref": "931c9cba-7a70-4462-978c-9f463086b0ba",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "d99d45cf-f7ea-44b3-91ce-7278f7bad46f"
        },
        "item": {
          "id": "92085059-8436-4e99-99a7-c0a6209b4926",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "475e03c8-2a9f-49e2-8190-ffe56a8edc63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e542b800-69de-4054-ad7a-6ddb7d71173b",
        "cursor": {
          "ref": "ce8d6102-de84-43b2-b2c2-5f02122a1eba",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "6d5af368-4d27-4323-bdf7-28e759c17ffe"
        },
        "item": {
          "id": "e542b800-69de-4054-ad7a-6ddb7d71173b",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "d36374b2-e582-4584-9331-66a8ec91340e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13e246ce-daeb-4ae2-a5af-1eb67a663e77",
        "cursor": {
          "ref": "4bb613a4-decc-4d38-902f-41a422ea25dc",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "ae3bac4d-45fc-499f-8435-076db4a99b7f"
        },
        "item": {
          "id": "13e246ce-daeb-4ae2-a5af-1eb67a663e77",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "57d77de5-11d2-4856-819f-54e2e87b2b4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a2edc1d-8fbe-430d-8100-d6a4d2e309b7",
        "cursor": {
          "ref": "8030be16-a6e1-4574-adc4-df3486ed376a",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "f2b982d7-6522-4e1b-9fb6-b12e93ca6d76"
        },
        "item": {
          "id": "1a2edc1d-8fbe-430d-8100-d6a4d2e309b7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "2437d5dd-c238-42b2-81b4-dbd9637d6955",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18f99207-d0fc-4190-aea1-a42dd0425d89",
        "cursor": {
          "ref": "510b2f4c-a9e6-4e61-9337-1fdaa7473c45",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "891f5f76-5bdf-4c83-8aa0-a258bc3c3d64"
        },
        "item": {
          "id": "18f99207-d0fc-4190-aea1-a42dd0425d89",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "7d6cf0e0-0df0-48e4-b9be-2671e54c3adb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "e6ace50b-095c-4f68-b2d2-8c9d9091ffee",
        "cursor": {
          "ref": "42a338d0-5aad-4757-8ea7-63b8c2dc2fd5",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "18f3c30f-b8ba-4457-b93e-682761d87ed1"
        },
        "item": {
          "id": "e6ace50b-095c-4f68-b2d2-8c9d9091ffee",
          "name": "credentials_issue"
        },
        "response": {
          "id": "86133412-3579-4852-9e10-0e29853e074d",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "71a3cf9e-5e65-4ce4-b10e-a2b51310480a",
        "cursor": {
          "ref": "e1efbc56-ab11-425c-bcfd-d535386cdd83",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "c1903f70-7c40-412f-a933-a204a09ef2b4"
        },
        "item": {
          "id": "71a3cf9e-5e65-4ce4-b10e-a2b51310480a",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "da06f842-d59c-431e-aa20-bae74030b929",
          "status": "Created",
          "code": 201,
          "responseTime": 288,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "c86bd9c3-f935-4524-957a-492955bed60e",
        "cursor": {
          "ref": "a2f037e7-dd95-4646-9ece-7e891d9d883e",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "4a5183be-80c3-4db0-b88a-7fb26b6e0dab"
        },
        "item": {
          "id": "c86bd9c3-f935-4524-957a-492955bed60e",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "2b048b7e-d397-4e86-baa8-c552fe9863a3",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "96d8e920-2d78-4424-a322-ef61d2fb4904",
        "cursor": {
          "ref": "2f4ad8b4-685c-40a5-969b-43b3f46ddf81",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "5212bac3-722d-4ef3-bd0b-d82f0fbca12f"
        },
        "item": {
          "id": "96d8e920-2d78-4424-a322-ef61d2fb4904",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "af811d44-6e98-4be0-9e79-26b0ebccb662",
          "status": "Created",
          "code": 201,
          "responseTime": 279,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd47faac-f362-4fc7-803f-99521d0223a7",
        "cursor": {
          "ref": "2fc70041-1b73-47ce-893f-b3e7abd7bac7",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "9291ad0e-4f66-4a49-9c89-d63f46d8f58e"
        },
        "item": {
          "id": "fd47faac-f362-4fc7-803f-99521d0223a7",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "a139d635-f968-42f0-8dc8-1ac407279f07",
          "status": "Created",
          "code": 201,
          "responseTime": 278,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-02-16T00:33:43.133Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-02-16T00:33:43.133Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "d0b09eed-b813-439a-a13d-a1b19ebcbd38",
        "cursor": {
          "ref": "44ebd243-3180-42cd-954e-a6f781fcfb24",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "332f4c25-c2df-487f-b759-51b0cdca933d"
        },
        "item": {
          "id": "d0b09eed-b813-439a-a13d-a1b19ebcbd38",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "ade907e9-fe15-4d80-bf66-feedaa50574d",
          "status": "Created",
          "code": 201,
          "responseTime": 285,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83108534-1a74-454e-8bbf-b9b08c235c21",
        "cursor": {
          "ref": "5efc3674-f84a-4a09-b716-650dddce4dc9",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ffbbb537-b349-4afd-8170-42a57d33124d"
        },
        "item": {
          "id": "83108534-1a74-454e-8bbf-b9b08c235c21",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "57a094d9-ea0a-4b2b-835b-7ed318ba1c9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d40ec68a-a712-4c15-b0e3-6dd714fe0872",
        "cursor": {
          "ref": "da80135c-a208-431b-bcaf-06597a9c737e",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "67aaa7ea-6d2b-493d-9cde-939d21effb32"
        },
        "item": {
          "id": "d40ec68a-a712-4c15-b0e3-6dd714fe0872",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "dc828cd0-4f2b-4c90-8cfa-b4903864dfec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14555c7-a6aa-40d2-bc1d-d06c1f83ddbc",
        "cursor": {
          "ref": "ea6e5f4d-1669-4f81-8f03-e6bff210276b",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f5fac82d-768c-49a9-bf11-4fe622934430"
        },
        "item": {
          "id": "c14555c7-a6aa-40d2-bc1d-d06c1f83ddbc",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d4284b4f-7467-4bb9-b048-3eaacc5a2254",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3e53d8d-b7d4-43b7-ba41-60144b057802",
        "cursor": {
          "ref": "2233a407-5b7b-4ae4-aeaa-955f81783913",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4d1add28-eeb2-4849-a1fe-4a6f2a2b85ab"
        },
        "item": {
          "id": "e3e53d8d-b7d4-43b7-ba41-60144b057802",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "71807e79-c9ff-47e8-ac13-041e420ace03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a634a55-700e-422f-9d81-92f1400b808b",
        "cursor": {
          "ref": "75efc6e2-3f59-4320-b35a-ce592cc63242",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "d372b246-3338-49b8-a152-cdd126cb254d"
        },
        "item": {
          "id": "0a634a55-700e-422f-9d81-92f1400b808b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f6cd8038-7e62-4822-961e-ab244339a2cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1428687e-f211-4a81-8842-2777e4186884",
        "cursor": {
          "ref": "aebe2c71-435b-4ec6-b3d5-c21bdd5a9ee6",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "059c9fb2-eb44-4dc8-820f-dbbe3f849afe"
        },
        "item": {
          "id": "1428687e-f211-4a81-8842-2777e4186884",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6b9c0f71-5a8d-43d5-b1cf-4d5df92ce419",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a9501b9-5717-4c4f-b196-33999e9f9c67",
        "cursor": {
          "ref": "46cf7e03-7dda-4924-8608-58b157fc9f92",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2b5e3667-87d6-4028-bdfc-700f173c551e"
        },
        "item": {
          "id": "8a9501b9-5717-4c4f-b196-33999e9f9c67",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e32e9507-8e49-47ab-87d5-48834e80dcf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e70c89b-c273-4877-816d-a6e4bd54753a",
        "cursor": {
          "ref": "84cd42e0-6530-4486-bb51-cacea2f066ed",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "b5819983-b4bb-41e2-bbb2-585e5d2a5b47"
        },
        "item": {
          "id": "5e70c89b-c273-4877-816d-a6e4bd54753a",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "eaf9b109-c0f4-40cd-baa0-d85c6e12ea12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 56,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e0c8d8c-0b22-4d31-aedc-aff55c5c4b78",
        "cursor": {
          "ref": "5af0eb38-9d0d-456d-b770-f7d2dcad47db",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "4dd44446-236a-45da-9467-b132274e968d"
        },
        "item": {
          "id": "9e0c8d8c-0b22-4d31-aedc-aff55c5c4b78",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "126c3c5a-12af-4c6e-8e5e-16a267c0d08c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0583b4b1-7b82-43f4-9382-b64dafb21d13",
        "cursor": {
          "ref": "ccc274d9-2592-405e-918c-82ea15eef62d",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "027dfa5b-a364-4ec4-86de-e163613ff836"
        },
        "item": {
          "id": "0583b4b1-7b82-43f4-9382-b64dafb21d13",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "5c64944e-e36e-4e24-87f3-40da23a129cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44aa25e8-8a24-42f5-9cf1-37e7bcaed7b4",
        "cursor": {
          "ref": "dc789e2f-0bdf-4958-8761-43c642c0e0ae",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "efe33d07-4549-4bae-99d0-5f502c95549b"
        },
        "item": {
          "id": "44aa25e8-8a24-42f5-9cf1-37e7bcaed7b4",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "2507adcd-39f7-40a5-89c4-fb1c35ebb5dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da1ba8c9-769a-4924-97dd-c1d9d96a8f20",
        "cursor": {
          "ref": "7a6c4f71-adaf-452a-970d-6d41cb93411c",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d0048557-b5d0-48dd-84ef-4f3f2989a554"
        },
        "item": {
          "id": "da1ba8c9-769a-4924-97dd-c1d9d96a8f20",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "b77009d4-b019-4fc3-b3c6-efe407e40a59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a69c30-8f24-44e2-a744-80c9db059541",
        "cursor": {
          "ref": "17ba241d-5bd5-42bb-8640-67a30f28eb23",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "2acba6a8-b930-475c-9701-44a8fe6d5d10"
        },
        "item": {
          "id": "57a69c30-8f24-44e2-a744-80c9db059541",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "ab11e06d-7854-4923-8ee7-2e9c6c4b29ab",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 79,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "590999d7-7f18-4723-ad51-e06f527c85a1",
        "cursor": {
          "ref": "23b028e0-62f4-48d5-a1fa-cff0b212807f",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "cbac63f9-57eb-401e-ba05-272cb4641b0d"
        },
        "item": {
          "id": "590999d7-7f18-4723-ad51-e06f527c85a1",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "e983d280-5b36-4cc2-9659-dcabe5838046",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 71,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "132e4c82-cec2-4d83-a71e-703e546f9b82",
        "cursor": {
          "ref": "cae8628d-a4fe-4dd0-8833-2769bdf9744b",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "9dbc3ba2-43fd-4a9d-8abf-2aa696a5d2b0"
        },
        "item": {
          "id": "132e4c82-cec2-4d83-a71e-703e546f9b82",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "9c2c47f4-9806-40c9-a61c-2d7997c5a515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26f12186-be41-4a14-a5b1-3e1228a98121",
        "cursor": {
          "ref": "c3a91dc6-41d1-48f4-9ad6-162973645314",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "a0f2863b-3b40-4e60-9eb2-6f70b964d625"
        },
        "item": {
          "id": "26f12186-be41-4a14-a5b1-3e1228a98121",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "0c019a5a-035e-48f9-9191-a8675f1350d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7084c026-de84-447a-a50a-81ac4f425203",
        "cursor": {
          "ref": "aca7b84c-5d02-4fc2-ac7b-e7267aaf6eab",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "4cabcf9f-ea97-491f-99c1-a98973406dd5"
        },
        "item": {
          "id": "7084c026-de84-447a-a50a-81ac4f425203",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "5bb64228-d7d7-441d-9b10-896c4144d274",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc60aadd-a616-4111-ba39-b8e2ecfd84f7",
        "cursor": {
          "ref": "99c62557-c443-4e56-bf5b-86c393ea1e3d",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "c56da5b6-d673-4f3a-9dc2-db90f7f096f1"
        },
        "item": {
          "id": "cc60aadd-a616-4111-ba39-b8e2ecfd84f7",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "2126a3ba-78cb-42c3-8311-3915f58c9a20",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e1e03955-5d18-42e1-9aa5-dba8f1f4d4c1",
        "cursor": {
          "ref": "6bb79aa0-c4bd-4494-a755-c0ac1843f417",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "48495997-8381-48b7-b4e9-eadea1679630"
        },
        "item": {
          "id": "e1e03955-5d18-42e1-9aa5-dba8f1f4d4c1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "77e7a5b3-564e-41c4-a978-d859d8282757",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "042a99a6-6df7-4b8b-9684-2159fca00e6d",
        "cursor": {
          "ref": "58979865-2f9a-4591-aa3e-c01857ec0f44",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "e529b256-30b9-4c99-bd06-e0bc3cbfc0d6"
        },
        "item": {
          "id": "042a99a6-6df7-4b8b-9684-2159fca00e6d",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "993f5bf7-1ce1-4b87-a547-cc623f36640c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 26,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e9deaa-0222-428c-9cc7-9ce9ee0f1874",
        "cursor": {
          "ref": "158984dc-cf86-41fc-8622-1c737d9ef3f0",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "fe1161d1-c95b-49fb-a511-a20063aea175"
        },
        "item": {
          "id": "b6e9deaa-0222-428c-9cc7-9ce9ee0f1874",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "e7679bba-ba91-4060-ba59-9ac8d87c9702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74ab9f46-a7b6-47f1-8c4e-42b9f6f62bd4",
        "cursor": {
          "ref": "f7251e53-6410-4c2f-8127-d96507729dd7",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "b6827c83-79c4-4097-8431-af0ac7cacf83"
        },
        "item": {
          "id": "74ab9f46-a7b6-47f1-8c4e-42b9f6f62bd4",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4be2cf45-3087-4f65-95a1-fb819ee70455",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2665300-b84d-4ce8-88eb-d2b703800e6f",
        "cursor": {
          "ref": "01a7e124-ea36-4bb5-8d86-cd1c2014b484",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "5c9d2ce7-f6d1-4d70-8bef-ba15e85b31f8"
        },
        "item": {
          "id": "b2665300-b84d-4ce8-88eb-d2b703800e6f",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "07f6f862-fd44-4a0a-8f6c-0c26643762de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94b58582-a08a-4435-a0a8-27855d81c76c",
        "cursor": {
          "ref": "c4fdd41b-0041-4ae9-8a03-8d8a0ff172e4",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3d6caf9b-1c19-4c7f-b2af-177981391bc2"
        },
        "item": {
          "id": "94b58582-a08a-4435-a0a8-27855d81c76c",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "c0ec6da2-16c6-4bb6-a862-5328b259f038",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc687e36-7baf-4e40-b460-62645d844469",
        "cursor": {
          "ref": "a39a5e44-d8b6-40f3-ae93-82e0c56cde04",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "071af2c4-3ed3-4a7c-9625-f5cc98a9e212"
        },
        "item": {
          "id": "cc687e36-7baf-4e40-b460-62645d844469",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "18b690d0-0972-4850-b756-aaab7387bff1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cba5a6e-bf7c-4ed1-a8e1-4152c71f979c",
        "cursor": {
          "ref": "05d7303c-7f1d-4a7f-a8ca-07d00693016e",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "05b800c3-a298-4020-830b-2d24f0750d7d"
        },
        "item": {
          "id": "0cba5a6e-bf7c-4ed1-a8e1-4152c71f979c",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ed78ad27-e5ce-413f-ac32-a3af2bfbf501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2477611b-99ac-4d3d-8a91-68e7dc812afa",
        "cursor": {
          "ref": "805697e3-4cd9-400b-998c-1818b189fd96",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e0d868ac-8480-46df-a396-22d48353f726"
        },
        "item": {
          "id": "2477611b-99ac-4d3d-8a91-68e7dc812afa",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "b609df44-9207-4878-8867-a13e2ba6dbfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ac292c34-c6c3-482d-b314-983d7f845878",
        "cursor": {
          "ref": "b664c433-e841-4c54-bab5-b9cf70453678",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "c7637ceb-fe01-4847-bd68-20a4cc944b58"
        },
        "item": {
          "id": "ac292c34-c6c3-482d-b314-983d7f845878",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4bf819bb-c72c-4f3e-807c-6cc074dde539",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5598642c-7d11-4b5f-8801-7fe18d7aeff9",
        "cursor": {
          "ref": "31adb56e-f739-42b4-9146-204ce703b998",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "bc6933f0-873e-4750-a5fc-ed3372fabec0"
        },
        "item": {
          "id": "5598642c-7d11-4b5f-8801-7fe18d7aeff9",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "a9f84969-c7cf-42f1-9d47-64d8a4de6304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8fc9a968-8878-4ad7-9015-be70681e9631",
        "cursor": {
          "ref": "399c052b-5a64-431b-84e6-8ac82df45f17",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "c9d29cb0-22c8-42dd-862b-0aaaaebc5ac8"
        },
        "item": {
          "id": "8fc9a968-8878-4ad7-9015-be70681e9631",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "836a3f7f-2517-4fd5-b6d3-f3d479457139",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef5c8309-1476-47b9-b0e3-3b863b975e65",
        "cursor": {
          "ref": "d44a3a87-aab8-4590-9b3a-90d4f743acf4",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "4f64cd61-9a9c-491a-b9ca-0f16d70652c3"
        },
        "item": {
          "id": "ef5c8309-1476-47b9-b0e3-3b863b975e65",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "06b20746-ab37-42ce-a227-47f761c07610",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "600b1a40-7a06-427e-998a-6275ac296bda",
        "cursor": {
          "ref": "c7c2e16e-0ce2-47e0-8f41-e57292d0f1a6",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "dd0db41c-5ee8-4a6d-ad6e-909e72ee59b3"
        },
        "item": {
          "id": "600b1a40-7a06-427e-998a-6275ac296bda",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "54b8b77f-d50b-4376-a41b-fab8d431d39e",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "b1479bc0-9e7a-4ccf-9c9e-a93224da30a6",
        "cursor": {
          "ref": "cb66861b-c253-4935-ac86-cd1ebf2843af",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "9bfd2119-1101-4fa0-bb8a-2736c43d7a7e"
        },
        "item": {
          "id": "b1479bc0-9e7a-4ccf-9c9e-a93224da30a6",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "529f9bca-63be-4b8a-8e8e-c01f00fd00c3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e0924df-86d8-4074-9098-675f59256fdc",
        "cursor": {
          "ref": "df057912-ff1d-49f8-9cab-7f4b37071312",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "b73a784f-4b6b-4655-96d5-a223e3379a65"
        },
        "item": {
          "id": "8e0924df-86d8-4074-9098-675f59256fdc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1bb1465d-7986-4eef-bb52-472052ae0a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72d867d0-7940-4e92-b256-0cbf2c9755f8",
        "cursor": {
          "ref": "133ecf7e-aa3e-49a4-a407-32d266255a75",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "34effe14-6ab0-4932-95ae-689cf72699d0"
        },
        "item": {
          "id": "72d867d0-7940-4e92-b256-0cbf2c9755f8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "f4a1f82d-ea8f-4042-9d81-39081558d90e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72ac89b1-34f1-468f-87f4-4a43866e0ed0",
        "cursor": {
          "ref": "eb60158f-3bd4-42b1-bae2-1ad8df600fad",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3a6381c5-e500-4625-864f-f1c9a11347fd"
        },
        "item": {
          "id": "72ac89b1-34f1-468f-87f4-4a43866e0ed0",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "5ffb527d-8a8a-4c73-a883-07b70f4ee2bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef7e1790-4766-44b8-ba98-0c5f994cb6dc",
        "cursor": {
          "ref": "604ec39e-84ca-40d5-b1eb-ac0cb78b12c5",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "a7aea067-95c1-4b0b-afbd-60f3f4ded9d3"
        },
        "item": {
          "id": "ef7e1790-4766-44b8-ba98-0c5f994cb6dc",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6d4d6c54-68aa-4237-aa71-8ea1fec51697",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db0ef1b-bcf0-438b-8148-6d0dff6282e9",
        "cursor": {
          "ref": "37e4e569-04cf-4847-a1ce-4b5e80229c0b",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "8a40cceb-06cc-42fb-8578-a844dfbee6dc"
        },
        "item": {
          "id": "3db0ef1b-bcf0-438b-8148-6d0dff6282e9",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "b60cd08f-c577-4b46-8cf1-eadb665c6f4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5faaec10-9233-4ff5-80cd-9d5a38d5ee0b",
        "cursor": {
          "ref": "6762e052-de83-43dc-b4fc-4c8598217930",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "1d21bb98-890a-4f2e-bae6-c92b53d1d8ce"
        },
        "item": {
          "id": "5faaec10-9233-4ff5-80cd-9d5a38d5ee0b",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "f54f278b-6235-4108-9a25-bb497cbf7a14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "789992ab-0b08-4c58-8057-d189cd3623e0",
        "cursor": {
          "ref": "84ffe5a2-2aa7-4e8d-80d1-dbfcd389c921",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "6fb647c8-bcb0-41eb-ac21-e07d1b222aa1"
        },
        "item": {
          "id": "789992ab-0b08-4c58-8057-d189cd3623e0",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "fedc6ece-6cb1-4cfc-9765-8275a09e5cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ff51f99-ea38-4dfc-a51d-0f7a40aecd85",
        "cursor": {
          "ref": "86086612-021a-40c1-a29c-60a8154fb6cc",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "5000cefc-149d-47d2-a073-fad5161c3573"
        },
        "item": {
          "id": "8ff51f99-ea38-4dfc-a51d-0f7a40aecd85",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fe6b20d6-0035-4c53-bb6e-13fd0ef9d962",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b27fb6d-0a74-4e68-84b8-a71ca554d05d",
        "cursor": {
          "ref": "c01020ee-4f38-46ad-b0a0-72983953882b",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "962f2616-43d2-4da8-b259-fb04b27d2602"
        },
        "item": {
          "id": "1b27fb6d-0a74-4e68-84b8-a71ca554d05d",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "a58a3bed-49f6-44fa-84c0-b4b8bd08ceb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1295bb50-0c14-4242-9aa8-7497eebdb2df",
        "cursor": {
          "ref": "73e57249-d1cc-4a26-9214-93a0a3deb5cf",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "ec968b2f-8050-494f-8b47-f11f23121d86"
        },
        "item": {
          "id": "1295bb50-0c14-4242-9aa8-7497eebdb2df",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "4597978b-f51f-4d74-8eda-8920af0527c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afceef6e-a8d0-4806-8a7f-fa80060b9d79",
        "cursor": {
          "ref": "83533500-87d7-493f-88d6-36461c1193a7",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "65fd1553-ddbd-419b-a3c0-d8508818a9f1"
        },
        "item": {
          "id": "afceef6e-a8d0-4806-8a7f-fa80060b9d79",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "1ac3c6dc-1bba-4792-adf6-e54e53fbcebf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3091efce-21ef-4c22-bbcf-60f3beef0fca",
        "cursor": {
          "ref": "a1aa8c09-6b67-4603-8d2d-53da7cef80de",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "cf83935d-0b52-40b8-8d43-d4b993e21061"
        },
        "item": {
          "id": "3091efce-21ef-4c22-bbcf-60f3beef0fca",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8798858d-766f-4cdb-8f3b-c76c380722e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8be5471f-e882-441e-8db3-dc7c9d926b16",
        "cursor": {
          "ref": "fe3c89da-b328-47dd-bb82-b88b001a5c70",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "6a67a449-3059-407a-a6d8-f6a6696b6800"
        },
        "item": {
          "id": "8be5471f-e882-441e-8db3-dc7c9d926b16",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "a6372a94-84c6-41b2-9a73-0d42bc4615c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4c045b5-82e2-443d-823e-97b851133cc5",
        "cursor": {
          "ref": "9959787c-a0ce-48eb-8050-ae2541e9a61f",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "2e8c3a53-86e9-4b81-89a7-bc3fc3956fcd"
        },
        "item": {
          "id": "e4c045b5-82e2-443d-823e-97b851133cc5",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "27a43216-ad04-4330-9bc3-ed81dce2ff3a",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 75,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "e6cccef0-2ee6-4fda-b65f-54e58fac515a",
        "cursor": {
          "ref": "eeafa65c-7bdd-4bf1-a7a7-fd6d75756174",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "f158474c-e9b7-4c28-83ff-690b5e929ef9"
        },
        "item": {
          "id": "e6cccef0-2ee6-4fda-b65f-54e58fac515a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "13c1de4e-6e81-4e79-96b3-ea498b6cc4d9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7558c1b3-944e-4657-9d28-c8298c330924",
        "cursor": {
          "ref": "c15ce25c-359d-4778-a65c-91fa2e2b4719",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "321f7e55-02d8-426d-bf35-60e9cc47ee59"
        },
        "item": {
          "id": "7558c1b3-944e-4657-9d28-c8298c330924",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "8fae180a-8129-4975-96a6-dbae93d0e9a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7c348a7-e173-4e40-9cff-4abdd78c0f73",
        "cursor": {
          "ref": "8af17578-7c6b-409f-9056-4fea61cd1cd4",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "dbc4fd3e-db5a-490e-998e-ff5180b7ba69"
        },
        "item": {
          "id": "e7c348a7-e173-4e40-9cff-4abdd78c0f73",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "be8ff84a-d61b-42da-9b52-6007b1707a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee86d418-1ff5-471b-8602-8db37711feec",
        "cursor": {
          "ref": "a94e33a3-36d0-405f-8e76-3538675ed79c",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "07d4e087-98fc-43c2-8910-5f83dcbaee3f"
        },
        "item": {
          "id": "ee86d418-1ff5-471b-8602-8db37711feec",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d91b666b-be3e-40fd-973d-c830cd89fde2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9e0c97d-dae4-4d1d-8691-dfd257a6be64",
        "cursor": {
          "ref": "5844c4ea-cda2-4193-959f-b6a2a3450ff7",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "f28ead9c-7796-44ae-83b1-6a3a35edf30f"
        },
        "item": {
          "id": "a9e0c97d-dae4-4d1d-8691-dfd257a6be64",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c240867b-1433-4208-9428-c101eede8a62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f3798b1-a3c0-4ec0-ae2b-e58f91a8384b",
        "cursor": {
          "ref": "d674174a-c9e5-4ea1-9a23-5e8831604270",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "80ad18dd-59b4-4df1-8d76-9d5fdd9fc7b3"
        },
        "item": {
          "id": "1f3798b1-a3c0-4ec0-ae2b-e58f91a8384b",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "fdcab1fa-75f8-4253-bfd9-c0667d05e5b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8faabd4-63c4-445c-8e31-921fb916b1d6",
        "cursor": {
          "ref": "7a76650e-abc2-4462-bbe2-64bc5abce10b",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "5897e8eb-d88c-492b-a43b-51ad64351715"
        },
        "item": {
          "id": "a8faabd4-63c4-445c-8e31-921fb916b1d6",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "bb6a5d1b-02a4-4e58-9222-1b426ba0657c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "546f2bb5-4174-413e-b16c-73ccd638de19",
        "cursor": {
          "ref": "a50391cb-7487-4019-ba77-82ae3920180a",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "095ac339-f1d3-4933-8293-d9f9454891ce"
        },
        "item": {
          "id": "546f2bb5-4174-413e-b16c-73ccd638de19",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "17b9185b-e47d-43b0-a4b0-ed910f815c56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "624bf149-d975-499a-9e05-ff25133e97b9",
        "cursor": {
          "ref": "4c330f3a-5118-4d77-a1c2-e0c5edd8c2c6",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "6e5ebf44-299b-4193-b122-8247d58ad123"
        },
        "item": {
          "id": "624bf149-d975-499a-9e05-ff25133e97b9",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "2c872ef4-9bba-466a-8e94-c907824320da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24329f89-96ca-4e9a-a3d9-36c23a4767ee",
        "cursor": {
          "ref": "dcfc7a5d-8076-4859-b80d-b1a02629d896",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b4ffc4ba-e536-48aa-a943-46b51f1989e2"
        },
        "item": {
          "id": "24329f89-96ca-4e9a-a3d9-36c23a4767ee",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "5fd70fe8-47a6-4377-97d7-7fa2d995af14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5f5301a-84a7-49d3-a4e1-89576e20b181",
        "cursor": {
          "ref": "fbebcedb-a023-457e-8a7c-ed2330628e11",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "419f4348-f580-44a9-b6de-f56b9a2ccd5f"
        },
        "item": {
          "id": "d5f5301a-84a7-49d3-a4e1-89576e20b181",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "e4baeb6b-c7df-4011-ab40-c9bbcaa8c019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37b48125-95b7-4600-a924-6b00695ea816",
        "cursor": {
          "ref": "28b31584-885b-48bf-a848-35837885e6af",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "82e9cfca-caef-4225-8e06-c9d1faff8dda"
        },
        "item": {
          "id": "37b48125-95b7-4600-a924-6b00695ea816",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "c86d1905-b366-48de-8313-2df27f9635b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86cb3b68-52da-4cdb-96ae-59c77d9fe299",
        "cursor": {
          "ref": "bba2e720-cb37-4ba2-810c-828369baa02a",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "d67a2e45-d19f-458e-aafe-5486c680589f"
        },
        "item": {
          "id": "86cb3b68-52da-4cdb-96ae-59c77d9fe299",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "e1d17474-f48c-454c-add4-a2219bb3504a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29a870ad-e2f3-41b0-adb7-e941328eea0d",
        "cursor": {
          "ref": "39c80a75-d066-4139-a5ee-7f8e859c0a9a",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "b0533c23-46d9-45fe-81df-360561fde7ef"
        },
        "item": {
          "id": "29a870ad-e2f3-41b0-adb7-e941328eea0d",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "842f4bfe-fbbd-4c7c-82fc-cb1b1ea9b9e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c0a0c4a-78aa-4477-9a6a-4e0a618ac82e",
        "cursor": {
          "ref": "ce9db844-f744-459b-946c-31fd09e2878a",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "3be94784-f9b5-4303-8330-9ee8d364d017"
        },
        "item": {
          "id": "9c0a0c4a-78aa-4477-9a6a-4e0a618ac82e",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "808225d2-8549-4232-bbe2-5862b7eb2129",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ce857da-0fd5-4b66-be39-42898630802a",
        "cursor": {
          "ref": "fa28ff17-d65f-4952-9c4b-3ecd0f320a36",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c1fc93eb-1a36-4472-bd70-9928b8841397"
        },
        "item": {
          "id": "1ce857da-0fd5-4b66-be39-42898630802a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "63e88cce-e930-4406-bc86-2a2b3356055a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46397fe8-7380-42f2-844c-1a7bbc10bafc",
        "cursor": {
          "ref": "6278984e-3b0d-4035-babc-db85e773baa3",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "960710de-0213-4f3d-b4a1-a30bbd8ff851"
        },
        "item": {
          "id": "46397fe8-7380-42f2-844c-1a7bbc10bafc",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9c8c4e45-49db-447b-a9e7-1b95b8ef99b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a169e1-8acf-4256-bd51-45613c93a11b",
        "cursor": {
          "ref": "f94c5dca-3b58-4f41-80a4-ed988ffd2436",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "4f28bfab-e6f4-4f64-98c1-603771eb297a"
        },
        "item": {
          "id": "57a169e1-8acf-4256-bd51-45613c93a11b",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "a81661fb-0ce5-409d-86d2-fd2c4c52c27d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd5bd0df-82e1-4c1a-a7d4-7dc0cc756338",
        "cursor": {
          "ref": "ba3174c5-6220-4a99-ab54-a7c5bd1cd760",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "64c54f72-0e57-4713-b0c2-95484e71de66"
        },
        "item": {
          "id": "fd5bd0df-82e1-4c1a-a7d4-7dc0cc756338",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "f8693198-739c-4b45-96cd-967c9d3150ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f23512b3-de3a-4b76-8fb9-4124847c7742",
        "cursor": {
          "ref": "3b7dcf97-42f1-4dd9-ac90-08300ad46239",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "3eb34486-7cf4-474b-955d-1b7dbbc7a1b2"
        },
        "item": {
          "id": "f23512b3-de3a-4b76-8fb9-4124847c7742",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "b8b64582-3c11-41d7-8760-5379b6134347",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e7678c-4d42-4620-ad13-cc270d727858",
        "cursor": {
          "ref": "56810f3b-ad90-4f60-b41c-ceceaed9b4e0",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "939263fb-e81f-489b-8df9-adf12ccc45ca"
        },
        "item": {
          "id": "b6e7678c-4d42-4620-ad13-cc270d727858",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "c48c80c7-435f-4c34-8a9f-4b0c43698aaf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "480eb97c-7ef3-4a7b-b6bb-f8b18ba8e04f",
        "cursor": {
          "ref": "87f5998f-f73d-4da6-bfbb-9049b4fd7540",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "fa2f18c7-ee82-4d56-af48-1f4fde77a45b"
        },
        "item": {
          "id": "480eb97c-7ef3-4a7b-b6bb-f8b18ba8e04f",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "47d96275-2715-4110-b7ac-be4eb8a6eb77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ca240a-42f6-4af2-9762-e83f66539026",
        "cursor": {
          "ref": "68498e89-f7ef-4995-9e68-89219d8ab859",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "61c973fa-b9c5-47dc-a516-47945b1b1ee6"
        },
        "item": {
          "id": "d6ca240a-42f6-4af2-9762-e83f66539026",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "98131991-e948-41e1-8ec6-268d7c41b804",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "363e950e-e930-48f7-aa02-b62e20a50c95",
        "cursor": {
          "ref": "4c9551bd-d46f-4328-8b6c-b0118d1bf0b2",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "21c138fe-3a59-41c3-8739-7193fa2f535e"
        },
        "item": {
          "id": "363e950e-e930-48f7-aa02-b62e20a50c95",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2955b501-6753-4840-827a-d86e11d89f59",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "514c3276-d4fc-4ce3-91eb-0428186a74f9",
        "cursor": {
          "ref": "ba2ef891-1ad1-4938-a4ca-da4bed0acb1b",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "a77cc3f0-3235-45d4-97af-355e99aaabb1"
        },
        "item": {
          "id": "514c3276-d4fc-4ce3-91eb-0428186a74f9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a94c9a67-52c9-4d0f-b149-a3a1a556c1d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "babea234-a2cc-4cb6-9a78-dd4825d85e19",
        "cursor": {
          "ref": "034f1d78-74a0-4471-b872-10f283e9c336",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d7951efa-f21d-4673-b1dd-617dd4bc4208"
        },
        "item": {
          "id": "babea234-a2cc-4cb6-9a78-dd4825d85e19",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "41852423-8917-40cc-aee2-929cd9ab1de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeaa2a21-6118-4978-bd37-994f19b648e9",
        "cursor": {
          "ref": "90bf8781-22cb-4b65-8b11-434a02b5db4d",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "dccc6a02-b6d0-4094-a384-dd9d7634b6e0"
        },
        "item": {
          "id": "aeaa2a21-6118-4978-bd37-994f19b648e9",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "8adea288-450b-4623-b8ed-4ce25a313ad1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "794c64d7-70d4-42a5-8ca8-49a4a5ce2bac",
        "cursor": {
          "ref": "08346282-9731-4366-9320-478a25013f66",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c8cf7fcf-205f-494d-87c6-f84f227827f4"
        },
        "item": {
          "id": "794c64d7-70d4-42a5-8ca8-49a4a5ce2bac",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "d6aae21e-e839-42a6-a2e2-fbe26a3df7f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87426984-f8c7-4284-8a9d-76bfd2a78539",
        "cursor": {
          "ref": "c062e406-4330-41a1-8133-485d6f0556f2",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "3ef37adc-09fc-4a6d-af59-0c5b82f9d365"
        },
        "item": {
          "id": "87426984-f8c7-4284-8a9d-76bfd2a78539",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "e63d6534-48f2-41f7-9d5a-267d3620ba77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "561fab66-e89f-4432-a324-309c9498968a",
        "cursor": {
          "ref": "ed1684b0-7c4c-4bf0-b7d6-ec9729ec230f",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "c76c5f4f-0426-41d6-a356-22ddd6c50123"
        },
        "item": {
          "id": "561fab66-e89f-4432-a324-309c9498968a",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "41b076bd-3ac3-438f-9dc9-9d53ecd03706",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "c5e28783-d505-4241-85e5-9fe59283aef9",
        "cursor": {
          "ref": "104be75f-46e4-47e6-bc90-510f0e0de370",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "c71ced26-e5df-496d-8cf5-20d43682065f"
        },
        "item": {
          "id": "c5e28783-d505-4241-85e5-9fe59283aef9",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "14c1d8fc-d71b-4474-92df-9f02f7b8b437",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c6faa6d-408f-41f9-a730-e8d42050b87e",
        "cursor": {
          "ref": "e99e498b-558c-465a-85e1-87268f8f2e52",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "2c691fa1-78dd-4c8a-b30d-e6ce90466220"
        },
        "item": {
          "id": "7c6faa6d-408f-41f9-a730-e8d42050b87e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "d0b733dc-6599-46ad-a822-0fd95ac52740",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67541527-16f9-42c3-9ad3-b5236f33bd6e",
        "cursor": {
          "ref": "11226bbc-4c96-49a9-8e91-ca2829aa6953",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "bc5d1217-6d7d-4f5a-914c-e61f1c27cf34"
        },
        "item": {
          "id": "67541527-16f9-42c3-9ad3-b5236f33bd6e",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "90136e0e-002b-41f2-ac06-572c0e53acfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0864174e-ddf3-4fe0-9737-ded2c31e280b",
        "cursor": {
          "ref": "52238aed-9c4a-4676-8ce2-ed50052a096f",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "a31fd191-29b2-45e7-8b93-1cd5c1e836ef"
        },
        "item": {
          "id": "0864174e-ddf3-4fe0-9737-ded2c31e280b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "bd5b4152-6d22-4a75-b3cc-89c962d675f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b5ac536-e5e6-4396-97b0-eba7c6edf8c5",
        "cursor": {
          "ref": "3be86b49-7783-4fdb-9130-01be5729be7d",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "0cecd130-4ed3-45ff-9528-5d226adbaf43"
        },
        "item": {
          "id": "1b5ac536-e5e6-4396-97b0-eba7c6edf8c5",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "8e202efa-316a-425d-8066-47ea94dc7a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "353aa2ee-da53-495e-ac63-6c1e770ac4e2",
        "cursor": {
          "ref": "8cc16aa6-ea34-4ec6-ad55-47c8cea6e8bf",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "cd887b66-3134-4956-b691-8d1277fefa57"
        },
        "item": {
          "id": "353aa2ee-da53-495e-ac63-6c1e770ac4e2",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "4e559051-f1b7-4790-8a96-a05ea8e853c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12cad527-e9d6-4967-868c-00c1c0b56400",
        "cursor": {
          "ref": "30626a00-5604-412b-892e-8ee2fe344be4",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "8057a230-5524-4408-8a80-31d3efe72700"
        },
        "item": {
          "id": "12cad527-e9d6-4967-868c-00c1c0b56400",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "29d4b659-1e41-4883-b8f1-606b21e2a702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47426f0b-e707-45fa-9959-886ca1197247",
        "cursor": {
          "ref": "7cfa1562-ba44-4733-adda-7c421fb281a4",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "cbd77e46-4c96-4918-a9e3-01453eb2124e"
        },
        "item": {
          "id": "47426f0b-e707-45fa-9959-886ca1197247",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "79cb3aef-12f0-46d7-b417-b992c22b9377",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abe90206-abeb-4225-90ef-14a31ef94515",
        "cursor": {
          "ref": "a7dca662-c69c-47a9-813f-3e62957eb9a6",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "90173718-9ee5-4001-9c45-9b8c72fe3656"
        },
        "item": {
          "id": "abe90206-abeb-4225-90ef-14a31ef94515",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "32cf0e86-254e-4eb8-b699-b9afabb8acab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7206bb80-16f3-4297-9a73-235a9dcb1f93",
        "cursor": {
          "ref": "d76c6ab0-1aea-4ca7-9802-6a2df43b288d",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "6f9402a0-fd1d-4e41-9b8a-48d01cb1ce09"
        },
        "item": {
          "id": "7206bb80-16f3-4297-9a73-235a9dcb1f93",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "2a600ad4-460f-488e-9000-0ffc1334d15f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7fec25c-bc65-468b-8489-711ed4a970b6",
        "cursor": {
          "ref": "ba6b5618-8586-44b0-83d1-b2d1bb26cca4",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "e260f823-dced-426f-a889-eb0e0059a63f"
        },
        "item": {
          "id": "f7fec25c-bc65-468b-8489-711ed4a970b6",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "41ef29d0-5965-44bf-a600-610db1090cad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bdbd7ef-b513-470a-b010-9548d6dd6228",
        "cursor": {
          "ref": "5e010f67-5a91-4886-9f1a-6c33d3ebae8d",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "05a8b6f8-5d37-4684-8196-86c92553d23e"
        },
        "item": {
          "id": "9bdbd7ef-b513-470a-b010-9548d6dd6228",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "ed697475-4538-4ba2-9c0c-efc1c3f33496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9f969128-56f6-4892-8e67-5c98756ed7e7",
        "cursor": {
          "ref": "fa9acdbd-6080-43ff-9667-ef0955283d57",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "feac90c5-1c00-4ad0-ae8a-2872ece10359"
        },
        "item": {
          "id": "9f969128-56f6-4892-8e67-5c98756ed7e7",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "cf74db68-cf0e-4531-ab03-ffc35bd17b73",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4e90997-3e35-4793-bc78-8d429267bbd6",
        "cursor": {
          "ref": "59231325-f73c-4932-befa-e630e08c1a7c",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "f5ca8f69-f980-468c-a7f0-8c7dd1a1be5d"
        },
        "item": {
          "id": "c4e90997-3e35-4793-bc78-8d429267bbd6",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1fd20a13-f527-45b1-b1d0-079ae37bc748",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03642dca-6596-4553-bd5a-005295a7a52a",
        "cursor": {
          "ref": "400a4e94-7426-4477-8f53-7438a2f1f069",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "85da0c1b-55e7-4d4e-ba93-774ac39a9f24"
        },
        "item": {
          "id": "03642dca-6596-4553-bd5a-005295a7a52a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "07b5af8e-7131-479a-b932-e3d006d7055c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f5c1295-b9ce-4da6-91d2-e783971da15e",
        "cursor": {
          "ref": "c6083a68-087a-424f-b706-e7432c7395a6",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ac1356d1-2c3e-4979-98e9-6ca13faa0818"
        },
        "item": {
          "id": "8f5c1295-b9ce-4da6-91d2-e783971da15e",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "32aaa498-5120-450b-a910-364578df00bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9f9d946-5300-468e-aa13-bb880ff4ea75",
        "cursor": {
          "ref": "42edcb38-26b7-4cda-9c68-67a43c023901",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "a6207a69-0718-4949-b8eb-35e9d2e7a233"
        },
        "item": {
          "id": "e9f9d946-5300-468e-aa13-bb880ff4ea75",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "d7f9df9f-db3a-4d8f-987b-35f7f9f1d12d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67bdeb9-ba5b-40ad-bcf0-e32900f44e6a",
        "cursor": {
          "ref": "7c34f450-3f61-4090-9a70-f5a7df28432f",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "38abe8ca-f7b2-46c2-95d4-a8b424496644"
        },
        "item": {
          "id": "b67bdeb9-ba5b-40ad-bcf0-e32900f44e6a",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "1392c7a4-999e-4a58-809b-1ab5390a2387",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b423708f-7bee-491a-b59c-b61a55096b7f",
        "cursor": {
          "ref": "7afeeecb-fa10-4d36-9e14-5e8e084b0ab4",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "7c8a4a63-c873-4236-8dac-fbdc6bf0c215"
        },
        "item": {
          "id": "b423708f-7bee-491a-b59c-b61a55096b7f",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "dcd97e29-680e-4bce-a8e7-c87ac0788a96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f73a44e7-4464-4bb6-a9eb-c24891ac9878",
        "cursor": {
          "ref": "62c8abdd-67a7-48f3-8567-8d01f3642835",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "a5f91c48-3b42-4a6a-b4dc-09f9fc96b0c0"
        },
        "item": {
          "id": "f73a44e7-4464-4bb6-a9eb-c24891ac9878",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "44375ac9-689f-4886-b197-fc1dc41ced25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "750fcc53-7327-4b64-af4a-5defadb5f886",
        "cursor": {
          "ref": "77679a38-3a4d-4668-a2fd-575bd0a29207",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "9b6c905a-3a5b-4c94-8476-7eb6344853f2"
        },
        "item": {
          "id": "750fcc53-7327-4b64-af4a-5defadb5f886",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "730029a3-8246-4750-90f3-c37ef096adca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 34,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65216966-f744-42f6-9b2c-17dfd3246ca1",
        "cursor": {
          "ref": "0a220e03-b99f-4a92-b8a3-75b99f412e5b",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ce5d4ab1-975b-46e2-b581-b7fd0f76efa0"
        },
        "item": {
          "id": "65216966-f744-42f6-9b2c-17dfd3246ca1",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "832623ac-8bf6-476c-b959-4409cfface0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ef152813-ba52-4902-a2b8-f4bce5cc84cc",
        "cursor": {
          "ref": "29f6048c-885c-433a-85df-203f6454b1d3",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "30b53ad4-f4c4-46f3-aa60-659c489e878f"
        },
        "item": {
          "id": "ef152813-ba52-4902-a2b8-f4bce5cc84cc",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "3707d348-bc4a-4438-9031-b5b08eb77bdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a57d26-9dad-4c8f-adb0-3f275c9315fb",
        "cursor": {
          "ref": "7dce8574-feed-43e2-9d82-f1bdc41a1c30",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "edb64f6c-cce7-44ad-a7b0-2dd8edcd90d2"
        },
        "item": {
          "id": "f8a57d26-9dad-4c8f-adb0-3f275c9315fb",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "22a328c2-3d79-4ffd-93aa-9c36125b809f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "df71cb3f-0403-4e18-b233-877ecf1ba4c8",
        "cursor": {
          "ref": "b7fc43ff-7fa5-4881-8fcb-64c02744c6dc",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1ad9efaa-63d4-4a0f-b780-a1895ac4c852"
        },
        "item": {
          "id": "df71cb3f-0403-4e18-b233-877ecf1ba4c8",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "11d780ec-9482-4ae6-8ad8-2169376ed8e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5e4236e-8f17-4fe3-8b61-46cc9a38ed79",
        "cursor": {
          "ref": "2bf805e4-f74b-42c4-870d-7628919346aa",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "14302515-4201-4d13-95ea-dada5504f680"
        },
        "item": {
          "id": "f5e4236e-8f17-4fe3-8b61-46cc9a38ed79",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "4e8489ba-cfb0-443d-9ed4-6bf8fc05f098",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b81756bc-9859-427f-8fcf-98abe6030e0d",
        "cursor": {
          "ref": "9dc16735-fc16-4739-908b-fdee868aa485",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "0fa3410e-bb94-4d53-8cce-75ea549dc3ba"
        },
        "item": {
          "id": "b81756bc-9859-427f-8fcf-98abe6030e0d",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "945771fe-62f3-4575-b5fa-4ceff9bbcd6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58d96621-6a75-454a-ab2c-2ca7af9508ae",
        "cursor": {
          "ref": "3ec59175-0475-4f72-9b99-f9e0e9264bc3",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "80ce77ae-59e0-4a57-9d53-3a2b5f95044a"
        },
        "item": {
          "id": "58d96621-6a75-454a-ab2c-2ca7af9508ae",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "ce5170d9-99e1-4f48-8694-724762801fa9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73dc176e-7fb2-4aeb-b8cd-3763a6f3dab1",
        "cursor": {
          "ref": "551cc2a3-2a99-4a74-80a4-405a74594f99",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "22c4849e-a532-4836-a9a0-7fa0eb97bda3"
        },
        "item": {
          "id": "73dc176e-7fb2-4aeb-b8cd-3763a6f3dab1",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b75b7572-45ed-4941-9247-9be5116d052e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52d3145c-5d25-43f8-8bc9-12421a5aec6f",
        "cursor": {
          "ref": "d84b53dc-cc1b-4895-9b8f-729589d58704",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "50fe1c34-b164-4088-be5c-c9fb970b41ea"
        },
        "item": {
          "id": "52d3145c-5d25-43f8-8bc9-12421a5aec6f",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "8714927d-5389-40d4-9938-3d66cdd1a338",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "a365ea1f-fae7-4fbc-873a-33fcc8d987f7",
        "cursor": {
          "ref": "e80f6a27-2a19-46b2-89ef-dc740b55c96b",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "3d7ad53f-c979-4cb5-9b55-8849392c9fcd"
        },
        "item": {
          "id": "a365ea1f-fae7-4fbc-873a-33fcc8d987f7",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "256b6db6-77c2-4123-90d6-c4ffa2d4d3d4",
          "status": "OK",
          "code": 200,
          "responseTime": 145,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "02c61b2f-666c-4c7c-aed8-c9b02cbef8e9",
        "cursor": {
          "ref": "bd6b7a84-7f41-4e57-bd09-a945de6276e4",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "74a8691c-a83f-4df9-ab73-80864464ee04"
        },
        "item": {
          "id": "02c61b2f-666c-4c7c-aed8-c9b02cbef8e9",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "88edb413-1dc8-44ae-8817-1d4e87ec6b3e",
          "status": "OK",
          "code": 200,
          "responseTime": 148,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "7a688978-dcaf-4ca9-9536-9964a63ef19e",
        "cursor": {
          "ref": "d08c06ae-22e2-43d3-a403-1ef758a4857b",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "60875c4d-7d6c-4a03-b2cb-efa5b527c020"
        },
        "item": {
          "id": "7a688978-dcaf-4ca9-9536-9964a63ef19e",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "3d655d22-924a-4976-b817-df782db5270e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3df8dbd1-314f-462c-ba78-e67e99a2565c",
        "cursor": {
          "ref": "3d326ab5-b827-4415-ab85-24de721cb28b",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "a3e4549e-49f9-4287-aed3-850659f528dd"
        },
        "item": {
          "id": "3df8dbd1-314f-462c-ba78-e67e99a2565c",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "40a184b9-ce0f-4539-8e1a-5a833648d74b",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "360859f7-a6ac-4ee0-b35d-c49e6b723959",
        "cursor": {
          "ref": "4b7a7709-6b8b-411a-a25f-6673bfafe237",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "fd4d1a13-97c9-4a0a-a642-9c23539348d0"
        },
        "item": {
          "id": "360859f7-a6ac-4ee0-b35d-c49e6b723959",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "4ccb8a61-df40-4eb1-a955-2cd6d7a6ebcd",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "15139aab-84a4-4517-a441-6697f9632133",
        "cursor": {
          "ref": "306de256-77e8-4efc-89af-683afffde106",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "66bfec20-9221-4150-a545-88a3f99fab81"
        },
        "item": {
          "id": "15139aab-84a4-4517-a441-6697f9632133",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "cb4812ff-839e-46cc-ab18-365eb315166b",
          "status": "OK",
          "code": 200,
          "responseTime": 172,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "dcf2c675-59db-422e-b05a-49bd4f8758d6",
        "cursor": {
          "ref": "b1171b00-b944-456b-98df-7d3bd7404784",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2b226180-64f0-46ec-a53a-3d1a006fc5bc"
        },
        "item": {
          "id": "dcf2c675-59db-422e-b05a-49bd4f8758d6",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "2ecdc3af-74ed-4782-962d-773ad593b8dd",
          "status": "OK",
          "code": 200,
          "responseTime": 138,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "02e266a7-d284-48d6-8bbd-b3cea4327094",
        "cursor": {
          "ref": "298ca8db-ce6e-41bc-86b0-c732eb41b8cc",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "79541cdb-1e12-4985-8cac-7b4424e70722"
        },
        "item": {
          "id": "02e266a7-d284-48d6-8bbd-b3cea4327094",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "9e1cc4c0-8407-47a1-80e8-eb52c7aec9b3",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "e18ac1a2-2608-4893-ad88-3fada62238a3",
        "cursor": {
          "ref": "da8b03b6-07c0-40d8-99ee-1d683cb68e02",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "8f7c54a1-204d-4516-8198-777ccc261986"
        },
        "item": {
          "id": "e18ac1a2-2608-4893-ad88-3fada62238a3",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "e5405762-d46e-46bf-aa76-3eb285b8762e",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "a931ded5-3dc4-4ece-825d-403392231954",
        "cursor": {
          "ref": "f641ff76-0117-4513-b875-c760559cb8a8",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "eeb9fbb8-ba4f-4d08-b7c6-1f5c0d4acd86"
        },
        "item": {
          "id": "a931ded5-3dc4-4ece-825d-403392231954",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "6037f185-8814-4857-8dc0-7807b0f3d1eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9625f22f-76ad-4c44-92fd-d2d6906c40fb",
        "cursor": {
          "ref": "218cc02f-95c6-4fdd-a6eb-bebcd3677683",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "37a8046f-2a59-466d-b3a3-4ef91d8d82e0"
        },
        "item": {
          "id": "9625f22f-76ad-4c44-92fd-d2d6906c40fb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ff638961-fdc4-44e9-80a5-df85bdf52058",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e9f26c6-faab-4664-8534-ef4e1c9bb2a9",
        "cursor": {
          "ref": "16b00b53-dfd7-488a-9873-aa819d282860",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "60949e63-4730-4d21-b2db-f13478d64b6c"
        },
        "item": {
          "id": "4e9f26c6-faab-4664-8534-ef4e1c9bb2a9",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "6f026744-c963-478f-9927-5872ca3b6004",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68edd452-260a-4d02-8fba-c526fa1ff324",
        "cursor": {
          "ref": "2f2a6a81-e622-4132-85d0-fbaa936f2aa1",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "bfa104d9-285b-41d0-aa29-0df50177f52d"
        },
        "item": {
          "id": "68edd452-260a-4d02-8fba-c526fa1ff324",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "f4752c79-bd56-48f1-bcc4-a799c11bccc4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21cd7eae-6ea5-427f-b8bf-cbbdf31c7d2d",
        "cursor": {
          "ref": "f554c66f-6577-40c2-a5c3-b2cad53762a5",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "825fb968-0ded-4f58-8c65-392249b69b15"
        },
        "item": {
          "id": "21cd7eae-6ea5-427f-b8bf-cbbdf31c7d2d",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "931ba4d4-621a-4bdd-bdad-d7d0d5b42e3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5ad63636-a637-4bbf-94cd-b128f7c2c310",
        "cursor": {
          "ref": "cb605372-8001-43b2-8304-4c364cfb6d9f",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "e36c5860-40a1-4aba-b56d-bbe490ff40ff"
        },
        "item": {
          "id": "5ad63636-a637-4bbf-94cd-b128f7c2c310",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "5108e86d-6b87-4a66-9043-0585beacaf96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9e53f95-ea22-4907-af64-8ae6e49bc7f0",
        "cursor": {
          "ref": "ccdc0aa5-927d-4067-ac7b-e8d493e4b106",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "4484d1bf-1647-46d2-bd3f-0cbafd54b9f2"
        },
        "item": {
          "id": "c9e53f95-ea22-4907-af64-8ae6e49bc7f0",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "5feda1d3-9f86-4fd1-9407-51b3f732abab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f1b16b-5572-4f3c-90fc-2c39af7b4f07",
        "cursor": {
          "ref": "ebaba769-6daa-43b3-ac8a-b1ea73085872",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "97e444ce-ac5b-4476-8175-556e816a2727"
        },
        "item": {
          "id": "04f1b16b-5572-4f3c-90fc-2c39af7b4f07",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "6f761c89-0ddd-4913-ad93-641ad2c64108",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f1bda70-2112-4c1d-aeef-79ec77a8c9ce",
        "cursor": {
          "ref": "3a87573c-fbc9-4c38-ac57-da6724f1ee4c",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0fde334a-2787-4f58-b601-435fd7db89b0"
        },
        "item": {
          "id": "0f1bda70-2112-4c1d-aeef-79ec77a8c9ce",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "cf0cc9f6-0407-4551-9efd-361422aeeca3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cde50c64-b73f-4b1d-a05a-1506172bc66f",
        "cursor": {
          "ref": "e5aa32b2-c6b3-45ef-8da1-018df87b8f76",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "b3101cd3-7f83-47c7-8d50-5cebb48b0ca4"
        },
        "item": {
          "id": "cde50c64-b73f-4b1d-a05a-1506172bc66f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "0f0f8402-06c5-4dd6-9fcc-2fd7bcff42dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c96b679c-a3c3-4027-8e35-518c60a269e5",
        "cursor": {
          "ref": "f26f2109-818c-439e-9e74-2d7c550f784c",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "b4364396-69c2-4979-a4b8-641f3ae83b7d"
        },
        "item": {
          "id": "c96b679c-a3c3-4027-8e35-518c60a269e5",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "70f1c94d-9d46-4b3c-8aa7-d56dc35779c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79cfa065-21c7-4e44-952d-735397e9d428",
        "cursor": {
          "ref": "fb8ea7ef-7ea7-47a9-9fca-d4d434d5275f",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "94560490-eda7-448b-9d08-f5e6177ed56b"
        },
        "item": {
          "id": "79cfa065-21c7-4e44-952d-735397e9d428",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "81e3cea9-ccc3-4ca1-a4ef-d6eb822ee196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1866df95-76a0-4ea3-bf8d-97ed345d60d9",
        "cursor": {
          "ref": "3d1f11f0-b91a-4ff6-91e9-9110c5b651a2",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "64ad3b92-9369-42ab-a623-23e1c2c37278"
        },
        "item": {
          "id": "1866df95-76a0-4ea3-bf8d-97ed345d60d9",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "28d61145-0c76-4719-861f-f787cf8f072b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9965ea1-849a-4a6f-be8d-c07986b2a9bc",
        "cursor": {
          "ref": "0bd399c2-43a6-4fb8-83fc-a50907c7ce35",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "c74d0f26-2ee8-44d7-8d70-567cbd7ad6a8"
        },
        "item": {
          "id": "f9965ea1-849a-4a6f-be8d-c07986b2a9bc",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "03704c30-e444-45bd-a41f-2e5d91d45746",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "1e86fdde-256b-4304-be7a-134f83f16511",
        "cursor": {
          "ref": "0bb55270-aca6-463f-a83c-995f8d76e12e",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "b09f8cd8-74df-40d4-8bb6-f9929b4474e8"
        },
        "item": {
          "id": "1e86fdde-256b-4304-be7a-134f83f16511",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "4b86963b-7c79-47f4-bc8b-cbff940e9bb9",
          "status": "OK",
          "code": 200,
          "responseTime": 122,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "16d73b90-4c09-4fe3-b97b-d4b274eed863",
        "cursor": {
          "ref": "56734fdd-84be-452d-9f76-f2a460d631f0",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "f87246ff-d317-48c3-95b9-fb139b0d2673"
        },
        "item": {
          "id": "16d73b90-4c09-4fe3-b97b-d4b274eed863",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "aaa9d5a4-a396-4c1c-9962-c95e75e9f208",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "2ebc6a5e-f7f1-4f81-9a35-ec9f852ce4d6",
        "cursor": {
          "ref": "058d5e46-e0bf-4582-aa67-8da3a688e28a",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "04d651a1-79df-408e-9bcb-a3fcf80fe94f"
        },
        "item": {
          "id": "2ebc6a5e-f7f1-4f81-9a35-ec9f852ce4d6",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "18de9c90-b5cc-452a-a104-aae68df07358",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "9664d3bc-20cd-4f26-891b-769052e9ba05",
        "cursor": {
          "ref": "0a339839-da43-4090-b6c2-4e987394f261",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "afe767d2-0fbf-473c-bca1-c73dc51345e9"
        },
        "item": {
          "id": "9664d3bc-20cd-4f26-891b-769052e9ba05",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "68ccc309-fd42-4a50-b97e-20f5d26aff2b",
          "status": "OK",
          "code": 200,
          "responseTime": 143,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "f85ccafe-109a-472b-b046-bcfcd098655d",
        "cursor": {
          "ref": "87cdc925-859e-40a7-bb0d-54f952ae79c8",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "9b209871-9867-40f7-9070-ed23ea9d693c"
        },
        "item": {
          "id": "f85ccafe-109a-472b-b046-bcfcd098655d",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "26957276-f9f6-4c52-b830-b7857fe9b15a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6ab56a1-2f9e-42b8-8729-92eaf965d335",
        "cursor": {
          "ref": "dce3df7c-1c08-4449-baab-a58d1e7324d1",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a642b1f3-d7e3-4b77-a699-3c4d933992c0"
        },
        "item": {
          "id": "c6ab56a1-2f9e-42b8-8729-92eaf965d335",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "78afbf03-3593-43ba-82d1-b7b82eb9c3f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d417eac-c63b-441c-83ec-7ed160ea4ec5",
        "cursor": {
          "ref": "0336495a-8234-426a-b101-7833b16d9ef7",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "32e3d079-c6b0-4364-8aee-b25857333431"
        },
        "item": {
          "id": "1d417eac-c63b-441c-83ec-7ed160ea4ec5",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "c78da97c-726d-438c-8ea9-7d7ca7831ef9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b57ac649-e7b6-4f2b-8a51-f02407c4cd28",
        "cursor": {
          "ref": "a146a930-43c2-4eb0-8e44-10a8c924316a",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "21c488de-ddd1-47a0-8a4c-78ea95dc7be5"
        },
        "item": {
          "id": "b57ac649-e7b6-4f2b-8a51-f02407c4cd28",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "f90e3bfa-18af-42d8-b280-39f9bfc17e11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97418b18-e3d8-4bd8-987e-88ff0f2ebe9a",
        "cursor": {
          "ref": "e9651a96-12fb-4838-a68c-7046adad8047",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "b79823bd-4ee5-4038-ad71-98d4dbb746d3"
        },
        "item": {
          "id": "97418b18-e3d8-4bd8-987e-88ff0f2ebe9a",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "43a88697-98e8-48b1-87d8-58a5904d915c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d975c65-aa96-457b-aa05-47af0adc75b0",
        "cursor": {
          "ref": "857c23ca-c2d6-4eab-ac92-b766af42c613",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "eab9f592-35e7-4ad0-adb4-f78d1f53a9b2"
        },
        "item": {
          "id": "8d975c65-aa96-457b-aa05-47af0adc75b0",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "b227451b-6bad-472f-bcc1-e638e104c21d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56547d97-b29e-43b9-9c7d-b044e9584efe",
        "cursor": {
          "ref": "9985c09d-4183-4bba-85af-b925bc0d637d",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "bf0199d8-01d8-43de-a93b-bf4552d12379"
        },
        "item": {
          "id": "56547d97-b29e-43b9-9c7d-b044e9584efe",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4ea4a917-8b80-4ea0-8a2d-eb7e87382030",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a63308a-8b23-4837-8fd1-615371107eed",
        "cursor": {
          "ref": "5be32f6c-50fc-4904-b4ac-644dbf531f0e",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "93ab3d86-6fd7-4af1-99da-dee918e371d1"
        },
        "item": {
          "id": "8a63308a-8b23-4837-8fd1-615371107eed",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "cb2a711c-dbf4-4133-b1de-a27a98b2d88a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2504e250-1e26-4cee-afb6-84e7189f090e",
        "cursor": {
          "ref": "e8859c87-3c76-4a03-b3d8-26887fc64fb6",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "40b4119f-b76f-4a1a-934c-dd873b2c1ad6"
        },
        "item": {
          "id": "2504e250-1e26-4cee-afb6-84e7189f090e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2cfff157-3f32-4fe5-8b01-6aa1d4629ae4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "204575f7-b428-4c5b-9012-552f384d6a7a",
        "cursor": {
          "ref": "1b423510-bdce-422d-b184-54c19cc9a87f",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "01dfd7a3-58c8-47a9-9bf0-f0074d045aa9"
        },
        "item": {
          "id": "204575f7-b428-4c5b-9012-552f384d6a7a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "839c6749-070f-4ef0-ac05-4526e5139f3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba4486ff-1ec8-4387-b3ed-631db9a372db",
        "cursor": {
          "ref": "e3a6ad16-8155-4246-ad92-7bab3e7a0f93",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "f06e61db-bbca-43e6-adea-287969e112f0"
        },
        "item": {
          "id": "ba4486ff-1ec8-4387-b3ed-631db9a372db",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "913687f9-b9b3-4245-a871-e15f18401b0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59ef4ea7-7b59-42c2-80f3-a9937a7fd7bd",
        "cursor": {
          "ref": "66fad429-8b91-4a46-bdd4-8650dbdbdbfb",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "7c5629d3-2bed-41ea-b5ef-5db3f177e56f"
        },
        "item": {
          "id": "59ef4ea7-7b59-42c2-80f3-a9937a7fd7bd",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "02bb7bc6-4a3c-4850-990d-dc4b866fad61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57a44d71-e1fe-4684-9a1b-5d070e7d453b",
        "cursor": {
          "ref": "33c86fa5-9981-47f7-aa8b-8b7331c528f6",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "016e1c0e-a3c2-404d-9d8c-e18970026e7b"
        },
        "item": {
          "id": "57a44d71-e1fe-4684-9a1b-5d070e7d453b",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "c913b1a1-960f-4719-abc4-5c8f953f4d62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "781def1f-62ea-4a2b-af90-d6362671c2ff",
        "cursor": {
          "ref": "ed15c479-7265-40ae-b1e7-a42e25bb9943",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "62bd583e-df37-448c-bbdb-8d78bdfc1af4"
        },
        "item": {
          "id": "781def1f-62ea-4a2b-af90-d6362671c2ff",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "0fcbe92d-a53a-45fe-9b53-6b5f3c69623d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78ebf651-95a8-4d28-97ab-6cb6f63505d8",
        "cursor": {
          "ref": "3272ac5c-f73b-49e1-91e6-2823a2a0d17e",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "fe5fd766-ccc6-472d-9307-eb11811c3862"
        },
        "item": {
          "id": "78ebf651-95a8-4d28-97ab-6cb6f63505d8",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "0bf831e3-8cfa-4317-a695-a2cab3cdf654",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdeb3cbe-3abe-4aab-8866-ea5bb55d88db",
        "cursor": {
          "ref": "5c7f458e-6185-47fa-bdf4-6c9539f27c23",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "2e5acc24-58c4-41a9-8712-f25cad5429bb"
        },
        "item": {
          "id": "cdeb3cbe-3abe-4aab-8866-ea5bb55d88db",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "b6544cbb-3944-4154-ac42-0aae03194b03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8030299-9b90-4ad7-8132-8c5f325a1ebf",
        "cursor": {
          "ref": "f74c1293-cb9c-4ce5-a661-a13c8ed630fd",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "0acbfc50-e4de-46d7-8d16-a76dbddbfd59"
        },
        "item": {
          "id": "b8030299-9b90-4ad7-8132-8c5f325a1ebf",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "58d62c0f-a44b-4d73-ada6-141ccc1745dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e4c757b-e32f-498f-b1df-9eb6f2846f3b",
        "cursor": {
          "ref": "0edc9b60-b12f-4f77-a909-1e4d3dbd3f2d",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "1a0cfeba-aae8-4cab-8bfb-0c174a82468e"
        },
        "item": {
          "id": "8e4c757b-e32f-498f-b1df-9eb6f2846f3b",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "5b9a47e3-75bd-4fb5-ad71-9092209f629b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe3d43dc-07a6-443f-bd17-2dd04c5e628d",
        "cursor": {
          "ref": "6e92ea3f-1a8c-4736-acf6-26f09acc4921",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "6ae4eb62-9bb9-4f6d-8dfd-dafe1e440e13"
        },
        "item": {
          "id": "fe3d43dc-07a6-443f-bd17-2dd04c5e628d",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "22bca378-f099-4cc3-b5bc-02f1a0d6e222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "932c5267-6138-4984-8fce-f02fad674179",
        "cursor": {
          "ref": "17c0bab2-1aa1-460e-93b4-b121c795b183",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "8d1a4c95-235b-4498-9cb8-1e76eba60e1f"
        },
        "item": {
          "id": "932c5267-6138-4984-8fce-f02fad674179",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "efa8f8f5-89a2-40cc-a316-cb2e722180a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a73c0d6-36ca-43ec-8162-ed02cdb4354a",
        "cursor": {
          "ref": "17ff5eb2-14f3-4467-a376-e6a67da81ea5",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "1786318d-522c-4a12-acfc-95daea8c99da"
        },
        "item": {
          "id": "0a73c0d6-36ca-43ec-8162-ed02cdb4354a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "df644194-824a-452e-9683-5434ad3f5ccd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1846b86d-68f3-44cf-89a9-6cde76902495",
        "cursor": {
          "ref": "60101df6-16f4-4574-b39a-fc2a6ae705aa",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "3a98b6c6-5964-4942-a31d-2f63cc741b71"
        },
        "item": {
          "id": "1846b86d-68f3-44cf-89a9-6cde76902495",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "515233d7-ce2d-4869-bbee-39b9aa544c42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a6b1ebc8-c2dd-49be-baaa-1ea1ed7fdaba",
        "cursor": {
          "ref": "d573013b-258b-4143-833c-3fa230443b09",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "1e6afbfd-3315-4ce8-b9aa-6453ef3d8aca"
        },
        "item": {
          "id": "a6b1ebc8-c2dd-49be-baaa-1ea1ed7fdaba",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "f229a704-d095-40ec-a9e9-55345198c7fd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb5ae476-e79d-4287-b8e5-584aaeea0920",
        "cursor": {
          "ref": "71c0bf3e-5e7d-409c-826f-0f50b13a7419",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "a61c5791-3945-4836-be95-f0d1268152fb"
        },
        "item": {
          "id": "fb5ae476-e79d-4287-b8e5-584aaeea0920",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "f5e4d5f7-2fec-4247-a8ca-e7d394b0b220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57bcb1d-d267-4e21-85ab-bf3f25715136",
        "cursor": {
          "ref": "19a52ce1-6bf0-4fc7-a1e6-e74236ad10f3",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "8a96d57e-158a-4068-a7fb-07c935939459"
        },
        "item": {
          "id": "a57bcb1d-d267-4e21-85ab-bf3f25715136",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d9bb453b-23f1-4bf0-8c50-06e9e242e530",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee8622fe-e808-4beb-a1aa-ecb00eda03b9",
        "cursor": {
          "ref": "b8e907c7-bf2d-408d-af55-c8505490a99c",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "3421a555-8ae6-4df2-9fd8-ec5d56f6aed1"
        },
        "item": {
          "id": "ee8622fe-e808-4beb-a1aa-ecb00eda03b9",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "0f6cf3ee-2b21-42a0-b3db-b65c289139b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2125fc42-8b62-461f-bb5f-e2b0b23e3ffc",
        "cursor": {
          "ref": "ea4303c6-f860-4409-9e41-8f3c995f2a98",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "7aa13aec-7068-435a-a76b-7d2df3403489"
        },
        "item": {
          "id": "2125fc42-8b62-461f-bb5f-e2b0b23e3ffc",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "dcae62f8-868e-4198-b80e-eef1808cbced",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 28,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "245ff451-2e6d-4edb-9560-6d4f72ecc94f",
        "cursor": {
          "ref": "7e445d9f-27b0-4fd9-8200-4e0ce99ffd42",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "36dd6d8b-bd3f-4143-849d-075ab56c4596"
        },
        "item": {
          "id": "245ff451-2e6d-4edb-9560-6d4f72ecc94f",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "81f7d46e-bda2-40bc-9a19-3b15536910f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b9b5028-7aa9-413e-a78b-8ac8f6f5dd60",
        "cursor": {
          "ref": "9ae7b5e1-9bb8-4ae9-a8a8-b4acfcf46a38",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "c932a5c7-87be-46be-a926-6063ad9c28f1"
        },
        "item": {
          "id": "7b9b5028-7aa9-413e-a78b-8ac8f6f5dd60",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "08fe2a9d-1110-48e8-8100-0a374ed8fd9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cf309df-11c8-4218-a878-77c79b4cc3a0",
        "cursor": {
          "ref": "d2550474-2ec5-49b5-8419-601e3f933295",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "60175841-d2e8-4da8-9fa6-9ecbbdf801db"
        },
        "item": {
          "id": "2cf309df-11c8-4218-a878-77c79b4cc3a0",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "3ebb6b7a-84bd-4856-a72d-ce695227ad99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a208481e-53a0-4056-8d41-eed9cdb85490",
        "cursor": {
          "ref": "f7cf2f98-135a-41a9-a52d-61c814fb52fe",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "92fa3553-a357-4392-8e64-90adfe3b3a77"
        },
        "item": {
          "id": "a208481e-53a0-4056-8d41-eed9cdb85490",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "95d3e604-38a1-463f-aa4d-390908e421df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be7f1ae3-7e28-440c-8554-f9cfabd249bd",
        "cursor": {
          "ref": "d05fb09b-78b0-4018-8a76-3009701a635e",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "88d61e9e-07e5-412b-baee-2ae84cfd6cb6"
        },
        "item": {
          "id": "be7f1ae3-7e28-440c-8554-f9cfabd249bd",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "32ab81ee-dc63-4ae5-8ca1-36c9cdaeda5e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 27,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83a1ede4-3459-4919-bcd9-77f4592dabb1",
        "cursor": {
          "ref": "0ce372d9-77a7-4283-8ec3-5fce239acaf9",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "8fab7205-4098-49f3-8505-81e90591366e"
        },
        "item": {
          "id": "83a1ede4-3459-4919-bcd9-77f4592dabb1",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "cad63b31-175f-4c7f-85b6-7a42d15aa2c7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1d20332-fb0c-463c-b2cf-9029fcbad534",
        "cursor": {
          "ref": "02f74ab5-ddd4-4450-85fb-da02564b99d7",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "725fb82f-9fc4-47ba-912f-2e2e2ae587fb"
        },
        "item": {
          "id": "d1d20332-fb0c-463c-b2cf-9029fcbad534",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "3dc8be74-2f22-43bb-b975-05ec16b42dcf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 36,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba2e7dab-1549-4afb-a033-76d7518ba11b",
        "cursor": {
          "ref": "a8f43ce4-d08e-40c2-8dea-017431f67ab5",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "7f15dabc-b4f7-4e54-a454-d653bb2fa462"
        },
        "item": {
          "id": "ba2e7dab-1549-4afb-a033-76d7518ba11b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "b1d24716-defe-4f01-8837-8ff3dd52e019",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0957167b-0f00-4443-a725-c68a55352cce",
        "cursor": {
          "ref": "040f8b19-59bb-46e5-bc1c-02b80c573bf2",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "2675a5a3-532a-45ee-a412-72c841e5bb61"
        },
        "item": {
          "id": "0957167b-0f00-4443-a725-c68a55352cce",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "fffe74db-bca9-4787-9b5e-4274805ad544",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "2b934d75-f665-40da-b28a-745e0eaeb0fd",
        "cursor": {
          "ref": "0670865d-130f-4455-ae3a-5374aea06109",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "059e80c2-9f2f-4521-a7af-2373f336655c"
        },
        "item": {
          "id": "2b934d75-f665-40da-b28a-745e0eaeb0fd",
          "name": "credentials_verify"
        },
        "response": {
          "id": "63eb5fbb-7a66-4731-88d5-78b57ef99967",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "761f8241-34ab-4b12-998d-8264acd19458",
        "cursor": {
          "ref": "b90f5600-8bf3-42cd-8269-b1a77b03ec96",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "6862688f-06bd-45a3-bc86-40afb539a039"
        },
        "item": {
          "id": "761f8241-34ab-4b12-998d-8264acd19458",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "5418b801-6563-4bf5-a7b6-4b2a60f62ef6",
          "status": "OK",
          "code": 200,
          "responseTime": 134,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "d634ca8b-fffe-4901-82ea-71bffa37e646",
        "cursor": {
          "ref": "222bed39-a005-412a-adc6-7b272b03709c",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "8a6c7cf8-17a4-4255-8e29-e13445d3cf49"
        },
        "item": {
          "id": "d634ca8b-fffe-4901-82ea-71bffa37e646",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d71ffa4a-becc-4302-af2b-e648e1d0d9a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d634ca8b-fffe-4901-82ea-71bffa37e646",
        "cursor": {
          "ref": "222bed39-a005-412a-adc6-7b272b03709c",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "8a6c7cf8-17a4-4255-8e29-e13445d3cf49"
        },
        "item": {
          "id": "d634ca8b-fffe-4901-82ea-71bffa37e646",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "d71ffa4a-becc-4302-af2b-e648e1d0d9a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dc956b4-cf9b-4692-933a-6f2d6f6e5110",
        "cursor": {
          "ref": "c69ed1a5-23f9-4b15-b1ec-e02745a9ac81",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "66aaae1d-43cb-4c91-80d1-97e73dceb23d"
        },
        "item": {
          "id": "7dc956b4-cf9b-4692-933a-6f2d6f6e5110",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "d2d38891-683c-4699-ac44-86edd5045aa5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 17,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2243b4dc-befd-4e47-83c4-33bd8f397dff",
        "cursor": {
          "ref": "2da1cf23-37c9-4727-975c-c443e9c03945",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "172ca8d5-0d1b-46fe-ac3d-5826b268fd50"
        },
        "item": {
          "id": "2243b4dc-befd-4e47-83c4-33bd8f397dff",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "6bc41f68-346f-42e5-ba0c-b1a61bec0aed",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 18,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}