{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "76341c8e-4391-47e3-98e5-2db6e556ad3d",
        "name": "Clear Cache",
        "item": [
          {
            "id": "3e5dd4fc-1866-4ab4-92f5-0c4db423e7c7",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "dd18bbc5-0c36-4594-9d5e-13c8b6a2cdf2",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "69cec593-c67e-4dbb-9aae-ee80849592e5"
                }
              }
            ]
          },
          {
            "id": "f5086ab6-8bb4-40df-a093-4e0daa93a81d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "6403dcaf-f236-43f9-aaf2-8ac5ccac6298",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "f49773de-e00a-469e-bd65-602abfcc466f"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "21409c07-dd3f-414d-b147-a17f88569b0c",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "bbecd35e-f781-4a7c-821c-69f417b85d8c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "408a1a34-bd83-4354-a5d6-3bf04494065a",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "dd0b315a-08d8-4f7f-95ff-73f60a999993",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "ea399aae-b799-470f-b162-10001b933f4b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0c9633ae-3399-404c-8931-cab3acab2dfc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "541b9c82-ceeb-4c86-bf8f-816aaa4772a4"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "e2ca23fd-9713-497c-86f4-849acddac441",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "989e775d-485e-4888-8d8c-1a72437c3810"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c7dbfec0-f934-40c5-96fc-20d2772c1baf",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "e45c75c4-5ea2-4360-af5f-1e6b2f746260"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bd88df97-0e82-4636-8f48-2ca36c8959e2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "24298acc-d485-4739-9328-5032a3de2eb6"
            }
          }
        ]
      },
      {
        "id": "3161a7b9-47e9-4ce6-b806-984da6f2b6c1",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "59a0763d-a37f-4db1-9f60-e95f7021b7a3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e44f3887-3184-4641-a9e5-6804c1531975",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "dc9d515d-a143-4460-bb70-ec9ed155c806",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a49153a-0dd2-4f78-8775-6208a0830349",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "214ea4d2-3074-436f-9397-7a36c06b9062"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a209678-a28e-4797-83a0-fa5069f37730",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68364054-d889-4467-a3b9-eebe78b4a47f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e26a9949-58fe-4733-a67d-0484185cfd2e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33b2603f-d455-4918-bce7-47a5e308b806",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17640bb-ae14-4b05-8278-aaab510c2fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8673a747-48f5-4d13-b655-857e8fa96ec1"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "734db80e-fe14-4cc1-9624-60639522e40d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e5ca862c-4d64-4f94-abec-d38ff5d96bd6",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a9fe9239-8c73-45a3-89e2-41e4a0f3a857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8f785f02-03f8-4cf7-adc1-e5cd44b2735f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c036a859-3c5c-4c93-95ef-60d6a9a71d9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6c359d9b-75b3-4be8-b473-c504502df51a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "c0d9a648-59c0-4579-b84c-9c975d159115",
            "name": "Positive Testing",
            "item": [
              {
                "id": "c42affb8-fc9e-4e31-b461-6d636fec166d",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "4c4137f3-5070-45fb-b38d-6db23b653291",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "88b291e6-9aac-4a28-bf2f-2a58343c0307"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ef148bcc-ac2e-4060-87cc-dd5b8d07565f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "ddbbced7-13dd-4b8d-a301-4db55dd9b88e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "47141350-5cba-4047-a779-6c61600633ed",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5b21b2b6-437d-471b-9fc1-5cee29d7435c"
            }
          }
        ]
      },
      {
        "id": "a5df3368-8304-4d9a-88a1-a1387220e0ec",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "793d6976-bf27-43b2-a90a-bbaa3cc477a6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9a767a02-3be5-4545-8e55-77e2ed3ea98d",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "a39cfee8-2121-4ab3-a969-eb48b01aa26e",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09252774-3ec1-441c-bd33-abced54ba33a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9efef5b9-92ec-4438-8c20-565c08bbd456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "425c61e1-6f89-4614-b9f2-77561d885c15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "032acfab-c4d6-4086-9fdc-8c63b8ea0fe3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c2e49b2-5e9b-428d-86ec-88397e1a67c3",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40388fbf-946a-451f-a9e9-566f7d29ccb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd13f7d9-bdd2-4461-86c5-3c01acd87792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aae8c58f-6e51-4a84-8191-23cbbcd57564",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9cd23d5-2506-4918-a69c-e905eb4e6a91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f19700-f62f-4c1a-a07c-732f16c3ef6c",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d92e42ae-4a63-492d-be53-5510531ef5b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0c364d9-7819-491a-b499-552a4212ad70"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9167ebd-9f20-425e-b7dd-a8e01fab3aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "08e8116d-4364-43af-89c7-869355e95318"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37d13d48-be6d-4cac-a50e-32a9acfe8e64",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "00692658-358d-4bc7-84b5-87c6fa7ce4dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baa2022b-d33b-4bfb-9ac0-77fe501308bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a4f77c-7aa9-40f0-a823-b74f344401d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6c3b8882-d780-46ef-bf95-b334f3ae00ab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066e3898-6abf-4520-aadf-ba282671ca30",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fd76ee8-800c-4197-a922-8dcee27d630c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bed5196e-d235-4301-8604-4cf205e0ed49"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f850a87f-33e2-40b3-bd44-b4edf6ff24fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "393931a5-7c19-4418-97aa-5f8f5f47fe94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f3d284-245f-4fb3-b8a0-0e1de91de384",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc1638f-3cfb-4ec5-b3dc-4514f3b7d662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e847adfb-7752-45e3-adbf-28323feecd3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a267baea-1086-449f-bf4e-aa80eb776129",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "db174322-a0d8-40a6-b0c3-ecd213e50c03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb3b3df6-67ba-49e0-8f86-752fc418bab3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5932356a-ff9d-40c6-924c-cfd10728e165",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3dc6c9a-e73f-4135-af4f-f26b889e15c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dc696be-c643-4078-be87-8d89f90c32e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "821783ce-19a2-4879-9b09-bfce9756179c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37dc7322-c11b-4210-8d37-f7f380bd5d43",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffaa3df8-3781-4934-b202-cf59cbd27907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13e8a124-faea-45fd-9ec2-24bb6c62db15"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0813f75-ea36-4720-845f-c0cd23370511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "27db5c2a-55c8-4087-aacc-6edd8119fa82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89814054-811d-4b5a-851f-84d7a7ce6058",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3257c4b-ba2f-454b-9ca3-156429cf8879",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e56e49f0-8c63-4c28-b2c5-62ca8622c035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f9af791-f623-4060-abd3-f54a005afba6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ffabf5e0-8411-4ae2-8047-c6048801b62f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9066bdc-5280-48f9-b513-d4a566b09084",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b313def-53f9-40da-912b-36b03b31247d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e1f1d4f-feb9-42fd-9a29-4338bf655620"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ddb77ef-a316-4393-a423-ec3d5daa027e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e5da06d8-5dab-4a24-877a-56ecd7bd0e48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56160ef2-e579-4dbd-a5ee-47bb8e4720e2",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2541dc97-e245-489e-81db-ea41be1bf4ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b21f51a7-65a8-4c5c-bea3-54ebebbca16f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "20bf56e8-7049-45bc-9894-fa1b08b61e63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c50aa10-f4fa-43bd-88ad-82bc9f306b36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "221cb69c-95b1-4da2-a1f1-b6e660b9fdf1",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "603f5bfb-5065-47b9-a488-a3f777923373",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "baf687c1-fa15-45fd-b497-f434cdb6388b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8a315aa-d986-4e6e-bc06-3080e6bc4685",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "baa4a112-bd41-49b9-9345-c0da686f6470"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56cf1bd8-938a-43f5-86cd-e054eac6af28",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47360750-877c-41fa-9c24-59facb521a7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8720c02-6e92-40c9-b42e-754f03fa874d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc4d789e-2ac4-47d2-89c8-89b743915f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7bfe72b5-e4db-4ec6-b32d-4fa5dd5f607f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4327b3d6-2559-491d-bd2f-f7c91b047b82",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d49f29f5-22e4-44db-8671-f538231c4873",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e926a462-3171-41b2-bc06-c7fafc3b72ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b290c4f-de4b-4d20-b86a-fd048fd9970a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ec5e2807-f68c-4d4a-8c87-885b1483cddd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bca8477f-f6b6-4d23-ac6a-299caa850865",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ffce269-a10e-448a-93e1-72dd1ed660b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "349c82ee-ca60-466b-be0f-709994372e7f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "508fd1b3-3037-4564-a801-cfa834e3febd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "17f9ec78-ae46-4057-b462-5a47b96fe8e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca34c52c-72c0-4d1d-ba8b-bf910d953f9f",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc265d5d-3516-4328-91d5-90ce644c496b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d69313f7-ab24-4c39-a9ce-00d33e868ff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c2a5539-a808-4345-b4cd-85b8657c7189",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "574b41c1-797e-4769-bcfb-633f8bb1cbad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ab752a0-c27d-443e-9e19-bf6ba992bddb",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51f7c752-d5ed-4ee5-8fb0-d90195d9b328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0fb580e-e43c-42ce-a518-ebd789b84ff2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2f50310-e3e9-42bf-a6db-af014e94c756",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "2aa8e1be-9056-4a62-805a-045e74b31800"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f216c9b6-6fbe-41f6-84ba-84bab757850e",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4555f0e0-5dc6-427a-8e17-c9a528ddd5f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a3ff81dc-3bed-4568-b6d8-6072e0cf5b3a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5595cdda-810c-4f46-9176-ff8f27b87124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "04cce2b5-dcdb-4cf2-9eb6-ed3dad97d76e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb124687-7bf5-4536-8513-abb0b4e41029",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c24a636-6964-4574-81fb-b253074e5e70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bfb477f-d985-433b-b260-1531ce0a933b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dddf4cd-8e70-4149-bd61-7ac6881697c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "22159fc9-2009-4163-add0-ffc051187fee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82133ad7-9cf2-4334-a6d8-5b91b41c91df",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73368f0-fe06-4932-aeb1-a28d7c46e72a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "97c65e39-7a29-43f7-bebe-cf1e5ce606bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0664071b-e6c8-4d3b-adcd-37c8d74dcf3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3ccf00fb-8dd4-4ff8-9b00-d80d97c5ed22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ba2632-d1a0-4917-a5ed-e1247b3b4764",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c36dcc82-615c-4eb9-ba6e-c3938e1f766b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73e33a6a-b7b6-4296-be6f-5a41454e8f46"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "895a3eab-214d-4de0-aa08-615031237005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4476670-5163-4e9f-8493-7f9a61d4c441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92330c53-a6a1-494a-afa5-f24d33b3a655",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a653c76-54ce-4877-b804-28691996087f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "738d814a-c93b-4471-b182-5e8bf7f62d84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f837988-177e-48d6-9249-b5098eee7854",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c985dfee-ed22-4d68-9379-d43a5c4e8d9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee5c9898-3269-41bd-8d92-7b9965cea9a8",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9196a4c-0be2-4d18-8a2f-582b28f3daa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19a47979-3974-4b6f-b67b-a6baf32ec359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "08d4b650-69a5-4265-8006-1e0dd366739c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "2127b760-cfa7-451f-96a2-2781e56bf361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bb9d647a-5a13-4c90-a127-053f1a6b84ee",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b76c0e6b-a868-457b-9bb8-459357151788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6b8a683a-2d5e-49f6-a3a1-c84fe9efabcc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3374f5c-9f49-40ae-b3e5-b5a79e4ee3b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0fe251f-e9a2-44ee-9287-9b4385eff71d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39fdc0bf-f6bb-4670-bc7b-567399d2814f",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "058217ab-647c-4d88-aef1-cdd982c2bd33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f37af867-66ef-4d8f-a7c5-b5e83045b56a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53ff1151-aa20-4723-be8c-c041509fb24b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "60387090-5ff0-40ed-be7c-23797efde226"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf542e91-48df-46cc-a56d-90aa9211811d",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac5c5828-1549-4f1a-99d7-91ca5a8794a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "344bb4f0-e2ec-489a-9022-d5f332ba8a11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e6dbf8b-b6e6-4c02-a8e5-4ee8e74c250b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "31018292-0db1-493d-aa46-67162b114245"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6146c5d-7b9e-4c0f-a992-290a34f33d74",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bfbcc2d1-2b92-41aa-a8c0-eca82f008e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f73f58ff-ae5b-450b-9cc6-be0f19ce3def"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cece783-adeb-488c-bad4-0c4c221fb7b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "926be433-bc3a-482b-998f-c8efeaa6c30b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ff703fb-0dae-4c11-8fa5-7f295e39bbf6",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bc1ad9b-4655-4058-9867-ce2f69fd9102",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08754d8c-224b-4ed0-a33c-8d76f235d080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b937cec-c9a8-4008-93fe-195db5f77196",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "85750ecc-1594-4c54-a5f2-473433519bd3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f0d8d74-7c49-467e-83f4-c579fa27e4a4",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4ab0bf9-fafa-4c17-a172-2b508c2d94fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce37440c-cedd-4543-9a74-121562497c2b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a081d4db-8ae1-4aa5-89ca-a14e764860ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "46cd2e57-5ffa-4ebc-8caa-e14fa4e000ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e400be8c-8cda-4e2a-bdf1-13396f3e35c9",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f259a17-7de5-4c3d-94f4-a649a3cdce38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98a2fc32-b40a-4890-b133-7c356832034a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb3e2129-b58b-4352-9ace-cd3e1c56b96c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "ab56cb26-3623-4d45-98de-2ae0cd9414e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609a8d3d-63b4-4a97-8311-8152963d104f",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dfa4660-9401-4c7b-ad85-fa1118102fe8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e59f49b7-7232-4ebe-a6e5-2dba91b7710e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fd7e8b2-8f51-4d7f-8151-a6529a9bbf4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f4b6caf-2305-4d69-8a85-f677eeda2a69"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8357e763-543a-496d-8d53-01959989321c",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62f561e5-21cf-43ce-94d8-8738f58b4230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2917def-ab21-42b3-8302-55ac0f60cd40"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f45aa16-b005-4c07-8869-89c4fc6ae230",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "cea1b222-d8db-4c73-8c6b-bd99ac43505c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb12381d-1300-4d65-9e47-957691f8301d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6dbe3b4-6def-41e5-b337-3c798b37b25c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "add4b7f2-e5b8-4c76-9303-325edf77719f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da8b15f-45a4-49e9-8fdc-0f0e185d0fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a21c89e4-77fc-46a0-bf97-eec29d99191a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dacaa63a-f518-4870-b40b-5f6ff024015f",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bdadf44-3e1a-47a3-8ba0-6dd0334be7d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5fe9c960-b370-4f47-903e-060cd8034cdc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f31e5416-4269-44dd-adac-6d35d9ede655",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "63d4fcfe-b762-451f-ba22-353a8123e04c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03ede4d8-81b7-4761-aa1a-3c91cde0f3cb",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58490f97-a77c-4e25-a4e2-8e8323b20dee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ec6bf01-9d3a-4141-943f-e1fd97ed830c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4caab7ae-01c7-4701-bb46-65d1191c999e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "ce4b9b70-0383-40c3-8842-c1b947211200"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81386b73-b105-4919-9e3f-12190154acf0",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0671a622-4fa8-4537-b603-4eaf2c0a91a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "48dceb82-19de-4122-971f-53d7a69720f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04bfcaa5-0130-4dbf-bb34-46a32a6c6bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1afeada0-27a6-432c-ab8d-efd21a5d21ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2bf19046-404e-48a7-8a1b-dc2cb23d11b0",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d3a905c7-5c60-4030-ad6e-c97d7e3d7625",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e17713a-5d24-4ba9-844b-96e7727786e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03ba697e-6bd4-4d3f-bd4b-5857c348c364",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "12319e32-3490-4ba6-8aed-6d5c03148d5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50e6eae0-f879-4928-8701-27edba7e286f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c87ad1c5-dfb5-4747-a251-fc11f4a211ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "057d45fb-c863-4338-8b30-5f702e257e8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fd830f5c-dcdd-4d70-b12b-15cd1cc39f24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "32fb4baf-4883-41b4-9ae2-0725018225d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dda8b1a2-4a81-463c-8621-366f6caabf35",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9273c154-35fb-45b5-b054-ff13b87a1fc8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba123a2f-e0fb-4e98-bb52-0a3380a153cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6cf08292-1ec4-4012-9cba-de966dfe3da7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "59473d86-62f6-41ff-846c-f22339e04cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2ce8e95-c07c-42bd-bca5-5451b6643ed8",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "181b25c7-7515-420b-91b4-125f07a714ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c52ea8e-ca81-417b-b294-d8003dbd86b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cc76af3-5289-46ac-a3c8-c2ee761dcf00",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ff929308-5b6b-4e54-b1e7-d641b320d4b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7cb0d7d-e4b9-48ce-95f2-25dca5a06cd7",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ca405fd-6005-45e1-a450-5e8c21110d73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6949d4b9-6bec-45f1-bbe4-a198b8342284"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d0b2da-39b2-494b-b243-1349a7c55614",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "39f4bcfb-0780-4791-acde-61b3e8e6468f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "213e9764-7f46-4a7d-a3e2-cc3f6d7d0fb4",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b43fea49-00a2-4c44-ae29-651774a58124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28e78450-da76-4bfb-8a9a-32c5a95b9e5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb2bc9a0-fa62-487f-b355-06ea8454e200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "fc198958-ad58-44fc-85d3-21a701283a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1883fa88-0303-4fae-a93d-32e58b664129",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a15f90d2-0b98-47fe-a215-f84362883e45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "192a3a4d-2c63-40e7-b2ca-58d8875766b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5766e16-6d0b-4bd8-a83d-9df720a4f20a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c64b8e62-f170-49ad-9469-c31e5e2a3c72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfed96eb-15d4-4650-ad3c-844c769816d4",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cdfb990b-11db-48f7-814d-2ccb466bc563",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "305a8060-2411-4e49-8a39-a0b36d3339fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63803cfb-7765-4321-95b9-02f41db582fb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "54adf03e-94ea-403b-a3a8-04ce744d03f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308949b4-302b-4d2f-8c25-e0e811374d9b",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a951c8c-4835-4355-9db0-5744ac2fde3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cd27e33-2a80-4ba0-a8ef-03ab5e9dbe74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63560195-8938-4e23-a4aa-3e7ee77db0be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e652a469-a35d-4135-809d-e94c5e0ccb5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21c70a8f-5cdd-4a41-94a6-9d6b993abeae",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "277c52e9-63d6-4adf-a66b-fd1de5cdd7a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78debbdf-b3db-4fc3-9849-839c155c27fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c205639c-3a84-4ffb-9baa-4ffecfa520bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82c04688-32db-41e4-90d3-626a635cc2a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3710a7e8-87f1-4d66-8418-71639a6cb23d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2bcc4043-76e2-4ba5-b1e1-bc0007110a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09da57dd-b574-416d-8a74-1ef8f85d19fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e658a9c5-62aa-4883-87d3-f5c0df1a635b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "78361d7c-53dd-4854-a4b0-92d68dfbb209"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fed7178b-947e-4ab8-a1d9-ade7c8ed4db9",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff5c7181-d2c4-4a26-9d80-ebe126ae0d7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3b79f7ff-26c8-44a4-ba9b-28f5147bce36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1cb50e5c-b27e-4eec-82c5-960860de1ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c845a30-24fc-4808-9dc1-cb7ac8fbd9db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a7009f9-e9dd-4366-97b1-d33a90982940",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce3d7e40-71be-4988-b8e3-6991dcf8f254",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08352ca4-d746-4fe0-875e-b538683a7752"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46c47b2c-2c65-4e01-8801-1a0bc6820e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb0f288e-20fd-4dca-947b-d9daea492bcf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb0bf33a-d259-478d-a87a-9b879a1ef20f",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dbca29ea-00b9-47cc-864d-6a823e1e0a82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "00d3facf-3cd6-4364-b0ec-55e34967d3b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea646a22-b4ac-47a7-94f3-6ef5e8c99838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9b522fed-b8b5-4bda-873c-64d781cfa779"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2bc490-ff5a-4881-8209-4797bf39f565",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44d7aa11-9ba6-42fb-b0f2-5e601ac63e41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f50ca870-615d-405e-b9eb-29d45de413c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ae3b865-725e-4089-bff0-87751ccd4d9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "da7d34ea-13d4-4705-9c6a-adc1e2623b93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5daefc8-0e75-403f-8e06-05f8b96c8166",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f29d672b-b0d1-4837-bb5c-f9fcbda29e61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d7aad5cb-6148-4339-8058-d028d7b7d894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6ca7b01-4f77-4223-aedd-a218ce918d83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "94d7db6f-d36a-4f00-ac72-b5a433ff3d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7965a9b9-5dd0-4ea7-a41a-522464f70d4a",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c37ddfa4-739c-4e4a-8fc7-1be3b1e73e80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d01d69a8-5386-4458-8759-b515f83b19d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8467be1c-6116-436c-b375-b0df3cd891e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a577b2b3-f2b9-4aa1-a9c5-67daa024e678"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7234cb2-0460-4447-9aeb-0ac9c004f607",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcc6fcc4-0823-4c68-8bad-6926735c2bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0fadd646-545f-4450-be7e-e895804e2bd7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9734c20-33d0-444f-b2dd-c528e3d410ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b3dcb034-d25a-44a8-802d-a842f5cc12f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33d7ee41-a310-460e-8430-eaca3fb8bf8f",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b9c2f8b-e69a-415d-91eb-fee20591386f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7b9adbf9-bd00-401b-b7a4-38c0e1589ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b6e4e895-0592-4995-bcbb-5e8e55b67307",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "17e2a53e-3868-4f4c-b662-a60b9827f287"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5bf6f664-8669-412a-a1bf-2d1fa27111d9",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b41f2680-131b-4410-b70c-8f52d6d1cab7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2750a5e0-4921-4991-beca-4331d20cb572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f5f43a6-419b-429a-bc72-a4f591b3c783",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "c36b29de-9f86-4606-88f4-753daf366120"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6356d92f-f2ee-438e-a5f8-6ff6d1ceaaf4",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf082f58-a0b7-484e-a5cd-4886714cf94d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8fba3760-55a6-4836-accb-7e11f129de30"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f660c463-548b-4524-9d95-a8a36653a607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "dca76dc9-ec55-4fa4-a650-b3a2a4937c6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ef8a0c1c-bf9f-4a3f-9074-a482a0455741",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c25d6d2d-451c-442d-bf51-9b3fe18a7b5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d01f4605-8cb9-4b27-bde8-5b3ba5ed873e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff93c1c7-0be3-4213-86c4-6a7aca022cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "c34c585c-2c52-4cbf-b5af-013823a467c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5a2e821-cc22-40bc-aabb-42a8c1ee88ec",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e702225a-391f-4d4f-a9fa-c355456ad523",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0618dbc2-4a4b-4e2b-97d1-36df2f791d92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d57acba-e1b6-4b5a-b5ee-792a997ae013",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "248587c8-cd3e-4bd0-9729-2dba7aeba196"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb34aa68-901a-444a-aba5-0905a6f2a619",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb43c56-9d8f-45d1-b394-be28d778cbb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24f95fc9-3be6-4609-abb0-5ff61251339f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a329a1-209e-4e1b-bf5f-5baadadff7f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c04d8690-a2bd-4e2e-be62-2e74d51b3866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c5c4940-9552-4eea-aa84-e392069a0106",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f84fe09d-e806-4f08-9cf8-f7f6f00511f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "331bfafa-9328-4092-ba31-05d3027ad763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "248ebb89-5255-4361-af42-a7a497337669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "a0a51b98-cedc-4446-823f-0a6f49c0531d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04ce6cb2-b97a-456a-b34c-88385b26ed45",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "62767859-99c9-4e69-84fe-c614e9353e42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1b5278c-93b8-43fe-9c74-f44c213fb530"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d935331f-da54-4f88-9729-f27fa556118a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5bd0add-da2a-4b69-b961-dbec99c96cbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ce28ecb-9aee-44db-8ab8-8accce1978a9",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f15c58eb-9c97-4411-bb2d-76321626b08c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "030f362d-9aa5-4a5b-b2d4-1c79f22cd41f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3e59d08-f449-4729-b620-fc6d416cd1f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "856a6894-36ba-4f9e-8b3d-cf5cf0361875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6ae66d9-620a-4dae-a0c5-1c50c7a3f629",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f42d5df-756f-4740-9168-d7174f58ee15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae61169f-4fc3-4887-9240-97e3a376f33b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1551d09f-7ab7-41a4-8efd-131117916ef8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "a91d0b32-5544-490c-9ecb-90ab47d07639"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d220d308-d4a8-42ae-af60-02bf78a66354",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab1de260-5da2-4f40-b6b7-4a8c8613f45c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4584d492-3d0e-434d-9472-70977732ad19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff288ff-f6c3-4d02-8b77-2d5aef98e696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f848c053-a1b8-4b90-aee8-8bbb93a1e313"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1195716-1f31-4ae7-8fff-f76818ffbf39",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ec75a2-40b6-43a9-9a1f-649db455846c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d338a77-06ee-4ae7-a77b-502167d5dea1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90134557-0c7a-4bb2-b2c2-bcdf057f3a29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d447559f-6c0c-4eb8-9b2c-0681db1f31d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdf105a0-460b-44f8-bd8f-6f46c76ce03d",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65f4a985-f481-42ab-9067-6b8c5e8b02de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d7a49f1-5a4e-42e4-b36f-16e499979a54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a10379-9952-47ae-b070-4a57aaf1f5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f0cf1da0-2629-4ca7-a40d-9ea7f193e3fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004fd15e-01ed-4d51-b1c6-13c62acf4c55",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14b0767-47d6-491f-bcd9-628b9c214909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2a1c5a0b-0ed4-4f7e-b8cd-f6869071908e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f914cdc3-79d8-4f60-8270-0da8d88f44eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3c51205d-5cc6-4156-b4df-0ccb41b47f8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fefa8681-7527-4467-9e53-471c4cf65686",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "354ba03f-0b2f-4133-afe2-87d914f40998",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cce6be42-517e-47e4-afeb-eb729e052264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33657b9a-9d0a-45cc-adf1-18fede106f4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "dbfa3bd2-04ea-40a0-a267-89bb945e2d48"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8df3f1cf-0f63-4615-9a80-fc45466a85ed",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a094000-6f60-4105-902a-30d449dfe45d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ba1fc763-965a-41a6-841e-917e95a7d1e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bb7a8e5-e466-44dd-b2c0-d58c88b41fc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "72b7262c-e84c-47ec-9298-ea4cb33456e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f78bf98-fda3-476a-b855-fabba5ac2f56",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37c1203e-8f81-46c6-bb70-f09c83af8fe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "096a3c7a-2d9c-442e-8bcb-40275d844f00"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ab2f277-5416-4ac6-8340-aa2d7f042b83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d97f378a-5ac2-4609-ac79-e665a34ff140"
                        }
                      }
                    ]
                  },
                  {
                    "id": "483a3c59-5de6-479b-8c27-d15768d277cb",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14a7eb96-f8f1-4ad1-9a9e-c029b834962c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ba34a13-f9a3-4adb-93ad-a7371f2d0fdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8f4a939-57ec-4bd5-8c0e-655e21f6dcd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "88af689c-bb31-4dca-89de-72952ec849e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "019d3f74-00f5-434a-bcd8-346f3a8050fa",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8093fae-5492-471e-bbf4-ed5d0f7fac57",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5aa9e6b6-345e-415b-b418-d271f1e88ad2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b67198d-5883-4429-a037-032046f8bace",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "31aeb089-6ac3-455a-b1d4-6931267c6938"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e170732-7a29-4d34-8d66-0b2c90b79646",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4cee3eb-fcf0-4b13-b68b-3c382fef155b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f6c34e9-012c-4938-9621-1178c0a47357"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e1666ed-84f3-4ef2-bcfb-29af6002cfa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "88cf797f-1ee1-4efb-bcab-273bd1ac0c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f13e45e-98cf-47ca-ade9-53da36de0482",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7ba0a59-4f36-40d7-bdda-8d1b92c3ffbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0eca1234-451b-4ee3-ad6c-bb9a8414aaee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf69dd3d-bb42-48a4-8adf-ce50330b608b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "cfbad855-f275-44f2-8a8b-3ea5e8955c9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "02fa2717-d43d-47b7-b8a8-3b1d1cb07e43",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c78fba44-2e42-4b7c-92ff-64a807b51b50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "449cce0c-6063-4f7d-93f0-eda11a65cb39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4e91172-2e7e-4f00-8fe0-59a4b94094eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "59a885ee-df27-4638-9a64-dc27c7999546"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f389c6e5-e66d-4b10-b78c-3dbe87a35554",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f41f024-590e-455e-8748-81f1b6cd8cfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42754b17-0193-4d61-b49c-b6d7b7c9f6e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0265fe79-3a8d-48e9-9503-77aee9096068",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "edfcbce3-cece-40c1-80f3-a6fa987a9aaf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36c9af41-51ba-4008-a063-f076969fe699",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2eee3f62-61af-43e5-83a9-13351b190fff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d26e6c5-2a19-432b-8523-bbad29704eaf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3528cc33-7bd3-41a3-8ca8-4e985ef02e3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "45f29e04-9641-4171-94d1-ec300dcc3110"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3cf57991-e473-46d3-b42e-d7d3501f2cdb",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "458dbb1a-93d9-4805-a881-c4a7d77fd067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9af7502c-e5a2-4c86-890d-5473f11c757b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ee214b2-6b8c-42a2-9c72-d91fd7ff0b48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "e649ed9d-734d-40af-8a7d-0077de16e88e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa26caaf-b07e-49c9-a29a-2fae2debc681",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f3ee314-d8c7-4714-925a-bbe702c35a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d55dc436-33d6-4b73-a06e-3a0d8e385f13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "422fd44b-6be5-4e2e-8a73-683715e17ddb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ff0605ee-f8a4-4f69-bda1-02890935429c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cfa4909-3f2f-4ce2-b2be-24aa4f8957ae",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ffb42a0-2181-4bd9-9375-9d5379887dcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "368f66b0-28de-44f4-8aa6-607fd89ebf77"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a8120a3-ade4-4375-a229-2b1a3e24344b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1cc4180f-9f79-4212-9665-0bc7582242f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01c193a5-9918-416b-9095-03598fe657ae",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41ae02f7-3d3c-46c4-95e0-50417afb0d04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e020f02-56a6-44ad-be72-892617c48a02"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a39819f7-e4ec-44a8-bb4b-810654a33af2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f853a9ee-37b5-4c71-a3cb-57dff6ddf652"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07603612-a858-4519-9ba0-13d07d38e3f4",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28372952-202d-4739-bc9e-db2dbac23f0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c57bb8ca-76f1-494b-a7a0-0657d540c748"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49aeea86-fe34-45d5-83e4-99054ff51696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a15a5bf9-d12c-4bce-b472-20e6232061ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe6b9711-40ba-433d-aab8-4a50d8c49ad1",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c63d6260-45ed-40cb-8bd1-ae4bc2459f91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1083f94-b409-49c7-aeac-a5df901a6466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7008fe04-2e50-409f-b378-58ceb8097a60",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d5baaa9d-d1e2-4829-b8b1-ad4be346c18b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79fe7837-3fad-4c51-89e4-3691ce70d63f",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c87296b-64aa-4852-aa12-cf4099c499f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c8760231-3fbf-4427-b6d5-aad494008627"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6fb44d17-3152-4283-93a3-16c00065a69f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b9233079-077e-4b62-a913-19fb4dd2197d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "663ca3b2-e273-4ecb-9109-7da8777b4edc",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d2a9740-13a7-4890-9cc1-a2f108e58778",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a6f8fa0-2ab9-4661-bff0-71c6385bf0c8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d61de274-a043-4225-96be-77381cd3af33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b4855447-0273-4a1d-89ca-7d5c2fe42a16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3afa1d95-cbd3-4c30-8113-2d1c38785fc5",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30059a37-9afa-4af4-ad6e-195ccb36d530",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5e0c8d8-a478-4e54-b12b-0ee6f0994d86"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60ac250a-c3e1-4871-b434-e83b68a4fe05",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a128429f-44c4-46e4-9d53-030d92e71236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9245c57-9ab3-40c8-8522-e37a727e8fac",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f81c299b-0b4b-4b87-b8aa-15785b43d266",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f620238b-3821-485e-9a89-094eaff2c33b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5381584d-cc5d-4e4b-b758-cdcb60724bf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "1add382e-f7d4-468b-8b1e-9563177fd143"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb330e9c-ee4c-474d-b371-d90c5b8ed466",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e853e4a-0bd7-4a42-b2a2-3f57a4318afb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ae40da4-801f-41a7-9806-32d06ce59e82"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02710fc3-6e99-4d17-b37d-014a71540512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "98b8a1ab-d987-4bfb-aded-840913517ad2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdbe9474-5a6b-4ba2-93cf-1df5f1d0de4a",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "246c4b77-a219-4a7e-a5c2-809af2ea2b2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e0be58a-09ef-4fd9-bb4f-066eef425291"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "939d5c5c-504e-47e0-b1a4-c93d9f194811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5c7dad04-a846-4680-b297-2c1b20fae93e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "41c26aa1-55e2-4b1f-916e-b62120ab7da5",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0806dbac-bca0-4e05-80af-d773ecf5f36a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0b1bc50-5976-4665-b2cb-fcaaed3ae2bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "697bc973-cd41-4ff4-a286-12f891ffa7fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "749ee5d9-1a87-401f-a96a-d2409b09db4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a05c23a9-42eb-4950-b92c-0018daa8f093",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f943e9b1-86a6-4e8a-a52e-add7ab62d6eb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "31895027-90bb-441b-aab7-914c25cfb6bb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9fa148ac-5eef-4280-b961-06694aa01ab3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "c2c7b439-16dd-40be-af0e-782414865ac4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "7247fb9b-1749-4785-bdb4-7cf8a1382415",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "bdcd509d-ac01-43fc-92ec-46b408d91728",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "23231576-83e9-4a45-97ff-5302050edb0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "353b05a2-44ca-47e5-845a-8db08f3df12d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92d4f9ad-8021-4f2f-8786-5f1d7a52db43",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "8e4ae866-37c7-4806-a234-6d0740f03450"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ee8d7df9-2414-4a38-ab23-58e78e0a1a34",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "aeafd5c7-490b-4854-8935-4ca053327494"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "18447b59-5f23-4bad-b897-2ce0caaf4fd0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ae1920f-1ddb-4c1d-b9ef-1e7927555e04"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "2557c77e-7c7d-47a5-ba8d-76956f8ff4ce",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2f65bc13-a47f-4204-bd80-cd0cb125bb1a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "3ed54785-1eda-4c0b-9a36-373c4930dfd6",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "44b24a16-7d8d-4bc5-b79b-7351c334ebda"
                }
              }
            ]
          },
          {
            "id": "1a7d861d-0c9d-4266-8e05-b813bf2280aa",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0b2d648e-24e4-4873-a656-4d4b7ad8ec81",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "f1b1aebc-299f-4330-a746-c20dfba57e24",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b16f615-e2db-4a88-a956-93b73a076f9f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "0dc44644-3551-4b7a-8e8a-f8079ed726ac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfd02736-53e0-4308-95f5-017929f736d2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4923291-7558-422a-8896-e4c07abce662"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8b012f8e-ba0d-4a9b-ae3e-c041442005b5",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ae69bfe-effe-44a7-a508-d4f0727446c1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b035769c-56ac-49a2-82d0-960a74b887d4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f0135b1d-dfe6-4da9-a98f-e068e4a21dca",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "676b9629-8d0b-42d5-9a73-d36527597ab0"
                    }
                  }
                ]
              },
              {
                "id": "8a7583f1-5f08-4461-b5bc-2a7b552ac45c",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0e67603f-e316-4f94-9eea-f8f9a226fa24",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a87ba8b7-3fcf-416f-a7cb-2d15339941f6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ccdb251-976e-42c4-8874-c8336342ab95",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ccdee24c-74fa-404e-8f7e-29b4aea76ee0"
                    }
                  }
                ]
              },
              {
                "id": "f13fb9e9-6f7c-4c20-8cc6-c6813615746d",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c65ff1ef-163f-4d52-85ca-6ef3c4a927a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c46c8ee9-0982-4ff8-886c-d202e1fc6d2c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b22011d-92f1-4c24-b6e2-3ded91ab10a3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "0e37f8ef-19ce-4721-a861-00f3dd76a5dc"
                    }
                  }
                ]
              },
              {
                "id": "2e34dfb8-1b75-4046-a230-98e9d8b9eb42",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a6a2df3-2a5b-4dd3-8d29-b93c150eeab0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "90201afe-7f5b-4e73-b92f-e3c8c1871ecc"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfc7f5c3-283e-46c1-bb87-868d8a5c51d4",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "58203218-dc64-4b0a-a8ab-e20af8fa2bce"
                    }
                  }
                ]
              },
              {
                "id": "63aa1e03-79e8-4495-b5ee-c10f6923a66b",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b8a48684-272f-4400-9a88-5348271eddc3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9c316f07-6dab-4bfb-93e1-00b667057ec6"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56e1d1e1-12d3-4ab9-85ef-ee13af7b110b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "c8d8c5ff-8c4f-4dea-a56f-203d8f78e49c"
                    }
                  }
                ]
              },
              {
                "id": "9e662e91-4022-41f6-92c4-d473d95d48b8",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "f58c743b-990a-4f08-bcbd-e7b4c70cc579",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1e2cac4c-a0d0-429e-b30d-ce80967b572f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f62f6920-cc93-46a1-9d37-896c961b4568",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "6768be5c-870e-4dc5-a412-e2ec0750775b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "c624dd82-5d2e-40c7-8263-a6999f94944a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "6ebe87ab-7fea-4037-a424-eaf91aa4009a"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2bfdafc7-ae42-42ec-a266-7c041ecb52bc",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "45b25c30-097f-4c2a-aaa2-f5b972c960c0"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "42a1766d-77d7-47c3-9578-9ab7ca59f62c",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "a118d59a-27c0-4a06-be97-2ee3d9b05769"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e40408fb-e40c-46cb-af71-b3bf53d6580a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "91100232-e140-4421-914d-4c13612f3b97"
            }
          }
        ]
      },
      {
        "id": "1794388c-f253-43cf-8cad-3e843997ae06",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "939bcafe-f9bf-4abd-88e1-0c410002ec17",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2088f989-a674-42fc-9e21-02e59ae539ef",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "d73de717-54ef-4f1e-9428-c58c9df2d784",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eaf5e951-c1bf-4cfb-b3a7-6488a35e82b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cde5114-26db-4dcd-962e-bbf42da9f8b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02d61cc5-9952-41b9-aa7c-55e9fbab9a40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "986569bc-4037-4a46-9162-828885a6f0a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05492f3c-93c8-4bdb-ae51-6039b087a0c4",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46cc1321-68b9-4699-b097-3bd8b8650ae1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "520c8fc3-66fb-44a2-a0ee-53a3c3f6ab97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "396a9f44-2b8e-4b49-bede-18d8507add06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "133d17cc-2fac-4022-938a-212fb09da1d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4102cfbb-d13c-4a5b-9d34-8b7e75c0480e",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b606e4d9-2336-418d-8f83-b9b80978601b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ec48b3f-561d-4608-8016-077b4b9ae2b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "650febbb-7eb6-435f-b074-3c05fa9fd657",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "3a68bc4b-5cb5-4b85-a28f-8c8e0c2288d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f66cba0a-2f76-471e-95d6-481c1a6874e3",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2113f8c-601e-4ef9-9917-7166ba4e230f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5cbc171-4c12-4bf8-9e72-4fb3b25e669e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01f25e5b-c1c0-4dc0-8e7d-0142b64ee0a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "db53a132-ba30-41b1-8f74-d8eb71c38343"
                        }
                      }
                    ]
                  },
                  {
                    "id": "816eede3-286f-4edb-8b3f-3e7fe6f2c931",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2780b2d0-6411-453b-8076-6a4ec1075160",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d85da7e-93a8-4eae-95e9-30ad12a377a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e48b9b16-3cf2-4311-9e8a-1cd7da670900",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a89d7740-48fa-43d1-9833-8bdef1f93424"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fff7ce7f-9a85-472d-ac52-7b7e1fb5f450",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "517381e2-2f3f-4dbe-a233-dd6f6ce6fe7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5b4665d-2838-496b-8269-c0eb5f9812e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cdafb99e-4d02-431d-8dd7-bcdcf391b7c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8654c26-162f-4718-b5e8-431f38cca5e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "429fa9ba-50b8-46fc-93e1-303c8fe2f20b",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb150597-4f96-4f00-b736-807fa77f6ec2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a09fdae-259d-4ae5-a34c-79725c358128"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8b9996b3-cfd9-4365-b1bf-b74f5a0a1435",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "f132a4f2-2a1f-4682-9ad0-4be37d676541"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23a05046-9bb5-45ea-ace9-12d766291b7f",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1199e08d-ab69-4e4e-a7b1-6c2bdc8c89d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e1ce511-4a37-4b01-941e-b94b5ca3ebea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b13c85e-32bc-45a0-b362-602e7212bda5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "62855683-c78c-4711-8c8a-4c2aa1077128"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d393b3-b0af-4ab0-ae7a-28ca333e7d3b",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9952272-26d2-4cd1-8f5f-3775837054dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcaf79e4-d99c-4166-b394-ef8d290ce383"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d673569-d579-4e62-81cf-66b167f2dd9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0d23855d-30dc-4cd9-a590-b6a2ea655e3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e0eacc4-c8e2-45b4-9daa-8e0ef302a114",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fda5fa18-3d93-4428-82f8-60dbbe158dd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fd9a09a-eb39-47c4-8c78-28cb5bbdf8fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60378bcc-7766-4423-892d-54482bd4b79f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "000b52c1-9141-462d-9129-a51419ca24d9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f690235f-549b-42c9-bd97-fce1181ad8c1",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "913bb28f-42f0-4fb5-8136-6f75dbe0ea51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a92e21eb-4b84-483c-acd6-08ece0e14365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b05245b-c5ac-4a7a-b354-98ac3153ceb4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "60cf73f8-6c0e-48ec-9858-8f934c5b36a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6464885d-9549-47a7-81c7-8e8ffdcf75b7",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40c3ce60-bd4e-47a2-83ab-ad0af4708a0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50ba8f2f-07fd-464d-aa00-bfa212609b74"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8552f701-6538-4962-9e6c-93a4818b3ff7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "90be18e7-4cc8-4926-9854-61e99c102f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b3d4db8-a7bf-4d5f-9dbf-06af2b90c435",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c33e99c6-a87b-4300-96d1-bd978a43ec67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bbf3525b-39d3-4127-9d08-a3775904abdb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ef0431b-9e5c-4581-99a9-bc5d1c654c65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e58b897-0a31-4c61-b400-3344d5aad9fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5992dac-942b-4748-a84f-a1de8351e73c",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "20b6c6bb-3545-457b-a9dd-bb5b75736412",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1ce2a963-b597-40af-a62c-825e8113e7dc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afcbc476-96e0-44f7-add0-78378fb7e127",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "392837ee-9e00-4f9c-8845-f16f09cb41de"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e8ffeb9-f339-4169-b5cc-dbab4dff45d6",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3bbd697d-503f-47db-b85a-f331de30aa9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b18997d9-ce30-4462-9592-388ec0f7d42f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "140e98de-dec0-4a67-bc0c-e34c3d5887ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a786d516-9078-470f-8ad1-0b7b187ec61e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eaf15434-f9e0-40cc-a8d2-a04bc93dab45",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "045d9cb0-dd60-426b-b034-d66725a9fdab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "43ca0941-d35e-46e6-8ec4-5dcada89b2cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dc5e9a7-dc7a-47bf-9908-2fbedcb7de4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a7f10f3-e28d-4081-b651-b23a20d4a2fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6292ce59-9578-46d0-be15-2d8cf98ae4fa",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0a0f273f-3f70-4480-9503-dcae11efa3af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "029f5683-d4a4-4ffc-a115-92cac2e6f8db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8077e5a7-c697-4754-b319-5aa17ba43418",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bc4a224-c083-4ba7-a986-9f8169d5c8e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6c99bf0a-a250-4522-8b3f-fb8307cc9c5f",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47982353-6d5e-486d-abfc-d72a3049d3b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bd979ef9-5ddd-48c4-9cc2-0ff27f1049e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80fd342c-c610-4f1a-8172-cb8a790e0a5b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "edf2c586-57e2-4057-bb15-2d680bf064ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b67daa0a-cd51-4488-b335-ac2e088edf24",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75dd1bf0-cee1-41de-8777-39ba5548a99e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dff91135-fb02-4a43-af87-1a0368ab972c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e42e7c9-619d-4029-adfb-2a7617736ca7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cff047ea-2ad6-4739-81ea-a7e61d0f2a2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e26c720-019a-4b18-8137-6a01d415a486",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "06c3768d-5482-41bf-a574-9acf4f480850",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77ad236c-b771-45c2-9cbb-fa799ca17a37"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36381f36-5771-4eff-94a7-70d8353e3342",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e339fa4d-bd2e-46d4-b7d9-01d496e9fd3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1453d8c7-5126-4ef4-b9cf-140d35685cde",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b465f9a8-26fe-407b-95be-bf5b0ad19e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f083570e-1eb9-47d9-9b55-c8e43c0c4c2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19d639db-15a7-458d-8834-7b41ef1c0527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "74558a46-f30a-4daf-9785-0f5dab3cb023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7466ec88-824e-4909-b586-8ce9774f2cdc",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7009026-c1e6-47b4-8d7f-2b24041f7379",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc44bdaa-4162-496b-9ba2-4b757c5fb365"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a322f67-8f02-4ab9-a723-c0b9e4c68feb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9bdeb7f8-784c-4cb6-9816-d64ea2313a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35dd036c-914e-4e6c-98a2-4e449bf1e2ff",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6d5f800-89e2-4a6e-9495-a47b8fc178a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc8783e3-01cc-4460-8cc7-40ffae63cf5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa1a51a0-b5cb-48ab-a192-d269859e38bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "51fc5002-9bf3-4f09-af09-1ce75930447c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "580bfaee-f0a1-44d7-b29f-2377a9cd93f7",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3844a0ae-6249-4968-91b5-b0e1615b2ec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38665c8f-29f4-44ac-9f21-37da7cb5141e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb42004-d927-4a00-8acd-4d3d8f2d09bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "34b9da32-136c-4889-af39-17061bf82174"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a16287-f39a-4572-ad8a-71edd523419c",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "221eb28b-1afa-472c-bc99-660284c81829",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6365bc3c-ae95-4245-b28a-e4eaf696fc45"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6dcf706c-4b1e-427a-91af-1812a464b4b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "10316e21-fd2a-4e6e-99ad-9ee35b5e0407"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1393d954-77c0-4149-bd77-6f3080d99828",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd2342f1-02bf-4b1d-8b55-83537164a975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe02e514-fb79-4b82-8280-6df50bd137d5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71772a49-e733-4f97-84a4-f16c9ad4cc2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0c663742-a46c-4c0c-b9e2-ab92adf0cb28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e19000c6-19df-4485-a6f8-a9604d0c27d9",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1cb7f8b-bcb0-478f-9826-cc20dcfb31a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c8588cb-4c94-4e4c-a531-fd703dcb079b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d27769b-47f9-452f-84ed-1905a3b2e503",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0a65b612-761e-4559-afcd-cb62d6ad7655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a648564-5652-47ad-b0d2-e57e6d945756",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "149c789b-2180-4bd1-9e4f-db21008e1890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf24973-e108-41d0-a936-d24728ac1fae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da90e66c-4447-46ff-8267-c3777cc73d63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "92e58e01-a272-4d4d-a0d1-a47a716d585b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7fd7404-4999-44d3-928c-ccf8a6938670",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45c986ab-df19-4b5c-b3df-be3fd65f41ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21d9ec1a-92d1-4c8e-aad9-43a5859fadfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0583b52-d897-4ae4-92c7-520454c38706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "41a18de8-3f2d-4e4a-875f-cf999f3b2dec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "958fe554-4a07-4046-a7e3-ff6fc8de4ec5",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "766f85d1-91b7-42dc-b1d1-d64faa3002b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c69c1f92-81ce-4e23-9f1e-f98673dba231"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dba63271-a95d-4501-bb3b-1cc4eebd82f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa6b236e-71f1-4fdf-b4de-f63afa5a1d8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d3d59f7-8033-4a9f-848a-ab6ab2e5b3a9",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ecf1ca2-b0ab-4803-9a3e-38637cc3c154",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33315d72-ee91-4c1b-b396-e0940f4dc396"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b2b2d6-48e6-4f7b-93c6-3f5002a2c512",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "19903791-2a27-47ff-be79-be1d433e41be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "34ff891c-d646-46de-a25a-5a62726ca507",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0a657b-d106-4503-be3a-d533b3c22bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "739e5b47-2c2d-4683-974c-8c94bb9b1474"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "77d996bc-cd62-4a4e-a452-3cb5174a208d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c8401bd3-0d95-4e82-a085-d2068b560b60"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "43e2268b-2f9d-424c-a7b2-09fd95d16e79",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "0605c047-3336-4ad3-8258-7ed01dbeacd2",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4c032c8-5416-44b4-9eac-7f5596655ec0",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "abd7b516-a7ce-45ce-951c-c07e82a18d8d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36e93ecf-6c33-4ba2-9baa-5999cfc14752",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "03514f8c-0bdc-4cfb-923b-ba096daed96a"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3988a4cd-c793-4fba-8236-400266ed4cd1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3802c722-4e9c-4cc9-9618-4f1619bbb3da"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "28d01c14-3a10-48fb-8f94-83f455910b6e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "24bb1633-f98f-48ed-9417-4722b2705579"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0742a2c1-a6d9-46cf-a93a-86eefcd65080",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c87e0f2f-b4e7-4d7b-b2b7-0d010f3799dd"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bb570387-6045-452b-9976-a6b099c74677",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5c27f02d-5c59-4f2e-8d4d-4793ddb073fb"
            }
          }
        ]
      },
      {
        "id": "792b707f-db9f-4afc-9842-fbdf2650d373",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "edd7a118-2460-4779-b74c-f655b4e0881d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0f5c392a-aa0a-4562-b6bd-46c029b1dad6",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "9eac3bd3-5694-444a-bb5b-32fce40447b6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a789a9f7-a252-4cd2-895b-870cda8d7a46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0a39023-b47e-4c11-89f2-5c472c4a806c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2dde9eaa-c5f4-45bd-9056-ed7eaf96f9f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "28cc1df3-398a-4d27-94c4-8f1af6854788"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4857e9a3-b325-49f2-884b-ee21284e215f",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c87c723-88b4-4c34-b199-d9d103453912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21f0240e-6a5a-449d-bed7-816b457d26ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a22510d-abf9-4f06-84e5-4b8cbb13ee9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "91ff0d27-50d6-4a56-a40d-ee81d305e534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "677522d8-725e-4d89-b542-e28785de6bc7",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50ef7bbb-50f5-450b-aab7-b447295da8c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ee0eb79-257d-4a2a-b0e4-e382054d190c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e90d1d72-46ed-4507-b47c-96280a3d86e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee04c863-ad4c-4fcf-ad8e-16486858c158"
                        }
                      }
                    ]
                  },
                  {
                    "id": "458fe827-de4d-4e83-b4f5-d103351f81ed",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2512b153-444c-4ba0-900f-cee728395a8c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcc59e44-b041-48cd-b200-18b2ad06aa44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2a7fa2-44d8-448f-a811-37a42752e078",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3793cf06-21e2-4971-8898-baf1d034eb9d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "baa1d4c3-1fd7-4b95-b620-b5dbe4e485f7",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c55461d-c6cf-4f9c-a58d-a8b27046ac42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d0c37db-cac7-4b78-b81d-da0ad824a6c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2208fd-a8b4-4a61-8d99-9b74f4e09207",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b050139-0ab5-45f0-b907-f3a158aa0113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b962e66e-f60f-4a23-bfaf-a6de9401e9a1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d1700e8-9063-46cc-92f7-f97b22156a75",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68c58623-74d9-4c27-8132-678b0d2599a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90fda945-ec0a-4d47-a636-5f2901ade0b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c817a3a2-b36b-44c6-9d52-a033474e320f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a5dbb50-98f2-408b-a419-3d3aa55e27b2",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd99d496-488f-4189-ae99-1cc18f73b9af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57da3341-03c1-4856-8945-af3ac752689b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55d1065f-1999-45ef-83a0-193407fed367",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "dee63f0b-4f23-4607-a8b1-8ecb73db631f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f9a360-d468-495e-83e4-b61a1b4fdeb1",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6aed70f-595c-49b5-af53-9575ace5d5f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a2f7c16-4eea-4bb4-b5ee-9c0315ea2179"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cef0fc0-6b3a-4c2a-ad08-5fab6e16b553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "82f1a31a-e4ef-4f82-bb9f-18e7d8321aeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d4838b4-0016-41a4-b766-fdec7b61ea8c",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10ce7042-7ef2-4004-8d6a-85212d1d8030",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df6c1a50-ba4a-4b84-9f91-7c9361cba467"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6de005b5-ab48-428f-ae21-a22ea8a16018",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc0fc344-a5ba-46b1-9564-cd27acf77332"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd6f5e09-d509-4c8b-ac40-1a03639cf31b",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8bcc383-d5fe-4604-8f77-268e360369ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f84c3399-9672-4fdc-b168-c8c584fdd2b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4a481eab-fd3b-440c-aa7a-2ce93b390c30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "be3e082f-392b-4684-8dea-8415a3b8c524"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa568a0f-348d-4af1-a0ad-3121dc40bc5a",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3728c782-04cb-4de5-87a7-5e79fc83d2e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "99d07128-34b2-4dbd-8b2e-da7ce0c88e0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66cfa5b0-c0f9-438f-bc21-8553cd69db9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "6631c0f0-8ea4-48c6-a306-b9838c6dae6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a7691c03-5d5b-4ee4-bcc1-14d850a01c19",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5435024e-49b6-48d2-a003-c34f43a16316",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cd8ad6f-aa16-4a7b-a29f-f0e4ea420b61"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d7c0661-e990-48f7-ad7a-49a180f4939b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "74da90f5-42e0-4eac-8157-a0f21376d26f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f8fe8be-3844-4710-8725-165fd481c41d",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4bddd7a-e9f0-4b6b-9e71-4b2382589d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "741e0a4f-5a6d-4699-9ea6-2b47acb7079a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ec73e4-cc6f-4844-a3b8-6c056e8d430f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "31495060-76b0-4108-851e-89a77c5ce328"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4e2788b-d6a0-4905-8845-6869dab9f442",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e97c0ff2-79c9-41c3-9a65-8dbc077302ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "86161072-40d9-4a1b-87b2-5faf77660ead"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcb0a2f3-6a8d-4c96-88b2-d9ad3d2fb72e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "b3b5c54b-5667-4406-9077-2aaa8772c643"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff763f7c-8688-4c83-aadf-61c4ff6c8734",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ffd1f1b-35c4-4e19-804d-933aac153bce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20e3909d-4404-41cb-8be4-07fa6cc3c9a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e901682b-3e2e-4893-8c70-319d98f7f5bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccc9adea-a942-4919-b9b1-52ac72e4da4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e17bd2dd-d15c-451d-9bbf-808f0b6357d5",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "706b3765-9d9f-4d65-a823-77da1f905e98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b1a75c75-2ced-4144-9d54-c9f0f4fc251f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db78878f-00b2-4f56-a8a0-a5e6213356ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f410c290-b0a0-420a-b834-cfd24dc89153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47467441-7cf6-4c45-80d8-778b1d223d2e",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b210d0-64b0-4aed-97bf-89a518a2a28b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d327e37a-8dad-4cd5-9b79-7a9203441c43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c5d32d1-a0c2-4de1-b70d-9a2ea3845658",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1fbc3b3a-0c38-49b8-bfa4-2cb09dab90e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4a9c4c9-ecb3-4d67-81ff-9926e62a5b17",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "480b78ef-6d4b-4285-b7ef-73d18a39fc70",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52bc548a-ef9e-4a14-90bd-6650bc17fe89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ad81193-ca26-4d3e-9cc9-1c33ac889b01",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e6ce64b2-94e6-4611-a802-fda66b46ed93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87944bbd-7677-4ce1-90b7-96fad64ad2ba",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a48526ac-ff60-4fd1-8ed2-9573c282465b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98bf2f84-53ef-4562-9df4-61d85b3abe9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06490334-f913-4a11-97cd-5dbe5fc3580b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1827cd2-5700-4837-b3e3-abb327e54906"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85bb133d-2d9b-4068-8a6a-9426b7dc28a5",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f74a974b-e3ef-42b0-8b0d-0a254b994be2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d650403c-2600-4c2f-a2cb-de93a14f8763"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dcf38ac-3d92-4e44-b6d2-29f9d33257b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "29ab089b-efaa-4602-bba2-2d6993cd71ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79396d64-7fc2-4fbf-b36e-e91c46af6434",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "977fa091-b5ae-45df-bed0-afc348c63108",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e18af107-0b9d-4346-9f12-e4d1b149be04"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57d6ebcb-9209-4043-9b4f-f66bc6dee2f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2e1230f-8f2d-4a5a-9f80-ed6fa983be01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c52740d8-e050-4bfd-9f92-5aea90725d54",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "269f8a92-5d80-4c12-9ac7-8df24d6f4386",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8aa9b339-a603-49b7-93b3-29f7b7663883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "086163e1-3c61-4532-ab78-8b86e92e8f10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a38d4616-b4b9-44a3-a1b5-f2d0772a50cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1761397a-3cae-421f-b7f3-e7d10cec26ed",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4fc97d5-cd1e-49df-a930-62d6d1ba82d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37e759e8-a378-4e7f-ad7c-7185e34cc32b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebcc35c2-4f03-4e94-8266-a822db8c7f51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "91b632f1-5bdd-4f04-9b61-7e7ff231b74f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b7ae78a-baad-4e05-8fd6-a4846882b7f8",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e385ad2-52ef-4fb8-81fd-539746dc3f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d267bcb6-152f-4b84-be18-d4b517236d19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "297052b1-863d-433c-b749-7979298bfe4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20f2341e-0cde-4d52-9813-b14cc8627113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aca083fb-3ff2-4b75-a800-5ef3f2adc27f",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9d19be0-c7d6-4c30-ba87-ce931ff04471",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cd0b8634-4206-4acb-ba24-106a2f8b64ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa9a1fd7-7a60-4553-abba-8a9e1455cd39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3946d509-b4ef-4799-af2d-db461c4542b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f97df128-82c0-4fb3-b6ff-99ced813b8af",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7619ac08-6009-49a8-ace9-1d8538ae57c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58cacddf-ef73-4b7d-ac22-9216bbba8549"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26be0859-0230-4425-bef4-7e06fea28724",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "040dcc3f-1fbd-46bf-9d5e-020ad9a25aa1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bf1f443-e014-44e9-8dfe-4ec7dbe8ef16",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d264879f-fc22-4174-942f-348a565d6efe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c509a2b-5dae-478a-b78d-7f193eb52b9e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6ff9568-d7d6-435e-839e-77bdba64833a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49f1435c-e6e3-4c80-b892-d7f7561d04c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0026104b-e735-4ec0-a681-d394fe409a5b",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a2bf37f-6fca-4295-a257-0134242b739f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "398954e2-24ac-4c7e-afd7-2d124009bb4c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d76b494a-9364-45da-a060-07f4b0d489b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "47b32e00-4e7f-4138-9ed2-37d21023d956"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4e1a5c5-4516-4f8b-b106-c6df43b6861f",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebac4624-7945-4993-82ab-a5056daa4d20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73278b09-bacc-404d-b1bc-6337f4753e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce2c576b-8465-40f2-ab92-87ed7c0574f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "33b645f7-0cd0-467f-b03a-36d64c97ea6b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9763b4bc-1256-4348-a070-e6567396c5c1",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "24a1f26b-a6d7-49e6-a13a-d8ccdade76b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2b29f647-2082-4282-a71f-17fc55c35e39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "81a15f32-0e51-4f97-aa3f-ea594d50bc38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e0a31d4e-9611-41ac-963a-3ed1b3459e4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e365714-66ff-4e0f-b4dc-bcae4d678675",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37d32faa-edad-4ada-8671-ab9573230a90",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ca23c5e9-21a8-41b9-a3d3-6d9a8e82b4a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c99779e2-afa7-471e-a9ad-6d9b45537ca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8c1bb06d-e0d1-41b5-bb6b-c38511ba1a7a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88a3045c-3127-479d-9086-a926ddff17c9",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e258ab82-bd75-4807-ba7e-1441b2f64fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4061196e-eed2-4832-abf2-f42f93a4565b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ade82e0-ae82-4321-a8f2-997a2c81b099",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c0bb077-fea0-41e9-ae4c-67b9516f5c4d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd511b1-906a-4569-afd6-9233f045f074",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43f26645-2ccb-43bc-abf1-24cdf7bf8ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6fe5714-64a0-432e-b807-d6321e26003e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50603976-ee5a-4c7b-9b61-973a15d38de9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d79bc814-1594-46db-83b3-493ef95bbb3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b7e8f75-540e-43b3-a1c4-3111f258d29e",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e7971a3-56a1-424f-bfa9-881c40f2f580",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddcc918b-e56e-4953-b8bc-42d63741af4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfbeddca-29de-48eb-8f0e-b0771a60e0cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5206decc-44ce-407b-8700-30e980ba28f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d470707d-d8a2-4656-b1bf-8f18168d6b1e",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea150115-8b0f-4ed1-9747-871c198e0ae6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4985eaf8-b182-488c-8841-8f41c530476f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61f21fa8-6d0b-439b-b646-2f987fe4c69d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "43e6d01d-4e82-410b-9edc-b2e1b7c801b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78a4f932-2c13-4a06-bae9-40866f051f36",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9b78156-84bc-48ff-87f4-4823c90c2d39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ac43bda-83d6-43b4-b8d5-c21cf47b2f68"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "553dfc97-02c9-40d5-bbf1-69dce1544358",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dffb10cf-7098-47f1-83fe-cd7e4673e291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92be1016-44bc-410b-afb2-2892b8088ea4",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8463b8dd-8680-4361-8328-ade006c64398",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e1180f95-b329-4cfc-8bab-1be8965b6066"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "832e3fba-ebf0-46b4-8d2c-8e67dc87a009",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "86218c1e-bb39-4d8f-bf10-86117c968e8d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "ec42cfd0-ccac-4688-914a-ae0fb833a709",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "5e1b3b66-da6c-47a6-9736-0f3351512b8b",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e109fee-3594-41a2-a477-3955c9b5ffda",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "8403460b-af1a-4b4c-81ef-3d161bc03385"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de0468d8-148e-45dd-8db3-e57a6a41b0e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b3d85378-8458-4c87-a864-96270d5dd640"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84b23eef-2bd2-4574-9f30-3c6598358e49",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5855d573-0370-44c8-b696-5ad7598417b5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b49864bf-ef36-4cc6-9087-371e2b51bc52",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c514b707-1733-4389-a2ee-3cde79cb7c3f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2ad9fe09-1dce-4827-8249-647634907bd3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c22b57a6-32e2-4223-95ec-53d7bc9e8baa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "06dd8ecc-7f07-45b8-8d7f-2f8ef2c5f2a8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7638d300-0663-4890-b6b3-d17335b9b36a"
            }
          }
        ]
      },
      {
        "id": "383f05f8-1163-4feb-b70d-020f97ac81eb",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "4775f701-ca9b-41f8-b27b-b39fe93478b4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e8fbd05e-a36e-425f-880c-9d65f13aa36f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "aa51412b-99bf-4405-8801-39582ccf1def",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b3807ae2-e733-42c7-823e-e621c891d561",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d653e1f-a91a-4c11-82de-866ac9cad94e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "106b81a4-79e4-4f2f-a390-ad23e6d3a515",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eac2772e-400a-48df-b6ed-eec227602be1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09de6b4e-c7f0-47cf-b738-db221248eca3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c150200b-31a2-43c1-84d8-65e9959ea193",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c0bf7e-b5c3-4d3b-bead-574fa4352ff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "123d2559-5f4d-4afe-bf52-38affece40b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9b4efec-1d6e-4bff-b1d9-bb38eb8259e4",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0485929c-bb62-40bb-a83b-7012ae4aeaa0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8521c14-5b30-41d0-95cb-f1ba519ddefd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e808fe10-eee6-405d-a885-e0872287bc26",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96c6331-d88f-46d8-a426-4b3d7b982420",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2aef178-8161-485c-a664-6133954dd593"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b24f6c0a-f514-432b-9125-30565514c958",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b3eadff-9604-475c-bda9-a6d02e1ade78",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99950d78-2725-4b3d-88f6-4fbdd2d0c3c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83093558-c887-4eb6-8bff-2fa4025a44b4",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "420a3f4b-1fd4-4fb2-b7f7-30826e3aa51c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68da0878-bf1f-4d5f-ac49-a3f6d742e737"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a73f353f-bf25-4b0a-b511-0001c4c6f5a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6d14537-c9df-411a-bc50-3efdd12a694b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "caf9ffee-bce8-4406-980e-53aa863a1131",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8de79970-d770-4e31-95bd-b9801cd94459",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c04a5cd0-9b7f-40be-97d6-3f03f8888835"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "99428cf9-737b-4c97-ade0-40bb77b44b73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c691cbfd-ca81-4df3-901d-cd2f80a975e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45a87d53-de0d-471e-be06-ca06aaf2ad08",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a80f6605-5328-4dbf-b687-da914899e931",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ed0f091-bfda-45d3-9eb2-8d0bd0c03922"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8792935-e35a-427b-8088-40dd14f0c887",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6ead1d0-8813-4a1d-b7d3-fdc2f3defa5a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea453566-c4b5-4d3a-a892-80c401208e60",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7614e79-76ff-4988-89c7-d182f234e4d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "820e7735-f93e-4ad2-8edd-3b47e41ed20c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba68698-c32b-4454-8704-6aff298f2bee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acfcc32c-6cdf-4f70-a681-2fdcc928920f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e28a85b1-6f4a-4bd3-a5fb-69f01f2c1b77",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7998e2c-6279-4035-9254-08e7236e47de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "667b52e0-44a4-4ec4-b0c9-7326f1c66653"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1089303-ceb7-4e64-905c-1a18264ae8f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "58c7e344-b55f-450e-847e-18f93cf865c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8847aee9-805b-4295-82e4-ea21a95b0646",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe39b2b7-842a-4399-931a-5a2778761222",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06307485-0ef5-41a9-825b-86535ec625f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0d9fabb-0148-4df6-9c8e-2b724e859171",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "03d156a5-480d-4455-b063-cfbf44ae97a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11d62dda-f561-4180-9d9a-a277e6276971",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee54b47b-ae62-4fe6-90cb-36582658b648",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29930d75-e97e-4a26-8a8f-af8e1b7f2323"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b8042b6-4268-4bc4-93dc-1fbe08c55842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e4b45686-6ea6-4d0e-acbd-e0e4427b5291"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d77f14a-b6c5-4f75-9297-3bf2b80fe6cb",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0b23f5c-9fd9-4f1b-bcef-bb9c9252b3a5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6fa2a9cf-acc0-4a0e-87d7-d768aaeeba3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "769fc141-363e-435f-a578-82e6baebcfbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19675f8c-c282-457d-be90-057315ce24a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa7074ba-66e8-42e1-a0c4-23cce2088d2f",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a567496a-7731-4b89-a515-bf1b52c0c10f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6ae1bd9-bcc7-4b3e-b2a0-43ed6586c055"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f26e3ff4-739c-4f16-815e-b4a04e64872d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4db7ccd-2aaf-4f23-a0cc-74fbef1a58b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d305e8cf-b3ff-4d05-adbe-286a70ad2d65",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c92439a4-ad82-4d7b-bee2-6e15689d4c62",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7ffca9c-407a-4265-9b43-be43da2be3e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa6908d4-2891-47ca-bc40-e932325aab1b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1326f5d-452e-46b5-a853-388b1aeec36f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "409d29bc-f409-4bb9-b51f-186bf6a7a483",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd1a90f-4343-4449-8fb1-e681da6e55f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "025c313b-9eb4-4d51-9143-d739195f1491"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c36ffa-bda5-439e-9291-efea56819954",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef8cf380-cd77-4eae-9b52-1a1dbfc28742"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60046d49-191e-4b0b-9041-2fca3fc6f20d",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2507a8-bec7-451d-87af-ea0820ffffbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b577e349-e655-43aa-89d6-e4b6ec071e05"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42e88d0f-ed11-4a95-ab6f-4739746dd399",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b705708c-1674-4b2b-af33-5b9d486fe297"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a53ae5b-b74a-4815-81c1-465273d53ea3",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbd789f7-f1c4-442a-9a36-e28b5a106d4f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "200596dc-338d-4464-98e9-734738c4f70c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf079745-280c-4283-95e4-2790e9a5cca9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d6ea04f-4c60-438d-920a-a3baeb71a969"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32b02140-3b30-4e80-bdec-4d2cadf8cf8d",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aea2ec8-9d74-4654-8603-f07f25023094",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ca1b3d5-8034-4c77-a522-e1d2efa8d37a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a43380e1-79a5-4a51-98d4-b73e1f6e0989",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "25ebdb85-5e5d-4835-be37-da6f79348fbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afd78fc4-6069-4fb5-a787-fc1d78f96d68",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90ef113f-2b70-4eb5-8893-751707d70cd5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3f800113-ed0f-4f6c-99a7-3e79d3e57907"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efeb39f-aae2-4a38-b5fa-1ba6ac60f375",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5370c6d6-c7f5-43cd-b7bd-aa1b29a67b17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7d355db-aa6e-4976-ad5c-1fa23c23678d",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c76c466-1c5f-43d6-9063-9e1d8e6f4145",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1deb86a7-0ed3-43e1-a95c-3a9b9874e485"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22e74cff-151a-4bb4-8df0-857f8d22f233",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66bf658f-8037-4c18-acd0-dd0e2c6a1ba2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e67f6af1-e628-41c2-9aee-eacc772c19cf",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fab91014-39fe-4528-9d1c-1e4f374d5d77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "108df7da-c158-4064-b808-3826e8f41361"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8243ca0-8bfe-4a37-b538-bf4e3f638a25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7973817-e094-4be8-96c1-5335212e12eb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4294bbba-d7ea-4f1d-bdec-0de943d812e0",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40d93213-7952-4d3e-b878-f0d0667a5e08",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "983acffb-f2dd-4608-bd7f-c62ef81a91f6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf640967-fb24-4ec3-af9a-02437ffe61a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8fca1bbc-ee2a-4fa3-80aa-785b14601ae6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9ccf2cd-2745-4c3e-be3f-cc1111657c19",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a689fee-023a-4f8e-949e-736fddb2cab4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "684d8739-9882-4b1d-94f7-16cef745ec21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58ddc4cc-f02a-4874-9196-3f808d75867d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "10f2597a-a55e-4125-94d9-adb08b57a9f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "261d3cdd-36c5-49d1-8fa9-561f24a626af",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a9468d1-f62b-4c1c-b40f-ed19c35382ca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fa4520a9-1119-4255-a8e5-73fbec8b7986"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "079926fc-7c5c-4674-b092-f5e5bc712d41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3625d236-2490-4645-aa90-74e6ef7a1464"
                        }
                      }
                    ]
                  },
                  {
                    "id": "850a20a4-0047-47d2-92bf-03e6d782db9f",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7486e964-a24d-4aa5-ac04-ea1c5e7ce46a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "08b0892d-4562-4738-95ba-c510f57e4312"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cfc0544b-8037-4fb6-91aa-56b4e25e7901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3e20d5b-7124-453a-8c55-f48421a764cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f13c22b-859f-4178-86c3-63b69cd4e958",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfe32bc1-1eac-4dbf-9fda-7645c716c097",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f3dd92d-8e61-4670-86a9-d75cd63342f3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fcd5bb73-45fe-4033-b050-606c7381c6d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "884d64c4-4993-4d47-8cb8-7df2eec37ebf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "972777b3-000a-4d48-9007-11b926af3130",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e6944fc-cd3a-466b-a612-7936715210d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7bc7183c-d72a-4cfa-bd20-08edbf24c77b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f539bab5-9be2-4299-a558-34e974e8f279",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "236b25a4-c75c-4771-8127-96294750e9dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "167d78d9-d58f-488c-a10a-31df42b65dd2",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dade9814-2ddb-4b80-a98f-eb8c7d0838f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6caaaf3-680e-4504-a93f-696fb905c535"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7aca079-d30f-4053-b50e-9996556de127",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd1b6c9-ca59-46a7-9d6b-a276e5734f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc7f473-f301-42dd-a366-0b4bda1542bb",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7775954-985b-4d2e-9ce1-8f616edbcd3e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d3cc3a59-67f8-4ed9-97e4-0eaac7a02fb1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66977f81-b616-4835-b1ed-1cc3ca3db2a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42cc0fbb-eb73-46c5-9cb1-8ca25ffb795c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3280529-415a-4412-872c-f08636f2ac63",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "249a1666-a2e2-4bf3-a5ec-eaa5c9fe4dbf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5407dfb0-7fc3-4cdb-a8fa-fe9150c64351"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54cf1843-52ea-4af3-8048-a3b248edaa22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd66a4b1-1a2b-46e9-979d-89dc96bca1c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a169986-cc21-4e02-a107-f213cc6861d0",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16ca65fe-edd6-4a20-90f2-9ce2107ea14d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "643ea307-dfb6-4053-85e2-39413d95c883"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "491011b5-1695-4756-814f-b38511b2cd95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4c8b75c-802d-47e0-9fd8-0103f474d9f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2ff066f-61b1-4d5f-bfab-5d67880b2e2b",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d641841c-cf41-41d1-8494-c96c90835cf8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a10135c-be6a-4467-b6dc-4279ffd7f439"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed2fdbe8-785c-4231-9db3-2c954821dd01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f705e825-488e-43ab-adf6-edc9c4fd6de5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39c6c10b-0e62-4098-b7ad-699d5013c936",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed9555b4-8cd7-4ae2-a467-4893ee79db10",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "64a1aac0-983d-4353-b4d6-f00b57f5a923"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0b9942b-3c04-4aee-8ce2-a1f3ffd8ca15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a81370d2-d2f1-4dec-87e6-f49e75b47b25"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4ec910b-f742-4b08-8ea5-d3f3da605a20",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc6beee2-c011-44ce-8224-b549508ccc80",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "231e8f1e-62f0-469d-b355-e245fbc49764"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df04dd9d-dc4a-42b3-bba2-b1077aa4a392",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3838aca3-d924-430b-b65a-ee8f43cc6453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d0821e2-c9de-4906-8bfb-b79505049f63",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9a9c439-5fd7-4d47-8509-750beb45b60f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8edbaadb-b5b7-4506-bdf1-38b3a05a8e1d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "51ccad05-e2a0-43c9-92fe-d6b8d3658ef4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66bcb323-f7ce-4ff4-8f7a-f5581be9d838"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cc23810-5e42-488a-b972-a2a79f08d961",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ef09cbf-8a1d-4ee0-aec7-24086619313a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6fa3f1e-1c77-4521-97b9-8341a5a2463e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4690ae0-3f9f-4e70-a3a6-0080a407eac4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6582683c-5bfd-4a75-be34-7a17cee73f0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7033892b-f7da-4786-bcaf-c22fcb4f0305",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f605be8-500f-4dfe-834b-dee802b4a9b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d711d567-fa7f-4927-913f-90ce93851ede"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a592b62-65a1-4a1a-935d-655cb8e0cd47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "97e2030e-908f-4d13-a3b0-ffd1df6c2785"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3aa6c0bc-48e1-4fdb-9574-1eb2ca6f86bf",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07281a0f-f26b-4dbf-bd0e-f2b63e2f9ff9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9456d967-feb0-4563-b86d-0bd9e5a98c19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0873841-fdc0-488b-a432-5feca3621b16",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbcba5e6-a746-4ed0-a17f-39a5c269f6a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa674644-aedb-4fdc-81d9-787142bf6fdf",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8fc97ea-6f6d-48e7-a284-01d2994e4e02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "84d92b4c-957b-4300-87a0-f3d8fcfc0e0e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c2ea172-12d3-47fa-955c-3259ce4347ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7eb002a-b983-4fa4-b99c-087cad2f42c7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5c0bcd5-3f79-4e72-94f6-1ed628a3ec60",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d753e33a-f96c-4424-8185-fd58096d6c56",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a60203c-7096-45e2-adaa-0aacd7da01a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "853b59dd-0ea1-4e16-8cc3-732b1efc0c96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ef7955f-f642-41c0-ab80-49bf3ec36d58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "10c42e4b-f74e-49ea-8a0e-2959a0b06638",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e482d32-0a3b-489c-9120-3f0c9143e118",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cdab01d-1fb5-4524-8a4f-abd267590a2e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93e3d5d7-b328-4003-9db7-72c8f7c2339e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa59b09b-a8e5-4612-84bc-4652429f0e20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b35d5d2a-f232-4535-ab3b-40cd09e8df52",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06162af6-3467-4ef7-9347-292ee0609a5c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62d4915e-2358-4ae3-993f-a621526b2290"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d921b53b-338e-4b95-813d-094cc5747fd7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "904e549e-91e8-44e9-98e4-074d07140ed8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "792ff34b-1e9a-4e33-b639-ff0f8bec5118",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b26c935-adc8-47a6-aeb0-66e090ce9df9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32cd8e2e-4838-4adb-aa6f-bfd640e23db8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6444efd-4034-4ab5-b4d5-76d00941eb22",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5420510-2db0-4cf1-a453-91055fdab40a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04161fa1-b823-4e16-896a-b514779a11b5",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2edf7a28-1897-4b4a-8114-39590ff3ef7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b02429c-05f9-4582-b1d8-554882d14f42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e25ccd2-d69b-40ec-bdd3-a51dc51ec6d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "729b43cc-0cb3-4238-bf7f-409aa4b4fc8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ece6f11-2820-4900-99d9-c6ace41330eb",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4977b887-aaae-4681-bb1f-a7542cfc10b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71be7ff5-c3bb-4436-ac4a-c1321238ef1b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "572c3924-24a9-41f4-b6d1-0d6c05b48d60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a75e5980-b62c-474b-bdc7-bf50c5235265"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11064a58-8ef5-44cb-88e8-46ff71265799",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5e78863-c6e0-4aeb-9e10-d469bb9861f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7649d6e6-707f-4c4b-bec1-667a6a3fa7d0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "45f9d475-4f48-49a6-b74c-da93a714457c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab91f8f1-59b0-4eda-8cb1-f19b0c233534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8929592e-ffe2-4c0f-97b6-70436226e830",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "193e694d-0729-422f-ba25-dc565afc17db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29fa9e2a-18ae-4e12-8b81-20f2345f89be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "530ff7f0-028a-4122-afc6-b9cd7357af2b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6cba5fe5-b29b-4512-bf8b-8d90ffeaf620"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d6a5747-bad0-4816-9d90-d3ada40810ec",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13cfd80f-572f-4219-a421-46f95b48c285",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d455f495-db23-4125-b2c0-d159f6839bce"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee9ee826-2d5e-4e95-82d6-6ebc8ba0f6d4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee0e9746-4dcb-4582-9ae0-91c560fd72ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bd85818-62e0-4cc7-9c5e-9b2cde564f8c",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6c5adcc-6eb9-495b-b3dc-fb93b8e2c41c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee4b767a-f7e1-4eda-b620-61a15c6a96fe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dab59d0-cdb9-4672-99e7-3b749a100b54",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ab24720-c82b-4101-8dd8-bdb34d214162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a574610e-f7c3-4aa9-a7eb-4baeb11747a8",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b30e7f8-8712-40ae-b7ae-50fc567360f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c0e39f66-a4c6-444a-836c-1c5b437452c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "817a5249-344a-4006-8307-674a13e9f9d1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "62ce5721-fb47-461f-9bd7-e09bf23815e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aebb8f9-813e-4fa2-8a7d-f57411085b82",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94000f17-c682-456b-a897-bfab9e68372b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a836640-1100-4c80-bcc8-96d5d23a72b9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "493006c8-d09c-4b12-92a9-fffc3505ea8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df1824fd-7169-4fc8-8952-2fb27e4542dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb94d8a9-bfa8-4e39-bc35-9f54460efec9",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06747c64-5deb-441b-a08e-9b7332af7edd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dec5ee76-1a77-46bf-a4f6-a80601e3582a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e46359b-693a-4d46-90ba-1e4c71d16500",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5561ee39-4681-4ce4-be05-af2f55942bf6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3bdfce93-a6ec-4d24-b1f4-e68a37786d0f",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a7749550-2260-4823-b917-7c3960fc0a2f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffae3c19-2b60-469b-8053-d98ce6057252"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "374dfff6-f0ad-4444-be6b-c9d415d21866",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19e3dee0-59dc-4037-a7ae-3f011fa429aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9a8c294e-b389-4092-869d-a1c8eb2e967f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4d5baf45-8540-4860-8775-6effcd8bd5da",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5cd0cde-af7b-4fdd-ae6b-ed4d1a95c257"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79e6f550-7915-4113-a13b-0ee6ae48d732",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c10e8c6-4cf5-4232-a4a4-30793625a866"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aab2a349-a50e-4a44-9419-bb9e812baca1",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f33a779-7704-487b-a6c1-639c1594b918",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "028ea48c-f812-4cda-8d06-135688245b7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8475e0-b48f-46e1-8fe7-e988e7d53e47",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf2c7ca1-cd1a-47a0-8640-64b59c12ebfa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d3d58f4-906b-4902-8b12-cb79b600eff2",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf75095a-1f2b-4d6a-b3eb-3e01a7d53f61",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c484cf2-a75e-4dc1-a7ae-a0b49d8c3d43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c4985b44-cdf6-461f-8ca6-8ef7c08e9a92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "018a417f-13dd-4810-8d5a-ce5c687e9738"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d202f4a1-2e85-4bf1-9433-94ad9e6c6711",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6327f88f-01ef-4df7-8490-1f3dc0929537",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57bdace1-d53a-4d54-9e1e-24f2d5de5722"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b801e001-e9f7-4916-8530-1a21c1975388",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d0a4c97-70c7-47fc-9fb9-0556501d1cdd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e5697a-dd89-4e06-af73-1c0d25f52ce9",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4506365-5a3f-413b-8192-deaae063f92e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de7beede-4bc4-4a85-94f5-19d9782a38a2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "07ec2f26-36b8-4c5f-b7a3-97b7baf7fbb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a15d0fe-7145-49ad-ab0b-cad2c894a3a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2643e6e-8dc8-4c5a-a32d-5b2754d6f928",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00e81786-09e1-4ae5-8f82-cdbae90494b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad4c073-b784-44c8-bbcf-3dc97bd6a97b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1110088-c86d-4e54-a491-70f3cf6671c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d373ad8e-5ec0-4991-9bba-90cb0c2c6c7f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c724158-6ab8-41e3-99fd-72fb612d131f",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "038c1d88-1741-4d6d-98bf-78b461492fc4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5bf42823-22ad-4869-ad2c-5e9204033373"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a2aba36-57f5-4c04-a9a7-67a09bba4a92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac1a095a-3612-4861-8b36-1a95a562a3bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75656fd3-54ae-4e1d-935f-c133a9ebce4f",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a0eb49d3-6e83-4128-a2d1-6da3e6a42fc0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "54fea606-318a-4658-af95-cb18e71e9559"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe6872e7-2b40-419d-ba16-a9a5fb6ead11",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0a5720de-fafb-4b4e-9325-54c4e7d58081"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35f41761-2c55-4259-93f6-425d3297c291",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e722b156-c0d0-40cb-8889-6c33991c13cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73426092-9f3a-41b6-a55a-8ac0a5e79bd4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b90c7c9e-5166-41ac-83ab-eef7be1f9b93",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e7afd0-3e63-4a51-9cf8-3a3bf51a2eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ee5142c-932d-45cf-aec9-b2c1882842b8",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "44783627-9a15-4a0f-a21e-ca1921fc94a0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4c68a46a-4e6e-4215-bfe7-fbcc54c843e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e18439af-c033-48bc-a4b3-3b8fdda09e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32e3a2e8-7590-4da0-bfbe-95fba85a009a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92439b2a-a99a-4ed3-9fa4-760f4ff0fc8f",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6beced0d-e7a5-47b8-8280-9b74cfdc6405",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0ed33487-6e8c-4bf2-8315-ab1421243c36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2abd064b-bc85-4f32-b9fb-a8f79d48d4ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8068a7f7-4535-4919-aa60-9ae9b16abd74"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59cca090-f072-403f-ad41-a3d7d57929a8",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546187f4-e6f9-4399-b12f-4197fc6e3b55",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41d71453-91d6-4226-8b95-574d48a29d08"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "79fe7321-b4cc-4864-8242-88da000cf221",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a82f320c-80fd-4b98-831f-209ebfd9a4b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70696244-4c1d-4b30-8244-6f1acc0accee",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0c68181-f176-42f6-96e1-7f6f6d43809d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "208a30a1-0cf4-4f2e-a544-e7c34a36dc36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efdeabee-3e39-494d-895d-d4083635e1fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5b6762f-04ad-4a82-abe1-24d2ed4ba770"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2a14b2-1fd2-4fc8-bf6e-c9cd916d72ba",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d34ca392-8b79-44e0-a2b1-2622d4a27492",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "035498f1-b51d-44d3-852f-862e404c41ff"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "040a29ab-6fdf-4996-b236-b6ae6bbb85e0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9746750e-6c52-432d-b3e6-cd4ecb5cb7c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc3d000e-5764-4147-bd03-f0d92e677499",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fa95796d-07dd-4a1f-a97a-0bfac8bbabed",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e74ccf0e-ff22-4bbf-b6e6-268d55aae3a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e3b4076-c8a7-4b51-ba1d-c53e70dcb833",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50dea157-cdd9-4ad5-b0f2-d61d6e20308b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c16e3a-9c6a-47ba-9e21-bb92ad02d0d8",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5ed8f77-841c-4667-868b-6739855e74e1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "42544a8c-db1e-4f94-8627-747e551ec4aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe470b3b-50f2-4af0-ae7e-de8ce653dc5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b19af5a-5487-4220-98c7-99b222fe175b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc273c79-ceb2-4052-9f42-60a38aa0cd1d",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a381ea04-d951-4372-8f84-e8c41c13c604",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c738b219-4b8f-4981-9f73-87f038f8c712"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa5fe1e0-bc83-4d74-a24a-1a0a89acc638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ffc247d-5b2f-40d5-8546-17117fadcf8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eae0a7d9-0670-49d4-acc1-acfb438df51a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3031a000-9957-4c2c-91cc-78b7166e31b7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7b3bf103-623d-4f9e-8acb-fe69733859de"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c15a911a-a25b-427a-90dc-cf0ef58a3e94",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0b69a751-71b1-4e13-aff7-d9aa795a6f8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3318442c-b1be-4057-b742-8591342fa06a",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12d28aac-d4cc-4124-81a8-e856351ef62d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32e1316b-6f9f-457f-a024-fbc81aa1dcc8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "626336f6-be3b-4ef3-b604-23959efd137c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49cb5fb9-1397-4cc7-85e9-40f4f082cc57"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4ec3ff6-5c32-4477-a9d7-2239782f1ed0",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d3f3197a-f855-435b-8cba-43249f527a52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fda63196-f698-4916-b8ce-eaef2e8371e0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d9863ec-81ce-4c2d-946f-44bb91fa4cdf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7710678e-088e-4cd5-8f16-23f3789cc7e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b361cfa5-dbe9-463d-b215-00826801a2bb",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f5cbbc1-42c5-4c7f-8094-5179c6050382",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f0f8fd3-e445-49a3-9e81-52c7dddc0f7b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c9c909a7-9379-48cc-a60a-8981a9c1a58d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d52933d2-85c9-4217-bdc1-95e47974de53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "94961702-d5a4-4587-a655-29697576ee78",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4315bbc-b62f-4e5e-8c10-a23801e32c48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f650abbe-dbe1-4a79-924a-1f1ddce03f7c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "669ad60d-68d0-437e-b504-c7aa7f7ce355",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e779a51-c93b-498d-a85e-aa322fbd1cb2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c91911b8-c842-4c21-b773-2cb818696bab",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43801d20-914b-4be9-b577-34f05c4c3159",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f20c236a-5b95-427c-9158-fca3e7f5be14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1970617-5e8d-4109-8de1-85f2859fa1cc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99e47995-1ca8-4e90-87d1-5d2f85fa1edc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "868bc738-3b15-4466-ad06-6b2d01d4eaf1",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "951c9e4f-e396-41be-a4e9-d5cb1a7c3bac",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "405684e5-a192-4744-8f3e-4609d63997f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc6aa6e2-46f9-4593-8d54-1adba914d186",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3aa047f1-cbcc-4d89-9c26-b6cf7c2a52df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1afc9664-73da-4e74-b5ba-91f53657d0e1",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5e5ca83-2336-4153-b41d-ac00c801e75f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "33fdc14d-38d1-4f43-8b70-687d33b85761"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "780ed6d7-8336-4f1c-9133-1617f29eccf3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91d7bcb2-dc3a-4a7b-9d5a-3f20a33a9eed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ebe8f7a-967f-482c-8b37-cd82eb4162e5",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4b9e2b2-530c-4dd6-a054-d10462627d32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ce614009-069e-4de1-bc8e-d21292369abe"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9031ebce-1aa3-4c5d-80bd-c04cc232e6bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9644ef39-2387-4616-9539-d9225d0c47a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21625692-7578-4343-ad26-6135592b32c7",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c3f085e-b461-49bf-bd12-23494fcfc391",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "11140c60-90bd-4677-87d1-7ef5f10055cd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b5affa-4e1c-459d-8023-1c6eadf00078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b951fb8-e29e-4ad7-b5c0-f3741fae1999"
                        }
                      }
                    ]
                  },
                  {
                    "id": "645ad5b7-c41a-49e3-8109-dc827c80da71",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ff4fad4-7b2a-4539-9398-6cad27f912bf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "36f206b0-bc21-405a-b931-b6b9d726ef14"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d45d055-2bd5-4408-a6ca-d9d3e6235a37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "67a749c3-8116-444a-ada1-ff0ca9fb3db7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b918b4-22e1-4900-9022-b420eb5448b0",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3df90b0-7d27-4cc8-9366-267b080a3ce3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f5a72a74-362c-4114-9b17-d9f5fbdbc023"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caa0c308-3eda-4ec0-969c-b0c6c74f95e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47fdff6e-afab-4766-a029-13fbc4ce4a0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48073b0f-99de-4f1f-8e76-3e5f07117a27",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0e34d55-1067-4396-b66e-d405988e7168",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91e0ec4d-00c5-4b92-9542-8901c50c8b71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb53305-1c2c-4fd6-99e0-f4abb4573825",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "766e4b9b-38c4-481a-8031-8d062fc581fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "19c04a42-65fa-4d51-bb50-c65e3c8b18c1",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4664f83f-973d-469d-b2ac-12018c839383",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1d09053a-9d36-452b-a735-275717a728ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9295ff7-b4d6-4411-8a04-9b4330813be1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fda02a89-0680-4ad0-8764-81f6bd696c7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb9db356-2ca6-4710-95dd-b6d62b2baf5a",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "135ce200-acef-4afa-973a-f89e894f5294",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b5ff7713-a0b7-41b4-a531-7170df594ae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3bb1238-f5e9-44ad-bae0-4241aa1d29ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "411c7323-699e-4668-a238-81926a46eb50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16111e27-1f0b-42b1-a1f8-477cd96394d3",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1216432-f391-4805-a2ae-b2963f5064a9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6f8ec67a-8423-49f2-9f16-46e8bde23e19"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db3f015b-3ff2-4019-94b0-a64ca71b19bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c6342047-bec0-4d7d-b52f-4c8ec942ad63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d5c26f4-6281-4eda-8a6d-7cf7b9be8680",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abf40ada-9cd1-4f4b-bc4e-943fbac4401b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "481202ae-9189-42c0-8b9b-96035bd9db3a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ae434a5-b152-4031-88c8-be87584ccd4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16235c74-30e1-4d8c-99ae-0bad6e19a610"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1acc1f88-6b7f-4e95-a620-caf77eb45abb",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dddc8763-58fd-4e7b-a1a8-33bc9b1d12cb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e426776-89fe-4e79-9b3c-8a08b38c9638"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce9b96a7-5cd3-43df-9e6d-572fdea1b17e",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5bdd2d7-d495-491c-bad3-e186e74a95f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d6f4348-d9e3-47d4-b9ca-d742eb787585",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7274d6c-06d2-434d-a6aa-b95db0b20d23",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7f41bf9-f35a-40f6-880e-7e71983658ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34caa650-79b1-44af-8670-1416e128bb03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a1e2612-026b-4118-b72f-255bd8da8b2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23e0ee0d-36b4-4067-b6b7-5a4e6e093ba4",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e465dec1-4fe1-4c85-8e00-c5e2360b757a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b9fe4b1f-a711-46e4-a0e6-0556f114a6be"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "82f380d4-e792-491b-b1c4-fdab5cd8e02c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fb038b5-f070-4a22-b780-30c4a1a0ca99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "288bb522-2aad-4877-b39e-b15aa28f7b91",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df6aa1b6-da03-46be-a788-2a7c10182335",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "beef72ac-b800-45c9-8f78-42f1c3600b21"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b3ff58e-fecb-4c14-9891-68332e4a7fb0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a94e350-4228-450c-a7e8-5ac01e9c3c83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4934709-4749-4920-9f3a-000a8297fa7f",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14d6468e-4ec1-4fac-abf8-967f88aa6b1e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aae05b26-e48d-43a4-bd26-700a39cd2285"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "200b3e0c-c5c5-4301-8c94-c7534595853e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc362ce5-e669-4986-8181-888ab561c6be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3744931d-ea26-4cb4-8a01-c554991242e8",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "827515e1-acd7-4c47-b41b-337fe5956273",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29eb72f7-6662-4a45-a3bc-ce079aa77fb0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2907f46e-05b0-41c8-9e35-8229fd920cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0f372841-1752-4525-8e2b-313385c6e930"
                        }
                      }
                    ]
                  },
                  {
                    "id": "833ba3b1-735a-45d3-ab11-58a15152b1f5",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "925dc613-f859-439b-b079-b1cca347823f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d8e079ad-7e97-4acb-a1f8-f91975c687ef"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e296701-6246-421b-8cb5-f73ba36f2756",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18a550ec-2540-4a26-af70-fe268a566093"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c77988a2-3a62-4476-9ae7-7111654b2b10",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1fecccf8-35dc-4210-a428-f8602d6bec58",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "84dc1211-6061-401c-bccd-a5a0b2597a4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "576d48da-1afb-4f01-a63b-c11befd6784c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b9b82b88-71c9-4c7f-8a47-07da56fbbd7e"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "fd4a8fae-6e91-4156-86dd-58f4a701d0ab",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8bc1485c-daf5-4d56-b61b-2bb737d5dbb6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "fecec6db-ec53-4fe4-8175-da4431b54109",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7281c6db-0108-4167-9d1d-17e1fe17f60f"
                    }
                  }
                ]
              },
              {
                "id": "38fd19eb-64b3-4dcb-825a-0cc32d5fd7c0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "719d1f8e-20c2-4b1b-b339-8521548c587a",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "332d19cc-697b-482f-a33c-e79acfffbb6b",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "88c2d93b-e0dd-479d-a517-02207f6e3edb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f71f835-df41-44c8-a262-061f149f8ee7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a7b4d7f1-0f8d-457e-8f73-cdae439c69c2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5a2642f1-9099-4afe-9a15-e3281aeb584f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d57ef562-62ce-4346-ba47-ebc6e9b91cab"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f43483b8-7288-4df4-948d-8929bcba44b2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee662224-a71d-463b-8a91-b4014d121812"
                    }
                  }
                ]
              },
              {
                "id": "fd8add15-2bee-47fc-a256-95c0ff2034c4",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "670c61f3-ae73-4646-99f3-a010112ee212",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c8d5fab-c471-4aeb-9c5f-069015418d99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "a68b13ca-7f52-47eb-8e2f-66beb0d1ef42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "840af535-ddc5-4bbe-a8e3-13322b3009bc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec076d33-5062-454a-9860-a9b5ed679f69"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "4f9ff5c6-9210-4352-8926-c0b262700a95",
            "name": "Positive Testing",
            "item": [
              {
                "id": "52952214-9a97-4149-a4b6-97d1b145c5ce",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9b7b64ca-e2af-4ad3-9696-345ca5797e0e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "90434bb9-730e-4dee-aad4-81886c0599de"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "201ac33d-5ff6-483f-8e9f-a7c735ef1c3f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "37a29b86-6392-4830-91a6-e891b4bcdb5a"
                    }
                  }
                ]
              },
              {
                "id": "9b2c3027-f970-4ead-93be-f59f89001c48",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1cfb9d0a-94b5-4a47-8244-ab7d0115b290",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "9cb3f79f-e3b0-4c11-88ca-981526271aff"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d05027d4-9145-4103-b166-5d64cf05d8b4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "977e542d-e66b-4c96-9d3a-f8be7b320ee1"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "73db4e67-1887-4f0e-a583-c2685da37cf4",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "8dd54854-f18d-4a31-8a27-1f5695094755"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "01e6ed92-4787-49f5-a4f0-903b4a9a47ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5ddd2546-f551-4a56-893d-1023996c54e1"
            }
          }
        ]
      },
      {
        "id": "37a21420-96ca-4491-addc-e736399ae686",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "36b1e5ab-562a-4b22-a23c-9ecd3963e241",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a02f4c4c-006c-48de-8d4b-38506ba9213e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "b1ae421c-0189-4bec-b842-dff9a6725b64",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "400dbfe8-0e60-4b96-b560-de5116fa43d0",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "41134fcc-0904-4700-87a2-9614efc0ffc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4433d77-70c8-4b38-989b-7c3cfd057f07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8fd949b2-66c2-4185-84e7-b995a766e8da"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9ebd3410-f1d6-4ce9-b67e-25c345399bb2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a156ebf5-d8ea-4b89-a3e0-58604486f629"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8ba7be5f-75b5-4ecb-9bd7-50c6154e1a45",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "555f824b-ec83-48e6-9d97-968a92bbd1e8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d15d8702-f0ce-453c-8288-cae24aef8251",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "ffbd6532-6d10-45f5-8622-d6a2cbed54b1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a6b2755e-224f-4aba-b42b-34baa24e897f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9e8b39b7-90c2-45c1-a528-f200ddf874b0"
            }
          }
        ]
      },
      {
        "id": "e602b213-4cca-4264-831f-16370a24e710",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "9ef8f2a9-6662-4638-a42d-d0bbc1331d60",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d4cc4207-8795-4c75-890a-d9d268d9e046",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "c3bfe9ca-3f26-4357-8763-918da25d9eb5",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7078512b-4a4b-409d-a642-a096e2de71c1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7c710f6a-edc9-40da-a2c9-8d18bfaec2e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c998d740-9a3e-4c0f-81dc-63d7e6082f2d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "7e79e94a-1861-4532-8b63-b424cf6699ab"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a6d793f3-96b4-4e67-a1f0-897a075c140e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ce9c982f-2dc3-4d5b-ae23-8bc1dc70f7c8"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "48b9cd9c-545f-46b0-b16d-f96bac825630",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0665f9e7-e014-409f-8d19-fda03e3047c6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d6734719-452e-48e8-b571-6a8a7ea3fc86",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "bf934639-5633-46da-9a43-4abd0707b61b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4cb602ab-e36b-4a1e-8218-7eb06b3705ad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9c3eca0b-ec0d-4a0c-bb25-08fee7ccc981"
            }
          }
        ]
      },
      {
        "id": "004ffa0f-21ed-4147-b081-0b3cc12f0b32",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d451d3dc-14ea-4661-853f-6b5771758f75",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9f4e4835-0775-4305-9d09-6be3a265a409",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "856cb10a-3790-4e89-a732-ec928fbb01b2",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b21b32e-69ec-4810-951e-f6b68469bfb5",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "41093d3c-76f8-4189-b9f1-ce75bfbfd5e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa828b5f-ee72-4a43-83e0-e64ae783ab9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "2f352fe3-9041-492c-923b-497d17da82c9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e5ed4ef1-b186-4d54-8549-5e87fe923cae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1d23d92c-d282-4b9b-8b4e-a9fcd6543c6a"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "971edd5d-24dd-401c-8fa6-ac72d0fbbbeb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d0d50d3c-8726-42b7-b93f-b36cf20c35d6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1ee7b17a-132e-4bca-a88a-7e65cef651aa",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "284a23bc-c893-4ae1-926c-e266dd646164"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "ff9070f8-82a8-45cc-8ed7-801b825ca3ad",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "7efbf154-3272-43ab-9f13-3c25d9278b3b"
            }
          }
        ]
      },
      {
        "id": "9cff8ccd-aff1-423e-b269-8ec0f92d454b",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0ec6f99d-44c4-4afa-9879-9952ee6a0942",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "7e74b4ce-a6a3-4801-9f77-2300111e0bf4",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "256b0711-2803-436a-af72-2ad9028bee82",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9611b2c7-7b3d-46c7-8498-78ed4a447b7f",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "04cd8b1c-63dc-4c3f-bfe3-4f9fd1621bb5",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 69
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 87.18947368421054,
      "responseMin": 19,
      "responseMax": 593,
      "responseSd": 67.37160025393217,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1698539759036,
      "completed": 1698539796377
    },
    "executions": [
      {
        "id": "3e5dd4fc-1866-4ab4-92f5-0c4db423e7c7",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "2750e2c0-2510-4edc-923c-4f1fb8fd3263",
          "httpRequestId": "f749a57a-4b12-417b-9eef-5b78209a7400"
        },
        "item": {
          "id": "3e5dd4fc-1866-4ab4-92f5-0c4db423e7c7",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f0bb31e0-08d9-46a5-96a3-5e07efd67d7b",
          "status": "OK",
          "code": 200,
          "responseTime": 110,
          "responseSize": 0
        }
      },
      {
        "id": "f5086ab6-8bb4-40df-a093-4e0daa93a81d",
        "cursor": {
          "ref": "97d30842-dcc0-49cf-8b3f-639cb76bca36",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "5a44cc92-ab97-4f21-82e7-ca7c913339c7"
        },
        "item": {
          "id": "f5086ab6-8bb4-40df-a093-4e0daa93a81d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "cc0802ef-a487-4161-aa8e-15f161c43865",
          "status": "OK",
          "code": 200,
          "responseTime": 19,
          "responseSize": 0
        }
      },
      {
        "id": "408a1a34-bd83-4354-a5d6-3bf04494065a",
        "cursor": {
          "ref": "38dad327-536f-492f-8ad2-a49459719b4a",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "393e7d45-0873-40d3-a8b1-7b1595e5b0b2"
        },
        "item": {
          "id": "408a1a34-bd83-4354-a5d6-3bf04494065a",
          "name": "did_json"
        },
        "response": {
          "id": "59aeda26-0152-43ea-837e-5c9bc0fbb0e9",
          "status": "OK",
          "code": 200,
          "responseTime": 193,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc9d515d-a143-4460-bb70-ec9ed155c806",
        "cursor": {
          "ref": "dc094aad-ec61-4c33-ae2f-476469a9f2cd",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "35aec92f-a81d-4dd5-9c59-05ceaff412f4"
        },
        "item": {
          "id": "dc9d515d-a143-4460-bb70-ec9ed155c806",
          "name": "did:invalid"
        },
        "response": {
          "id": "da005317-6d97-48f4-9f06-60a84ea474b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc9d515d-a143-4460-bb70-ec9ed155c806",
        "cursor": {
          "ref": "dc094aad-ec61-4c33-ae2f-476469a9f2cd",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "35aec92f-a81d-4dd5-9c59-05ceaff412f4"
        },
        "item": {
          "id": "dc9d515d-a143-4460-bb70-ec9ed155c806",
          "name": "did:invalid"
        },
        "response": {
          "id": "da005317-6d97-48f4-9f06-60a84ea474b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a209678-a28e-4797-83a0-fa5069f37730",
        "cursor": {
          "ref": "28bf58c6-3202-4de2-8272-6f16a026342c",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "d3f742b7-b9a1-4a09-b5e0-467b7b2b2524"
        },
        "item": {
          "id": "3a209678-a28e-4797-83a0-fa5069f37730",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "ebd35535-d492-4bc8-af91-8945d5861ee4",
          "status": "Not Found",
          "code": 404,
          "responseTime": 115,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33b2603f-d455-4918-bce7-47a5e308b806",
        "cursor": {
          "ref": "852def3a-af9a-43e5-98b7-58d4e8b5104a",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "65dbe68d-91bf-417f-9456-53bbc71c36d5"
        },
        "item": {
          "id": "33b2603f-d455-4918-bce7-47a5e308b806",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "b1694ccc-81fa-482c-a891-ccdf5044d422",
          "status": "Not Found",
          "code": 404,
          "responseTime": 79,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5ca862c-4d64-4f94-abec-d38ff5d96bd6",
        "cursor": {
          "ref": "696ef8c4-df5a-431c-998f-308be0492217",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "909493ff-6fda-4e8b-a5ea-7271549baff3"
        },
        "item": {
          "id": "e5ca862c-4d64-4f94-abec-d38ff5d96bd6",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "28f031b8-d58d-4ee3-bc72-6e10b6e224cc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c42affb8-fc9e-4e31-b461-6d636fec166d",
        "cursor": {
          "ref": "2981b471-73b5-4833-b040-45eaccc571fb",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "f2a05dac-6bce-49f7-9241-07e77803f244"
        },
        "item": {
          "id": "c42affb8-fc9e-4e31-b461-6d636fec166d",
          "name": "identifiers"
        },
        "response": {
          "id": "fb6eed9b-0bb5-4183-94e3-25c8c26db402",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a39cfee8-2121-4ab3-a969-eb48b01aa26e",
        "cursor": {
          "ref": "1145395f-ccb9-4ddc-8597-58c7e2334c51",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ce572f28-e6d9-4092-b457-8f10d96fd760"
        },
        "item": {
          "id": "a39cfee8-2121-4ab3-a969-eb48b01aa26e",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "caf19ba7-a8e1-44c7-8520-059765b9d7b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7c2e49b2-5e9b-428d-86ec-88397e1a67c3",
        "cursor": {
          "ref": "6b952167-f5bd-4606-972c-6ae9786956a2",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a7e0e958-a128-4b3e-8dd3-89fee22bac23"
        },
        "item": {
          "id": "7c2e49b2-5e9b-428d-86ec-88397e1a67c3",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e6e80b08-f0b5-49aa-b5dc-043ba76cc367",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93f19700-f62f-4c1a-a07c-732f16c3ef6c",
        "cursor": {
          "ref": "7f06053f-9559-41c5-9f83-7696768fafad",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "25640f88-5aae-4fc0-8b34-a64ab60a2f3c"
        },
        "item": {
          "id": "93f19700-f62f-4c1a-a07c-732f16c3ef6c",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "7783d476-6493-4e25-9185-c0acefc82220",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37d13d48-be6d-4cac-a50e-32a9acfe8e64",
        "cursor": {
          "ref": "847b585d-4f08-47ff-88c8-c4cfc0d0d964",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "cd032277-21da-4642-b3f8-126af8096921"
        },
        "item": {
          "id": "37d13d48-be6d-4cac-a50e-32a9acfe8e64",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "887bbab2-5caa-4349-a029-20bf69f8abc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "066e3898-6abf-4520-aadf-ba282671ca30",
        "cursor": {
          "ref": "eac2dbe8-17ec-4a24-b866-2d7c903d4cc7",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "384329b9-3e12-43cd-8254-0d01685d3d1f"
        },
        "item": {
          "id": "066e3898-6abf-4520-aadf-ba282671ca30",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6dbd223a-777c-4766-973a-8ffc7924a92e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4f3d284-245f-4fb3-b8a0-0e1de91de384",
        "cursor": {
          "ref": "10af0c5c-dd05-46de-aa54-4c64c560f841",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "1bdedf94-371b-49c1-a1e7-643e94a6c2ef"
        },
        "item": {
          "id": "b4f3d284-245f-4fb3-b8a0-0e1de91de384",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "a33d57b2-cf75-4bcc-80fe-44de2b420652",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb3b3df6-67ba-49e0-8f86-752fc418bab3",
        "cursor": {
          "ref": "c3779c09-9a3e-449a-bbbd-3bbf243ff06b",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "8633f973-8dd2-4893-aadd-74bc28d3e4f4"
        },
        "item": {
          "id": "eb3b3df6-67ba-49e0-8f86-752fc418bab3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "ffa9958b-6078-4768-ae98-d4063ec45e4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37dc7322-c11b-4210-8d37-f7f380bd5d43",
        "cursor": {
          "ref": "6bf944a3-bc62-4b80-a343-6fb84a367025",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "3d5212fe-f8a5-4403-a930-3ffcd3583c98"
        },
        "item": {
          "id": "37dc7322-c11b-4210-8d37-f7f380bd5d43",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "51a9643f-32bf-4ef6-83cb-1a07348977dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89814054-811d-4b5a-851f-84d7a7ce6058",
        "cursor": {
          "ref": "37e13b5b-a6b0-446b-a2e1-2542cc8e5411",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "65e0267f-6b59-4fc3-bb23-d761ec405f2d"
        },
        "item": {
          "id": "89814054-811d-4b5a-851f-84d7a7ce6058",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "6c5801f9-3603-4503-b9d7-f9b2936f6bfb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9066bdc-5280-48f9-b513-d4a566b09084",
        "cursor": {
          "ref": "56511d6d-a070-482c-baab-c1204ffcdbf7",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "6277b2cd-6ca2-4461-809f-c7acd2f29d34"
        },
        "item": {
          "id": "e9066bdc-5280-48f9-b513-d4a566b09084",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "34efe6d7-f622-4a77-9035-4005d98bbaa6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56160ef2-e579-4dbd-a5ee-47bb8e4720e2",
        "cursor": {
          "ref": "0e27e329-177a-478c-9abd-6c269fd2078c",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "57bcc78d-b2da-45ee-a25d-0448b21bad4e"
        },
        "item": {
          "id": "56160ef2-e579-4dbd-a5ee-47bb8e4720e2",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "cfb4da69-58d7-4cf4-b901-fd80fb6292e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "221cb69c-95b1-4da2-a1f1-b6e660b9fdf1",
        "cursor": {
          "ref": "93701380-a1d4-4912-8881-25b788d61fcf",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "15f8ca13-da9a-4721-8561-e76c650b9d6f"
        },
        "item": {
          "id": "221cb69c-95b1-4da2-a1f1-b6e660b9fdf1",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "522c65ac-e559-419b-a1d5-6dd662c2483c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56cf1bd8-938a-43f5-86cd-e054eac6af28",
        "cursor": {
          "ref": "f9b368e8-041c-4770-a31f-fc20e896a8c8",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "b7e50f5b-51fb-4239-9264-38bf86412ab7"
        },
        "item": {
          "id": "56cf1bd8-938a-43f5-86cd-e054eac6af28",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "5bfce6b1-306c-422b-b810-194910f4cfcb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4327b3d6-2559-491d-bd2f-f7c91b047b82",
        "cursor": {
          "ref": "410a5800-f306-4ea3-8210-a3cefe65e61a",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "ca6ef920-d317-4415-a0aa-9440440a9e18"
        },
        "item": {
          "id": "4327b3d6-2559-491d-bd2f-f7c91b047b82",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "320519d8-2a93-4ac2-88ba-89d84834d123",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bca8477f-f6b6-4d23-ac6a-299caa850865",
        "cursor": {
          "ref": "e7a43357-1768-47a3-a176-02873cbf6f27",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "3667938b-9f96-436e-8df2-ce8a7c8d0853"
        },
        "item": {
          "id": "bca8477f-f6b6-4d23-ac6a-299caa850865",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "4778ba1f-f39f-4de3-818e-aa4521c4b1ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca34c52c-72c0-4d1d-ba8b-bf910d953f9f",
        "cursor": {
          "ref": "90739aa6-9a12-4699-8f45-e7082b7fa351",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "bb651447-931d-45ad-92db-4b86f801138c"
        },
        "item": {
          "id": "ca34c52c-72c0-4d1d-ba8b-bf910d953f9f",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "df67e029-0602-408d-a524-b9d16c7cb7f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ab752a0-c27d-443e-9e19-bf6ba992bddb",
        "cursor": {
          "ref": "fbfa3bbf-4c7a-4859-a649-c3bdde3d990d",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "07d8f915-dcb2-4fb4-901e-6d3b72e750d1"
        },
        "item": {
          "id": "4ab752a0-c27d-443e-9e19-bf6ba992bddb",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "77bad278-42ed-42f3-91b7-8748c565c5d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 151,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f216c9b6-6fbe-41f6-84ba-84bab757850e",
        "cursor": {
          "ref": "9b041d00-fbd2-491f-a557-9949fcdbcaaf",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "930dbaff-b864-44e5-b335-1c851772a4d5"
        },
        "item": {
          "id": "f216c9b6-6fbe-41f6-84ba-84bab757850e",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "395d0c7d-22b0-40c1-a609-71d7581f6d55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb124687-7bf5-4536-8513-abb0b4e41029",
        "cursor": {
          "ref": "659609a1-d03e-4ff7-8b0f-151b5324d147",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a7a7762a-96bd-47d3-b917-91b48949b140"
        },
        "item": {
          "id": "cb124687-7bf5-4536-8513-abb0b4e41029",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "640236de-953a-4dfe-9fd6-dfd810a4e368",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82133ad7-9cf2-4334-a6d8-5b91b41c91df",
        "cursor": {
          "ref": "fea8918b-9292-4ad9-b80f-4085c08778c9",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "766d3442-58c9-4d68-a282-723a82dfc2a4"
        },
        "item": {
          "id": "82133ad7-9cf2-4334-a6d8-5b91b41c91df",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "06fb8867-0789-42db-9f73-9b89c1728ab1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ba2632-d1a0-4917-a5ed-e1247b3b4764",
        "cursor": {
          "ref": "d6fa95c9-e38a-4ae0-9e07-c0cccdd70cf0",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "10b9949d-fa68-4112-815f-c9540215f318"
        },
        "item": {
          "id": "d2ba2632-d1a0-4917-a5ed-e1247b3b4764",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "7062d78a-f359-44ae-ba1a-d3aeaadce193",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92330c53-a6a1-494a-afa5-f24d33b3a655",
        "cursor": {
          "ref": "84ae8f22-cd7a-49c5-8d47-d2b6a554c40a",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "813b036f-0b9b-45cb-8b66-177b6ae6f0b6"
        },
        "item": {
          "id": "92330c53-a6a1-494a-afa5-f24d33b3a655",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "37588ee4-0a27-4078-9741-db8cdc5e67eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee5c9898-3269-41bd-8d92-7b9965cea9a8",
        "cursor": {
          "ref": "7df8c2e9-a0c8-4435-b0a9-fbe4e5f6cbf0",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "edadb374-c998-4221-b6a8-effb2ce00221"
        },
        "item": {
          "id": "ee5c9898-3269-41bd-8d92-7b9965cea9a8",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "7f26e83e-f028-4cfa-92a8-9c75be4a0fc9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bb9d647a-5a13-4c90-a127-053f1a6b84ee",
        "cursor": {
          "ref": "fad976b5-9e47-459c-afc8-8fc1546c82e8",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "e654cb4e-7a18-4c6c-9da0-b0a7122d95ba"
        },
        "item": {
          "id": "bb9d647a-5a13-4c90-a127-053f1a6b84ee",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "b071d9b3-2baf-4e08-b4d6-a64def6349a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39fdc0bf-f6bb-4670-bc7b-567399d2814f",
        "cursor": {
          "ref": "ae7c9ab4-b6b2-404b-9a85-69e60be84f37",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "6d8d8d41-08a6-43f7-87a0-25f9bef4d0dc"
        },
        "item": {
          "id": "39fdc0bf-f6bb-4670-bc7b-567399d2814f",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "7c5ff036-7898-4a5f-8b9f-9abb3ceda231",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf542e91-48df-46cc-a56d-90aa9211811d",
        "cursor": {
          "ref": "bdbc0f5f-8b31-4522-9aa5-e6a7dcac7741",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "611f7a85-ae16-4691-8a50-b0bf1415f5bf"
        },
        "item": {
          "id": "bf542e91-48df-46cc-a56d-90aa9211811d",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "c727fb3f-39fc-47b6-a062-d32d428bcef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6146c5d-7b9e-4c0f-a992-290a34f33d74",
        "cursor": {
          "ref": "4bae2630-7058-4b3b-bd80-cc3ad16789f8",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "820562e9-0af3-47b4-a1c8-2dbaaaa4a391"
        },
        "item": {
          "id": "f6146c5d-7b9e-4c0f-a992-290a34f33d74",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "818bfa84-2b5f-42cc-9c7f-a1c7df0db77f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ff703fb-0dae-4c11-8fa5-7f295e39bbf6",
        "cursor": {
          "ref": "5c58a9e5-44fa-4d49-b670-d953ecb0df99",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "a2e1c23d-8e66-43ed-8d96-b66c60f8a057"
        },
        "item": {
          "id": "9ff703fb-0dae-4c11-8fa5-7f295e39bbf6",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "311d1292-f7d6-47fb-adb6-8626f67fcee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f0d8d74-7c49-467e-83f4-c579fa27e4a4",
        "cursor": {
          "ref": "0142220f-1a2b-4630-99d7-be9f7a892d25",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a4a9f021-01d5-4844-9dfd-092faab3a20c"
        },
        "item": {
          "id": "3f0d8d74-7c49-467e-83f4-c579fa27e4a4",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "9656ad86-e950-4707-a040-c58d8c60d053",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e400be8c-8cda-4e2a-bdf1-13396f3e35c9",
        "cursor": {
          "ref": "0ce9b87c-5336-44f6-8c4f-9d199b30daa6",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "d6ce8996-7995-4d08-bf36-182c1caaea26"
        },
        "item": {
          "id": "e400be8c-8cda-4e2a-bdf1-13396f3e35c9",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "64e3e129-d9bb-4885-b158-8be6024a601f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "609a8d3d-63b4-4a97-8311-8152963d104f",
        "cursor": {
          "ref": "4cffe778-7e37-4650-b1dd-ddc7a43499ce",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "8e81763e-03b1-44be-9ac3-480bdc32f561"
        },
        "item": {
          "id": "609a8d3d-63b4-4a97-8311-8152963d104f",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "e2634e8a-a56d-4ceb-b3a7-18cf0b5acb8f",
          "status": "Created",
          "code": 201,
          "responseTime": 593,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "8357e763-543a-496d-8d53-01959989321c",
        "cursor": {
          "ref": "914f0cde-debd-4958-8621-0a462de97317",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "2c57a77a-b368-4447-9131-f8f26c1553eb"
        },
        "item": {
          "id": "8357e763-543a-496d-8d53-01959989321c",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "772538dd-7c06-4b88-b7a2-85c50a20afb2",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "cb12381d-1300-4d65-9e47-957691f8301d",
        "cursor": {
          "ref": "f248d9fa-8d3f-4c0d-aa26-cc52a9c765ad",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "e322e77f-5e40-4190-a845-6539085123c2"
        },
        "item": {
          "id": "cb12381d-1300-4d65-9e47-957691f8301d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "ccbf64ea-bb78-4f9c-8012-dc908ecc5c8a",
          "status": "Created",
          "code": 201,
          "responseTime": 389,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "dacaa63a-f518-4870-b40b-5f6ff024015f",
        "cursor": {
          "ref": "d81b99a8-e971-440e-8f50-9fb2365f2cc2",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "cf5ff1d2-328c-4471-bd8b-4f795994866c"
        },
        "item": {
          "id": "dacaa63a-f518-4870-b40b-5f6ff024015f",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "9c3c44a9-4c4d-4bfc-8f1d-1d1dca473374",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03ede4d8-81b7-4761-aa1a-3c91cde0f3cb",
        "cursor": {
          "ref": "47ad359f-fb3b-4af7-9920-ae9785ba4c88",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "6f09d855-55d8-4ae3-90a5-2701be661745"
        },
        "item": {
          "id": "03ede4d8-81b7-4761-aa1a-3c91cde0f3cb",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "6f071d28-35e2-413e-a1ea-6745d0ecd566",
          "status": "Created",
          "code": 201,
          "responseTime": 253,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "81386b73-b105-4919-9e3f-12190154acf0",
        "cursor": {
          "ref": "80aa4976-c29c-491a-adc6-dc630fff7133",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "775369ca-f775-411e-8190-86488beda354"
        },
        "item": {
          "id": "81386b73-b105-4919-9e3f-12190154acf0",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1c913c52-82e4-4cbf-98d6-ac44af088ae8",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "2bf19046-404e-48a7-8a1b-dc2cb23d11b0",
        "cursor": {
          "ref": "d6a0f620-7a08-4435-862f-e293321b2c34",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "0d32b9d8-74ea-4fed-86e0-cc59cb1a1a02"
        },
        "item": {
          "id": "2bf19046-404e-48a7-8a1b-dc2cb23d11b0",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "2a0390fc-9094-4b69-9041-cbb327186129",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "50e6eae0-f879-4928-8701-27edba7e286f",
        "cursor": {
          "ref": "66ec3b66-af9f-4b06-b92a-6eb5f626bc7d",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "f90e0ac7-e65e-438e-8dd9-4080a662258d"
        },
        "item": {
          "id": "50e6eae0-f879-4928-8701-27edba7e286f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "c3888ed9-d5c3-4ecd-81eb-256888a09118",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "dda8b1a2-4a81-463c-8621-366f6caabf35",
        "cursor": {
          "ref": "c4c5640f-8ebe-41b7-b13f-29463ce2588a",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "2a7932c6-9d34-4fff-8e79-ff6bfff08c61"
        },
        "item": {
          "id": "dda8b1a2-4a81-463c-8621-366f6caabf35",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "3acf7105-33a4-490c-8f2a-762dcba14ddd",
          "status": "Created",
          "code": 201,
          "responseTime": 249,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "b2ce8e95-c07c-42bd-bca5-5451b6643ed8",
        "cursor": {
          "ref": "ace00b46-fb60-4acd-aa5c-775dd6bc7a9b",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "4bc2307f-1c15-4b48-acaf-6ddce86f7ab9"
        },
        "item": {
          "id": "b2ce8e95-c07c-42bd-bca5-5451b6643ed8",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "a804c32c-c525-477e-bcee-15c4726bb114",
          "status": "Created",
          "code": 201,
          "responseTime": 252,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "f7cb0d7d-e4b9-48ce-95f2-25dca5a06cd7",
        "cursor": {
          "ref": "124550c5-f1d9-4956-80ec-fae336fec4f0",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "331f3eae-df2a-41f8-b7d8-3bab0a48ff4e"
        },
        "item": {
          "id": "f7cb0d7d-e4b9-48ce-95f2-25dca5a06cd7",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "cada0e59-e7b6-4d0b-8bf8-f463b4f408f3",
          "status": "Created",
          "code": 201,
          "responseTime": 273,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "213e9764-7f46-4a7d-a3e2-cc3f6d7d0fb4",
        "cursor": {
          "ref": "9d811a26-f13e-41c4-be24-1cde038cd7b8",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "9545a869-4161-48e2-8ceb-28d595512ed5"
        },
        "item": {
          "id": "213e9764-7f46-4a7d-a3e2-cc3f6d7d0fb4",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "cb365695-1bb9-4938-9f34-d04ccd02ad23",
          "status": "Created",
          "code": 201,
          "responseTime": 245,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "1883fa88-0303-4fae-a93d-32e58b664129",
        "cursor": {
          "ref": "00dbbc14-0812-4204-8c3c-55ca9797fb22",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "8a460f51-f442-4416-9e67-4a46edc8a6e1"
        },
        "item": {
          "id": "1883fa88-0303-4fae-a93d-32e58b664129",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "d690e0ea-87e0-4034-ab03-4ffce0dd4394",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "bfed96eb-15d4-4650-ad3c-844c769816d4",
        "cursor": {
          "ref": "d2b2e00c-4590-46f0-834d-9763c44b7442",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "b24857dc-fe5d-41c1-b9b0-55d3f2e8163a"
        },
        "item": {
          "id": "bfed96eb-15d4-4650-ad3c-844c769816d4",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "e8e3bc54-f100-40de-b5f5-73be0d82a2e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "308949b4-302b-4d2f-8c25-e0e811374d9b",
        "cursor": {
          "ref": "30385407-beeb-4001-ad7f-67b69afe2fea",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "f124e07c-a532-4027-b062-28c5138e150e"
        },
        "item": {
          "id": "308949b4-302b-4d2f-8c25-e0e811374d9b",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "93cf1dcd-938c-46a6-9260-7b7a1b5fef93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21c70a8f-5cdd-4a41-94a6-9d6b993abeae",
        "cursor": {
          "ref": "bf0d5849-abda-4938-92fa-11e180a67d86",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "6cc1cf82-d158-4189-b3ab-912c28b2b195"
        },
        "item": {
          "id": "21c70a8f-5cdd-4a41-94a6-9d6b993abeae",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4026464e-564a-47f4-bc03-6b3fe5def097",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3710a7e8-87f1-4d66-8418-71639a6cb23d",
        "cursor": {
          "ref": "609bba30-aeba-4294-a835-77f3564baa14",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "6b6a3da8-e2f2-4ff1-b1cc-26d741d9f9e5"
        },
        "item": {
          "id": "3710a7e8-87f1-4d66-8418-71639a6cb23d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "9abc752d-9e9c-4712-8a93-124240298e7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fed7178b-947e-4ab8-a1d9-ade7c8ed4db9",
        "cursor": {
          "ref": "86ffcac1-5354-48f9-94da-5763e0b5470f",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "97a98101-4e01-4908-98aa-94ddf2cea77b"
        },
        "item": {
          "id": "fed7178b-947e-4ab8-a1d9-ade7c8ed4db9",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "14536e4d-dec6-445e-9b5d-6cca52ae5585",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a7009f9-e9dd-4366-97b1-d33a90982940",
        "cursor": {
          "ref": "27880621-ea2c-4d63-bdc7-0377c219a86d",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "079264cb-c4f3-40b4-b74e-f9bfa30315c8"
        },
        "item": {
          "id": "7a7009f9-e9dd-4366-97b1-d33a90982940",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "a7865e53-b0e2-488c-86a6-d99ce110cc94",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb0bf33a-d259-478d-a87a-9b879a1ef20f",
        "cursor": {
          "ref": "20d577d1-67a9-40ef-872a-1f38282cbfed",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "52f0dfc3-cfb8-488d-8a86-18207123c49e"
        },
        "item": {
          "id": "fb0bf33a-d259-478d-a87a-9b879a1ef20f",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "8c07ce9d-5d37-437a-a19f-cbeea8a6e0cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2bc490-ff5a-4881-8209-4797bf39f565",
        "cursor": {
          "ref": "06e651f9-8202-4ab7-a96e-238d85157653",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "d746868b-e511-4b4b-bcd7-3d55f8df120a"
        },
        "item": {
          "id": "7e2bc490-ff5a-4881-8209-4797bf39f565",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "8c7fe637-7d55-4c3e-8e28-4baba8d68e18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5daefc8-0e75-403f-8e06-05f8b96c8166",
        "cursor": {
          "ref": "29dc5497-403f-4386-8e18-9aa01378cbc2",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "d65d662c-63bf-4748-8203-09d5489effa1"
        },
        "item": {
          "id": "b5daefc8-0e75-403f-8e06-05f8b96c8166",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "c20b38ed-ca2c-41ad-9275-c1db0197fb03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7965a9b9-5dd0-4ea7-a41a-522464f70d4a",
        "cursor": {
          "ref": "26d70106-f6e9-47fc-af67-c7c8e6db9062",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "6d5d52d8-e21b-4940-9281-3ea00963be45"
        },
        "item": {
          "id": "7965a9b9-5dd0-4ea7-a41a-522464f70d4a",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a5d79808-995a-447e-9deb-70eff2006049",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7234cb2-0460-4447-9aeb-0ac9c004f607",
        "cursor": {
          "ref": "6e12a643-f5a3-4c2a-8c67-0bd27614b6d6",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "24ca6d0c-0c11-4193-8316-b238a12fa901"
        },
        "item": {
          "id": "f7234cb2-0460-4447-9aeb-0ac9c004f607",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "0e288a5c-8b5e-4ffd-9838-418ba7fc9f9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33d7ee41-a310-460e-8430-eaca3fb8bf8f",
        "cursor": {
          "ref": "e298a083-a4c3-45ca-b253-e4e6717ed8aa",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "adbd379d-4f8f-496e-8a29-ebffbc12ca62"
        },
        "item": {
          "id": "33d7ee41-a310-460e-8430-eaca3fb8bf8f",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "031ac5ab-0fbf-4a4e-bb5f-ac83739d9605",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5bf6f664-8669-412a-a1bf-2d1fa27111d9",
        "cursor": {
          "ref": "2c15b2dd-e12f-4edc-97b9-5ad25f8e3ac4",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "962842be-7f05-4b6b-8cc7-23b5b1596ea6"
        },
        "item": {
          "id": "5bf6f664-8669-412a-a1bf-2d1fa27111d9",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "1bf4bbc9-541e-4612-a750-198255a6f7e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6356d92f-f2ee-438e-a5f8-6ff6d1ceaaf4",
        "cursor": {
          "ref": "5faf2aca-cb93-4cf3-b759-21ba706b35af",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "60dc9c68-3176-4c2a-8486-82f21fcd8b07"
        },
        "item": {
          "id": "6356d92f-f2ee-438e-a5f8-6ff6d1ceaaf4",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "ca5fbd62-12e5-441c-9f6f-d6d21a809125",
          "status": "Created",
          "code": 201,
          "responseTime": 275,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "ef8a0c1c-bf9f-4a3f-9074-a482a0455741",
        "cursor": {
          "ref": "23f50088-6f95-463d-bcd6-d51e9e910883",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "80521d0f-81fa-4211-a2db-e9f315cda692"
        },
        "item": {
          "id": "ef8a0c1c-bf9f-4a3f-9074-a482a0455741",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "d6e22641-3894-4792-9798-0182816debd7",
          "status": "Created",
          "code": 201,
          "responseTime": 276,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "e5a2e821-cc22-40bc-aabb-42a8c1ee88ec",
        "cursor": {
          "ref": "1b7a262e-72b5-4731-ae17-71b9336f40c0",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "662f445b-cfd4-4e06-b14c-783bcee553df"
        },
        "item": {
          "id": "e5a2e821-cc22-40bc-aabb-42a8c1ee88ec",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "6f58268f-822b-45b0-b552-072a70b9ae53",
          "status": "Created",
          "code": 201,
          "responseTime": 258,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "eb34aa68-901a-444a-aba5-0905a6f2a619",
        "cursor": {
          "ref": "c2e232a6-b596-4dbb-83e4-436a21d6a89e",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "9cea19e9-fb0f-4756-9c09-feba98c6a483"
        },
        "item": {
          "id": "eb34aa68-901a-444a-aba5-0905a6f2a619",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ca21c5d7-a22b-4726-957e-ef4ae713153e",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "5c5c4940-9552-4eea-aa84-e392069a0106",
        "cursor": {
          "ref": "70b8fc62-0349-453e-99c2-01a35053e819",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "d4d245d3-8e72-470a-a3c4-8e4bfe290a53"
        },
        "item": {
          "id": "5c5c4940-9552-4eea-aa84-e392069a0106",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "3583af59-6fa7-411f-a189-e63d4a11c2b3",
          "status": "Created",
          "code": 201,
          "responseTime": 261,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "04ce6cb2-b97a-456a-b34c-88385b26ed45",
        "cursor": {
          "ref": "e87db4cf-c801-46c7-b1fb-bfbef6d2e3f8",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "b5adc966-7ded-4426-a145-af60fa182322"
        },
        "item": {
          "id": "04ce6cb2-b97a-456a-b34c-88385b26ed45",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "4a4da2e9-3fab-4093-a2ab-4388a66cda75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ce28ecb-9aee-44db-8ab8-8accce1978a9",
        "cursor": {
          "ref": "a210fc38-9103-4873-9ed8-fd79ebd1c509",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "b5245fbe-70b4-45e0-a348-ee80d9569437"
        },
        "item": {
          "id": "9ce28ecb-9aee-44db-8ab8-8accce1978a9",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "b5bbc074-a077-4e8e-8d13-03b70f3b7fa5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6ae66d9-620a-4dae-a0c5-1c50c7a3f629",
        "cursor": {
          "ref": "0417e0c3-9088-4151-bd86-1c9067759f1a",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "a4f71b17-fd2c-44fc-af59-30b440e73a19"
        },
        "item": {
          "id": "d6ae66d9-620a-4dae-a0c5-1c50c7a3f629",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "9fe248af-d8c5-4247-8ce7-9e3433123e9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d220d308-d4a8-42ae-af60-02bf78a66354",
        "cursor": {
          "ref": "0fab2bdf-987a-47ea-9ad3-c944cbf6e090",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "0f7695d8-e435-444d-a75e-54e7c080fa6c"
        },
        "item": {
          "id": "d220d308-d4a8-42ae-af60-02bf78a66354",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "f778f659-1a95-4e3a-8f52-2c66029518b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1195716-1f31-4ae7-8fff-f76818ffbf39",
        "cursor": {
          "ref": "721c84cf-371d-49d4-8706-01f20a33ac49",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "b6bd41be-1f05-493f-8af4-047568fb124f"
        },
        "item": {
          "id": "b1195716-1f31-4ae7-8fff-f76818ffbf39",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "3214beca-2fb1-46f5-9ec2-5f74ace0dc9e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 73,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cdf105a0-460b-44f8-bd8f-6f46c76ce03d",
        "cursor": {
          "ref": "89cca55f-462a-4739-ac59-b2b573bdf3f7",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "8555ae87-c9da-4e2c-b021-092c005d9480"
        },
        "item": {
          "id": "cdf105a0-460b-44f8-bd8f-6f46c76ce03d",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "cbe47eb7-c4aa-4b6e-9fe9-144856020af8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "004fd15e-01ed-4d51-b1c6-13c62acf4c55",
        "cursor": {
          "ref": "78470f01-42eb-4ae4-947c-3276ec27c43c",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "cea2fa4a-2eab-422d-877a-aad1fb97c488"
        },
        "item": {
          "id": "004fd15e-01ed-4d51-b1c6-13c62acf4c55",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "3d3bde28-8284-4356-9956-213d6d294b28",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fefa8681-7527-4467-9e53-471c4cf65686",
        "cursor": {
          "ref": "c3104062-b106-455a-8da0-d7fc3ff83e67",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "108b0500-f818-47de-a299-f1a6b8e65b28"
        },
        "item": {
          "id": "fefa8681-7527-4467-9e53-471c4cf65686",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "2de6d71a-2d59-4f11-a0b2-9890793c2633",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8df3f1cf-0f63-4615-9a80-fc45466a85ed",
        "cursor": {
          "ref": "40552360-f61c-4afe-83af-cc4d9621b6c0",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "cb4c4024-c29d-4731-a7c1-7846c8b3c9a2"
        },
        "item": {
          "id": "8df3f1cf-0f63-4615-9a80-fc45466a85ed",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "2b0ff976-7114-4ded-b45c-ca00000fe446",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f78bf98-fda3-476a-b855-fabba5ac2f56",
        "cursor": {
          "ref": "5ee07711-dfde-4c8a-aeab-fb090fd94dc6",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "435289c2-7edd-475d-8ad1-e8bbe7ab30fb"
        },
        "item": {
          "id": "5f78bf98-fda3-476a-b855-fabba5ac2f56",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "8fb9c2e8-f47a-4e9e-b0b5-16e1f02ba983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "483a3c59-5de6-479b-8c27-d15768d277cb",
        "cursor": {
          "ref": "9147f91f-1491-4454-b618-0e83ea55db95",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "7739d8ef-3240-4056-8ba6-ad9922e5d354"
        },
        "item": {
          "id": "483a3c59-5de6-479b-8c27-d15768d277cb",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "28cfff22-16d1-45e3-a781-e7bc508f4d30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "019d3f74-00f5-434a-bcd8-346f3a8050fa",
        "cursor": {
          "ref": "7944fac2-1fd0-4b8f-ac05-7e69e829972d",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "8dc03f39-a813-4236-bf7a-c427e3168738"
        },
        "item": {
          "id": "019d3f74-00f5-434a-bcd8-346f3a8050fa",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "e421284f-18e8-4995-ac9b-55b4225e61e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e170732-7a29-4d34-8d66-0b2c90b79646",
        "cursor": {
          "ref": "c8a30970-597d-43bf-9672-81cf165695ea",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "afbef00d-f7cf-4599-bccf-1b920e8ebc6b"
        },
        "item": {
          "id": "6e170732-7a29-4d34-8d66-0b2c90b79646",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8462ba1f-a196-4369-af96-a0549847abb1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f13e45e-98cf-47ca-ade9-53da36de0482",
        "cursor": {
          "ref": "2e6b29d0-6f6e-4e27-ac1b-5e2c39bbbf6e",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "f3d077e3-a26a-41e3-a5f6-14a4af18e3f1"
        },
        "item": {
          "id": "5f13e45e-98cf-47ca-ade9-53da36de0482",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "80e490fd-d5d1-4b21-8943-599e67282bb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "02fa2717-d43d-47b7-b8a8-3b1d1cb07e43",
        "cursor": {
          "ref": "9555810f-8ca8-41b0-8ea6-2b7e28840df2",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "839badfc-7a03-4b1d-a52b-8d7e41a2b1ec"
        },
        "item": {
          "id": "02fa2717-d43d-47b7-b8a8-3b1d1cb07e43",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "2a591ac5-92eb-425b-b0c5-6f0a04385b2c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f389c6e5-e66d-4b10-b78c-3dbe87a35554",
        "cursor": {
          "ref": "5f8e38c4-0227-427f-aa1b-fc9714800a8a",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "e599655e-b8ae-4a36-8159-d632451c0320"
        },
        "item": {
          "id": "f389c6e5-e66d-4b10-b78c-3dbe87a35554",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "b660cf05-f51f-4fb2-965e-c01218befa3b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36c9af41-51ba-4008-a063-f076969fe699",
        "cursor": {
          "ref": "eb67cca1-72e4-4149-b42c-90ecb858af6a",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "e4348516-65e7-4a85-991c-0057a3fedd80"
        },
        "item": {
          "id": "36c9af41-51ba-4008-a063-f076969fe699",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "66e87f30-7542-4b76-8dc0-f2a40f374c85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3cf57991-e473-46d3-b42e-d7d3501f2cdb",
        "cursor": {
          "ref": "bfb3737a-c4b4-4b4c-b3e4-e44ac373ce12",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "1ad3e4e7-8c17-417c-a8eb-08f17d6f3b2d"
        },
        "item": {
          "id": "3cf57991-e473-46d3-b42e-d7d3501f2cdb",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "18b505d8-5231-45b4-8ceb-a877166eec4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa26caaf-b07e-49c9-a29a-2fae2debc681",
        "cursor": {
          "ref": "5ec84cfe-09dd-4616-808e-c4ad75d2ca41",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5eaca3e8-e6d7-4cf5-9823-a6c6b08e795d"
        },
        "item": {
          "id": "aa26caaf-b07e-49c9-a29a-2fae2debc681",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "c128b8f4-4608-4d23-8f6a-f293a25d0933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9cfa4909-3f2f-4ce2-b2be-24aa4f8957ae",
        "cursor": {
          "ref": "c4d17e7c-1ebc-4cd4-8ca5-bd3243f4da8f",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "fa6bdf08-dd48-45fd-a8d8-49bfddefe7de"
        },
        "item": {
          "id": "9cfa4909-3f2f-4ce2-b2be-24aa4f8957ae",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "96923503-77ed-4d97-97e8-747f8706c6af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 148,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01c193a5-9918-416b-9095-03598fe657ae",
        "cursor": {
          "ref": "54f6d455-ff73-4f23-978c-44854423145b",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "4d787241-24fc-4f07-8ad0-5a60cbca7a46"
        },
        "item": {
          "id": "01c193a5-9918-416b-9095-03598fe657ae",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "685bef54-e40f-4773-92e8-e8f4adf53025",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "07603612-a858-4519-9ba0-13d07d38e3f4",
        "cursor": {
          "ref": "3baccfe4-8c8c-404b-8262-069ebe31e310",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "47d4cf31-9d90-492b-8ab3-de8ecf132377"
        },
        "item": {
          "id": "07603612-a858-4519-9ba0-13d07d38e3f4",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "6976cb9c-d700-41c4-a044-e712ee017fc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fe6b9711-40ba-433d-aab8-4a50d8c49ad1",
        "cursor": {
          "ref": "600cce5f-b11f-46a4-888d-bf018374ae85",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "3301d554-b01b-421a-80fb-4e1d1709b9d7"
        },
        "item": {
          "id": "fe6b9711-40ba-433d-aab8-4a50d8c49ad1",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "afc9dcb0-2580-41b8-a940-0d8ae9e4ec31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79fe7837-3fad-4c51-89e4-3691ce70d63f",
        "cursor": {
          "ref": "d8a01fcd-6404-46f6-80cf-fa430ec92faf",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "6d189713-ce9e-43f3-9205-f33f3f6ae835"
        },
        "item": {
          "id": "79fe7837-3fad-4c51-89e4-3691ce70d63f",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "3a812776-ab36-413b-ab53-272ad607cf56",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "663ca3b2-e273-4ecb-9109-7da8777b4edc",
        "cursor": {
          "ref": "7754a82d-3e83-40cb-881a-df96d512d9ed",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "153d7929-ffb8-455f-90ba-5e81867b9c2f"
        },
        "item": {
          "id": "663ca3b2-e273-4ecb-9109-7da8777b4edc",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "fb62cd90-c723-4361-a9f8-212286c5c1fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3afa1d95-cbd3-4c30-8113-2d1c38785fc5",
        "cursor": {
          "ref": "2e244da8-1620-491c-8509-40092ad70b85",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "24b08051-ec23-4e42-8112-ee586d87998f"
        },
        "item": {
          "id": "3afa1d95-cbd3-4c30-8113-2d1c38785fc5",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "82e641e7-92b7-4616-9ddf-27808e74eafc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9245c57-9ab3-40c8-8522-e37a727e8fac",
        "cursor": {
          "ref": "15d0c570-e499-42ae-80ec-65b03330fb19",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "501ae26b-cbbf-45d5-9f85-645f1663e20a"
        },
        "item": {
          "id": "d9245c57-9ab3-40c8-8522-e37a727e8fac",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ef295908-82c0-48c6-afb2-2a343af5a040",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb330e9c-ee4c-474d-b371-d90c5b8ed466",
        "cursor": {
          "ref": "83dd7c83-3796-4df0-ac3a-6e72c695bac3",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "7dea4b5c-48e8-4269-a3f7-fba7243ea50b"
        },
        "item": {
          "id": "fb330e9c-ee4c-474d-b371-d90c5b8ed466",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "ce7cb7bb-96ea-4a79-8a1f-003c1c746361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdbe9474-5a6b-4ba2-93cf-1df5f1d0de4a",
        "cursor": {
          "ref": "33ac2ac7-8c26-4223-a465-ed2375d9022c",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "289a4274-8d56-44b0-9256-ae2042c5ebb9"
        },
        "item": {
          "id": "bdbe9474-5a6b-4ba2-93cf-1df5f1d0de4a",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "345839b2-b60d-487b-84c1-d166913df678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41c26aa1-55e2-4b1f-916e-b62120ab7da5",
        "cursor": {
          "ref": "7058ad6a-c8e4-459d-9cd0-3a726953de0c",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "af3f09c8-3dd4-49c7-b5bd-107eb7871e04"
        },
        "item": {
          "id": "41c26aa1-55e2-4b1f-916e-b62120ab7da5",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "837eac6f-ddf1-46b7-9bbb-108970afd5ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a05c23a9-42eb-4950-b92c-0018daa8f093",
        "cursor": {
          "ref": "68f1afb1-f779-4b06-b18a-ab4cd83c99cd",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8d07fbe6-84c1-4a99-b547-002c8307d9ba"
        },
        "item": {
          "id": "a05c23a9-42eb-4950-b92c-0018daa8f093",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "6c2ec171-85d4-4370-a230-02bc97fa8f36",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdcd509d-ac01-43fc-92ec-46b408d91728",
        "cursor": {
          "ref": "47fcbe69-e500-453c-8f10-0961cf59a109",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d10fa43e-c3dc-4bcc-8328-d3e170ed1e20"
        },
        "item": {
          "id": "bdcd509d-ac01-43fc-92ec-46b408d91728",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "013acc98-ce8b-4c25-b437-9cc1160273ac",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1b1aebc-299f-4330-a746-c20dfba57e24",
        "cursor": {
          "ref": "0fae53e0-be42-4077-be3a-c1ab1b3fd740",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "36d10434-6ced-4ed0-be25-88c634fc9b73"
        },
        "item": {
          "id": "f1b1aebc-299f-4330-a746-c20dfba57e24",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "745801fb-562d-456b-a351-a50e8734ac23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "8b012f8e-ba0d-4a9b-ae3e-c041442005b5",
        "cursor": {
          "ref": "2ee0d8fe-2357-46ae-b54e-8f952a04799f",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "79eb9b4d-9404-4b1f-8eee-789a17163c3c"
        },
        "item": {
          "id": "8b012f8e-ba0d-4a9b-ae3e-c041442005b5",
          "name": "credentials_issue"
        },
        "response": {
          "id": "c3976226-3937-40e6-9f36-b4bd74b4d933",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7583f1-5f08-4461-b5bc-2a7b552ac45c",
        "cursor": {
          "ref": "6990004f-1102-4a69-991b-eb0502e05f90",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "dfc044a9-5fb2-4440-8de6-e23406007335"
        },
        "item": {
          "id": "8a7583f1-5f08-4461-b5bc-2a7b552ac45c",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "a3bd59f4-e3a7-4b70-8086-863f74f31652",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f13fb9e9-6f7c-4c20-8cc6-c6813615746d",
        "cursor": {
          "ref": "94d48e15-0465-4872-8b9c-185ebb52680e",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "01b7ec9c-1106-4915-a92f-a7637b1d30a5"
        },
        "item": {
          "id": "f13fb9e9-6f7c-4c20-8cc6-c6813615746d",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "10fd3413-6e50-4d13-afee-37fe55036236",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e34dfb8-1b75-4046-a230-98e9d8b9eb42",
        "cursor": {
          "ref": "8f433d20-e6d9-44e1-8990-89f9b9620fc6",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "49af9350-dc6e-493e-a4ab-3e5a346019c0"
        },
        "item": {
          "id": "2e34dfb8-1b75-4046-a230-98e9d8b9eb42",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "0f2abe77-27d3-4192-a973-dd81dc55cc06",
          "status": "Created",
          "code": 201,
          "responseTime": 295,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "63aa1e03-79e8-4495-b5ee-c10f6923a66b",
        "cursor": {
          "ref": "a041fc64-b882-4480-ba46-3bf59826a74b",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "2f6d06d0-621f-4bc9-8b42-1b53d98bf14c"
        },
        "item": {
          "id": "63aa1e03-79e8-4495-b5ee-c10f6923a66b",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "91345dea-a211-411e-9b0f-bc34ba1a8ccb",
          "status": "Created",
          "code": 201,
          "responseTime": 271,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2023-10-29T00:36:16.412Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2023-10-29T00:36:16.412Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "9e662e91-4022-41f6-92c4-d473d95d48b8",
        "cursor": {
          "ref": "2546a021-3f78-4aa5-8958-0bf50c6a41b8",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "97cbf459-43ee-4ef2-b965-1021b7427df5"
        },
        "item": {
          "id": "9e662e91-4022-41f6-92c4-d473d95d48b8",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "e5c171db-1dd0-44ee-b52d-eb4c2278d352",
          "status": "Created",
          "code": 201,
          "responseTime": 267,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d73de717-54ef-4f1e-9428-c58c9df2d784",
        "cursor": {
          "ref": "47477f5c-caf5-491b-bd21-6c1c593af10a",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "cf33f4d1-5eb1-4d3c-9591-dcbcac81cc65"
        },
        "item": {
          "id": "d73de717-54ef-4f1e-9428-c58c9df2d784",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "25324ec5-18ef-4653-a144-e3920eebf65e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05492f3c-93c8-4bdb-ae51-6039b087a0c4",
        "cursor": {
          "ref": "09ff7d54-42d2-4fe4-968f-c9210b42ed3a",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "be89e392-ae91-44d2-aa91-71db35c64f93"
        },
        "item": {
          "id": "05492f3c-93c8-4bdb-ae51-6039b087a0c4",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "16f51b6c-43a0-4f85-b98a-935ade565b25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4102cfbb-d13c-4a5b-9d34-8b7e75c0480e",
        "cursor": {
          "ref": "b01d90ba-162f-4094-99c9-fe42a2eba327",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "5347c4d1-7c39-418c-9ec8-f9d0e84da14f"
        },
        "item": {
          "id": "4102cfbb-d13c-4a5b-9d34-8b7e75c0480e",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "17842038-08ab-446f-be33-352c5dea0ff6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f66cba0a-2f76-471e-95d6-481c1a6874e3",
        "cursor": {
          "ref": "d106a0c3-48aa-4855-af56-e3f6b01a28d4",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "ed696527-81f8-48de-9d52-209732fda4e6"
        },
        "item": {
          "id": "f66cba0a-2f76-471e-95d6-481c1a6874e3",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "6a0fe194-7831-4527-a1c0-bcd749bb10fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "816eede3-286f-4edb-8b3f-3e7fe6f2c931",
        "cursor": {
          "ref": "cf0b54a7-58b0-4c4d-9c9d-1d85ddfa59c4",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "685cff8e-7363-4dbf-81c4-6e51b00b7f8a"
        },
        "item": {
          "id": "816eede3-286f-4edb-8b3f-3e7fe6f2c931",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "7c57e96e-6e6a-4b2f-8c74-0049914b093a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fff7ce7f-9a85-472d-ac52-7b7e1fb5f450",
        "cursor": {
          "ref": "682741c0-1df6-4c4a-a6f1-c3e524b3165b",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "aeb52b45-bf6b-4df1-a67c-bbd88fda8619"
        },
        "item": {
          "id": "fff7ce7f-9a85-472d-ac52-7b7e1fb5f450",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "8c04ecd2-c899-4f65-960f-dda245018666",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "429fa9ba-50b8-46fc-93e1-303c8fe2f20b",
        "cursor": {
          "ref": "b2c32d40-2965-45ce-a88a-1e9f227e5de5",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "41f89a67-7f7c-437c-b87b-a22eb2a5adcc"
        },
        "item": {
          "id": "429fa9ba-50b8-46fc-93e1-303c8fe2f20b",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e2071ec0-55b8-4afa-bf3c-749fc85ee065",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23a05046-9bb5-45ea-ace9-12d766291b7f",
        "cursor": {
          "ref": "5c11cc08-90dc-44bf-9ef0-d623e073ea94",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4fc5de33-a1c1-47ea-92f6-086ca65de045"
        },
        "item": {
          "id": "23a05046-9bb5-45ea-ace9-12d766291b7f",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "fcce486b-1cec-4f53-a11a-f5c94aeab7c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d393b3-b0af-4ab0-ae7a-28ca333e7d3b",
        "cursor": {
          "ref": "d3594733-a899-4f5a-b8b1-735ee919ca1e",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "59d3869a-cbff-4fb1-bcfc-45c0adfd9384"
        },
        "item": {
          "id": "76d393b3-b0af-4ab0-ae7a-28ca333e7d3b",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "65191acf-4599-4bac-bf3c-523e63532ff4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e0eacc4-c8e2-45b4-9daa-8e0ef302a114",
        "cursor": {
          "ref": "d0a87614-6c0d-4a8d-b70c-b01aa800e79a",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "3666aa96-319d-4d1d-923b-e9504c959427"
        },
        "item": {
          "id": "6e0eacc4-c8e2-45b4-9daa-8e0ef302a114",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "acbd84f0-f38c-4b76-acf8-93e4a1a8ff33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f690235f-549b-42c9-bd97-fce1181ad8c1",
        "cursor": {
          "ref": "254394c0-7b81-4c73-bff5-7ed9e60fd115",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "11308279-15a8-416b-86c9-70008adc4795"
        },
        "item": {
          "id": "f690235f-549b-42c9-bd97-fce1181ad8c1",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4c224698-685c-4f7d-b21f-c60cf3cf7205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6464885d-9549-47a7-81c7-8e8ffdcf75b7",
        "cursor": {
          "ref": "85cc15c2-e6a7-49dd-900a-2c8bb787c980",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "d84a20c5-61ce-4562-9108-8ce683f88349"
        },
        "item": {
          "id": "6464885d-9549-47a7-81c7-8e8ffdcf75b7",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "8f6b3b92-b8db-4ec7-b749-87a701e12205",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b3d4db8-a7bf-4d5f-9dbf-06af2b90c435",
        "cursor": {
          "ref": "80e6013d-4a95-44c2-bc52-91752f4c85a2",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "46c2349b-585e-4804-bbb5-00b1f31c098d"
        },
        "item": {
          "id": "1b3d4db8-a7bf-4d5f-9dbf-06af2b90c435",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e5151f1a-1d22-4838-9ed7-4dc63a5b410e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5992dac-942b-4748-a84f-a1de8351e73c",
        "cursor": {
          "ref": "9611d251-e5a1-4eea-ae14-62f983d6ecdd",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b068c30e-b064-4f40-a6fd-412cddc5c55a"
        },
        "item": {
          "id": "b5992dac-942b-4748-a84f-a1de8351e73c",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "71051fee-8922-4a42-b4ac-cacbe1a2ee8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e8ffeb9-f339-4169-b5cc-dbab4dff45d6",
        "cursor": {
          "ref": "9878d338-4aed-4856-923f-5cfc9df0b465",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "f58bf578-c565-4fa1-9663-bff06b6ddaf5"
        },
        "item": {
          "id": "8e8ffeb9-f339-4169-b5cc-dbab4dff45d6",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "dd3ae63f-443b-4d28-89f0-baad757b8dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eaf15434-f9e0-40cc-a8d2-a04bc93dab45",
        "cursor": {
          "ref": "e44f74b5-1674-4ce9-a1f5-ce518bced983",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "82ab8070-39c3-485b-ad53-ad89d70412f4"
        },
        "item": {
          "id": "eaf15434-f9e0-40cc-a8d2-a04bc93dab45",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "5efec5f0-903d-43b3-bdce-fde6d0b2b7a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6292ce59-9578-46d0-be15-2d8cf98ae4fa",
        "cursor": {
          "ref": "eb64f552-7e3e-4071-868a-137b907fced6",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "43b3e8de-ec1b-46ee-bded-8e29aed34161"
        },
        "item": {
          "id": "6292ce59-9578-46d0-be15-2d8cf98ae4fa",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "195f0367-7d2d-4b15-9c1f-8b19cecc320a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6c99bf0a-a250-4522-8b3f-fb8307cc9c5f",
        "cursor": {
          "ref": "a270fbd7-5311-46ec-ad35-57290de388ac",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "b0d819f2-6591-4302-9b09-6e0e9ec72458"
        },
        "item": {
          "id": "6c99bf0a-a250-4522-8b3f-fb8307cc9c5f",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e503371e-3866-4536-a038-3dcd66d7cbb8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b67daa0a-cd51-4488-b335-ac2e088edf24",
        "cursor": {
          "ref": "c3d637e1-94f8-4db2-ac7f-b1f74fc7d2a6",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "58a835d2-66d5-496e-bc23-22a098a86565"
        },
        "item": {
          "id": "b67daa0a-cd51-4488-b335-ac2e088edf24",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "228b74fc-de4c-47b8-b10b-652c3299fc18",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e26c720-019a-4b18-8137-6a01d415a486",
        "cursor": {
          "ref": "195d653b-bd37-4c91-99bd-ba107d26dcc4",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "153f0df2-ab05-4c59-937a-57777336975e"
        },
        "item": {
          "id": "3e26c720-019a-4b18-8137-6a01d415a486",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "f3955cff-89cd-49e1-8601-1ed63a814d63",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1453d8c7-5126-4ef4-b9cf-140d35685cde",
        "cursor": {
          "ref": "265ba067-11de-457d-adcf-c07cdec77ef3",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "1383d73b-c709-4211-84a8-0deb7dd376d2"
        },
        "item": {
          "id": "1453d8c7-5126-4ef4-b9cf-140d35685cde",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "d1778066-0ae7-4607-924f-79a9396c0f8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7466ec88-824e-4909-b586-8ce9774f2cdc",
        "cursor": {
          "ref": "de88821e-b746-4e24-aa20-c2638aa691b6",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "15e538d8-7e96-4158-9760-f3b2d74afc6f"
        },
        "item": {
          "id": "7466ec88-824e-4909-b586-8ce9774f2cdc",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "9672748f-ec59-42df-abd8-8cdd3bf0be26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35dd036c-914e-4e6c-98a2-4e449bf1e2ff",
        "cursor": {
          "ref": "44f66de5-a7b4-4dc8-80b5-a0f48b40ca9f",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "43dc3aff-88aa-4c78-9b6e-b96f2bfceead"
        },
        "item": {
          "id": "35dd036c-914e-4e6c-98a2-4e449bf1e2ff",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "ae282244-8dd4-4b90-b3df-8b6cd67da948",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "580bfaee-f0a1-44d7-b29f-2377a9cd93f7",
        "cursor": {
          "ref": "5c5be428-cc48-474b-94c3-f0a74d97ecec",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "d69867e4-0b66-4bc1-afd1-c03c420804c8"
        },
        "item": {
          "id": "580bfaee-f0a1-44d7-b29f-2377a9cd93f7",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "b9d225f6-0224-402e-95da-7089c07c813b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0a16287-f39a-4572-ad8a-71edd523419c",
        "cursor": {
          "ref": "f242adcf-80c2-41ba-b60b-3e09fd323078",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "2848c02e-f1d8-4f13-a4cf-2eedde8f3464"
        },
        "item": {
          "id": "d0a16287-f39a-4572-ad8a-71edd523419c",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "fde4f6b5-e480-47cf-961d-f800059ef069",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1393d954-77c0-4149-bd77-6f3080d99828",
        "cursor": {
          "ref": "d0ae69f2-afa6-4e44-bf81-e76fa1cede23",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "0cf1b5c4-aebd-4b3b-846b-504292d48286"
        },
        "item": {
          "id": "1393d954-77c0-4149-bd77-6f3080d99828",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "ff0fe66b-2f72-4356-9f83-c5251ab413bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e19000c6-19df-4485-a6f8-a9604d0c27d9",
        "cursor": {
          "ref": "60afc705-3e42-4246-9db6-287c9d769eba",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "a4831485-3295-4f0f-ace6-d4deacf5800f"
        },
        "item": {
          "id": "e19000c6-19df-4485-a6f8-a9604d0c27d9",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "c74e769e-20c4-4b17-866c-7bfcd65f3be2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a648564-5652-47ad-b0d2-e57e6d945756",
        "cursor": {
          "ref": "75c60da5-191f-45c6-88b7-efe10d5ab198",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "56c324b6-2eed-4920-b822-1e70f958518e"
        },
        "item": {
          "id": "7a648564-5652-47ad-b0d2-e57e6d945756",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "8b0b2c81-8b67-4f47-a5b2-0559dc81c17e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7fd7404-4999-44d3-928c-ccf8a6938670",
        "cursor": {
          "ref": "778d9b68-a777-4036-88e7-adc75928d941",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e3ebcc96-83f4-49dc-8cba-ea5b32ec935a"
        },
        "item": {
          "id": "b7fd7404-4999-44d3-928c-ccf8a6938670",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "f9c5a8f7-49ab-48b9-9eac-e972c6d06637",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "958fe554-4a07-4046-a7e3-ff6fc8de4ec5",
        "cursor": {
          "ref": "e9de45b5-49cf-4d3f-b4f1-1040d11447f6",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "4cc49557-7a05-4a71-9599-bdebef533e5d"
        },
        "item": {
          "id": "958fe554-4a07-4046-a7e3-ff6fc8de4ec5",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a8a5b0fc-4d8f-4bd8-9189-6075687455f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d3d59f7-8033-4a9f-848a-ab6ab2e5b3a9",
        "cursor": {
          "ref": "c66cb610-47bf-43a9-8725-3b31aa662bfc",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6d0344ef-361e-4da9-be9a-6dffd6c4f77e"
        },
        "item": {
          "id": "9d3d59f7-8033-4a9f-848a-ab6ab2e5b3a9",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "71ec7ec1-0ae8-40e9-bf8f-f44c48fe2a92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "34ff891c-d646-46de-a25a-5a62726ca507",
        "cursor": {
          "ref": "b8610777-0301-4eee-8ca5-820409a7bc88",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "cedc7263-e22d-4e33-924d-c6fbbe587a4f"
        },
        "item": {
          "id": "34ff891c-d646-46de-a25a-5a62726ca507",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "6f937bcd-b251-4785-9ca0-7dd74bbcfe95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0605c047-3336-4ad3-8258-7ed01dbeacd2",
        "cursor": {
          "ref": "fda082aa-0609-41ac-b6a5-7cadd0e397f5",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "622353f8-06f0-4a04-912a-693144c5bf82"
        },
        "item": {
          "id": "0605c047-3336-4ad3-8258-7ed01dbeacd2",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "8d53f54b-d59e-4ecd-a3ba-5c6091ca239e",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9eac3bd3-5694-444a-bb5b-32fce40447b6",
        "cursor": {
          "ref": "0c7d6b2b-f9b5-4020-b41a-c886d363227e",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "bcc81b62-4726-4553-96cd-b67a44ff5623"
        },
        "item": {
          "id": "9eac3bd3-5694-444a-bb5b-32fce40447b6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "e0cd0054-1057-416e-9b66-9af821a3dcd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4857e9a3-b325-49f2-884b-ee21284e215f",
        "cursor": {
          "ref": "4b7ce3fc-2832-4eba-9a20-1c1aaf5017ab",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "63480c9a-428d-499c-88d3-4ef42c618487"
        },
        "item": {
          "id": "4857e9a3-b325-49f2-884b-ee21284e215f",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "7678b3bf-77e6-453e-b1e0-b564abc5d0ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "677522d8-725e-4d89-b542-e28785de6bc7",
        "cursor": {
          "ref": "88008a89-01c7-4d28-8b83-f2282b7576ff",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "992d78d0-3834-4409-814e-70be58025ac6"
        },
        "item": {
          "id": "677522d8-725e-4d89-b542-e28785de6bc7",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "89772f08-5301-487d-9fbb-79243dee560e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "458fe827-de4d-4e83-b4f5-d103351f81ed",
        "cursor": {
          "ref": "60181966-9d1c-484e-ba1b-d710cadf8107",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "f9b7e77c-cd7f-4056-82a7-a424ccaa8770"
        },
        "item": {
          "id": "458fe827-de4d-4e83-b4f5-d103351f81ed",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2cef2edf-d8e7-4ec1-a179-2febe08829ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "baa1d4c3-1fd7-4b95-b620-b5dbe4e485f7",
        "cursor": {
          "ref": "dde51464-d9a9-4413-9fa1-d33f91f553d5",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "aafc325b-99b0-4d6b-9df0-db2be3dc8e38"
        },
        "item": {
          "id": "baa1d4c3-1fd7-4b95-b620-b5dbe4e485f7",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "da4d93a2-2590-4a45-85ff-056d03275a5d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b962e66e-f60f-4a23-bfaf-a6de9401e9a1",
        "cursor": {
          "ref": "bc177a16-d1e9-4281-b16f-086cca204dfc",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "160d9282-ffb9-41f5-9d4d-3e835d33ccf3"
        },
        "item": {
          "id": "b962e66e-f60f-4a23-bfaf-a6de9401e9a1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "5cabd0b3-0443-4c40-a8e2-c045c985d05c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a5dbb50-98f2-408b-a419-3d3aa55e27b2",
        "cursor": {
          "ref": "9abf80ba-fef1-4c6d-88bc-03830029fb0a",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "4313a11c-401a-4bc5-a024-2de6f8c54110"
        },
        "item": {
          "id": "9a5dbb50-98f2-408b-a419-3d3aa55e27b2",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "e3abcb81-05ba-4349-a34b-f8f4a32ec029",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f9a360-d468-495e-83e4-b61a1b4fdeb1",
        "cursor": {
          "ref": "f823cfa8-610f-4d3e-a487-6140f3d66f28",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "d4f4d572-9654-40e1-862f-c9513e5db1f6"
        },
        "item": {
          "id": "92f9a360-d468-495e-83e4-b61a1b4fdeb1",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "b63e5537-0db2-4b1a-84af-a74604891cc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d4838b4-0016-41a4-b766-fdec7b61ea8c",
        "cursor": {
          "ref": "7ecc2100-c107-4ded-ab40-6f8a52e0038b",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "fb57eb25-4391-4c45-84e1-37e1b59a101a"
        },
        "item": {
          "id": "1d4838b4-0016-41a4-b766-fdec7b61ea8c",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "25c28045-7288-40b0-a27a-80ad1f48196a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd6f5e09-d509-4c8b-ac40-1a03639cf31b",
        "cursor": {
          "ref": "173f5fe6-3cd5-4377-a5e8-c80041aeae42",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "45b5d5f8-013f-417a-a201-33e09b625326"
        },
        "item": {
          "id": "cd6f5e09-d509-4c8b-ac40-1a03639cf31b",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "19ecf744-0aee-4737-a1e5-4478ebfbf701",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa568a0f-348d-4af1-a0ad-3121dc40bc5a",
        "cursor": {
          "ref": "4af90507-5aed-4a2a-9f1c-1e9eefe5b904",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "9d84fa5c-115d-4d99-b5dc-d878f2823ed8"
        },
        "item": {
          "id": "aa568a0f-348d-4af1-a0ad-3121dc40bc5a",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "46489bf8-d481-493c-ad42-2ba556674462",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a7691c03-5d5b-4ee4-bcc1-14d850a01c19",
        "cursor": {
          "ref": "c08870d0-13f3-4324-9eb6-11e517d8ab7a",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "44d8bd40-63fb-4b0e-8f5e-f9563d67211f"
        },
        "item": {
          "id": "a7691c03-5d5b-4ee4-bcc1-14d850a01c19",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "af2b2909-2d80-4c1d-9d01-c59556b9a2ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f8fe8be-3844-4710-8725-165fd481c41d",
        "cursor": {
          "ref": "e0d0f26b-9bbd-4bdf-9734-b985fc9bb466",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "3e0bdab4-5fa3-498e-aafb-8af9f843725f"
        },
        "item": {
          "id": "0f8fe8be-3844-4710-8725-165fd481c41d",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "73a97e71-6111-47cf-982c-b764b6d6ec84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4e2788b-d6a0-4905-8845-6869dab9f442",
        "cursor": {
          "ref": "c025b171-73ee-4682-87fe-cef1314a43ae",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "f2245cbc-6a64-42ba-966a-3d3ca9a43f03"
        },
        "item": {
          "id": "f4e2788b-d6a0-4905-8845-6869dab9f442",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "935c6f72-0a64-4c79-9139-c85b07733a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff763f7c-8688-4c83-aadf-61c4ff6c8734",
        "cursor": {
          "ref": "3fea33f1-3992-4b6b-915f-7a67f574c5f7",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "dbc55115-29c8-4603-89a5-dd8cf0851786"
        },
        "item": {
          "id": "ff763f7c-8688-4c83-aadf-61c4ff6c8734",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "7d20ec1f-b0af-4c5e-8faf-4a5f70084f81",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e17bd2dd-d15c-451d-9bbf-808f0b6357d5",
        "cursor": {
          "ref": "979b3ef5-ecb6-4893-a3c0-49e5c5df497a",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "a818e16a-cadc-45b8-bb49-2015a991b160"
        },
        "item": {
          "id": "e17bd2dd-d15c-451d-9bbf-808f0b6357d5",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "aa58475d-b268-468a-9a61-1bbbca8c562e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47467441-7cf6-4c45-80d8-778b1d223d2e",
        "cursor": {
          "ref": "d1ed952d-5ef6-4151-abf3-c3e7c09b8b5b",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "4e34c72b-e97d-4670-abf6-d0b37395cf24"
        },
        "item": {
          "id": "47467441-7cf6-4c45-80d8-778b1d223d2e",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "b2df0d9b-9143-4388-9408-fabadefbe294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f4a9c4c9-ecb3-4d67-81ff-9926e62a5b17",
        "cursor": {
          "ref": "e50f3e40-23db-44e6-8689-7c7e16b8db8d",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "7eb0bb40-d6a8-4a19-bb0f-8bebcc9df17a"
        },
        "item": {
          "id": "f4a9c4c9-ecb3-4d67-81ff-9926e62a5b17",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "ed32d2ad-225f-4d1e-a09f-15a507cfe599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87944bbd-7677-4ce1-90b7-96fad64ad2ba",
        "cursor": {
          "ref": "bcada913-ee4f-4d6a-b110-483cf4fd57f5",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "1d02f522-255e-438e-9250-f510862ad711"
        },
        "item": {
          "id": "87944bbd-7677-4ce1-90b7-96fad64ad2ba",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "52c6e6ef-9787-4323-a6a3-616590353531",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85bb133d-2d9b-4068-8a6a-9426b7dc28a5",
        "cursor": {
          "ref": "eab9800f-dc3a-4b7c-a011-42bedefc1cba",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "f7876713-9a41-45c9-a529-b8dadc278cbf"
        },
        "item": {
          "id": "85bb133d-2d9b-4068-8a6a-9426b7dc28a5",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b368a59a-37b2-4b37-9278-214433e47c4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79396d64-7fc2-4fbf-b36e-e91c46af6434",
        "cursor": {
          "ref": "ff664f9e-7db9-4139-9519-428d5f577207",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "7ae552be-94d4-44b3-9828-2a0d7a6eec6d"
        },
        "item": {
          "id": "79396d64-7fc2-4fbf-b36e-e91c46af6434",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "0e5e4ac8-1bce-4e77-a56f-bb3037ae07b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c52740d8-e050-4bfd-9f92-5aea90725d54",
        "cursor": {
          "ref": "63186b26-0828-44fb-95d3-5b8222ae9a0b",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "8a8eb698-350a-41a7-8659-d96562986456"
        },
        "item": {
          "id": "c52740d8-e050-4bfd-9f92-5aea90725d54",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "e843452f-ac92-4ddc-b26d-d7409c7ba865",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1761397a-3cae-421f-b7f3-e7d10cec26ed",
        "cursor": {
          "ref": "f8a6c298-0c01-415c-aeb3-21f75465fe87",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "62298c86-b74f-44bc-b7ea-3ad2509bbe7e"
        },
        "item": {
          "id": "1761397a-3cae-421f-b7f3-e7d10cec26ed",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d98754a6-c317-48c7-9861-a37e0218edea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b7ae78a-baad-4e05-8fd6-a4846882b7f8",
        "cursor": {
          "ref": "cf0f54a5-684c-4efe-9bc0-25387dcfcc23",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "9ee9f363-cab4-44a1-99c0-f5d49de14135"
        },
        "item": {
          "id": "5b7ae78a-baad-4e05-8fd6-a4846882b7f8",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "bf35a25c-ec08-4548-95c7-2bb89d1f3b7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aca083fb-3ff2-4b75-a800-5ef3f2adc27f",
        "cursor": {
          "ref": "45bb8ec3-fd84-4abd-8361-6f67a70ede57",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "9661989e-6cf4-49fb-8677-34b6bf022b51"
        },
        "item": {
          "id": "aca083fb-3ff2-4b75-a800-5ef3f2adc27f",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "ee012f95-27e7-45fe-a000-a24356210ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f97df128-82c0-4fb3-b6ff-99ced813b8af",
        "cursor": {
          "ref": "da4353a2-c335-4978-bcf5-a73cd384dc67",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5b772309-3b54-4851-8787-39d51f6378e5"
        },
        "item": {
          "id": "f97df128-82c0-4fb3-b6ff-99ced813b8af",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "78627803-7163-4dd8-80d3-ed75103c1da6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bf1f443-e014-44e9-8dfe-4ec7dbe8ef16",
        "cursor": {
          "ref": "8d346e32-2ee3-4e96-b500-052006424506",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "f10ba19c-e35e-4b90-815c-669e14ab86e1"
        },
        "item": {
          "id": "8bf1f443-e014-44e9-8dfe-4ec7dbe8ef16",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7260736e-6ab2-42fa-bd05-0fc3763efae5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0026104b-e735-4ec0-a681-d394fe409a5b",
        "cursor": {
          "ref": "80621c77-ccf6-4398-acbc-ff68002abbba",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "2bd62d63-68cd-401c-8cc7-b678c7d77c23"
        },
        "item": {
          "id": "0026104b-e735-4ec0-a681-d394fe409a5b",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "9ea9b8f0-3b0c-4d0f-b83d-083ffa4ff40e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4e1a5c5-4516-4f8b-b106-c6df43b6861f",
        "cursor": {
          "ref": "58ac1476-bd6e-4128-8e4f-9de5e8663577",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "bc578273-cc3b-491b-9805-561feefdebe0"
        },
        "item": {
          "id": "b4e1a5c5-4516-4f8b-b106-c6df43b6861f",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "410ada43-98fc-49a9-a2c8-317f62e3f49d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9763b4bc-1256-4348-a070-e6567396c5c1",
        "cursor": {
          "ref": "541df3a5-6b04-457a-bb76-f8dccfcc36e9",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "453a4614-be95-4d60-85d1-7f5d53c0237c"
        },
        "item": {
          "id": "9763b4bc-1256-4348-a070-e6567396c5c1",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "331f7526-390b-40c5-a961-ea2b90789945",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e365714-66ff-4e0f-b4dc-bcae4d678675",
        "cursor": {
          "ref": "708e7c58-69bc-435e-89bb-3ce1465b17b9",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "73543b87-d386-4ac7-9c93-197b3c8989b8"
        },
        "item": {
          "id": "2e365714-66ff-4e0f-b4dc-bcae4d678675",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9f5728f6-6c9f-4e1a-9286-ed311ae3a9dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88a3045c-3127-479d-9086-a926ddff17c9",
        "cursor": {
          "ref": "b819d0b4-ca29-4049-8e22-0c3045afcd82",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "21f25ffa-c23f-4d63-91cf-680018f13a36"
        },
        "item": {
          "id": "88a3045c-3127-479d-9086-a926ddff17c9",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "56bcbeb0-5c3b-4169-8bc8-e200b6ebb251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd511b1-906a-4569-afd6-9233f045f074",
        "cursor": {
          "ref": "bc30d520-e869-43c7-b595-1968f339456c",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "0ea6eeb1-33ff-4df9-afb2-22e8f8365483"
        },
        "item": {
          "id": "0bd511b1-906a-4569-afd6-9233f045f074",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "3306bc16-b5d4-4ab9-8ce2-ad275f670cd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b7e8f75-540e-43b3-a1c4-3111f258d29e",
        "cursor": {
          "ref": "0d87f679-ae16-4da2-99e6-f6c68c2648bf",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "03cbae9f-048a-4003-b4cb-bc71a9a0a136"
        },
        "item": {
          "id": "3b7e8f75-540e-43b3-a1c4-3111f258d29e",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "cd029fb5-e27d-4148-a4fc-3bc762619f3f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d470707d-d8a2-4656-b1bf-8f18168d6b1e",
        "cursor": {
          "ref": "ac34508d-facf-4250-a4b4-ea9bdc44653f",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "00e03e5e-5fac-433d-a40e-f71fd96cb826"
        },
        "item": {
          "id": "d470707d-d8a2-4656-b1bf-8f18168d6b1e",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "e85bf8f3-fbdb-42e9-b25e-e0162f887cbb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78a4f932-2c13-4a06-bae9-40866f051f36",
        "cursor": {
          "ref": "c0a7aabc-ddbe-48e8-9408-321e9ed917c2",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "52760cad-be02-4c5d-a850-ebeaa2dfcd69"
        },
        "item": {
          "id": "78a4f932-2c13-4a06-bae9-40866f051f36",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "4a9f3b8d-f327-4754-bbe7-e40978be7bfc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92be1016-44bc-410b-afb2-2892b8088ea4",
        "cursor": {
          "ref": "b8d54f3d-9a0d-4b56-bdbb-b15e04ca1d31",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "187442c7-cd73-4bc9-a716-ee006fbe7eda"
        },
        "item": {
          "id": "92be1016-44bc-410b-afb2-2892b8088ea4",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "7552959b-95e8-483a-8472-47b46fd98145",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5e1b3b66-da6c-47a6-9736-0f3351512b8b",
        "cursor": {
          "ref": "cc1ef604-e060-49c8-a37e-787634d6a881",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "16ea4992-ac69-4803-95f3-d1ecae3f13be"
        },
        "item": {
          "id": "5e1b3b66-da6c-47a6-9736-0f3351512b8b",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "5591e3f7-57e3-46ff-a067-b19ccf9ce4a4",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 55,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa51412b-99bf-4405-8801-39582ccf1def",
        "cursor": {
          "ref": "329a08ec-1e9f-4f6d-b05c-ce676363c6ed",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "8f80b98c-0455-4152-85f5-c389ad209044"
        },
        "item": {
          "id": "aa51412b-99bf-4405-8801-39582ccf1def",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "f1d1989d-46bf-4d80-8076-576ec8165ac0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "106b81a4-79e4-4f2f-a390-ad23e6d3a515",
        "cursor": {
          "ref": "207c3aac-49d5-4ab1-92ae-56f184e12f17",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "8a26fa5b-74a5-4114-9a81-33e9528b0ee8"
        },
        "item": {
          "id": "106b81a4-79e4-4f2f-a390-ad23e6d3a515",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "f9d3ebc7-8aba-445a-86f3-d2ed72f18c77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c150200b-31a2-43c1-84d8-65e9959ea193",
        "cursor": {
          "ref": "0fc6bdbd-11c7-4b13-b7aa-ea2a8629c8c7",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "5d07e6af-df2c-4a0e-b4bd-bce81044115f"
        },
        "item": {
          "id": "c150200b-31a2-43c1-84d8-65e9959ea193",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "6d796a14-aa88-42e2-a5e7-c29e300dc0fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9b4efec-1d6e-4bff-b1d9-bb38eb8259e4",
        "cursor": {
          "ref": "813186f4-1822-4c89-88ef-06d73b86bffc",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "1c7a019c-3f93-4f90-a0ed-f5c493a24808"
        },
        "item": {
          "id": "b9b4efec-1d6e-4bff-b1d9-bb38eb8259e4",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "1688c0fd-d3a1-4943-8c9a-93ff1db85b1a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e808fe10-eee6-405d-a885-e0872287bc26",
        "cursor": {
          "ref": "2740697b-8a40-4e4f-afae-eb2a05eed94c",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "f61b4995-393f-4bbe-a129-4244c3a13f18"
        },
        "item": {
          "id": "e808fe10-eee6-405d-a885-e0872287bc26",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "eff301f5-29a3-4c21-a973-d8c28598f0ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b24f6c0a-f514-432b-9125-30565514c958",
        "cursor": {
          "ref": "ff896e04-5669-46c3-a9a8-07ac8e34500e",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "55bf8c49-4c13-4517-a02d-5135cc6231eb"
        },
        "item": {
          "id": "b24f6c0a-f514-432b-9125-30565514c958",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "c8e5fa5c-3e51-4374-af73-b5b0fee2a251",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "83093558-c887-4eb6-8bff-2fa4025a44b4",
        "cursor": {
          "ref": "4be9d217-e6ed-4287-863d-c2d006bc7773",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "eab5073f-b69c-4fa9-af00-d1e6b4255df1"
        },
        "item": {
          "id": "83093558-c887-4eb6-8bff-2fa4025a44b4",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "cf9457da-4912-4074-873d-5ee72668e0f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "caf9ffee-bce8-4406-980e-53aa863a1131",
        "cursor": {
          "ref": "eba8c55f-3bf3-4ed2-a6b8-a769eee7e9f2",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "17d1ff4e-195a-4aeb-85da-ecfac86d6d73"
        },
        "item": {
          "id": "caf9ffee-bce8-4406-980e-53aa863a1131",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "0dead37b-ca68-4039-86ab-e0d604ce3cd8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45a87d53-de0d-471e-be06-ca06aaf2ad08",
        "cursor": {
          "ref": "294b38b0-2b41-474e-986a-3c14487f9e7b",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "28966d81-f2c0-49a5-884d-d7bc1ff12afd"
        },
        "item": {
          "id": "45a87d53-de0d-471e-be06-ca06aaf2ad08",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "26246dd7-1669-412e-9476-55c84d6e2ce4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea453566-c4b5-4d3a-a892-80c401208e60",
        "cursor": {
          "ref": "d9def39c-1d64-44b9-ac98-8c84f910132c",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "52603816-c4af-4b47-9c41-c3112b7e97e4"
        },
        "item": {
          "id": "ea453566-c4b5-4d3a-a892-80c401208e60",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "9d7f8264-f384-40fa-a114-ecb764b7164f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e28a85b1-6f4a-4bd3-a5fb-69f01f2c1b77",
        "cursor": {
          "ref": "ca49b58f-2f2c-4a5d-b2e4-006414a6e64d",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "9353124b-782f-489a-8049-9032130b027e"
        },
        "item": {
          "id": "e28a85b1-6f4a-4bd3-a5fb-69f01f2c1b77",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "823205f1-cd5b-479f-8df9-76c075ebf101",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8847aee9-805b-4295-82e4-ea21a95b0646",
        "cursor": {
          "ref": "621e0952-a9a5-4e8c-836d-633efe9b147f",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "aecd784d-c601-466a-bbed-a6818472d0cb"
        },
        "item": {
          "id": "8847aee9-805b-4295-82e4-ea21a95b0646",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5bc34d22-8b76-4dc4-a9ba-b97094ac9c34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11d62dda-f561-4180-9d9a-a277e6276971",
        "cursor": {
          "ref": "8ac21c54-8df3-4b3f-8700-a4e10819201e",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "d3a324fb-ecfb-46dc-9be6-356f21994eef"
        },
        "item": {
          "id": "11d62dda-f561-4180-9d9a-a277e6276971",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "2deb461a-dbdb-474f-bb00-70685f83ed11",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d77f14a-b6c5-4f75-9297-3bf2b80fe6cb",
        "cursor": {
          "ref": "fa44900a-cf66-4f7f-a8da-3bbcbdbd7150",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "14bdfdbf-c767-4c6a-9496-699260e6546b"
        },
        "item": {
          "id": "1d77f14a-b6c5-4f75-9297-3bf2b80fe6cb",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "eca6dadd-582e-4c45-b77e-1ac238094c92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa7074ba-66e8-42e1-a0c4-23cce2088d2f",
        "cursor": {
          "ref": "98add2f9-80b9-4ea4-aff7-11af7aed4d4b",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "699c62b0-abd0-4a7c-9b2e-4c37bed00723"
        },
        "item": {
          "id": "fa7074ba-66e8-42e1-a0c4-23cce2088d2f",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "a6406281-23c6-4f3e-9b66-1e221e713d71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d305e8cf-b3ff-4d05-adbe-286a70ad2d65",
        "cursor": {
          "ref": "11859f21-64ff-4996-9bd1-2e06b76fac1f",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "1699abf2-5d07-49c8-a4e1-0b11ab11c21e"
        },
        "item": {
          "id": "d305e8cf-b3ff-4d05-adbe-286a70ad2d65",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "0fe4e8c6-5b43-42b0-bd56-db448fa10662",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "409d29bc-f409-4bb9-b51f-186bf6a7a483",
        "cursor": {
          "ref": "f429aa03-c747-4358-8c0f-8e0d3485b78c",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "30dfd332-d94f-42fb-b3a5-7fb364b9c58a"
        },
        "item": {
          "id": "409d29bc-f409-4bb9-b51f-186bf6a7a483",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d3df02c2-d650-4c06-b81a-881de5d484be",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60046d49-191e-4b0b-9041-2fca3fc6f20d",
        "cursor": {
          "ref": "9f854d87-1042-4c68-a6e6-a994ee1f1199",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "0c9e7658-ea10-454d-bac6-be9f43ab356b"
        },
        "item": {
          "id": "60046d49-191e-4b0b-9041-2fca3fc6f20d",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "c372b5e6-40d1-40af-af8a-f6718266e8ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a53ae5b-b74a-4815-81c1-465273d53ea3",
        "cursor": {
          "ref": "f28e41a3-8ccd-4517-a202-c51173a36d1a",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "19b86a39-79bd-466e-8a45-897a4baddb2a"
        },
        "item": {
          "id": "9a53ae5b-b74a-4815-81c1-465273d53ea3",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "d7ec544e-1af0-4c4a-9ba8-5e9d0ef5654b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 171,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32b02140-3b30-4e80-bdec-4d2cadf8cf8d",
        "cursor": {
          "ref": "a59540a6-0292-4740-9354-74580a5337eb",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a4924b81-8d22-47be-995d-7c25118c2b7b"
        },
        "item": {
          "id": "32b02140-3b30-4e80-bdec-4d2cadf8cf8d",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "1cf56b9b-534a-498f-9bb9-76efd169f154",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afd78fc4-6069-4fb5-a787-fc1d78f96d68",
        "cursor": {
          "ref": "d3e0d9e0-c9e7-4366-88f7-c5e9a0bbfbc9",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "63732c33-5d60-48f5-9be3-9b7e547f3d19"
        },
        "item": {
          "id": "afd78fc4-6069-4fb5-a787-fc1d78f96d68",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "b01eb5ac-4872-4acb-9aca-1840ceee6ddb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7d355db-aa6e-4976-ad5c-1fa23c23678d",
        "cursor": {
          "ref": "24c7ea11-580d-4f7f-92ef-9885e29ab558",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "860e1de0-10b8-4386-aced-bf4ce2c159ec"
        },
        "item": {
          "id": "d7d355db-aa6e-4976-ad5c-1fa23c23678d",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "2e8e0874-95fd-4461-8c70-d7fb10adc5f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e67f6af1-e628-41c2-9aee-eacc772c19cf",
        "cursor": {
          "ref": "5d6aa2b7-20e1-41d8-bc59-9718023cefa1",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7670324c-0557-42a3-8a06-bfcbfa60d516"
        },
        "item": {
          "id": "e67f6af1-e628-41c2-9aee-eacc772c19cf",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "87413b15-efea-4f75-abcf-b5bed2bee342",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4294bbba-d7ea-4f1d-bdec-0de943d812e0",
        "cursor": {
          "ref": "2f57d0f1-1c75-403e-8a07-36e0bf55a7d8",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1e075275-d1b2-43f8-8c5e-6cf07aa5fab2"
        },
        "item": {
          "id": "4294bbba-d7ea-4f1d-bdec-0de943d812e0",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "37aefa5f-c0c5-4a32-925e-b62e1fe400d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9ccf2cd-2745-4c3e-be3f-cc1111657c19",
        "cursor": {
          "ref": "cd30b6e4-fd50-4f79-a472-2fe094fc97fd",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "261efa1d-49f7-4185-b542-57fbba7c9a5b"
        },
        "item": {
          "id": "c9ccf2cd-2745-4c3e-be3f-cc1111657c19",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "7af8437d-3710-4277-8e9a-a68ea1300d03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "261d3cdd-36c5-49d1-8fa9-561f24a626af",
        "cursor": {
          "ref": "2edb6e2e-0137-428e-b37e-77f06c81ef95",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "72332388-f40a-4cc3-8534-4a9d0b35cb8b"
        },
        "item": {
          "id": "261d3cdd-36c5-49d1-8fa9-561f24a626af",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "ce2d26fd-d777-4af7-a6e3-d8a1b4f8a714",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "850a20a4-0047-47d2-92bf-03e6d782db9f",
        "cursor": {
          "ref": "65830777-4e19-47d6-a70f-9a5157641266",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "d616c646-f526-481f-b289-394b3c7da292"
        },
        "item": {
          "id": "850a20a4-0047-47d2-92bf-03e6d782db9f",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "19843b44-480f-4500-965e-a91ca6de3c4f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f13c22b-859f-4178-86c3-63b69cd4e958",
        "cursor": {
          "ref": "eb490e7c-d492-4282-817a-231a1044c0c2",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "a8564f79-5a0f-418a-9e6e-627244518126"
        },
        "item": {
          "id": "8f13c22b-859f-4178-86c3-63b69cd4e958",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "3b20021f-6fce-4c15-ad3f-6cd9b8918b2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 65,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "972777b3-000a-4d48-9007-11b926af3130",
        "cursor": {
          "ref": "0c0c7c2c-f2e4-47ef-ac1d-f3049ced0de2",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "f59ef1f2-1ea2-4e57-bfcd-f87feb39336a"
        },
        "item": {
          "id": "972777b3-000a-4d48-9007-11b926af3130",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "c02f1222-282a-48c3-ad7b-607282c8c83c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "167d78d9-d58f-488c-a10a-31df42b65dd2",
        "cursor": {
          "ref": "2c7fca98-3e43-482a-8158-81e8f7fc9cd7",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "33356e3a-f62d-445d-aa6a-2111871bcd45"
        },
        "item": {
          "id": "167d78d9-d58f-488c-a10a-31df42b65dd2",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "79a2ab5d-d877-477e-9bcd-fc5d4fb9a1f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5cc7f473-f301-42dd-a366-0b4bda1542bb",
        "cursor": {
          "ref": "266051a7-d600-46db-8b9d-f3411b691295",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "e34784aa-4329-47a5-b277-a6b08d89a152"
        },
        "item": {
          "id": "5cc7f473-f301-42dd-a366-0b4bda1542bb",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "51bd673f-ab5f-48e0-ba70-a1c99c705996",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3280529-415a-4412-872c-f08636f2ac63",
        "cursor": {
          "ref": "511b62dc-fbe5-461b-8101-1face891da9b",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "6ede5898-1829-4079-a2ae-9a74a31c205a"
        },
        "item": {
          "id": "b3280529-415a-4412-872c-f08636f2ac63",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "b79547d6-65b6-4070-b055-2f4231901d52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a169986-cc21-4e02-a107-f213cc6861d0",
        "cursor": {
          "ref": "7b5aec8b-1c58-43e2-a176-9718fa992672",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "6eae3699-7966-4780-8322-702576bad396"
        },
        "item": {
          "id": "1a169986-cc21-4e02-a107-f213cc6861d0",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "9d5f159c-4f1b-4a2e-aead-e175f09170e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2ff066f-61b1-4d5f-bfab-5d67880b2e2b",
        "cursor": {
          "ref": "325b5682-74a3-4928-9aad-6c07393a150e",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "ff8af292-3fde-4e74-b7bf-654f1ad0b135"
        },
        "item": {
          "id": "d2ff066f-61b1-4d5f-bfab-5d67880b2e2b",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "1396809e-2a54-4b78-b1c4-1e0659b85035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39c6c10b-0e62-4098-b7ad-699d5013c936",
        "cursor": {
          "ref": "1de50a63-a657-4cc0-adad-75d16eeef54a",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "1f574cd1-f397-4151-a940-8a32aeeaa945"
        },
        "item": {
          "id": "39c6c10b-0e62-4098-b7ad-699d5013c936",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "b4eef4fd-b84a-40c3-9c7e-c9a0e66709ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 67,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4ec910b-f742-4b08-8ea5-d3f3da605a20",
        "cursor": {
          "ref": "e37f65f5-32e4-415b-90db-4c17468ced3b",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "b953b548-68a1-4e61-8f39-c5a3ba9e38cc"
        },
        "item": {
          "id": "b4ec910b-f742-4b08-8ea5-d3f3da605a20",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "5a43e602-2884-4a93-ad9d-72ad5d4f085d",
          "status": "OK",
          "code": 200,
          "responseTime": 107,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "3d0821e2-c9de-4906-8bfb-b79505049f63",
        "cursor": {
          "ref": "fbd9ff23-5ddc-4081-9f63-304987353be8",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "8c28ebc4-5672-4e14-b9b5-eef5fcc6d649"
        },
        "item": {
          "id": "3d0821e2-c9de-4906-8bfb-b79505049f63",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "9cb54cf2-471d-4e9c-ae90-bee4c850ddf8",
          "status": "OK",
          "code": 200,
          "responseTime": 219,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "4cc23810-5e42-488a-b972-a2a79f08d961",
        "cursor": {
          "ref": "22b94167-e664-4bac-99a6-dbefc7df0a95",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "75b414f6-b5be-4fa1-b4a2-905c1a14ad34"
        },
        "item": {
          "id": "4cc23810-5e42-488a-b972-a2a79f08d961",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "81e1bcce-6253-4e03-80f7-0af2e2d4ee37",
          "status": "OK",
          "code": 200,
          "responseTime": 249,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "7033892b-f7da-4786-bcaf-c22fcb4f0305",
        "cursor": {
          "ref": "7167fa6d-20b0-4a99-875d-ae8b35c1eb99",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "031c55b2-6951-40a5-9a7d-6055ba14d6e2"
        },
        "item": {
          "id": "7033892b-f7da-4786-bcaf-c22fcb4f0305",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "a98fedb8-783c-4e42-a9f0-37af67e636b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3aa6c0bc-48e1-4fdb-9574-1eb2ca6f86bf",
        "cursor": {
          "ref": "f744a7d1-9b43-4a67-8f9b-a0080a1a5ede",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "029634de-422a-4c9d-a6ac-69d893a435e1"
        },
        "item": {
          "id": "3aa6c0bc-48e1-4fdb-9574-1eb2ca6f86bf",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "ad9c7438-c53d-48a2-8dc5-9e027f1fc45b",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "aa674644-aedb-4fdc-81d9-787142bf6fdf",
        "cursor": {
          "ref": "646da46d-ebde-401b-8587-a0034b121ec9",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a6d3ab52-07d8-4af9-ba55-cef5df26877b"
        },
        "item": {
          "id": "aa674644-aedb-4fdc-81d9-787142bf6fdf",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "bd28d74b-fd85-470f-82c3-1d2d88592faa",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "f5c0bcd5-3f79-4e72-94f6-1ed628a3ec60",
        "cursor": {
          "ref": "7a1cb3ae-3692-4ac7-b09a-e59225d09c8e",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "8ed4095c-a89d-4396-857a-46efb3bf9614"
        },
        "item": {
          "id": "f5c0bcd5-3f79-4e72-94f6-1ed628a3ec60",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "48a5c8cd-c1e2-4800-932a-ea509d26386f",
          "status": "OK",
          "code": 200,
          "responseTime": 151,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "10c42e4b-f74e-49ea-8a0e-2959a0b06638",
        "cursor": {
          "ref": "d69154c3-d734-498a-8fb4-d6ce45961d45",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "2feb0e6e-e54f-44a7-aa08-05c1e48e620a"
        },
        "item": {
          "id": "10c42e4b-f74e-49ea-8a0e-2959a0b06638",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "bd146740-17ce-4bdb-b8a7-6fd5548e0925",
          "status": "OK",
          "code": 200,
          "responseTime": 115,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "b35d5d2a-f232-4535-ab3b-40cd09e8df52",
        "cursor": {
          "ref": "b3a7df33-cb48-42d8-ac24-abaff71f1bba",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "3be55ed3-34a5-470f-b2b1-4f3fdcfce78e"
        },
        "item": {
          "id": "b35d5d2a-f232-4535-ab3b-40cd09e8df52",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "3d116922-bec2-47d2-87ce-5fb944b9bdfe",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "792ff34b-1e9a-4e33-b639-ff0f8bec5118",
        "cursor": {
          "ref": "83933f35-e76b-4645-9c99-40a25f4bb36f",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "1b7fa298-ebda-41d3-9f32-2ad7114396f4"
        },
        "item": {
          "id": "792ff34b-1e9a-4e33-b639-ff0f8bec5118",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "5f1704a0-738f-459d-ae90-0a532192dc7b",
          "status": "OK",
          "code": 200,
          "responseTime": 117,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "04161fa1-b823-4e16-896a-b514779a11b5",
        "cursor": {
          "ref": "6ee8931f-cc03-4cac-a174-20c77b63186f",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6abbc5c9-9b0d-4e64-bc03-828928432e80"
        },
        "item": {
          "id": "04161fa1-b823-4e16-896a-b514779a11b5",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "c0fecea3-1d02-4151-9ce9-22b83ef92313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ece6f11-2820-4900-99d9-c6ace41330eb",
        "cursor": {
          "ref": "99902410-f1cc-4cf9-9da1-644c97f540b4",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "e5d4c6d4-4fc1-459e-8d1a-c7cce25207e1"
        },
        "item": {
          "id": "9ece6f11-2820-4900-99d9-c6ace41330eb",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "e2dd1c45-2ce1-445c-bceb-3c16baaa4f30",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11064a58-8ef5-44cb-88e8-46ff71265799",
        "cursor": {
          "ref": "b8cf4b80-72ee-4096-a918-6d2548f3300a",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "8907f94e-830e-46b8-9ed7-669afe4b5ec6"
        },
        "item": {
          "id": "11064a58-8ef5-44cb-88e8-46ff71265799",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "8830fd41-983d-497a-a035-07dfa93588bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8929592e-ffe2-4c0f-97b6-70436226e830",
        "cursor": {
          "ref": "e469ea21-5d70-4397-92ff-46e8a2c33b9e",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "1b1aa098-2564-47be-9d62-d3b8891857fd"
        },
        "item": {
          "id": "8929592e-ffe2-4c0f-97b6-70436226e830",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "163fda39-f2ca-421f-8ed8-709acdddda38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 72,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d6a5747-bad0-4816-9d90-d3ada40810ec",
        "cursor": {
          "ref": "eb139087-2296-4caf-ab29-ee1a088d819d",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "28da66a4-f080-4a3d-9128-b2c4ece10844"
        },
        "item": {
          "id": "0d6a5747-bad0-4816-9d90-d3ada40810ec",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "d0ccc80d-ed28-4b27-b706-abc9aa3f83d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bd85818-62e0-4cc7-9c5e-9b2cde564f8c",
        "cursor": {
          "ref": "1061f16a-064e-4cc1-8db4-df23e3e16119",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "17bc2bd9-13e5-44f1-8d5e-649f28652470"
        },
        "item": {
          "id": "0bd85818-62e0-4cc7-9c5e-9b2cde564f8c",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "7bc5415f-7e4f-4336-a833-6d269d4b39a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a574610e-f7c3-4aa9-a7eb-4baeb11747a8",
        "cursor": {
          "ref": "e5643a7c-664b-44d7-a951-40dab296999b",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "d8749c9a-8511-44c4-8ca2-3492efb6acc3"
        },
        "item": {
          "id": "a574610e-f7c3-4aa9-a7eb-4baeb11747a8",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "2ab92fc3-8473-4e72-8a68-fd4215426c7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aebb8f9-813e-4fa2-8a7d-f57411085b82",
        "cursor": {
          "ref": "1ebac7ff-cb52-4baf-9c3a-a72a56091e00",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "984e8dcc-c9aa-4c09-9ae4-93fcf8a53314"
        },
        "item": {
          "id": "5aebb8f9-813e-4fa2-8a7d-f57411085b82",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "a6fe2350-0a79-4baf-92e6-f5b9edc66bad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb94d8a9-bfa8-4e39-bc35-9f54460efec9",
        "cursor": {
          "ref": "ad6469db-0d57-40c9-9ce5-6d5fccb6eb86",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "4fbbc562-b003-4e14-a353-94b4cd0ec696"
        },
        "item": {
          "id": "fb94d8a9-bfa8-4e39-bc35-9f54460efec9",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "895d934c-082c-4d88-adb3-4ac3a2180bc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3bdfce93-a6ec-4d24-b1f4-e68a37786d0f",
        "cursor": {
          "ref": "2b8bc95f-f8b3-40a1-bf3e-5ff1a8f0117c",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "7f8dccc8-c2c4-407b-ad2d-dc5bf564f513"
        },
        "item": {
          "id": "3bdfce93-a6ec-4d24-b1f4-e68a37786d0f",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "f0515355-0551-4dfb-98d4-d4a32eb52d12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9a8c294e-b389-4092-869d-a1c8eb2e967f",
        "cursor": {
          "ref": "3265b2f2-6ef5-4871-84b3-7f1eb43f8bf7",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "687c1c1c-6a6c-4b7c-9c7f-06d1cf4f2d9f"
        },
        "item": {
          "id": "9a8c294e-b389-4092-869d-a1c8eb2e967f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "0eefbd53-c5cf-49b7-abf8-c56a2b376137",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aab2a349-a50e-4a44-9419-bb9e812baca1",
        "cursor": {
          "ref": "741cda29-0254-44bc-a116-ce0208ffafe9",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "7f03953c-3e12-4d89-8770-0e38d03d16e6"
        },
        "item": {
          "id": "aab2a349-a50e-4a44-9419-bb9e812baca1",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "5da6f472-f119-4b56-b4c6-475cce2f273c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d3d58f4-906b-4902-8b12-cb79b600eff2",
        "cursor": {
          "ref": "4870389d-7188-4b93-8a91-adae9fa548c9",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "faeef62b-60c3-464d-8bf8-355855277a1a"
        },
        "item": {
          "id": "8d3d58f4-906b-4902-8b12-cb79b600eff2",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "dd24ca24-c281-4ba5-bbe2-546e6e5f58ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d202f4a1-2e85-4bf1-9433-94ad9e6c6711",
        "cursor": {
          "ref": "002aa887-7b1b-48ae-bffe-7ba34e61e41a",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "47d5ded4-d1ed-4a15-9d1e-f22187281a3c"
        },
        "item": {
          "id": "d202f4a1-2e85-4bf1-9433-94ad9e6c6711",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "5d6562f0-1602-40df-8276-dbc8dd37f973",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "f7e5697a-dd89-4e06-af73-1c0d25f52ce9",
        "cursor": {
          "ref": "0188fd5f-92e0-4c1d-a795-00a54f435cec",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "d4ebda1b-41f6-432e-b966-c452377e942b"
        },
        "item": {
          "id": "f7e5697a-dd89-4e06-af73-1c0d25f52ce9",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "91e9e5ff-a487-496c-800c-fc284833f514",
          "status": "OK",
          "code": 200,
          "responseTime": 108,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "f2643e6e-8dc8-4c5a-a32d-5b2754d6f928",
        "cursor": {
          "ref": "05883b0c-2ebe-4117-a5cd-d1f5233ce69a",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "ce67f13a-928f-4eb1-ad45-0e3f5cb27ac2"
        },
        "item": {
          "id": "f2643e6e-8dc8-4c5a-a32d-5b2754d6f928",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2051fc1f-faec-4643-8fe5-d8aef554bf0a",
          "status": "OK",
          "code": 200,
          "responseTime": 177,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "9c724158-6ab8-41e3-99fd-72fb612d131f",
        "cursor": {
          "ref": "dd0f72b2-9736-49aa-a6fe-9bc39b3db043",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "69ac9332-aa9d-4010-8c00-035c2f1c386c"
        },
        "item": {
          "id": "9c724158-6ab8-41e3-99fd-72fb612d131f",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "1ee2a2fa-1ff7-4e52-94d5-36915f46373d",
          "status": "OK",
          "code": 200,
          "responseTime": 119,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "75656fd3-54ae-4e1d-935f-c133a9ebce4f",
        "cursor": {
          "ref": "6c0087fb-33ed-4b82-bd6e-2d3a27d1c950",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "8eed38b7-4719-46e2-b1e5-a9e22c3c4eb3"
        },
        "item": {
          "id": "75656fd3-54ae-4e1d-935f-c133a9ebce4f",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "bbb1c3bb-1c70-4f1b-8450-d4468ffc7d27",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "35f41761-2c55-4259-93f6-425d3297c291",
        "cursor": {
          "ref": "cf88155d-a1b0-43a1-b342-db6d520b32b1",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "d1a875bb-300a-40b1-9d7d-86e32332ea60"
        },
        "item": {
          "id": "35f41761-2c55-4259-93f6-425d3297c291",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "9b582b2d-f445-40d2-b7c3-144cb41d847f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4ee5142c-932d-45cf-aec9-b2c1882842b8",
        "cursor": {
          "ref": "c2100a7a-4210-468c-ba3a-94befdb4d34a",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a068719e-ddfd-4e69-b07a-bd9ba38e7d8a"
        },
        "item": {
          "id": "4ee5142c-932d-45cf-aec9-b2c1882842b8",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "705f6962-66ee-4129-82ef-146a5fbf21c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92439b2a-a99a-4ed3-9fa4-760f4ff0fc8f",
        "cursor": {
          "ref": "c40a1917-5f10-4b95-9403-f938a7e9b96e",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "cd3b8221-acef-44ea-930b-c27d93d91a94"
        },
        "item": {
          "id": "92439b2a-a99a-4ed3-9fa4-760f4ff0fc8f",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "c30e004e-12f8-430f-a547-7076ed2b858e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59cca090-f072-403f-ad41-a3d7d57929a8",
        "cursor": {
          "ref": "c428c563-68ab-4973-a45b-47a34d04430a",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "151958fc-5eaa-4bac-9da3-ec967c939678"
        },
        "item": {
          "id": "59cca090-f072-403f-ad41-a3d7d57929a8",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "6e0c45ec-25ac-4ca0-9e33-231cdc9826d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70696244-4c1d-4b30-8244-6f1acc0accee",
        "cursor": {
          "ref": "698e80de-c448-456f-a544-435ccdb37619",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "9f2b5012-32eb-4322-b8bd-0f200681b25f"
        },
        "item": {
          "id": "70696244-4c1d-4b30-8244-6f1acc0accee",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "5fb0440e-f203-48db-b2e0-618dbb5371b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 64,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2a14b2-1fd2-4fc8-bf6e-c9cd916d72ba",
        "cursor": {
          "ref": "9e8b0c52-bf54-45ce-931f-d715dd1196d4",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "7d1ff694-088a-42f3-bca0-b5c987051955"
        },
        "item": {
          "id": "ee2a14b2-1fd2-4fc8-bf6e-c9cd916d72ba",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "527e3f25-b23a-4266-8dec-4617bc71d6fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc3d000e-5764-4147-bd03-f0d92e677499",
        "cursor": {
          "ref": "718499bd-6404-4dbc-859f-b92cb6a3ebaf",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "ea4a34d5-3c7f-41dc-897a-61c65e16cff3"
        },
        "item": {
          "id": "bc3d000e-5764-4147-bd03-f0d92e677499",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "4e58689c-cdca-4fa5-b35d-36fda79fdd75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c16e3a-9c6a-47ba-9e21-bb92ad02d0d8",
        "cursor": {
          "ref": "5919e093-6ccd-4b03-b96c-50c7e46ef6ce",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "23775685-7ccb-43c9-9ffd-b9e89df125e9"
        },
        "item": {
          "id": "16c16e3a-9c6a-47ba-9e21-bb92ad02d0d8",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "e797c3e0-90bc-493d-9c37-5e59c024f375",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc273c79-ceb2-4052-9f42-60a38aa0cd1d",
        "cursor": {
          "ref": "531c9722-19d3-4482-9687-6c0cdf96ede5",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "d27cb206-77d5-4e50-a53c-de469672ac09"
        },
        "item": {
          "id": "fc273c79-ceb2-4052-9f42-60a38aa0cd1d",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "64408a3f-2d26-4265-891e-4489e9dcd3e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eae0a7d9-0670-49d4-acc1-acfb438df51a",
        "cursor": {
          "ref": "3529ef0b-ce35-424c-aab5-f8a5e4cf8964",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "88561828-f09f-4500-bc57-69fbb1c246bc"
        },
        "item": {
          "id": "eae0a7d9-0670-49d4-acc1-acfb438df51a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "2ae85c79-eed1-4118-9aa2-c00821378162",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 70,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3318442c-b1be-4057-b742-8591342fa06a",
        "cursor": {
          "ref": "8667133b-408c-4a02-a3e0-6f67ce908702",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "b4ba1150-3032-4cf6-9df6-8d097d5bbf0f"
        },
        "item": {
          "id": "3318442c-b1be-4057-b742-8591342fa06a",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "833d5106-7270-4465-a149-a8925744e707",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4ec3ff6-5c32-4477-a9d7-2239782f1ed0",
        "cursor": {
          "ref": "e530bb5e-475a-4e03-9065-9eb4410b807a",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "abe1a190-faa8-49d2-b27c-7296bd67fdb4"
        },
        "item": {
          "id": "c4ec3ff6-5c32-4477-a9d7-2239782f1ed0",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "a2b74ac5-741d-4c84-b899-a9adef2a1ef5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b361cfa5-dbe9-463d-b215-00826801a2bb",
        "cursor": {
          "ref": "4e62f788-9ad2-4a6f-bc05-ce7c9865720d",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "976c9558-0068-4c43-a43c-0092eae11f2a"
        },
        "item": {
          "id": "b361cfa5-dbe9-463d-b215-00826801a2bb",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "a8c5c9cf-0f17-46b5-8fc2-6fa9f7e73ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "94961702-d5a4-4587-a655-29697576ee78",
        "cursor": {
          "ref": "0def7db7-4109-43fb-95ba-4c53203c2800",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "1ece2e56-e679-425d-b9f2-41fb9351ac67"
        },
        "item": {
          "id": "94961702-d5a4-4587-a655-29697576ee78",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "297e5954-6db4-414c-bd53-c3b200fccbe2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c91911b8-c842-4c21-b773-2cb818696bab",
        "cursor": {
          "ref": "14395c82-6f89-4d14-a827-ed2f9c179f8d",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "294b0c54-fb89-4187-a332-142d786b2491"
        },
        "item": {
          "id": "c91911b8-c842-4c21-b773-2cb818696bab",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "f6dcc432-1198-48a5-a94a-333a695f081e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "868bc738-3b15-4466-ad06-6b2d01d4eaf1",
        "cursor": {
          "ref": "e802775f-d0d3-4a4a-a222-0dd5382de1be",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "1488e8ac-1ff1-40b9-80b5-a06f04932b85"
        },
        "item": {
          "id": "868bc738-3b15-4466-ad06-6b2d01d4eaf1",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "6416c677-368f-4ba7-bfff-b74738b86d2b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1afc9664-73da-4e74-b5ba-91f53657d0e1",
        "cursor": {
          "ref": "c0ea9a1e-22ec-428e-a123-ada9d0b1408a",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "a39f6772-1b03-42ea-8894-8289295a2a1d"
        },
        "item": {
          "id": "1afc9664-73da-4e74-b5ba-91f53657d0e1",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7dbad76c-0c1f-4b4a-bf2d-54ba8d3c3f44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ebe8f7a-967f-482c-8b37-cd82eb4162e5",
        "cursor": {
          "ref": "fec15dec-e9cf-4bdc-ba13-78243fca96dd",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "d9320a07-8712-42d1-bec2-3754fc0b6656"
        },
        "item": {
          "id": "6ebe8f7a-967f-482c-8b37-cd82eb4162e5",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "c13ae826-e7f2-4d8d-b957-838a00390e1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21625692-7578-4343-ad26-6135592b32c7",
        "cursor": {
          "ref": "507b27da-c217-48ae-ad3a-844f22a03024",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "1cda7cf5-0cae-40a2-a7d3-c47ccf81efd8"
        },
        "item": {
          "id": "21625692-7578-4343-ad26-6135592b32c7",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "64bd6083-b6b8-4e4a-a488-91f165900b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "645ad5b7-c41a-49e3-8109-dc827c80da71",
        "cursor": {
          "ref": "257339c3-0d7f-491f-8d08-00bbe976e77d",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "bd7a3958-21b8-4dbe-846d-8adeb7004260"
        },
        "item": {
          "id": "645ad5b7-c41a-49e3-8109-dc827c80da71",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "84476b2e-8a91-4eb6-a7bb-98a0cfa8d66b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 63,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b918b4-22e1-4900-9022-b420eb5448b0",
        "cursor": {
          "ref": "fcfba6d5-72c5-4e73-b38d-332873670611",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "547fcde4-fefa-49c8-bec0-21b8e94c026b"
        },
        "item": {
          "id": "70b918b4-22e1-4900-9022-b420eb5448b0",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8f800ce7-7431-4d94-80a5-ad98ff4bfe4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "48073b0f-99de-4f1f-8e76-3e5f07117a27",
        "cursor": {
          "ref": "8619ec81-3fbc-452e-8ed4-b424d6abbf47",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "8368ceaf-7a01-4a6a-b00c-08177fc7ff40"
        },
        "item": {
          "id": "48073b0f-99de-4f1f-8e76-3e5f07117a27",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "8dfa23eb-f0dd-4bae-886e-9e1e38e2b69d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "19c04a42-65fa-4d51-bb50-c65e3c8b18c1",
        "cursor": {
          "ref": "88c3e622-64ae-4fef-92ad-e019e4505b5e",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "bf794f72-a1da-4520-8e43-d2bb854d538f"
        },
        "item": {
          "id": "19c04a42-65fa-4d51-bb50-c65e3c8b18c1",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "ea8da4ec-4342-43da-a633-18dbba29522c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb9db356-2ca6-4710-95dd-b6d62b2baf5a",
        "cursor": {
          "ref": "75c907e8-dc7c-4725-aeae-35569685e0f8",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "fc4d7119-fb93-4280-8961-aa158a263c57"
        },
        "item": {
          "id": "cb9db356-2ca6-4710-95dd-b6d62b2baf5a",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "66c1e86f-aa52-4b01-943f-e35a0925f5af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16111e27-1f0b-42b1-a1f8-477cd96394d3",
        "cursor": {
          "ref": "5af4a64b-43cf-4e5e-a964-3d1afbc83d54",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "149a7be5-37f4-4452-9171-553d995564f7"
        },
        "item": {
          "id": "16111e27-1f0b-42b1-a1f8-477cd96394d3",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "aeded259-bebc-49c4-9c18-0822e9701f08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d5c26f4-6281-4eda-8a6d-7cf7b9be8680",
        "cursor": {
          "ref": "e4428f8c-bedf-444b-b89c-cb320eb285dd",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "3cd7e0a1-0edb-4df8-83af-cf07a81105c5"
        },
        "item": {
          "id": "1d5c26f4-6281-4eda-8a6d-7cf7b9be8680",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "819b5a79-3d70-4677-8084-16e2021e8409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1acc1f88-6b7f-4e95-a620-caf77eb45abb",
        "cursor": {
          "ref": "4de730a7-a67d-4b04-a47e-349cc5feeaa4",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "d971a6e4-ae2d-4fbf-9746-975b01dc9253"
        },
        "item": {
          "id": "1acc1f88-6b7f-4e95-a620-caf77eb45abb",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "7e9d270e-6058-4aca-97b2-b23ebcc39af4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d6f4348-d9e3-47d4-b9ca-d742eb787585",
        "cursor": {
          "ref": "a4c78d6e-d3dc-4ad6-beaa-3ad6bdd30ca1",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "3f968fc8-f834-4cea-a277-ebc8352331a7"
        },
        "item": {
          "id": "8d6f4348-d9e3-47d4-b9ca-d742eb787585",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "194f84ef-a652-43d7-9eca-e74c3c83e01e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23e0ee0d-36b4-4067-b6b7-5a4e6e093ba4",
        "cursor": {
          "ref": "c9935f6d-3906-400c-9aac-cf46b8dad04e",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "4540336d-9111-463b-9347-f0c7f64d6534"
        },
        "item": {
          "id": "23e0ee0d-36b4-4067-b6b7-5a4e6e093ba4",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "0d1439f2-42d8-4c39-a292-ad8f08ef1c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "288bb522-2aad-4877-b39e-b15aa28f7b91",
        "cursor": {
          "ref": "52fd04bf-cc23-4a46-afef-7bc5bf288e89",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "3b933276-6f3f-4783-9218-9c31d084f774"
        },
        "item": {
          "id": "288bb522-2aad-4877-b39e-b15aa28f7b91",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "5a37fcba-649f-44b2-8bdd-138d27aeeffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 58,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4934709-4749-4920-9f3a-000a8297fa7f",
        "cursor": {
          "ref": "b4de8624-53bd-46ec-9734-464ae8055cc7",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "816637d5-1658-46fa-8184-8389e98bc262"
        },
        "item": {
          "id": "c4934709-4749-4920-9f3a-000a8297fa7f",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "e5cc1db3-6849-4af3-8fae-a6de238f17b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 61,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3744931d-ea26-4cb4-8a01-c554991242e8",
        "cursor": {
          "ref": "73861138-9ade-4b3b-9944-d2ebf11cd051",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "2c5db03b-0852-45b2-b8ff-43f053b4c176"
        },
        "item": {
          "id": "3744931d-ea26-4cb4-8a01-c554991242e8",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "de0e5a87-8c18-47b4-b3da-1cf5ded50773",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 62,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "833ba3b1-735a-45d3-ab11-58a15152b1f5",
        "cursor": {
          "ref": "e35d3acb-b6ab-41ac-b05d-fdbecc55daef",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "9de2200a-bcaf-40df-803d-17bd354965b9"
        },
        "item": {
          "id": "833ba3b1-735a-45d3-ab11-58a15152b1f5",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "1a57f2c5-0daa-4ce8-9b8d-484bb06bb925",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c77988a2-3a62-4476-9ae7-7111654b2b10",
        "cursor": {
          "ref": "48511383-c1e4-4fa2-9171-76b50311d15f",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "fac8acf6-c3a8-4fb6-8230-94f88ebbf61a"
        },
        "item": {
          "id": "c77988a2-3a62-4476-9ae7-7111654b2b10",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7134f575-5d88-44d6-ac38-9fc5da1c7c70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 60,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "719d1f8e-20c2-4b1b-b339-8521548c587a",
        "cursor": {
          "ref": "680bd35c-68fc-46de-a003-3a3ade3cb64c",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "0ca307b9-fea2-47fd-afc1-c418c5bc5652"
        },
        "item": {
          "id": "719d1f8e-20c2-4b1b-b339-8521548c587a",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1bce4d75-d0ba-47ac-b81b-c265c157e343",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 47,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "670c61f3-ae73-4646-99f3-a010112ee212",
        "cursor": {
          "ref": "b8f4ff48-b1c1-47d9-91c3-6fa238582206",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "8a2d9ae2-c318-4731-8f74-06743b2745ec"
        },
        "item": {
          "id": "670c61f3-ae73-4646-99f3-a010112ee212",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "11e6077c-c896-47c8-ae22-c90fe6091f16",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "52952214-9a97-4149-a4b6-97d1b145c5ce",
        "cursor": {
          "ref": "208d8641-f2d0-4397-9add-cbdfc2a3d2c6",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "82054a3c-3e2f-43e7-9cfa-cd2e432791de"
        },
        "item": {
          "id": "52952214-9a97-4149-a4b6-97d1b145c5ce",
          "name": "credentials_verify"
        },
        "response": {
          "id": "7265b8fa-8f73-4330-9aa6-6b198de2e178",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b2c3027-f970-4ead-93be-f59f89001c48",
        "cursor": {
          "ref": "9bcd6a15-7783-455e-9793-f4db1a94546d",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "5c9dbfe0-891f-4073-9528-4b18c017fb81"
        },
        "item": {
          "id": "9b2c3027-f970-4ead-93be-f59f89001c48",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "058223c9-597a-458a-9b22-52c88db03941",
          "status": "OK",
          "code": 200,
          "responseTime": 116,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ae421c-0189-4bec-b842-dff9a6725b64",
        "cursor": {
          "ref": "29cdd419-63b9-485b-95d8-9da0a678e844",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "cf965de9-b945-428a-90ad-41a2534ed299"
        },
        "item": {
          "id": "b1ae421c-0189-4bec-b842-dff9a6725b64",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e9d488f5-b6da-4c16-9116-24b58d398059",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ae421c-0189-4bec-b842-dff9a6725b64",
        "cursor": {
          "ref": "29cdd419-63b9-485b-95d8-9da0a678e844",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "cf965de9-b945-428a-90ad-41a2534ed299"
        },
        "item": {
          "id": "b1ae421c-0189-4bec-b842-dff9a6725b64",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "e9d488f5-b6da-4c16-9116-24b58d398059",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3bfe9ca-3f26-4357-8763-918da25d9eb5",
        "cursor": {
          "ref": "6b6104af-2d0e-4502-9a8e-7f3dd42fe42b",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "5ff6b13f-d88a-4375-b83c-0fc9c5962310"
        },
        "item": {
          "id": "c3bfe9ca-3f26-4357-8763-918da25d9eb5",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "53637250-98d0-45ec-bd54-a79395720b9f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 46,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "856cb10a-3790-4e89-a732-ec928fbb01b2",
        "cursor": {
          "ref": "3f6166e2-fb28-4a03-b407-7f73dea03e07",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "7d48f473-4aae-49e9-8d91-5075124d7683"
        },
        "item": {
          "id": "856cb10a-3790-4e89-a732-ec928fbb01b2",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "4f3fae7b-9b69-488e-ba1f-0eb9c58153c2",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 52,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}