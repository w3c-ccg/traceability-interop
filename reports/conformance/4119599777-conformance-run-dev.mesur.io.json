{
  "collection": {
    "info": {
      "_postman_id": "a8035051-bb5b-4670-abe3-cfb96bc141e9",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "45cb5ff6-a4c9-4d1d-998c-86647e457574",
        "name": "Clear Cache",
        "item": [
          {
            "id": "a7cb946d-0536-4237-a8ff-a93c1d7be99e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "803824ad-b2f0-45cb-aa2f-1457492b7399",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "e40fdb08-cdcf-4e3c-9cbd-7d38f2e0714b"
                }
              }
            ]
          },
          {
            "id": "f9f7b77f-7f23-45ed-851b-b23bd9af384d",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "b6d50f64-5377-426d-970f-635a9989e5d6",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "43785b83-982e-4e0d-aac2-2bdfd1fa7ad5"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "da3da866-9fc0-453a-b817-8ee5f46367ff",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5530128e-ac47-4cb0-84e4-098c7b2cc475",
            "name": "Positive Testing",
            "item": [
              {
                "id": "0cc0081d-05e1-4f99-bc96-d739d927fbe4",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "530e589c-e9b4-4725-b575-78d186c9b261",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d0e0af6d-2cd2-4e0f-8111-54ae8b306c2b"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "4cc8e345-80a5-4f21-893e-191d7fbfadc2",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "044db830-ee6f-494e-8f89-9afc9add42d8"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "06bfc4a9-082e-4e18-bf02-80041332b928",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "0b8e3bac-229f-434f-a8da-eeb62b68652d"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c1ad6875-7381-4521-b78f-d64dd40070ed",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "7f3f99c8-a49d-492f-99e2-1f4531317f08"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "83f364bc-84cb-4a3a-8a98-d354b30e2fce",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "69565c29-13ca-4a4a-bf83-3a1543b2a2b2"
            }
          }
        ]
      },
      {
        "id": "97aaf304-1a14-420f-8fe3-c725bf088b35",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "88004dd8-896a-48eb-8fee-e76ecc77591b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "54aa5dd8-6180-4a5b-aa7b-8b73978ccfa4",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "6d249cbf-9071-4fa8-9762-1998e33bee04",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93de0d06-bf60-418a-bdba-ed97e6583945",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "01c14233-02cc-4387-b11b-8b629cfc3a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ac4ecc-2e4a-4ee6-bfc8-9bf327d58054",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7a29e262-0460-4d43-8b59-7f3ed7e152c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f83dbd3-be8c-466a-9dd7-021a90e479b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd8f9e4-0807-4026-b5b7-706b2d2fee6f",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8d716f-33a6-4cb1-bda5-3a59c3176b9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5cce8077-74af-436f-97c6-67921d45287a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "4409ee0f-d052-4679-bd64-aad8a36464d7",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "29e8b823-0cc5-4a63-accb-96859082d488",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df742628-0bd3-4bd3-81bf-975c9507765b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "d7a245c7-3a08-4efa-9101-062f474baaf3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9d9e95a-5fb8-4ba2-863a-752c783680ba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09debfb7-ef3b-42a8-a65a-d49190b24208"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df55cff-d5bd-4cba-984b-56dde51a5a16",
                    "name": "identifiers:missing_scope:resolve:dids",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee6e36af-f2c2-4cd7-85f1-a02817d7265e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dd3e5f52-dba4-43ac-bdf9-3b48f4304c03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d589d83-12d1-467d-86e8-f7e61617755d",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"resolve:dids\" scope",
                            "utils(pm).getAccessToken('')",
                            ""
                          ],
                          "_lastExecutionId": "52fed062-585b-4fd2-8f00-68ef24c95a32"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "027b2856-5123-47c9-8225-695f1d16644c",
            "name": "Positive Testing",
            "item": [
              {
                "id": "230f1976-f7a0-48de-9abe-ceac5195be7b",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d398091c-c0c6-4ad1-af9d-af06a3fc39fe",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "bcd1c818-fadd-420f-a940-e2c4adbcddf6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "72af7e20-2ab2-4e23-b529-aa22df7371d6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"resolve:dids\" scope",
                "utils(pm).getAccessToken('resolve:dids');",
                ""
              ],
              "_lastExecutionId": "8ed1e05a-b237-47f3-bd72-964c0ea3bf67"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4938b083-d471-4afa-9e24-9372addab20a",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "67c61bdc-08de-450b-b352-c4a741e2b4ef"
            }
          }
        ]
      },
      {
        "id": "302a5944-04a6-4170-b936-580b9f769d24",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "bdc7b9ea-8a2e-4bd0-990c-7bb6a55c57e1",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d12e084e-dda9-4639-b274-549c347a6989",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "f9f207e9-3cc0-4562-9aba-711d209567f1",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32f1b33e-490f-4a13-b217-8512bd4eaf92",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9490c047-e96d-46c4-9cc0-f2194be8170d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc928140-c394-472c-b3e9-9c6997986509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "93e0937e-4906-492e-8aef-0659bc91970e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44843a75-b0e6-469c-9788-02fda285c6d3",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd61b1a-5a56-49cb-8b05-cd3dce45cf7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5b51b67-8a11-4032-822f-7f1e50c77762"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "327fc93e-6e3c-43e1-b4e3-f5496d84d498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd6540a0-fd40-447c-a5bb-ff239e1a973c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6999fb8b-779a-4687-ac52-0d24c2722a33",
                    "name": "credentials_issue:credential.@context:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7363fbfa-281e-40c5-9338-03acf7c55880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71020f87-cdde-423f-a618-c6575c6d236d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1288f219-5d32-449a-b48a-fd8d4369c3c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must contain \"https://w3id.org/traceability/v1\"",
                            "    req.credential[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "71b8a8d0-cd76-4a8a-a5cf-8a8dbdedf80b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101dac13-6c0d-4189-8877-5c93d008d928",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29c9cfcc-5a30-42fd-9734-64c111a74a27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de4c1117-59fb-404b-b080-0a2c788f8d1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e201f90-0efd-4811-8af2-79cd7a7df823",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a8743318-4484-4761-82c1-e6bcf467a134"
                        }
                      }
                    ]
                  },
                  {
                    "id": "90e37c04-40a1-4431-8c0d-dcbd0a1eff55",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd02a80-5ddd-4cf7-8156-c66ceb2b9670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edbfd8ae-d303-4d6d-bcf2-7eea786c28a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5451f2d8-f451-408d-ba33-c91437a1eeaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "bbbe7542-4c73-4cd1-ae17-f712a1354e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d605779-af2e-4b47-98a0-cbdf9ca5e541",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ece27cf-0ee3-49b1-bd60-c2dc78ee106e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d38bdfdf-dc30-4ede-8ae2-721b19d2f6f3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5bf27b-3459-4049-8c8f-14d89e9fbade",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7459426b-654f-4ec0-814c-7941c9b17d1d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50034ae1-d3ac-4dce-8710-268c28a03972",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bc834b5-d973-4f07-984d-0337b3d4c3cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ec0fcc7b-1f30-4f01-a444-c52362cdde38"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fabc927a-0c19-4141-954f-f287e850410c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "d32b5dc6-ec91-45b1-85bd-7569764d0af3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3b7ac74-d507-4b80-8f7f-f1efa34580b3",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e768966f-36c3-4590-b1e9-16ae85397371",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6398a98a-0373-4d64-bf7f-d553260d177c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75817aa4-a61e-445f-9834-d4742368f8d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f4de16dd-e821-4799-ad71-33d3a65ee75b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a68d9189-dcf2-49b6-b3f4-43b00787b815",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb8e866b-a99f-4671-bd4b-844933361d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13824cb0-9026-457f-a3dd-248cf704b1c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94c0441c-3fcc-4654-ac7f-9721b3e7a57e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "631b1ff1-8121-4d42-ae49-e8ae07ba68ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c7a43f4-0d49-4439-b90b-a649bbcdc2c1",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3672db27-6cda-4a2d-8e20-fa00cb723420",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0829df07-1f37-4695-a632-9a011075ff98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2094a6a9-be88-4611-8fc2-55261f5d71bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6530f298-2b08-4e48-a380-18f6dfe55d97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d69bdbeb-4e38-40c4-b1ae-9d2d2cfb5fc3",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "352cdbbd-42a7-4bdd-8174-05273c02017c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "083b210f-5032-444f-b615-9e5c07828e23"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72b2c24f-0b25-41d5-a2d9-1dc7c90f7751",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "69bdfdbd-12ac-490c-83b2-11fe26999e83"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea2043a7-5bba-4d9a-950d-35bd72f21f6d",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e4e5fd2f-836a-4908-a5c0-97283da86c3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fbea5aa6-ba48-47a7-be80-5a7ce4e76ad4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28c61674-8e86-44a4-b6d9-4010655acd72",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3812c624-693a-40c6-be8e-89ebeb83bbd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c1660a22-3dfa-4945-87ed-357cce35d20b",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3faf1b57-c246-4a24-9afa-f278fa0a9224",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1034231f-bc61-4991-b05c-7ae22fc0c8cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dd482bd-1c0d-451a-bf7d-79d9269a3a74",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "777499c1-8c3c-41fc-b938-6b6b93a41db0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae6abe16-6ada-465c-b614-30336723a46c",
                    "name": "credentials_issue:credential.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6750ad42-9660-4785-a839-1f328d962c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2c1ee2f-785a-41a6-85cb-53f28dafe2dd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3695017a-1bed-408e-a539-25f104e6faf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.id is a required property",
                            "    delete req.credential.id;",
                            "}));"
                          ],
                          "_lastExecutionId": "db8b1c6a-14dc-4189-ab95-d423cb185dac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ced0ec82-3293-4bfe-b48b-39ad8349d66e",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c7b3380-6b6e-4f6c-bec3-ec39406d6833",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2796e67e-eaf5-40da-b610-7d8c20def8f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e203d510-a78a-445c-a24e-bd1bb1e313b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "89cdede0-8768-4991-9abf-4b1b830abe3d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "937e616d-3fbd-42db-8ee6-cbb699096f80",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33dfbd1a-8428-4b46-8c0e-34e3122bf773",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3f31e510-0005-49fe-8007-c3c37a53b8ae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24b5f37f-9c63-4884-a540-4850b036d827",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6b1fe1e4-cb08-4ec5-9283-d279a361d216"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d9dd9c5c-0566-49ad-a632-248d0a15b489",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6e963c86-5a97-41bb-ac99-2bb907b6f0af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "650519b6-ee8b-49d0-a5db-3ab568d64d5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5af7df32-59b2-4eec-a036-26749061146f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9c6f0b98-39b5-4dc7-a43f-330c31f7de68"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdec29dd-5d71-408c-8a49-0534ff5a2f89",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b89df723-6f35-4dc4-b795-cb54b9e2686e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2fcbce0-9f5a-4ef3-9070-4d1f5a9ab02e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17b43e83-4519-460e-9997-260a4890e2f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "81d3a7c0-e082-4b98-aba8-fda380ff26af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf7cba9b-46c6-4440-960c-ea68cb276c44",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5fcf414-eaf7-4c25-80ca-403cd0700ae3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1f352f47-4487-4a1e-8bf8-0f6c39195107"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da78d339-698f-4bbc-a149-fa55b9c42ced",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "85ad2796-71be-4e48-abb9-05304b0a6215"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0488becd-1b86-4b15-a3c1-a9dffabb6b3d",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1901219d-13f2-4b95-bb93-288e4c5cfee4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e470d2f-f560-4126-9bd9-a22981d7ff22"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c6208a9-48bd-4465-9c1a-ebce3b6f7f3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "b8febf2e-7bf0-4f28-b31e-816233e94875"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca8d7d30-6ba7-4e1e-8cd6-6a2965cb39de",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22afe48e-8331-4dc5-8252-dbf4544759f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "31abc5f3-39a9-4352-b305-14902c65eb1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d73307a-62b3-46cd-a94b-57f53397b1bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "50130c2d-e8e3-4030-a41c-48b23e6b00a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4114df2-18bd-4c8c-ab6f-876a7caf9df6",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee672f18-92cf-46d0-b9a9-514fc6ecae0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f4d1179-cf25-46fa-9164-d8db46f33300"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd73286-354d-4a79-85e6-9a13051c37f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "cc9de817-5452-4f6f-b03a-46dcbf571981"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf1f07e2-8698-44ae-b870-2094a20da388",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55d10ec5-51c7-4a5f-8513-6b9cc86e7df4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f4025d92-5525-40d9-9b7c-526ec38e72d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b5c893f1-79a7-48ef-a3e6-0a841a4428cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4fa1abf1-84f6-4ac5-bd3f-3a2dfb640092"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0065bc6d-bfda-477e-aaeb-4ba5460c4b1c",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e375f9-4979-44ad-8be6-06bf48a55211",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "88779822-6a96-4465-850d-31186c361673"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5fe7764a-594c-4cb1-b5cd-d82905e8243a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "a575dd10-0d04-4a4d-a0fc-3d244abfbae0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acfb790d-50b6-4393-9b37-91a417410c83",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1b48064-a665-4f0d-a02d-2a7ae3eb828c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36ea67e6-24d2-41d7-a8ff-ffbaba6bb183"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "512c36d6-c846-4229-9311-f155022fcb6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c408ac49-9c71-4fee-98d9-0857892040ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97090b71-2f42-48aa-a8bb-bea09a9324e2",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ba45499-3c22-4730-b5a2-d08e2d08113c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bcf38d63-e772-45ee-b30f-514a5a8c0a39"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ba08284-5380-41ad-a263-5865742d92db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "c1da3028-2134-455e-8dfa-e22f6315ac3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b26b8a3-f88d-4bf2-9a8e-bcaa7db00d49",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0208e46-5607-436d-b80d-2da121ac70ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b87051ba-13fe-4572-9860-e247834299a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "004c3c7f-3adf-4242-acdc-7a7859f496ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "57c60ffd-32cd-4154-8155-fee051843b4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f41666d-588f-4ec7-953a-8203293b50bf",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15bfa596-707c-487c-a70c-4512502b7374",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "588864b1-6b6e-410e-88a7-1503e49be41b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5421cc3d-bdf0-4827-bf92-f728d9c53531",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d415b12-a0da-4978-8e99-b596101182d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c895ecc-d13f-4198-b729-9c4785ab940f",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db929256-fd7e-4142-8398-6c18f373d277",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b260d36-4d82-4637-a175-66216b1f752d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "46995302-2606-47a7-9547-fa2631e9e8f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "82472698-00f3-4b2b-b35a-ddc8d1ecfc17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ae1afc-e879-46cd-b65f-946535d099d0",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff873430-cb36-4221-8125-2c7cba5bdb80",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5bae3a8f-0491-49f5-8539-e6eea32c79f6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3df3a12d-1711-42b7-9955-5e8f741c1a54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d82e8773-6da8-43a3-96d4-cdc9967f7f84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5aca567e-1dae-4262-b2a1-f6853cd49a59",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0c652c1-c9ec-42ee-92a5-0eb2a6b18e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcb8d5d7-a2fd-43e2-bd92-d8ca050e37e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5eba55c-3f55-44b5-bd90-8d6b2921f497",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4a5fd957-9786-4f70-a4b6-21378a458444"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eafbfeb1-7f82-42f3-9767-4ae23e6e2a03",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "202d3a78-f2e4-4d2d-9630-0b78b762d718",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06d89a31-9f19-4aaa-82ba-763bea11d542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "76eb6e5f-1d47-4a1d-9dcd-c3a245f91181",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "66e7cab0-facc-40c7-b743-fd88ee2d77b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6731195d-1d7e-4804-9ab3-6a1c3808441e",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb49e31-bd30-4d7d-a56c-780eab402903",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8eabe453-90f3-47d8-8f2a-fa2d05d7e025"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a4575b7-add9-4202-83ce-6fc02a5a68d7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3789b3cd-31d4-4178-aba5-927c30efe3c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afe54363-d9f2-4526-bd83-a855284428dc",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b1af125-08ab-4b71-9ad4-391b9803b9c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79d99d8d-8624-49f8-a61f-d2b79b361897"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ff36cf3-4e58-4fdb-8a97-af811ce76cbd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "775ce953-d8bb-4bd1-84d9-f9005305a6cf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b13bd1fc-e8e2-4375-a8cd-afb31bc68e6d",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d57067a9-f520-4df4-a568-0f2ef395c0a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d41fb216-7e32-4aff-ac59-595fe72812b7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6185236c-84a9-4be0-b571-88866db50838",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "2b2ef684-1dc3-4f98-8b84-a4a21be90577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ca76c95-608f-4470-b3ef-48d884061589",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "613e50be-8be3-49ad-a93f-ddeb9e550c17",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "853b4051-bf5c-4cd8-8a77-d60bf4cb7ccb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4ebcbfd4-8290-4c1c-bc48-0cc813d30b3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d664ee8f-00db-4216-8e7e-b626d58df1fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c3fac0e-919b-4e30-8cdc-6d283671ae40",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa504e5e-d5e5-44f3-8e1a-d630d417f80a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2e8a9380-2b10-474e-815a-d21a33856ee3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de6b9962-4320-4f37-92a8-831a3d4f1cc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "cb7bb580-6a6a-49e0-9e49-3745f8340ad8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0c61b6b-d899-49fb-91f5-be30e23150ea",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b92e6a0-7ee0-450e-92e3-a7d717685a62",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f03231ca-decf-4ba0-a67e-41d6dff0ccf4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d302703-62cf-42a3-84f3-aed8cd4ee88c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "477f70a6-33fb-4346-8fe3-aed77d2eaa6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da5fb228-e366-41d1-b6ba-169f59e3cf24",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2f09e6e6-aed9-4b73-8c7b-0be926822083",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d88347e4-fb49-465f-a4c9-6d5c986d5e97"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa0178f2-0d0d-4583-aa2a-1d2aa4cad228",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "ca4b16c1-3de1-4eda-9c2a-15e58ac3ce14"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc4c82a-644e-4b9c-b5ca-76d7c733bd00",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a448ca4-9ce4-42a3-92a5-ceaf7a851f08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4b4ef876-0b16-425d-8cbd-1de7503fc2b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d46aa4-396b-485a-bdae-ef7e3eebd8cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "45ea2e1e-16a9-4598-9f76-53db075adbe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d6cc0355-c73a-4901-930f-253250bae36e",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4efa387b-32ef-4648-8971-d3aece02be69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "999e742f-fb3e-4eec-a4aa-691d236fd46e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24391296-6e73-4a3a-b29d-0c328bd6b5c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "896236b3-8709-4762-ad30-10d38c28ff7b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af443077-b7d2-4784-ae28-c474476a2e7c",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d61a2c7-9744-4e8b-8859-55d548331857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4271dd71-3068-42b6-ae53-7893c78aa55f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9dc39ff5-486a-4808-b422-037ff774eb0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "717915e1-c85a-4c31-afe3-81f8a3c95d78"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab26f57-410b-46cc-9e1d-30fa7323cc8f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e0d4a8a-7dbf-48e3-9810-d0e6058e5446",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32b2ceba-5644-4312-9d9d-e9ca20d7eee9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96e04b36-654f-4196-a1ff-d1db649745f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "02408835-0587-43f9-825a-87ed4683cd8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37c8fb10-2d3d-42d5-b39c-2197311ac101",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e199bffb-f669-429d-aaaa-23577cd5e161",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d75dc074-d954-4c63-9f86-04d04341d482"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3357aa8-a78e-486a-9cd9-64371437cb50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "c8069cc5-a958-4690-962a-2b78edcf0b21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ee58633-cebd-422c-bdbc-00f0110d37c5",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c81cef-6ea6-495e-9ef2-c8293bbaf522",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcbf7bac-f554-4f37-9440-3bfea668c161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "67f1e590-9933-438f-94a2-754ca2c95d34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "a7b49f26-c483-447c-b9db-3c1c7ff0f3a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6744a327-5929-4dd9-9ce6-859036757b63",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9218c9f-9563-4d4e-9fda-f24442004a32",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ef7cd40-a22b-40d5-b32c-89f5cb602a19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "869733f4-cfc5-4604-94a2-f86be0e323c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "11d6a8f1-c889-4a35-abeb-80fba44f09a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3793f1f-496b-460d-b8a3-71056f6228b0",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4c9192-5b12-4b28-8e5b-145684832737",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4549988-6f88-4072-beff-c37f32f48478"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e09a6ff9-0c92-43d9-9a3f-1cab7b2e8b1e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "692a575c-b38e-4a99-9413-8761f311c333"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9143a445-b93b-4579-aa47-0ad80593886b",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8269f67-2f28-4967-9951-25c7708f8909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9c2bd43-aa39-4c28-a283-f713173311e1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c84f81-5730-4575-b094-33e07c8ec24f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d6ae4e9-6352-4413-a169-0c096e80a4c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c9bd65e-8095-4c4e-92f0-4ffb1a91491d",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2af5a05d-1bbf-4cad-89e1-338c87bdc200",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1d1b572c-e3f5-4ea6-92ed-69f3a6110793"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ba7455f-1a32-4736-bf03-e99033f3032a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e37211e-1fa3-4652-817f-32d319558309"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93b02ad8-77e1-40af-a8a3-9250aff77660",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bf4eea1d-b991-405a-8ce3-75a70e4091e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d1f3fb4b-ea10-46eb-8573-3de413feab1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f2f63e-0212-4702-88db-414934eb2960",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f5f9615d-d33f-457b-bef5-7004109a7745"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8286301f-56f9-4628-991e-0515f9b1af10",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d44e581c-4840-40e2-8523-c4b8c45adad3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "847d0889-d13f-4f6f-9658-beb06e934480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "272dff5b-1d78-461e-be6c-44a6174dc974",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "38b24725-cc6c-4cb8-9777-9966034bb52f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69d139be-efc8-410a-94dc-d5192850a88a",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57e6a29a-35ef-461c-9768-69a40d67d547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ef96469e-d88b-422b-8bc0-f40bda3fe665"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbc1a0b3-4f11-40d0-8630-66c7a324ab40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "40446c50-70b3-4ee2-a765-00d34c34ea9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7ea8cb8-8d60-4a14-bd4e-d241bc65ef53",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b781b21-d641-455c-a72e-d90a26d76e3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c981418a-143a-4d83-99da-2cd266790485"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ebf617c-1237-4aeb-9c23-b36e4191988b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "53fb6c45-6a70-4146-bb82-505526bddc67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "024b848f-2f11-4108-a63c-792671e88cec",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "265c6525-0588-4a36-8d7d-36b99947f630",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "870f0940-3eea-432d-a45d-2a4d8bd2d72c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c290d7d-6f01-4e52-8ad5-aa439c13ea63",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9135e5ca-c6ff-4ddf-9148-e27d8e861392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a37d409-cf35-43b5-8b41-2a5303e0b08f",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e12f8011-b5d5-4149-934b-f1c7df766897",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9f1ac0ad-eaec-431b-974d-f6dd85118f1a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bcd3558e-f7c2-4aae-9713-0c976f3d0de0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "2f0d46c2-7936-46d1-83db-114cb282ea18"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81ecddad-8458-4e83-93b8-f94901e039c0",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "199e4b95-d5a4-4814-bba1-86094fc688fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1509dfb6-68c6-4973-8a0a-6eccd777d934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f09bef8-4491-4fbe-b956-9986f693fb3d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f46ac3d9-5d2e-4e51-af91-5991d355793f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0e91176-b234-4509-8986-0365909b345b",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac102e72-4033-4f5b-8717-663d75b76f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f85c18ec-821c-4f1c-a8ca-fc126b2e477c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b864d412-31ea-4faa-a3e4-7f66025b8bb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "21ec045e-cfd1-46fc-ae37-751d717c2a81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7bb8aa9f-0407-4bce-a090-4fb70e2aeb28",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59d7210b-0dc1-4fe9-9faf-e494611a31ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bab9689-c8b0-4218-a5a0-8a9a33ddf36f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aabb11f7-089d-4d4f-9231-783dc0f52348",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "5cd49c0d-23ee-4d9f-a46c-0882a80735c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f33035-79dd-4787-9d37-9380105f68a9",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c3304928-cff1-49fb-b287-d68ee1f12f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0c3a654c-2549-4417-be98-f56a6e8706ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "429832cc-f561-41b6-934e-1b0f458b9180",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6271f12-fdb5-4ae9-9bce-c24368a5760e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c75c1be3-a40a-455a-80a0-1ab30c811440",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "262704f8-88e5-4d92-a959-fd7a1a9e9339",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "104f1250-da6c-48ec-b0f0-58ba18969d43"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdd4b2f3-2a0e-4437-b6cc-021270849498",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "dabb8f03-27b1-4eb6-9145-1ce0d9e0269a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35d28de7-434d-44bb-a0c0-e3ead5d09439",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd41da9f-9e8b-4340-98f7-3825f5cdfe21",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f9f3529a-5cc9-4ec6-af02-40d8abecb98c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6a2dcfb-9503-4d0f-a0f6-1e96f24bc664",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ac773b17-c020-49fb-b31f-cd696a93d086"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e7ba03a-98e7-40db-996e-6c0dc4e876c7",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fff21666-48d8-4dba-95a2-6cae7d0e2425",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "918a75af-96d5-42a3-a975-fc8a8677acc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efa0dc4f-722d-42a2-8c3c-f2b86402657d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "281e26d3-4af6-4e22-8d59-c7710c93b89d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c938381-b8f0-45ad-abff-94390d7b9f9c",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ea463f9-bebd-4d7b-873b-fa9a6fd15dac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b25f4ea6-8598-4120-83a0-511550e42629"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "277e1734-1788-4c39-badd-a4a456ab988b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fdd39774-94c3-4700-8a82-325451b0fe63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "87cb9e14-0aaa-465d-9827-1b12345a84ee",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "71e3f92e-f235-4269-83de-593ac34291da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "981bbb38-750a-42b8-99c0-e835ee9ef70e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef2b0d9b-f413-4250-98c7-d054d5186e83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "60783e77-98a3-4300-a9c1-feba956ab9bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62e2a8c2-234d-49df-a9ce-70ded868ac47",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "636a80c1-9f87-46b0-bd58-303aecd58627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7659b8b4-3958-4cee-8f70-07ff98e3f711"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63033372-d8a9-436c-8ce3-8f4304341dc5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "5332f0ad-8ffe-4a57-872a-75d9db6e4a3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "98753351-8d9e-48dd-a082-8d4f64128072",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3e935316-6685-4d95-be41-f0395792585f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a142ba9e-322c-4ab5-8674-71b864d48f2a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fae3a3b-ffc1-4291-a1e2-2fa8313886a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "92720c8b-a867-439d-8759-af82a2327ae8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1fbb293d-7831-43eb-9f5b-333212571ded",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1aa76fa8-8008-4ad7-878d-786e2b4cf95a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06a4b02d-45a2-4331-b04c-50c864163428"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f00c4d90-59fb-43df-8994-cf037efa6088",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "ef98a692-8596-453f-b29b-0d6ab1d6ed42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "05bb4015-1965-44fa-a56b-451055330f1f",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdb3eed5-6a24-4b54-b3be-1c6563893a24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01596ee8-5953-49f1-806c-1945faf8d221"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b5db290-4d74-4ac2-96ea-6695fe4b0b20",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "33298740-ae8f-46d0-bcf2-f1e3bf507f44"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3276de92-7a04-4d1d-a426-e335f6c77ae5",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0fa6aba5-312f-4a35-8945-99d174e0db23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40900718-e9c3-4511-b7d8-7001daf1b134"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e54397e-be3b-4813-ab93-18f746d8b7de",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "f3327f7a-82b7-4666-b699-5be528e31bcc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf308334-0a6f-4f60-8ae8-ac24b1ccf3a3",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ddfd5287-f41c-4d9e-9628-d3963b915bd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "83bc342d-4d29-47b8-a9c8-46e97f0ba34e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6130959f-e379-49cd-9698-18bf7d2e8ceb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "df0c6fd2-3c25-47da-8313-b8777a7df3ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4096c9fc-dba9-406d-b4e7-b5c85f99d2fd",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7bbd73c1-d717-4625-9a50-9a5243d94627",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc6fb63b-9535-4f09-8ed6-44867dc2ecc4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "959c79e7-27b7-4928-b3a6-fbee43ee0c6e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "392685b7-9386-497b-b599-07abc0e43e3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14a7f5d0-d337-4f53-a375-b753490d92b3",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1de603c1-5ea3-41c4-a972-eb5ea24c242b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b084325-afcc-4e89-974f-4dc46f48b724"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f1aa1e4-fad2-44bb-932c-1f59e18ce547",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0dd23ef6-a39f-432b-81d1-1483798b3dbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86590974-f5ee-48d1-9a2e-1160b9ac4d06",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5789bd6c-2a08-43c5-a30f-781fbb629d0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4cde03b8-6071-4354-b5f4-bfe3b3a15137"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23c5bce9-a5ea-437a-94f8-0b3d97793af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "412925b9-da1f-4072-a8ec-ef60c716db9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "236d7eb7-bc64-42ca-9312-ac3026e3489d",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a06802-b04e-4fe8-88dc-0972c148f0a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65308e67-bdf8-4f1b-9ae8-35d569a4f7e8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "deb9da26-a6af-4ce1-afda-cb7787c9192d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b1fa0a43-c416-4ea1-9326-aa7920dcce46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fc67867-6e15-406e-b48b-d025aced1fc9",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "711e0e33-b666-4806-a5d3-eeec921a5ae5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "caf29ce0-a752-4e5a-93f4-dc7565112c72"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "346e2728-8da2-42a8-8b43-59cbb811a475",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "22f0c7ef-c216-411b-8110-7ed4ada2d721"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcae1e37-9ef6-4e13-996e-3c47ca395b82",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3b837fd4-5807-4398-84cc-9418f7196607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0ba7d1a-d3aa-4838-8ff1-e22d326ed282"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "733f0e6e-dc8d-43f3-acf1-23a78d3b1a0c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "5f99cf73-a1e6-48b8-b710-5c9732a449bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ab9fc0c-ae6b-48c4-98a9-cceb591ce496",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9eb0ae1d-33e3-4428-a5c9-c0acd389b62f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e48ffbf-c377-4548-b40e-2d30600dbe56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "934ebd34-de29-4fa0-8847-06815f3f6a77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "e1c18010-1e2e-415e-bdfb-20ee0da7175b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c227169-a448-4f7c-b6a4-79802ee9488e",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85f08aa9-9cc9-41c0-bef7-0d006eeddc29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d29edd04-aab2-49ea-9d24-0274ff377883"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d02b8e6-8470-4ea1-82c0-a816ad7c7236",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c20c56d2-2f48-44a1-b6ab-83ffcff402df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1375ab75-8be6-454f-8e28-62625f6206d0",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce213e0b-9478-4677-9c75-cee559ad4472",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1187895f-ac33-4cfa-b73b-dc05d3018b2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ccb4f90-7c45-462e-8050-8ea933741c82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f8b4a966-c23e-4b07-a523-dfa8fef3728c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4a496ef-0b7d-4700-8b74-fb1aff64b950",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31ff88c3-edcb-4bc8-a6d3-dc40b8fa70a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ddf376a5-b5ef-413d-b668-b7d730c99f4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2083487f-0d4d-491e-9f89-e7ca92d1e9aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6ed50af-73d5-4a2f-a6b5-7d25e7b23e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e35e7fe-dc6b-45be-9e6f-d595b822cc1b",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b72d2bd-ec7c-4c2d-bca5-e87c5e419f6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37766a4c-8aec-40d1-b8bc-0bfbc20ef3a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc4c6663-db5c-451b-afde-5a384f4999a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "22066f04-d057-411a-8407-43221c8bdbac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "151e068b-c9de-4ef7-9bcb-e6020beeac8b",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "423e4588-1d4e-4650-a1a2-5d866e25486d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e2c205a-4034-4626-a306-bdae2b474671"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "067a0482-b016-4184-a706-6381e0558527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "14f3e0f3-aac2-4596-a17e-3a31b5aca144"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7a5eb2a2-208c-4026-8809-a0abd404c6cb",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9c38082-118f-4fa8-932c-67579efb16ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80260690-c45a-4db7-842e-d8b4e5214be5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75af8bd8-b0d2-4711-8bda-bfe408a6db25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "b06def11-7a84-45d5-b96c-45dc019d5651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "70b446cf-1b39-413f-8d14-b4a462dba530",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99e4015e-1b38-475f-80f6-cc1701ef047f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c00f61f-9c05-48a3-9e83-bf07c755dc89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9366b23b-428f-4087-ad6c-c8fb22c97c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "56dceaea-7aba-4a95-b544-e3b0d465e5f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f413a17-7999-41f8-9980-57112ae8cf4a",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d526acd2-9986-46cd-85a0-0ad9af149b73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ec45386-f754-4fbf-9996-bc93c090023a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3456589d-4e49-4dc2-9516-687d35568484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1e3689ee-f5b4-4a56-8d28-a56b8b1238ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ee2a58e3-4fdd-4589-9bde-76a10e3aae85",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ff225ef-bc95-43f4-bb34-0049b94cf3c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf634342-d495-4cab-a036-89a898e0bbe7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d23410d-2c5c-4afd-b9b1-2e8771666251",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "10f27991-ae6e-4425-9bfd-4246021fc4df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0a439ae-a77c-4878-91cb-d831345266bb",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83b0d240-ca44-4c24-adc4-ec203b7b4ce1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee92ad82-ea2c-46fa-8c1c-4f375c993ac8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5c22573-480e-4062-b0ba-e76238495970",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b04938e2-82f0-49b2-82fc-09b339d6d503"
                        }
                      }
                    ]
                  },
                  {
                    "id": "74eed073-e6b5-4d9a-a1d9-e0ff2ef67e42",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54da57db-bd7a-4b5b-bc25-b209e393c381",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49d260d5-8b32-4327-9227-2d9d1bf4c7fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c79052af-0d96-4fee-8215-6b143f609455",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fdd9c52c-863f-45ec-80a5-a40978089589"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d2b18f4-c78a-4061-8573-aaec532faf11",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afee3082-044c-4864-abe5-94d08ad98d3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0a3b6a59-434f-442e-955e-521613f52567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4403dd-a87c-43a0-9673-0dba93c9ae85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"RevocationList2020Status\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb15c08d-04ce-4b70-94f9-f744a87aa76f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160c99c8-fa82-426b-a9ee-3652d5ebbf9b",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e7b4d7-62db-453e-81a1-79e978e056c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe40c524-e51d-4f45-bfdb-abee116dcbbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a88f731e-6da5-4387-ac75-449271345e7d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "6eb8a696-a743-4ec3-ae0d-fcbdd5080c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a5ae20d-4c58-46df-ba8f-1671aa7f657f",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e918b6a-66f8-415f-a8e7-5e3e3a118aa7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3352ee0d-dee4-40a1-8553-c3f4f3f4ecee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f663260d-e0e0-4259-bae6-60f1c2faaaf4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "22d464fb-ea07-493c-b5bc-a438e012f460"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2191b06a-20bd-4f3d-b1ee-7b9935f9a37b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb9227c2-7a73-4fdb-a2d7-d4ad9e920866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18392498-ce2e-4ad6-af88-fb28078273a9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be853399-677a-4520-be13-b921bd0fd07d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "05c51d88-0867-4778-b4dc-85e49499e02b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e28361d-b612-4b9b-8ea3-1f9d09e23579",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2aea11a7-da6e-48f1-8d18-0235b3f21a35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39ea8177-6d38-4aa4-9f2e-4a72db3835a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7aba2032-a701-4d90-b8b5-7712ddcd9de7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "41bda442-94de-4b5e-ad88-79e8a429be92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f981bc0b-03d0-4ebe-8cbb-f84e61021668",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33f8a3c6-f4e9-462f-8e95-feb6245c82b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e2b52b27-a86c-4ff0-8e2e-19bfef8aa27a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93533bcf-e377-445c-82ca-3fd71c2083e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "d723bff1-d421-43c9-a4b3-032c18c6055d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "6c76cf15-31ed-4257-9eca-c9ebdd80cf72",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "82344609-72db-4ca7-8208-a8ab52134719",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28231ca8-b122-424e-8c8f-e289b6406835",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6d370568-d9eb-46d3-8865-39860f0d932e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "223140cc-1983-42fc-8a13-fb00e7057606",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "2c6ed1d6-187d-4e02-bb85-cfce5ae2fef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48a89c29-2d87-43a7-98a5-3198adc53d86",
                    "name": "credentials_issue:missing_scope:issue_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28dafe47-7860-479d-b41c-1d3876853e22",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "393b9b60-23ff-42a8-8d58-3a54b1d006ca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59b09ddc-41e6-4cde-9245-728468e99cb2",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"issue:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"rawBody\")));"
                          ],
                          "_lastExecutionId": "6d4bd7d4-091b-4831-9981-ab86abb49394"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3869fe80-085b-4b11-a384-fe8cb4be0769",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "084fa435-1938-4f7d-9b94-31d5f9724771"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "b91211a5-3ec9-4e20-9a6f-534710206b00",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4127e32f-528f-4d44-a042-5c8ed3dee981"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "d99d9127-7612-427b-8ad2-c8cc0cb1cea3",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "057bbbe0-58b5-4fe9-9877-e02a25e5b5d2"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "254928fb-22fc-4e1e-ab57-7242e12fd160",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "b5b34e1f-6fb3-4966-a949-5cdb89af938a"
                }
              }
            ]
          },
          {
            "id": "b7611dd3-0f95-4f4a-b9ec-06c16f48ca34",
            "name": "Positive Testing",
            "item": [
              {
                "id": "56e9d74d-2631-46e8-af40-6b26eaecbacb",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d1fed289-63e5-4686-9f82-6e75b0730924",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "83411385-8906-44a6-9ef1-3a12e83a93f9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "ff0e27d9-9426-478a-9e8c-44a750db6407",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "242a6daa-9aee-4c2b-95e0-fbe76025ea85"
                    }
                  }
                ]
              },
              {
                "id": "bc6bea79-964c-42a2-a474-daaa58c01dad",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "d68c66eb-b078-4f82-aa3f-7a680d1010de",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "2402cf70-6838-43c5-b738-882a56bd181d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "56c5d2ce-2fc0-4a03-833c-9c86b6b33fb2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f75eac50-dad9-4df4-8244-5a3154c42186"
                    }
                  }
                ]
              },
              {
                "id": "ecd295c7-7843-4eca-aed6-c73ff4657faa",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9d2b4c8-28a1-4b68-8975-2d12390c2f56",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "0b788db7-acd7-43c6-90e9-cc057131c92e"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3b49ea94-f0cb-42c4-93b6-8009298f629e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "b5f3ba57-ee78-4b31-9a7b-1f5b15d6763d"
                    }
                  }
                ]
              },
              {
                "id": "4e7bafc0-e131-4731-93c0-7e65f75a11b1",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "347a858c-b02b-488f-a43b-8441004573f0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a7a4e124-3457-46d9-a13e-4de8846d17af"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "108c584b-bb79-4b8c-a761-cbd1dd5e4f78",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "38053156-af09-4088-b765-f98ae43792ff"
                    }
                  }
                ]
              },
              {
                "id": "038c911d-2290-4143-9841-b8304e2f03b7",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "611b4aec-a117-4dcc-ac78-3c56f5cd9008",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "// Current OpenAPI v3.x schema cannot require specific array contents",
                        "pm.test(\"response @context contains traceability/v1\", function() {",
                        " const context = pm.response.json().verifiableCredential[\"@context\"];",
                        " pm.expect(context).to.contain(\"https://w3id.org/traceability/v1\");",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "a8d5535c-503b-4c6b-a95f-971f6255e13f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cc14ede5-8729-4ac8-a903-0b23884991e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"RevocationList2020Status\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "80379854-832d-430c-8698-c8eab057bf56"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7f8464ce-6ee7-41d0-92ea-7aa3dcda6c83",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "2fd3da40-8215-426d-a566-36a5a10c6ff1"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "c246355c-c1ad-4ead-85b8-b847c74f928d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a53f231d-60e9-4b79-9fce-fb81fb3a902e"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "8efe7051-f1ae-49e0-b7d5-9fc15a52f8ac",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"issue:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('issue:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"id\": pm.variables.get(\"credentialId\"),",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "004bc063-9f78-4255-85fe-a4fed911b800"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e27d4de9-5164-4de1-a68e-7f4e1c9e9395",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "107ab3a3-d276-40bf-9744-4463d15ee5d7"
            }
          }
        ]
      },
      {
        "id": "a24deac3-4815-4a37-82ad-f8c19b3368ba",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "32d25cb6-7736-43d4-a40b-81c4a155fff0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "4aee3971-b904-43f7-a243-8596824bb142",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "3283885c-fab0-4516-9583-030742aed9c6",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1fd43f2-ff12-435e-ada6-dea7f0c93553",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2175b924-17c6-4bc8-a3ff-46aa1c8e3676"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68efd37a-25e8-4a8c-a6fb-b4f010cdcf53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "e83faa5e-38a9-4ad2-8b34-1ed6be71f286"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c1ea183-7128-4aa0-b1dd-56c80cb0ffc5",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b603a4-1173-4c8e-80da-78ca5b61b2f4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dcd90226-44b8-4517-afa7-a5e5e93d8f4f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "10c21b2a-25d7-4917-9d91-00bc23d06912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "9b2dffc5-9d04-42ca-91ff-f514731fe3f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ee3e61c-1432-46b3-a1ff-a774872a81cc",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba0c31f3-e168-40cc-8aa9-393ff28566e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "13a3ec16-606a-4bed-b49d-9cfc7bd85eae"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb3a374-0ece-478c-96ef-5c08f0baecf6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "31191e8b-d72e-4ddf-90aa-0da45340adfd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c009fce8-0f3e-439b-9e91-93cb2b83b407",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b990738f-4101-4ec2-83e7-61aa85d2d3d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b956cad7-18bd-4965-87ed-934965c1b076"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "670c1f31-d6b3-48b8-8529-86f4d29c5739",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "9b347754-28e7-4ae4-9f7c-fbf6b4548b24"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae58eadb-da45-41c3-89bf-3f88fc57c036",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f665ddc9-df20-49b1-b379-20021e93ef36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db454727-9973-48c7-a5c7-dc7c20dc7f76"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d40472-b7c8-4f61-83ac-2448bc74d695",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "c0afe15c-c75e-4c05-92ca-adad606cffa2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce646936-e05a-44c9-9aba-f5606eb554f1",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88d2ee87-95d7-457a-a527-a28d32c22a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "60bbeca3-7e33-498a-a7a8-edbb1e37fd1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b0056e8-938f-4328-a006-a4c1a40d22f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8e21f4ef-9c7b-439c-b1da-c2a846560fe1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c22b6f-3207-444a-bf1f-691f7c4ae466",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c58b718-8d8e-4eba-9226-1958a7333b8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "75f7d938-b505-49cc-9c59-e4e4c89c325e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2db49bd2-bd56-4acb-a64a-f350b86c9761",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "9dd00f92-419b-4f75-b2cb-103ab9d1df21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b0ded6f-81a7-4581-a54a-b2e7fffed308",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bb24f03-4a8e-464e-b931-e5516f220d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12b7b2f1-6e09-4eba-b37a-57eab0c22b08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "00efe4c2-001d-4c09-b2d0-113075fd5c47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7d1563a3-153a-4b6b-8bda-b243c1bac2d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d85eb176-22a4-4cdb-95dd-736d402da230",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "758d37a3-499a-4584-89cc-96c3e97b1934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a5db6a0a-8d22-4b0a-92c7-b7624577620f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "760cfa21-b7bc-416a-bc0b-908c6319941e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "00c05b68-7d37-4ccd-98d9-4f6db62f8f29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6b2c851-0e5b-442d-9b32-531752f1fe44",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d28a43-533a-457f-a690-d389431e93d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6c36079-20b9-45c9-a73e-61cdd3cb7eb2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a20325d1-5e08-4fdf-9309-7ed08c29e9b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "611e803d-75bf-41ca-9de4-a0c190d8eb50"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4d258e6-013c-4f65-ac7f-29ceff9bbef6",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39ec0131-e7f3-4a01-b4ec-7b627e1684b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5108fc57-14bb-4e75-bffd-685a39c0aee5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d638c5f-c6ee-4ab7-bd6c-6476f3a35d45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "f6067f55-43ec-40ed-99ae-5638dd41a348"
                        }
                      }
                    ]
                  },
                  {
                    "id": "531bef6a-2776-4e1e-a628-9016a5b0430f",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f440f71f-af84-4f75-9fb1-74611b3a78ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9847f6fb-efce-48e8-b171-ebeb102e7d98"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99ccd73e-2183-4e17-afba-b01b274dcfa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "ac28e567-a4fa-4bab-98cb-16d97fe6cea7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "692b709b-3964-426f-96a9-7d08fbcb615a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab1e84b1-b95e-474a-9300-a4413dd7c43f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a83d9985-7c86-4e62-b54f-e578b93675c6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88f66ba6-ddab-4a4b-8f89-b9248dff7b89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "decb9ff6-b3bc-4363-b20a-ed7bab57f0cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "40a33102-168c-415c-b368-240c476c404b",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "969155ee-d25e-41c0-beb2-29c8406e09d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0829bee2-645f-4cc7-b709-1dc2b26c3a09"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1891807-d1b6-4c2f-911f-16f4e68c402d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "38f733a9-ebc2-412a-924f-daa1f9039ad1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0e3b20ea-f6d2-4573-a3af-f01f7c214f01",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64e0cf08-163b-473d-8a45-1d3761d3ba06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d46c0fb2-a819-4b0b-89d3-31d371fd1466"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be53b8a3-73bf-477f-ade3-c12ec7fc45e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "42987ee6-107a-41b8-97f1-d9ad425d8cce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a4fb12a-7964-4219-a722-14f0c4ec1f9e",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "88b8f93b-6f4e-4265-af65-d49e400665b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9690f77f-2d06-4af7-9c9f-c3afc83666f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c4e4578-e2ed-4b33-9f92-d202b451e11d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "00cca2b1-b690-4844-aa5f-330c58b6da52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1a0310f-788f-471e-95c1-dd33c37d0b04",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b772c7eb-7854-4896-afdc-b54c5c0b13ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53e13bc9-191e-4309-a8c5-4a6798e6b2f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0653ee2a-2005-49b6-b987-165e8e356c1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "10a1994a-5f73-4372-8700-244a62819bd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce01bcb4-5cac-4cdb-9e1e-a9416e6225d5",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ae43a25-da56-4d0d-9fb2-48d14ef426ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68ea97e8-1b20-4e12-93cb-2dcb0d1c4ba8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "edaded97-f43f-486f-85af-080bf891ad14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "cb3fa54c-c932-484f-a83e-1ceb215b0082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3db1ac3f-4dc7-4856-aba4-eb3ac7183e3d",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba44d674-aabd-492c-b467-613422d1533a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "47215901-dadc-41b3-89fb-a3e8698c9f6b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85771f57-edce-45de-8803-1c449cd60ac5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b8d3b42-97c3-48c2-84d1-7d608e612be5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cb7f5be-34f9-4fa5-a03d-26decc82fdbf",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b72fbefa-04a9-48f2-901c-978fb0e7e887",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a31aecbf-de30-47c3-854f-6c8aadf45943"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f82b1dae-bf6c-4299-b4a7-d422db299246",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6bf5fdec-90aa-428d-a137-6ce9f052ce5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f9bf835f-1837-429c-910d-26b9282a328e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "83206101-5427-4084-8ce1-c39bd1f38cda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a75e228d-481c-4790-b284-21014bc7dc6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6242f774-37fa-4c4c-bf48-b2536c5c11d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "15255283-2dde-4d29-9e79-2003903ab92e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a9e4b891-f0d7-4ad9-ac84-010eb8812aa8",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "94ce89dd-703e-4561-932c-de053fb79548",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0cc1a3d-7955-4096-8a18-9a2a767654a2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "286362c0-182f-4669-9c39-c10449a8636a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "dea2aba2-c63e-4793-a2ab-3841b9957492"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c292c202-c546-4449-b1f1-899e8008f35d",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01aa8c34-1243-4bdb-904e-2ab4e9bb3fe6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c433d24-0700-4f6a-a4ab-e7543c407c06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0fdbb89-dde4-405d-bbde-9c4ee86a025c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e755a320-078b-4e26-87d9-002145018648"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4078765-9093-4d25-b8a8-0d482a539a1d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efd1ff5e-3100-4d97-a563-15bad7a4360d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f5f08e2c-d449-483b-b5f9-974ba2596129"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d918939-4976-457c-950c-384d9824b669",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6e8dac99-9848-45d4-8702-7bb79ae5a856"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80fe37fd-ad2b-435e-948b-4ba11cf31715",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "80ff3a67-1472-4e44-ab8d-9703d0bafd47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4af404cf-2adb-4d65-9e19-9542fe38681d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "109ccca7-bc38-496c-9799-616e2f706f82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b521a3b9-fb8e-4c14-ad07-1571328eac76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de1908fd-c06b-4f2a-a4c7-92038fc31314",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c8a0c907-7cc6-4082-bd87-31de7bbbe978",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b28a9162-ce97-4b3c-a9bb-a3209d7ac8f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6ea5490-230f-48a6-b95b-6792a19d4c5c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f449f88d-2416-48d3-9fde-bcd3f2e9d9a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff2f086e-5411-41eb-8c3c-83bdc6aca0da",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1420c019-3947-49e1-95b1-9cc135435b38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d4c2dd1-718a-4298-8b06-13bda41edfe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b62ed22e-8277-40ca-ab4b-c2b512015de1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f318571-0076-4838-9c06-f502ef6191cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7cd2b02-cd40-412e-bb19-8357c91e016c",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87990a9c-bf6b-4e5e-bf11-a78316c5ff93",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8e0ff5b0-ee1e-4eed-8e30-95f679afed5a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a2ea7f8-8ac4-403e-8927-724619526dcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "409e5bab-5c9c-44d5-a690-b64ce92ec89a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89eb7c2d-8bf7-4f32-b075-88fa06d6e3b6",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b64e98d6-08a8-4082-8eae-090634b96f3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e247526-f6ae-4f0e-b795-6718783d7c9d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3dba7819-1d5a-4e0a-9be9-fbe3a57a1772",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "679967d5-415d-4292-945b-e8ffd5ba0723"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6e17476-e16c-4d1d-8294-85bb379ec0d9",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da563c90-d99b-452b-a82d-3e814344f7ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "da603914-7968-4900-9a47-29f89aeb5856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57607bb4-b8ac-4134-bdb6-1450022e0d25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0ae03ef4-7c3b-43ec-a9fa-3eb07832e74e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cfcb662-63f7-41d5-bbf3-4f9963ed334e",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6436ffbb-420c-4eba-8bc7-fc5511e54696",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7054bf5d-6dbe-47c4-86c0-565d9b637f5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2a936469-7053-4793-b39e-8e13d5b5b032",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "79b4cb65-cb2e-4d29-99a7-59839bd44df5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d8cfd19-4474-4d5a-89a8-37c4a4ed0ddb",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbe3826d-1058-433c-a5f5-6dfa4dd61745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b6f4af9e-06f5-4525-8b8d-af66bea384fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fe6a921-535e-4bb7-9cf0-0b314199ee28",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b2f9f8ba-eba3-4743-93a7-e22184afe83d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "20f968b0-fc30-4e02-a36b-4b5ce3da2e08",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "41dee9b8-e73a-492d-9375-1896dd31f45c",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db20cbf3-4004-46ba-b02e-16a9a0408682",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cbe9a03a-2c46-4627-9cf3-c10f00758abb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "01b3178c-ca0d-4fee-893c-d6676d17ddb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "6fcd3b03-b095-4a5b-9cdb-85877547de01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3822227b-0831-4cc6-9034-d17d800abfcc",
                    "name": "credentials_status:missing_scope:update_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "181b4687-17ff-443f-b276-a18ee2945e1f",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"update:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            ""
                          ],
                          "_lastExecutionId": "acee4e27-0578-47b2-adfe-2c33acad17e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00f470bb-919b-4020-bf38-a2884e427ccc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "f4758757-c23a-494a-87b8-8635fd1331e3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6cf83dde-58a5-4379-a328-5d27806fd049",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "01830e62-7cf3-4ef9-97a1-e6502040058d"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "daf50ff4-18dc-4f89-a7c7-511f11d1e53a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5748488-d121-42d6-98f4-9ed866c70d87"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "40ac9125-b792-4c8c-ae06-44e2d052c495",
              "type": "text/javascript",
              "exec": [
                "// Populate \"currentAccessToken\" with a bearer token that has the required",
                "// \"update:credentials\" scope.",
                "",
                "utils(pm).getAccessToken('update:credentials');",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "4766fcd5-bd81-4b7d-b57f-e15811f2872f"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "11fa7d26-a7fb-476a-98fe-99bb5820b469",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "33a8ddfc-4313-45f1-a7a1-f43e5492e574"
            }
          }
        ]
      },
      {
        "id": "4b9f6742-05c3-47c5-8e7b-e0f10295a74f",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "aa21df3c-e6ac-4372-ae4b-3a06b2e914fb",
            "name": "Negative Testing",
            "item": [
              {
                "id": "eb0cfd9a-6f01-4b2b-991b-f31d53247e85",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "a3a74490-d947-4a98-942b-9934db96d314",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d59a8351-fcc7-4f33-a0b2-2d298a171fe1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "073c2bd0-4dbf-49e5-9a35-3b1d059c03da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0afc16e5-0624-4f97-bfcc-d3e0c73f5b08",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55489c29-11a0-4686-beeb-13901de8ab3d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8e38deb-f463-4b5d-a64d-e33be3f6f316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ad5983-06fe-4e3f-98fc-24959c8e47b2",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f319b0b-c268-4321-a885-6859a6f3c370",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0cf0970-2392-46db-ab42-dd14b4029c81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0193a10c-d256-466b-8497-2bbb98dc0954",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc4913d5-60b8-48c6-be97-5479cfbda7c1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bdf3ecc0-2679-4b30-b91c-6e56aa205af7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a601a46-c92b-40c3-8ff4-f3c209edc159",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "93046a53-2336-4263-bab0-a332cece218c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dba40669-9571-47a6-a553-317cdfe864ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f0e470b-a1fd-49cc-baa0-d8e09ddca7c9",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54913a2b-564c-4c14-b43b-dd6407def05f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c0690b2-7248-4443-8118-48569bf3a43e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e07dc72-ed52-4df9-b99d-80242b79d5cf",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc3f48b9-60ac-434a-9900-811a99411bb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f80a36d0-5fde-48b4-a8e8-ee25e3a90cec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cb4d2f1-d679-41d8-9ea7-0fc8120ea480",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "804c2579-0759-4def-83ac-31b33485d8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f32b76c-5295-4197-b1e7-761e50e5ef4a",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c269b882-672a-41bc-9f08-02281a7d3664",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0caba55-d1ef-4b5b-b160-cb6618f6f20b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8d73af-b831-4843-bedf-2ca6a34a6a58",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab7417a8-be8c-4bf0-9ac7-80f4750de74c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "014fc875-0041-4468-b3c3-d97c940a9eb9",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac3b1fe-90b4-449d-a82c-c70bfd9f0bee",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68ff052e-a424-4af3-b7b5-86eb239d4e7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "417da651-4f57-418a-b488-1e3926234c4a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bcd27e25-6d8d-4409-b32b-8f4966f19a22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8e88434a-0a96-4baf-ac22-96303179ad41",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb733aed-ae29-41dc-8d91-35551fdf194d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85cfc8f2-b003-4da8-91d3-135f052953d4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85799814-0d12-4c11-9cd1-0566c854d9bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "437d0aed-75d2-4240-9d2a-89eda39eacf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfe61e6c-3b1e-48c7-9135-159514415318",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed123516-5790-4d8c-a1ed-99ea6e79c959",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4dd60bf3-61d3-488f-93c1-2ffe683e9ac3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e154f46-1575-4d88-9a13-7304b0fb6d92",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "af166eec-8e32-4bb5-9010-ae398b9f0682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "666caf90-c750-4376-a272-88010941ef45",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "367ee40c-8c4d-47f3-85d9-f6677b49c773",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d2b27a6-5736-49bd-9808-d10a68a67e81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59424abe-1e83-4e4a-ada3-ae54089258fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e6f0544-3b4c-4d4e-a333-f9e4d5d2e786"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f83e8c47-5138-4a65-814e-6961de3c193b",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74ed0d3d-788c-4366-b351-6c453a5e54b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dddf4418-c02f-4d5a-b66c-7647f3fe0565"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "635ea88b-cdea-4310-9755-cd934a0e535d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "30f50158-2ec8-482c-aa3c-57990ee7bce5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09ae6768-fba4-448c-84f3-0c0b09d4e37f",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6564dfd5-32ef-41e9-bbc8-c0b1c4564db2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d02ea9a-7f33-4b9d-b90b-75c2b5da59e4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42d5099a-822e-492f-8d2c-bdc5ceafc635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "893ee63b-cfbf-461f-81e0-e29c779e540d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "898de7b5-73c6-4a70-9a95-e5b95eba21b2",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "641fb899-6dbb-4f0e-8ce0-b3b3952344eb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7ee78c88-b2fa-4da2-92f0-c473b7a00361"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de7c5ac1-52b2-4ae3-909a-c07592c193a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9922c38c-2304-4664-a64a-63370b99422c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b59199e-64e9-4071-8186-703988953a1b",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f00200-eb0c-41ee-b065-1883f54f6191",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3065ba9f-f6cb-44e2-8631-6357fcc3a822"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e9a15a9-c42f-4172-b20a-2a37046720b7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70476dd4-6ef8-4920-a74f-58df5af130ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6b0f87ae-13c7-497c-b915-e1e4d6a3884f",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d31590-2740-4ef3-88ea-49a9807c6abe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8db6584-cc96-483c-9633-4aab44d4c1b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eeedef9e-6f9d-4bc7-9200-0853e036817f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f9952df-b1f1-4693-b5c4-265780bb887b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "afa6b4ee-1d1a-4de1-a0b1-a21bf709fdbd",
                    "name": "credentials_verify:vc:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0152ffd5-49be-4b3f-a138-3c45d18ef51c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63a9ef5c-632f-4b17-a9d0-a054827ce2f5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a5d55dd-a015-456b-bd0f-15ee6396731c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56cd5048-74b8-4919-a950-c0c5e33a789d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "064b4df8-bf97-46dc-8b12-da8cdd6d000e",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ea3c3f-b218-48e7-a258-33a656d8351b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5233bd08-95e0-45d5-b1e9-7c0eea33bc91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b864dda-01d1-4ff4-b443-498f8f23c91d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab838ba3-88a8-47a0-b779-a9ace339e12a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5861120-23a2-42f2-a96d-e1c0403858d4",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "940bfcf0-fecd-4f93-9ef1-db74fc74afa6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a41755e-937c-48cc-94d3-8f008701c84a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9735b2e-3f45-4e0b-8c35-912a738f94b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ef86035-34c7-4488-8731-367a6c8b5a9a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2238502f-7875-4012-b4e2-ebdc3d06abfc",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd694136-bd0e-47b9-82ac-bcb22919938f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "721bc69d-b4fd-4a73-974b-fbb90248ccf0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ade14ae-88b0-430b-9dcc-b1d88b830eaf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "536946f3-fffd-4421-a4c6-9d2108c503d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d05d1392-2e6b-4055-8f42-45ffb033acd1",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14bfaec7-0ef4-4d54-a26e-9c312cf29e3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fe66f8d-bfa6-4bcc-ba0e-c740a2575c83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2362ddc3-658f-462e-9dc5-3362575bd395",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c181c5a4-8c0e-4d2c-96e8-58e5e1801596"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22f4e7e9-d39f-4230-8366-371c2b0496f7",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa7a76da-c1a8-4640-871f-a43f47cfbc63",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7e9b157-5707-4d75-b256-38961a10751f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdbbb049-f9d7-4155-bffb-e0795abfb154",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7bac652-c1cf-4c7c-9849-b2ce100bb047"
                        }
                      }
                    ]
                  },
                  {
                    "id": "621c8a5a-4fd9-43dd-a831-dccb745c6e47",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "728bc78c-09b4-456b-90e0-6f5959a99164",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "186034ef-f762-4b75-bcc6-ae93f1d6c344"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e7663a-eeb9-47d7-ac7d-6881f8efee96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aacbea4b-e410-4a04-a689-4d7c43e38132"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b8566ed-c1f0-47c9-99ad-f11d05543eaf",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "54d1a066-02c5-454d-96e8-3dafd444c42f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c3108d64-2aac-422d-a5c2-94011687876d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "deabf9f3-1296-4ee8-85d5-b1cc88bae79d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d3a04f2-adf4-40ce-8e57-02877b6aa787"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3b9d459-659b-4a52-94d1-7484a811f326",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b06847d-2451-4457-ad3b-054a05ccf84e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e8afae03-6600-4a5c-b5b5-4ce6e7c47620"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0b117b7-76f7-4d9f-a289-f5178b018ff4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dfe48ff6-1f60-4663-b261-cbce5e2f5718"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22ca0919-2529-4ac5-b9df-de2f3826d270",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56c656b0-7157-4568-8749-000d8962bd04",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ad7432d-bce0-4257-9173-321246e18249"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8fc4ca9c-471b-43c8-9904-bcca23d73a03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b8b296a1-b9fb-4140-a9c6-52d9c0a516c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "72752fa2-09ee-44b4-90a5-352ac495aa45",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f449b6fd-5c1a-4c0f-ba45-ae19caa811bb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "103d52df-73c8-4860-b350-80b4bc55d676"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ad7c3bc3-fff6-4cd1-a299-2ae37d5f0088",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "87633ec3-cac1-49a2-a40f-4ebdd34b9967"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edae2fb7-7586-4f94-89ae-fee5af68beb2",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4f4370b-0083-4c97-902a-37b09e2e8feb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fa6f29fd-6403-416c-962a-c5968bf24023"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a3e84ef-3caf-4387-8304-ffc22b224e82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "32bd39e0-4aa2-4c5c-b25d-9d5b7de63539"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb53a738-bb05-4623-89ea-296bced18e4c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1766fabe-777e-4e1e-8442-85952ea1016f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d9975746-f272-414b-8bdd-6d79e7002089"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b1e2a772-00ca-4037-a458-3a8e8acb5ce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d34bb5e1-ef63-4dca-9f73-10b662b98044"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f8cfc71-bf5b-4e1f-a30d-6337874a600c",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "69f0b881-1d68-46ce-921e-d92218f24e02",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "179d3183-33f7-4ead-a222-19f24d76df47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3de8bf18-df2e-437a-bccd-02210a790b05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68706266-084c-4c7e-a579-4427749be0e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0951cf4a-467f-4cd2-8aa7-b0a5c5bc5a76",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b02bd1-048a-4fc2-a915-6bc7328472e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9d0419ad-e075-4cc1-924c-ce3b78a74b75"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2f8ed0a-e82d-46d7-884a-cfaf7f4cb3af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f5f4174-c12e-404c-ab14-aff6e69954c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "591c9d89-28cc-4532-81c4-157e18773436",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30964b83-ddee-4df2-b37d-ae22bd4cdc1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "003d57f0-f460-4e9c-b27b-aa2ba5f2d445"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bd5bc5f-d4f5-4de8-8a71-05bb610b9b4b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9939946-de2c-4857-9b36-470cbe9f1f7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e482bda-098d-4215-a502-a3b903b53940",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c912b1a1-4e5c-4487-9af6-0524c6babf70",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ca48db63-e784-429e-a055-df17c1ff4155"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5e74e07-a388-4602-843e-f03d15afd022",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2b744fa-82d1-4d3b-bb6e-db05ffadb668"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c381b2d-07d1-417a-99e1-cff5f0b2392a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b02c0a4d-204e-47c3-bc3a-d950b3bb607f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b062fb8-f76e-4093-89b0-0770be1b4765"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c9cabcb-9cf5-4871-a76c-bf58128c231a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8c02b65a-2a94-4e2f-9344-2afdafc04a8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53260648-634d-41e1-9b26-53c817bbd966",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9f591ba2-57b1-4da0-b87e-b4c9372b1ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37482884-bb7e-4364-abe5-ab0e426b3dab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa674c3c-e9f7-45f7-b240-5fcd0ea81fbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56761e71-0a50-479f-a234-f5cb4ed36489"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5fa0d518-f4fd-4507-82a1-41d86ad5db45",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29d06649-5597-429d-821b-4940478dc71f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "44cc7278-6671-4afe-9824-68eec50d84fd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "42550e1e-c54b-447f-b94f-1a31c6332ffc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cced6648-da69-4548-b8f4-fd5d94b6c04b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb4fce1e-0999-4697-98ba-e02d42e1f8a4",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41583cdb-a985-45cd-b2b0-90ecf15ea839",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "251cfae8-2492-4eee-af72-0832724eb9a5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "de29c3d5-7c7d-49ac-88de-5efbcbaee8a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ee53e7cd-1bae-4a37-b398-4ed6b93c6345"
                        }
                      }
                    ]
                  },
                  {
                    "id": "344c9c26-a441-4b7c-b206-4e950b584ca0",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8514573a-18de-40d8-827b-9afc879df624",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68aee651-35c0-4b27-9dc8-af6040db3b81"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83a367b5-430b-4f63-91eb-4f76b9b8b458",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b13f9158-af03-45e0-a573-e6d682ad8540"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f2c91df-6b74-4f6e-901e-9c0e2598b2dd",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4228394-8f94-4964-ab7b-d5ee330cb774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b58c9f5b-9227-480d-adf6-363619175e2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d753997-85ba-4f04-82fc-fb25b58dbe46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6520fcd-d137-4447-a68f-d1e0717058c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7819693b-a904-4fa9-ab46-76df0693112a",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "716b07cb-0530-4100-9a40-2f7d24245bb3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55f3fd46-6a6e-432c-8467-d13add5204d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b791a48-2cfb-4948-9870-1eaddc46ec21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c6afaf0-f2fa-4358-8658-86a97bb87d9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db6c0398-fd79-4584-aee0-e80145606326",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33f87838-82a2-45d0-9070-54fabb5bc84c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "28d4b2a9-46a5-49ba-a75e-e63a07cd6a43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03ef97b0-a712-44fa-be4e-2940cbe84771",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "befabda7-9c0a-49a9-a917-08eaa19d0354"
                        }
                      }
                    ]
                  },
                  {
                    "id": "591d1b44-4add-4b5c-a4cd-691d616135dd",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab504e89-7503-49df-83cd-c81e93150298",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "274fd25f-9548-4888-8a27-cc73bd5c610b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c48334c-3fa2-4b07-86d6-a379335c79fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "433ddaa6-614a-4643-a27f-245fa1034c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a46009d8-7cf8-4ccb-811c-cc635e030564",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc2640d5-a3de-4134-ba26-214595450eaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f62cb95b-efdc-4990-89f2-932975448311"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0fda48f-2443-4873-b583-639ac9d0f578",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "300dce08-515c-4794-a96d-3c5db15f3796"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3ca8153b-5c46-4885-92d3-ecda1c68be1e",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f5ea944-7d97-4196-9ddf-f34faf8484be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4dbe118-5a02-4a7d-9341-92bec46bb6a9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "add74e34-ec25-4823-97eb-308d564c28d6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cba82e66-21fe-4add-819d-5da315c093f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93ddac1b-cff0-4ca1-9550-84733d866515",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01ef9409-bf27-4eed-bc1b-f5ee12040d67",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbc6e6de-072a-4777-9fba-aa9d8e34efec"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a75890b4-e451-49bb-8374-636e8cec4781",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7fc8c5e8-c493-4b26-b097-49248a9f4ec5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b1701af-78e4-4bce-99e9-6e585b4d2295",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbe138d7-36b5-4e33-b249-cbff5a8fd343",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0de4abb-49d1-4e05-814f-255320d1e415"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f0751418-2272-488b-95f3-3112309ec2b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f034ded-2d1c-42e7-b762-59e59d3cb868"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6b66351-076a-4d20-9be4-356e8443052c",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43aa8a90-d8e3-41fc-89fe-b81dde3d2ce1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1fd79ff4-10df-4e76-975a-0a25c326298e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff61c5c9-43e5-415b-8afc-9a7061f66479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90d39799-e684-4152-b0af-913bb14723b1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa91637c-d046-4a08-b12f-de5da7e88304",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9bd85780-4d58-4236-92d8-2a7d7c12120d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4442030f-491e-4764-b652-afe3f621af38"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe735d1-4f89-43cd-b5ef-797c05b4d014",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "18883128-f602-4f7a-9fd2-69fd0fdaccee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc44fca3-7d83-491c-8626-a9eb18524c0d",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a3e9fb6-d12d-4afe-ac67-1a920ca7bfab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a798e34b-ff9c-4af2-ba59-ebaa4f7bb812"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f51faf-7af3-4f22-a9fe-18ad07b0c06b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ef86ee6-68ef-4933-a514-8dcbf7895165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24d50522-1953-4877-8dbf-6d7ad334e4f3",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89bb027e-b257-4a7b-a6d1-2604f0713b0d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9656236a-8dfe-4db9-b572-fda049f278b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "686350d9-c33a-4447-8fd2-303ade743525",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "56c89bb2-d19a-4a6a-ae4e-6bea0f6e60fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa6c922c-0720-4d7f-a006-aeccf134936e",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22876f6e-9ea0-4ff1-a139-ff24dbf11296",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3477a885-8880-4e60-b7f8-0defdf2dcdc1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a0073e9-0718-41c9-b803-6294887615c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0fc159a3-ebc8-475c-800c-770397783aea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b107750-375f-43ef-bfd0-6912486c9ee3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8060afdd-05af-4a2c-ac54-7768d58df93a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6aa9e071-80c5-4792-90bf-e42b93021b39"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e9a4ef3-8955-4ad5-b7d7-86a83f6e99f7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ff2ab50-2d22-40d9-b420-8aead86593f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "91647f54-4887-46cd-b84f-45194aac824e",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb7acc5f-62d7-456c-9d58-db29335e9863",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4cf44ceb-08dd-47b1-b19d-e99453485be0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "93d442b4-a952-4617-8c41-2c9b9976c70f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e218661-e9d8-4766-944a-b156cb419096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b4bf70d-3208-410f-b304-6c4ae5cbdcee",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f2859f1-3ca9-45f1-9303-651e746a4534",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a3eab6c-5b28-412c-85bb-0e776234dc55"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2063c679-5757-4e32-a4cb-57271279972b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3dd75d82-addf-4ee2-b049-aa11a50d8f8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6523b69c-dbb9-49a9-90e3-36c7588e8d36",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cad10175-4f1e-4936-9d1f-81c11c2c0ec4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bb43c096-b426-45c8-854e-dbf4377956ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46293940-5a02-4988-a520-a48dc628e388",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93f8d452-fe1e-4f16-be23-7f2e9a51bb53"
                        }
                      }
                    ]
                  },
                  {
                    "id": "021b775a-a758-4b82-b693-0caa2c931b7f",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "400523ec-6992-4e40-9eb4-e573699f9ab9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c93aabe-4478-43bd-9765-657b3331a030"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0a58ef4-e6cd-43dd-8573-c4c238898ea9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b756281b-c354-4f15-8625-69451813178c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5246edd-b6cc-44e0-b509-455f54f8a732",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd7ffdd3-c1ca-415b-a821-e37342edf2fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9e585b3-389b-4592-a6d5-496a5e02763d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e963d565-db88-4f52-b8f4-8ff2f950060e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b4698d2-1e94-41ab-a25d-cf772e7565f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "145cccef-c72b-46c7-8c97-e06640291c56",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d770970d-820d-4f9e-b33d-4ce83bc36fd9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "17ce8557-4f13-4e45-9bbb-943b2a945539"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef827ef-494b-447b-8fd3-f19efd83108c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16e530ef-9beb-48f2-ae5b-6e92cb4423df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "254ca270-5570-4628-97b8-eefce4e76c1a",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12ab9ead-a86c-4892-8eff-0422990096a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a301aadc-1898-4df8-b5ed-a123bb0cb608"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34e639b6-78c7-4286-9c8f-bf789da94486",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4698327-6177-4543-acfc-ce4044e341c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7cfde650-2595-432b-a9e4-a9882f728f14",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "557bb8e5-97af-47b5-a5a9-d89b11b75f30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "71673a64-9e7c-4940-bd64-1a6e87cddfbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dfb19c3-4aec-42d7-be4f-6c973ae6ec60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14177908-299f-4266-b0ab-6fd595d30b03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c3dc8f51-28e0-4930-a916-fc74e964aa76",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae894b6e-57b8-4ddf-9c25-8583ad440e68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86ab9d12-595c-47be-9283-e03f6d89df36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade5a548-701b-47b3-96eb-f1b86e455c25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3feb221f-317a-48df-9469-7bee412edf13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54089713-6b47-4416-a62d-05c39c1fbfcc",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f44e710-4283-4648-a525-025929b1a476",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9cbbd16f-402c-4a0c-b65e-8e78335d140e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "71ba8b00-57d5-4131-ae20-fc3f4ba2636b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66f2c088-1c50-42a9-961e-93d1d909b0be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1cb96435-d29c-4c19-882a-87d188306ffd",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "922ab7a4-34b2-4201-b73b-f608c6353220",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a2259c94-5a26-4263-ba8b-1023496b8403"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fbe301c-8fe6-408d-8db2-89d0cf019c69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "674cfd42-a837-4d87-b255-8b9215404113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82b9f1c8-2c34-47d8-9589-2a5d3b250b6a",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6397ca-635f-4000-b93b-6d1395c96ea6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4b059b4-2e3b-4401-95e3-9797cde06bd0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85e961de-47d0-4c5e-95fc-cd9285c7e440",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfaa6f45-fb8a-4140-b53c-a6dc0f9f057a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9145673-ad55-46c3-ac27-23e1a95c5ee3",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6922a89-75a9-4c6d-951d-6e6606d96226",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "73051eca-3448-40b7-b200-b4373361bef1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eba0076f-e983-4c3b-a048-fce011f26266",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9de84e26-ec9a-4725-aa0c-0eaad967c347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b81c3a81-f88d-4768-b43f-b652c09b75a3",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "86a1c3c8-5fa8-4f8e-b978-2ef0d60bb5b2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c43a1264-9650-4681-8638-506bef050225"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "83dffda5-93ca-469f-98c6-35bd50cce3ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0ed89939-47c8-44be-8185-0537b299efbe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "729abbb9-05cf-4d86-bac6-c99751f1a62f",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27b64163-8c23-4708-925e-dfa69a330914",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9294672a-db13-4547-8c74-36ae05e1fc3c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "16585578-9db1-42bd-91be-ca838a2ae8f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0de835b8-0b5a-43bc-80db-f34e8c58e7ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b504931-fbba-432e-821f-1d2af631b5f4",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e18f03-b843-4624-9955-852da309d371",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78a4a8e5-85f3-4d6d-9899-32bdaa790eac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "11a52078-d3d2-4b07-9d00-7f1dde109632",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fc2ddda8-a31b-4b94-afcf-11e0f62b82ad"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ebd5aba0-3c20-46e1-a7da-59565294bced",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "703e15c3-c061-4c62-8aee-374e3468aef1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "884b2605-5fbc-4bf7-88bf-d9c3a5f3025f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1513d6d-08fe-41c3-a355-93a793bb2d1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ba9b6e7-9b3e-4627-bc85-833808ec8381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "936a2f00-feea-4905-b74a-00f134ad12fb",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21c84b2d-81e7-4400-af65-db7ca18b706c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c2850836-e8e8-4d1b-9c67-77a81ccc96df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77cc07a7-6df6-407b-9c9c-45990b3785ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bbed8dd7-c5d5-4e6c-85f7-9cfc9997b299"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf27833d-f239-4f14-a85b-f6a182606922",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3751dc4f-4d7b-4633-9921-ea79a91a2cab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9204ef02-c382-4537-b92e-cd78134bb6a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "812cefce-0aa9-4898-8513-4873d49ce2b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76b5743b-4921-4b0d-9a37-88204535f2c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f20b58fc-b1fa-444b-913a-8449e67f2a9c",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4bef952f-47d4-4e43-b7f2-58d5278f8880",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7e924f04-0c81-480f-9214-c9d3b0480813"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abd3786e-93b4-4a99-a08c-3615670538dc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31175a04-d6ca-4ace-803a-72820a463adc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb2e4975-c898-435b-8643-6b4582c20d52",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ffad0de-9b53-46ed-9e3c-47211d28f158",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9f704633-57f3-4e88-a40b-e95f67daaf28"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "268f4010-0f2e-4332-99d8-798b4399ff07",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "52b0f8f0-226a-4082-8a45-4b2b43a176f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fcd21fac-1d3d-4a3b-8896-029bd5e7cc8d",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c21809-82d9-45a1-93d6-97f53d2ea82d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1826c52a-e04a-45b6-82eb-bd7f47b3fa82"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "926effc7-09d7-45d4-8e3a-8c5f0c82211a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "86fe4875-1ae7-4841-816f-5d3d83624c22"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da06d9dd-6782-42e7-a35a-c57457b2caa1",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1822f1b-b16c-4963-84d9-948be2692fc2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "725cbc9d-919e-43f8-8899-b820a2671430"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d7882c6-5738-4c45-a929-3e308e642e14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "08f14adc-93c7-429f-87e5-73a750601867"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13fd88ed-5aeb-4461-8b42-d4d20fc4425f",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d00c5295-16ae-42e7-9be6-c959ad6d285d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee3dbd21-474e-4091-831a-ffdf88e22258"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec85ebf7-b0f6-4d46-9ee5-94e3ba0ed35e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "433a5f96-e870-443f-8be8-97e7a0691ab2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c0eb57d3-d772-46be-9a39-a66c5210df7a",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91d31266-3f30-4168-8404-b7f2858ec8d2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "137dd129-c61a-4bac-8867-46caf06df6d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e36d1855-8ab6-45f5-b6ec-07135c7d97f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a3a3da5-9826-48c9-997d-40a70370ef79"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35fedd40-87ea-47e6-8ddf-bd75d8930441",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1181ad5b-a588-47bb-a6da-7965b9da1329",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e07a3b95-e449-4494-8bcd-cf1284423749"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca93cad9-178c-4033-85fd-2a724c20eea6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57ba6604-53be-42a7-a538-05b95f3883db"
                        }
                      }
                    ]
                  },
                  {
                    "id": "377893be-9407-4b3c-a339-50b7a7e13797",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5c120d-950a-4a87-b5a8-14b23acfe681",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "51a17f07-7dc1-4041-9623-e5f2a66d55c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6254774-29d3-401e-a6ab-bbb479ecf04a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8086ce3-aa23-4e25-90d0-cbb97865a49c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "718fa399-9adf-4779-b40a-fe4aae9aaf15",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a06290e-fe5a-474a-91da-a00653141196",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "004d45a9-de14-469f-9287-1d56d184d592"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4456e562-b6ad-41bd-8ae6-7b3f3416ce05",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8b4ecda-5e33-4536-b4fc-4c06d8fddd2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a4b6322-a63b-4df1-80cc-006b0220b563",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6812691-0d49-4d6a-bde6-2c493460cdbc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "dedb9af3-ce7e-4508-94c1-02bf78bf7370"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cb61c96-4866-4824-ab23-f1b06ede5040",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6104c368-4568-4fc2-baf6-bc5b5ebf0f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "46dc7c99-ec01-41e4-b534-8d24c4fa3564",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ac8f4eb-1ce3-4ccd-8067-aa179c0bd84d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "689ee4d8-10e5-4548-9856-473b5d8ba989"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28219c86-08e8-481b-9951-4b183048b36d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c3c9425-f854-4164-8551-19a6b90752ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b33ba691-df1f-45fe-98d5-175f21377374",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f77792cd-2138-4604-b63c-7291414171bc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a1207eac-045c-47b4-aa43-93937b56572f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "019d5900-4ecf-4c30-a2b9-e655fa44dcb4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab09645e-a60b-494a-a60b-d272beec4a76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c5c7ccb-1168-4937-bb3a-79ac26fe25c2",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b1d7533-2899-486d-83d2-854496a31634",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bff72886-6447-4695-8eb6-fde99f2ae03c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75305275-4e0c-44b0-9e16-d8bb69cade35",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2d319fc0-fe67-4db1-a815-a0e6d6758de6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc85c1fb-6ae1-4c9d-a7a0-b87100222a45",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be1c1678-ea67-46e5-89e1-fbffc1a9891d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8a00a01a-cdf0-44a6-90ae-ef4214f44ded"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "361a6b02-70ea-4224-a433-c5f0d49d1b52",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "772f99b9-a1db-4c6a-8251-eaea8bc8cee8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7dd2f25b-56f3-4b4e-989f-e88ffb8c3b16",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23f5496a-0c2f-418a-a805-b12bc573a3d9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cc5b85a2-9097-4d32-83f0-d9ae5690c721"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4bec8bd3-7fd9-41c8-8e2e-058280fd47f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e025ede-cb82-4cd8-9fb2-550ddca25651"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81d34752-d331-42a5-b1dd-1e25212901e5",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ac95f07-01c5-411f-9c19-258bba11dcdb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "878dc5e4-85b5-4087-a82e-6e5f8d3c5476"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81fe5251-a969-4884-b503-d908b27a5507",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "388f55d9-64bf-4662-bdd8-a620cbb4cd98"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dd4c805-966a-45f9-afdc-44d6058aa2cf",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "423fbebe-eeb0-48fd-a5fc-e37dade69a48",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0b7c5632-fd96-4d43-b24e-d4c7db72a60a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58a225fd-744d-417f-99ad-7ae500be5806",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "832058de-e7b2-4dd4-9fa0-eba290cf1b8b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5a7c5999-fe38-48f8-ac52-c8944fe3a24b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "648d7f0d-341b-4ef1-b620-6b232e4b039f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7b1dc7a-0795-431a-9178-3bc9fe0e09e2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b20b223-5c9a-41f4-a02a-da17169516ab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "257178df-e977-4c8b-89b4-b851710f4617"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f39525fa-8f7c-4168-a990-d6bc4f6c04fc",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af2bdc00-6ec4-471c-8a56-993786e64e4e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25a2fdf5-8f3f-4adf-8a1e-aa6683259f35"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58e4b216-0345-4262-bcd2-e449b099f7d8",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f0c1f6a-96cd-41ad-b94c-b33a6d0cd0a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c219b5a1-8105-4c3b-b290-8d7d5a4302a4",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac645723-a992-4cbc-a676-2cb3a6cd4c3b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "86f93cea-a0e6-4b55-b843-1925ef6421ad"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dec3736-923b-472d-bfb6-25c36e46e9ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12eb45be-022d-4844-a743-e0e9ca1e8f4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed92ffe-3c19-45d7-bbc8-447ac7782144",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0895f468-1d02-484f-b5cb-840af123da28",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e3b1ee7-b88a-4775-9db0-65b17fa07615"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "04f87377-973d-478a-a0b0-8bf7e1a6bb27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2cbc0b8b-0681-4972-8896-061b234272d1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "157a92e5-195b-4cbb-abed-4355043bb503",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "29ad9620-18dc-4977-b8d2-450e596c6a77",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2fe3fb09-b250-45d0-81a5-f4ca0bc3e474"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "beb7f48f-f45e-4e9e-ac41-9976e2ffcd97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "85d29dcf-0fda-4f39-b44f-7192c67d934e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a40a22e2-e4af-4d83-85ff-9981eef3cf91",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3535236b-b459-49b6-b2cf-eb9f9b8f2a8a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ae2d41ba-6902-4073-8b85-8b317819a613"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "94bd04b1-1c46-496a-b6b2-8f2dd41ba269",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d6890f58-6398-416a-9031-4bb722241e42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f06d784a-55b6-4c63-bea8-aa0306db87b4",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5bf84c0-65c8-4904-ab4c-5bf3b1e8ecca",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4ae0335-8536-42dc-8e06-e5dbb35cfd31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "da8481bb-bc6f-4b3e-a20f-b3f3881ffbb9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1788e00-8d52-47f7-8613-467dad820674"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1b14ca49-9afa-4804-bdc6-5043386cc132",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c5c92d46-7e02-439f-87d5-dfac43ac7b7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6dfb061a-9753-40ca-8715-b52a0b560c2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e562a06f-055b-4fa3-ac28-b44750e08971",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5a6975d4-364b-4119-bdbe-c64a52c2e331"
                        }
                      }
                    ]
                  },
                  {
                    "id": "69a6d2f3-21a6-4268-a53b-7d883e6ea6f0",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55359797-8ac9-41a7-baab-c5c9bf169b63",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "57b5eb06-4cab-4804-aded-da0de1acf45f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "493a2746-e3ea-47fc-8f07-7307f56bb8d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4742d63b-f2e1-4141-b993-276034a08be7"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "65369722-ba59-45c9-ae2d-46e87175a3c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a08c4a74-71e6-4cda-8c68-a2db097d3edf"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d391fc75-70ad-4026-bb03-69c351db143e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "97180a27-2255-44db-b521-663ec5040e29"
                    }
                  }
                ]
              },
              {
                "id": "9b202c98-c2b0-4f85-871a-ce3907e084c2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "09db55d3-5969-4825-90e6-788d1ccec90b",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "559dc885-3d54-4eac-8809-75146724133a",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "c01fa76a-66ad-4520-949f-f5c90288539d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "687025df-e70e-4484-8a65-3cd0e1e2e8be",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "06febe34-f3a6-427c-99b0-bf5ec3dd0c52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "713ce02d-5568-4b34-9df0-5ac0ff5285ed",
                    "name": "credentials_verify:missing_scope:verify_credentials",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac3ddedf-51b3-47bf-91b6-d5569397037e",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:credentials\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "e47e1474-5bd7-4048-b0e0-467e65ea7f43"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "df77eb01-85ee-4d3b-b851-5e5c29cdfcb8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "718d0c12-d3bb-4ecd-837e-c3d04422700b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5b20697c-1863-4949-9dba-089d1816ad8f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "0b3199e9-6e54-46b5-beac-5f5514a83f21"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "441cc14d-584d-4d35-b2da-a8db319c2426",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2a776fe0-954f-4e63-9cef-f692ecac875f"
                    }
                  }
                ]
              },
              {
                "id": "a40c079f-6efe-418a-8027-c1196f8e5718",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "b1ec0816-c81c-4421-8398-d2925215ced8",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae328ccc-67ff-421c-9a51-fed99374f2a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "e2c93edd-fd83-4860-a811-57106ca0f461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e92ea7a-b868-45d9-b96e-6761dd2d5b62",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf1b8bbc-92d3-4f0e-9e69-d764fb4222f9"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "b77dda2f-33b1-441b-b459-f15f7e80132b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3a5923bd-3447-4938-a277-d6ba6658cb47",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "deb71979-39f6-4676-90c3-4b2bff8c4935",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8e84fe44-77e8-466f-a4b0-05d2708e3942"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91ed531b-5b1c-471c-b01d-d119459a6be8",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "2bd506ff-d810-4e15-ab65-85afb600cb11"
                    }
                  }
                ]
              },
              {
                "id": "bcde84ee-29df-4e73-ac14-3391f7edee73",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0ca5b3e9-4675-477f-9880-4f47107ac348",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "8bd298fa-dae3-4c98-ae04-9f94f7e700a9"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "234bb257-bf7e-4ecd-8aba-91773512c288",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9d8b2ef5-bc62-4b1c-81d0-429e1244f216"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "1e1a0c14-4443-4c8a-8a0d-ae91ad97ea76",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:credentials\" scope",
                "utils(pm).getAccessToken('verify:credentials');",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "44e9faf4-6c8c-4701-b96e-9fab8e3cb6aa"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e8da3f70-6496-422e-97f1-3133630e561e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "d931d7c0-5b40-487e-befb-9dfc86e3b5fa"
            }
          }
        ]
      },
      {
        "id": "931bf850-b25e-4060-b3a2-2d8f184f80f9",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "1b970028-4ac5-433c-a99b-e68e93a0e33b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d352269e-344b-4518-adf3-527b951199b2",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2bf269d6-6d09-4392-93ff-8d0fdd7b0fa9",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b968521-06fb-47f6-a326-78b3c9bf9f0d",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "302a52bf-27ef-49b2-8174-7043915f9c7f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d933b64-dd3c-430b-bf54-1ab69f30f7b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "1bab8bc4-461c-40e5-9f0d-38700794b4ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "31fc8466-a63c-490f-b629-4f1e055c2df8",
                    "name": "presentations:missing_scope:submit_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb5c0fc-754e-45df-a537-0aa7d5447318",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"submit:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "177c68bd-cb64-42d1-97e6-bc5497150e83"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "604c3ee5-ea0e-441f-b44e-4827f0164cb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3f4fc36b-cf8a-4fd6-9cde-112bad7b6250"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a8c09cf8-d1c2-4bd0-b8bb-e0c7260455ac",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c57e15d0-6906-4432-be72-13c61fff77ca"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2bc567cc-ab26-47df-b92b-598a0ed52b7a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a5a8563-2bc2-4171-9bcf-d4c536fc85c4"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ab09e66a-3db5-436f-a80b-ac7fe8329ae9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"submit:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('submit:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "3669ad37-80b6-4d1d-af22-bb1dfded93dc"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "af43d259-692b-4d35-a312-4ca0c1994c2b",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4536f91d-c560-493f-a5a9-1ce90d0db986"
            }
          }
        ]
      },
      {
        "id": "810f448d-ca1d-4452-a707-2d07b666f9db",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "8922cf34-2101-4d64-a47b-a8fad22d6a90",
            "name": "Negative Testing",
            "item": [
              {
                "id": "9734a102-5bf9-43dd-9d5d-10d105e28dbf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "2bcaa1f3-9001-45b9-95f6-f5f8c0bf6d12",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9085382-85bc-44c4-a5a7-cb2ba17ec22e",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "37b27a07-5029-4c8c-a64f-d30393c83542"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7afbce5d-0c87-49c3-aae3-9caf9ee5f067",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5f7d9d7a-9f7e-44dc-93af-c3890501e944"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cdb79a4a-ceb7-4c54-a19e-98be98fdeb44",
                    "name": "presentations_prove:missing_scope:prove_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d6552a2-0b93-4354-bbad-a7cf156298ed",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"prove:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d0a87c94-4cd0-40c6-ada4-eae9ef27a633"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b6250d3-f647-402b-a814-03ffa5122770",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "18212bdd-9ca3-4f97-9979-51fd04a68c53"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9585006c-77e1-46ba-8c6e-3bb68f77cf43",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d9afbe02-1e24-4c85-86b9-0c26d1275496"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ce718a6b-dea9-49ad-a305-37b73461342f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e0d45dfc-b1da-4e8a-ae10-c45121d6463d"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a5af0f95-ca16-4cce-be58-3a5d8b1bb882",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"prove:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('prove:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "e26b6597-71b1-407f-9564-a2e8f4bf8570"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "80a1f73b-bd83-4c3e-a050-6b4580fb52ca",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2bf1c69b-9e7b-4157-a092-e6e366cdc1c9"
            }
          }
        ]
      },
      {
        "id": "46bd91c9-5ae5-4451-ac96-621009644777",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "ee1b185b-ea0a-4e79-9139-6ed35d0f12e6",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2689bc0c-256a-4d1d-ad33-f356a655edc8",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "702094fe-5810-4952-bfef-af3d288981ed",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8580625b-897c-4e6f-aa83-e9b772c9d920",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "24f65be3-f6e1-4e6f-b812-a806860842d8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "68cc4415-9000-4bcd-a043-30c8c3c0738e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "9d04cfb2-9498-4ff8-add5-ffb264c3c54a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4aefa8cf-9742-4b86-9f2c-111b657eafed",
                    "name": "presentations_verify:missing_scope:verify_presentations",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "auth": {
                        "type": "bearer",
                        "bearer": [
                          {
                            "type": "string",
                            "value": "{{currentAccessToken}}",
                            "key": "token"
                          }
                        ]
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "873b5dd8-8de4-49b1-942f-fc86b7902dff",
                          "type": "text/javascript",
                          "exec": [
                            "// Obtain an access token without the required \"verify:presentations\" scope",
                            "utils(pm).getAccessToken('');",
                            "",
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "7b1e0beb-bb98-4d94-b11d-21fe6c0b9318"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e03460af-98da-4395-8944-0e1d6c53c260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 403\", function () {",
                            " pm.response.to.have.status(403);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema403\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "86935766-b2b4-467b-a1a1-47442c11e1f5"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "939e9e04-0386-4d34-9955-fe8b695dcb4f",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "25c8726b-b64b-490b-b06c-2922a8b720f2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "3a49c053-a700-47f1-9b8d-102a937b58bb",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "caa534e5-b20d-4186-a4d2-f5e500f4a046"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "51b47a19-608d-4bf4-8543-df7f4a037859",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token with the required \"verify:presentations\" scope.  This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).getAccessToken('verify:presentations');",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "7ccb6b9e-9140-433a-817e-aeff7b9ba5be"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "49ef604b-6086-460a-8da0-ad14de2cd708",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "2ca506a6-d874-4590-b606-6b38fc2e9d14"
            }
          }
        ]
      },
      {
        "id": "cfcd4213-6156-49f9-b8a1-4dde9d4db663",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6f7843b0-034a-42f4-9f2d-ce0a258f9844",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "72d9262e-1175-4be3-90bc-0ce3b6431324",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "8cf32410-fc99-401e-aff4-bff20a4c43ac",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "bf897f21-058d-4af2-ab1c-1bfd857a6d43",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "0b23f590-6c4f-46a1-b431-823a3845589e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1925,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 262,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 253,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 517,
        "pending": 0,
        "failed": 39
      },
      "testScripts": {
        "total": 967,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 958,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 37.160305343511446,
      "responseMin": 18,
      "responseMax": 346,
      "responseSd": 33.95064149500024,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1675816772000,
      "completed": 1675816792337
    },
    "executions": [
      {
        "id": "a7cb946d-0536-4237-a8ff-a93c1d7be99e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 253,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "8bcc3463-48cb-4219-8fef-c2984d6ef3ca",
          "httpRequestId": "8e0507da-8c8c-4bf3-9e3a-e5ab023e9bb7"
        },
        "item": {
          "id": "a7cb946d-0536-4237-a8ff-a93c1d7be99e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "bcd6eb65-546b-48b0-af6b-61ea55bb6901",
          "status": "OK",
          "code": 200,
          "responseTime": 164,
          "responseSize": 0
        }
      },
      {
        "id": "f9f7b77f-7f23-45ed-851b-b23bd9af384d",
        "cursor": {
          "ref": "bd22dae8-e988-449c-9c85-ef6ef1a335a6",
          "length": 253,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "8e2b92af-8192-48bd-be89-d47a7ee95cbe"
        },
        "item": {
          "id": "f9f7b77f-7f23-45ed-851b-b23bd9af384d",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "9bae0702-9565-4736-af6a-5409fa7faaed",
          "status": "OK",
          "code": 200,
          "responseTime": 18,
          "responseSize": 0
        }
      },
      {
        "id": "0cc0081d-05e1-4f99-bc96-d739d927fbe4",
        "cursor": {
          "ref": "f9da9b1f-5cc4-4bd3-bcd0-3a80bbfff518",
          "length": 253,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fa068e22-6f1e-4f79-a2ca-c3b4cc844514"
        },
        "item": {
          "id": "0cc0081d-05e1-4f99-bc96-d739d927fbe4",
          "name": "did_json"
        },
        "response": {
          "id": "c50a217b-aec4-46af-b5ee-6e51ffe19d08",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 1369
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d249cbf-9071-4fa8-9762-1998e33bee04",
        "cursor": {
          "ref": "8d45c165-d74c-4e1a-b526-7017546b5a4d",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f38887d8-d188-4f86-8ed4-0c36521d38aa"
        },
        "item": {
          "id": "6d249cbf-9071-4fa8-9762-1998e33bee04",
          "name": "did:invalid"
        },
        "response": {
          "id": "31d4d074-0d0d-44c4-b16d-186d6ff7bb55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "6d249cbf-9071-4fa8-9762-1998e33bee04",
        "cursor": {
          "ref": "8d45c165-d74c-4e1a-b526-7017546b5a4d",
          "length": 253,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "f38887d8-d188-4f86-8ed4-0c36521d38aa"
        },
        "item": {
          "id": "6d249cbf-9071-4fa8-9762-1998e33bee04",
          "name": "did:invalid"
        },
        "response": {
          "id": "31d4d074-0d0d-44c4-b16d-186d6ff7bb55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:4)"
            }
          }
        ]
      },
      {
        "id": "18ac4ecc-2e4a-4ee6-bfc8-9bf327d58054",
        "cursor": {
          "ref": "367d2ca7-b337-43a1-917f-10a385d8ac4e",
          "length": 253,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "c406c691-6967-4ff4-8788-bd7c29aa0a97"
        },
        "item": {
          "id": "18ac4ecc-2e4a-4ee6-bfc8-9bf327d58054",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "3331018c-6758-445b-a490-826ffb5d05d0",
          "status": "Not Found",
          "code": 404,
          "responseTime": 68,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd8f9e4-0807-4026-b5b7-706b2d2fee6f",
        "cursor": {
          "ref": "23f7b516-8254-429b-a2e3-777455d41181",
          "length": 253,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "cb8ae6e3-edf2-4018-8abf-b9b9b218f1d4"
        },
        "item": {
          "id": "fcd8f9e4-0807-4026-b5b7-706b2d2fee6f",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "7f6d9c07-3dda-4fd2-82bb-72fd1f8ef3c2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 30,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "29e8b823-0cc5-4a63-accb-96859082d488",
        "cursor": {
          "ref": "c64af8f5-f733-4ecc-9803-a7b47f323c86",
          "length": 253,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "cc334508-6383-427f-9b65-c6f58e7bdaa4"
        },
        "item": {
          "id": "29e8b823-0cc5-4a63-accb-96859082d488",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "aa440457-aa01-4a8c-aa9a-d7103e8fbb71",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df55cff-d5bd-4cba-984b-56dde51a5a16",
        "cursor": {
          "ref": "b514297b-9f85-49f4-b9ae-fadfe95ff5b8",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6cf5a9f6-f0fa-4db1-a8b9-dee53638f8f6"
        },
        "item": {
          "id": "9df55cff-d5bd-4cba-984b-56dde51a5a16",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "91b2a573-d61e-4896-ae4b-50e891789037",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 30,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df55cff-d5bd-4cba-984b-56dde51a5a16",
        "cursor": {
          "ref": "b514297b-9f85-49f4-b9ae-fadfe95ff5b8",
          "length": 253,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "6cf5a9f6-f0fa-4db1-a8b9-dee53638f8f6"
        },
        "item": {
          "id": "9df55cff-d5bd-4cba-984b-56dde51a5a16",
          "name": "identifiers:missing_scope:resolve:dids"
        },
        "response": {
          "id": "91b2a573-d61e-4896-ae4b-50e891789037",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 30,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "230f1976-f7a0-48de-9abe-ceac5195be7b",
        "cursor": {
          "ref": "02118ed7-4734-4020-9dd4-1b5accc443c0",
          "length": 253,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "f1c900c3-077d-48a6-9cb8-71e6dbc71867"
        },
        "item": {
          "id": "230f1976-f7a0-48de-9abe-ceac5195be7b",
          "name": "identifiers"
        },
        "response": {
          "id": "3a42abb6-dc83-42cb-99bd-ba5e72686984",
          "status": "OK",
          "code": 200,
          "responseTime": 72,
          "responseSize": 1385
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f207e9-3cc0-4562-9aba-711d209567f1",
        "cursor": {
          "ref": "4e9cbd28-9231-47c7-98b1-2f1297754a06",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a5e0bdcb-7b3c-4f7b-8499-24ab84f59d64"
        },
        "item": {
          "id": "f9f207e9-3cc0-4562-9aba-711d209567f1",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "651d86fd-bd99-48fc-ac02-97d6c78b080f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9f207e9-3cc0-4562-9aba-711d209567f1",
        "cursor": {
          "ref": "4e9cbd28-9231-47c7-98b1-2f1297754a06",
          "length": 253,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a5e0bdcb-7b3c-4f7b-8499-24ab84f59d64"
        },
        "item": {
          "id": "f9f207e9-3cc0-4562-9aba-711d209567f1",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "651d86fd-bd99-48fc-ac02-97d6c78b080f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44843a75-b0e6-469c-9788-02fda285c6d3",
        "cursor": {
          "ref": "e8deb38e-06c5-4881-bc5c-5f794677929d",
          "length": 253,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "eadb1975-b46d-4679-8c8e-b62b621d30e9"
        },
        "item": {
          "id": "44843a75-b0e6-469c-9788-02fda285c6d3",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a09d281b-736f-4d37-9430-b11d6b5b0722",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6999fb8b-779a-4687-ac52-0d24c2722a33",
        "cursor": {
          "ref": "81fa017a-2b35-4aee-92ed-28cc19707b7a",
          "length": 253,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "1507a031-e7b7-4a2a-aca0-f74a3502c77d"
        },
        "item": {
          "id": "6999fb8b-779a-4687-ac52-0d24c2722a33",
          "name": "credentials_issue:credential.@context:invalid"
        },
        "response": {
          "id": "73e5295c-64f1-4302-9046-bc7d4a83f7b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 176
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101dac13-6c0d-4189-8877-5c93d008d928",
        "cursor": {
          "ref": "8851e6e5-9f9b-4d8b-b168-6e8a3d693668",
          "length": 253,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "6e90d634-0c28-4302-9040-09dd1b604094"
        },
        "item": {
          "id": "101dac13-6c0d-4189-8877-5c93d008d928",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "ce5ac244-f124-4d34-884f-0b2262ebd113",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "90e37c04-40a1-4431-8c0d-dcbd0a1eff55",
        "cursor": {
          "ref": "39cef1c9-b884-49db-a858-6f7e16a94de6",
          "length": 253,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "8be051da-3c78-436a-a0c7-ade44fc8444e"
        },
        "item": {
          "id": "90e37c04-40a1-4431-8c0d-dcbd0a1eff55",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "cf206f6a-5616-4659-8a0a-025fe3a34ead",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d605779-af2e-4b47-98a0-cbdf9ca5e541",
        "cursor": {
          "ref": "5b87722a-f7bb-4732-bb7b-570a29d421af",
          "length": 253,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "c0922c7c-790a-4785-ab5e-ca3418dd8332"
        },
        "item": {
          "id": "1d605779-af2e-4b47-98a0-cbdf9ca5e541",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "6bd98ad0-efa9-490b-9d40-b294e7fd8232",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50034ae1-d3ac-4dce-8710-268c28a03972",
        "cursor": {
          "ref": "09c5289b-5d3e-4b09-9cfc-fd480d4ab8f0",
          "length": 253,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "43734d4a-f390-426c-9c9a-b1a7dc61cf2b"
        },
        "item": {
          "id": "50034ae1-d3ac-4dce-8710-268c28a03972",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "2986ecd3-f3c5-4877-aad1-5894566b4e34",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3b7ac74-d507-4b80-8f7f-f1efa34580b3",
        "cursor": {
          "ref": "cfd17d92-4327-4ea9-9a04-539f7d5da857",
          "length": 253,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "5509b5fe-1463-4ea7-8bf2-eaaeddec3f85"
        },
        "item": {
          "id": "a3b7ac74-d507-4b80-8f7f-f1efa34580b3",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "46fdc330-d35c-4c92-a8b1-f674c8e628a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a68d9189-dcf2-49b6-b3f4-43b00787b815",
        "cursor": {
          "ref": "e7bc10e1-02cc-4d15-87ea-cb18ba898b70",
          "length": 253,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "83414a99-8727-41dc-b148-d5206efa2094"
        },
        "item": {
          "id": "a68d9189-dcf2-49b6-b3f4-43b00787b815",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "9301c7dc-dab4-485d-bbc7-176a96779e61",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c7a43f4-0d49-4439-b90b-a649bbcdc2c1",
        "cursor": {
          "ref": "bfba82e0-be52-4d70-b823-7ad776f93422",
          "length": 253,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "55f7c6f6-2d05-41e7-b24a-383dc18c062b"
        },
        "item": {
          "id": "1c7a43f4-0d49-4439-b90b-a649bbcdc2c1",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "53586998-ac35-4f75-8736-b92977add138",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d69bdbeb-4e38-40c4-b1ae-9d2d2cfb5fc3",
        "cursor": {
          "ref": "c9cd3f29-6ce5-41b2-b6de-6a31f6279666",
          "length": 253,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "177b9f81-be7d-4f3e-ae8b-a9a3236e88a2"
        },
        "item": {
          "id": "d69bdbeb-4e38-40c4-b1ae-9d2d2cfb5fc3",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "57b6614f-f8ee-4933-86ca-7d084fd89c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ea2043a7-5bba-4d9a-950d-35bd72f21f6d",
        "cursor": {
          "ref": "271577b0-f79b-4724-baca-cb035029b66b",
          "length": 253,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "78fa8c07-197e-42fd-99cb-9a0c43e691a8"
        },
        "item": {
          "id": "ea2043a7-5bba-4d9a-950d-35bd72f21f6d",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0af5dffc-26c8-42c1-8bf7-eaf152bec3b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c1660a22-3dfa-4945-87ed-357cce35d20b",
        "cursor": {
          "ref": "7cba98e8-9159-4ca0-bbcd-3884746ee643",
          "length": 253,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "5fe4757c-2e56-4a22-9226-78b4ae709788"
        },
        "item": {
          "id": "c1660a22-3dfa-4945-87ed-357cce35d20b",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "4a8f2c18-97ac-4e25-a0b7-146053cce621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 156
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae6abe16-6ada-465c-b614-30336723a46c",
        "cursor": {
          "ref": "8cd35c1e-546c-493f-993a-9a663bc663b9",
          "length": 253,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "d0ac893f-4cdf-40ee-ae06-cf7bebf193b7"
        },
        "item": {
          "id": "ae6abe16-6ada-465c-b614-30336723a46c",
          "name": "credentials_issue:credential.id:missing"
        },
        "response": {
          "id": "6aa93792-a0ef-4fdb-8c49-497a5b33bbab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ced0ec82-3293-4bfe-b48b-39ad8349d66e",
        "cursor": {
          "ref": "563262c7-292b-42d9-bcc1-fd0cd3a8baf2",
          "length": 253,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "f58857da-1e33-4dff-971c-a15e2a84f6a1"
        },
        "item": {
          "id": "ced0ec82-3293-4bfe-b48b-39ad8349d66e",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "d9b7af98-c4ee-4880-81bf-b3ac99d12de2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "937e616d-3fbd-42db-8ee6-cbb699096f80",
        "cursor": {
          "ref": "0a4fabfc-b2bb-443a-95a1-3ca5e56e50e2",
          "length": 253,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "9407dce1-6c2a-483d-8eac-018b69757adc"
        },
        "item": {
          "id": "937e616d-3fbd-42db-8ee6-cbb699096f80",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "74d1ad38-a084-4379-93cc-dab4c484939a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9dd9c5c-0566-49ad-a632-248d0a15b489",
        "cursor": {
          "ref": "317f1a0b-bdd8-40b9-a30e-4c21494c5f46",
          "length": 253,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "94c33356-c57b-4d5b-a014-15430a360523"
        },
        "item": {
          "id": "d9dd9c5c-0566-49ad-a632-248d0a15b489",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "be739187-37bb-421f-96fa-b623876b4ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdec29dd-5d71-408c-8a49-0534ff5a2f89",
        "cursor": {
          "ref": "ad1c82eb-9132-4cf0-af78-f074ba107297",
          "length": 253,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "a114604d-a706-45d9-baba-5b64c9384270"
        },
        "item": {
          "id": "bdec29dd-5d71-408c-8a49-0534ff5a2f89",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "b81b8e27-389d-471b-bf11-b2af0107d24e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf7cba9b-46c6-4440-960c-ea68cb276c44",
        "cursor": {
          "ref": "7aa83ce0-e9af-4b91-8c55-161092c71a13",
          "length": 253,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "d13b5310-d4cf-435b-8c46-b1dacdb93865"
        },
        "item": {
          "id": "bf7cba9b-46c6-4440-960c-ea68cb276c44",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "0b711a7c-d6bb-47f0-847f-a2ad1fd634bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0488becd-1b86-4b15-a3c1-a9dffabb6b3d",
        "cursor": {
          "ref": "c4b719b2-9a27-4dec-8a86-249aa6a17acd",
          "length": 253,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "05bd94ab-29e2-4627-8fd3-0b6ac110eeb8"
        },
        "item": {
          "id": "0488becd-1b86-4b15-a3c1-a9dffabb6b3d",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "e7a113be-bf15-4580-9138-3e83561bf27d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca8d7d30-6ba7-4e1e-8cd6-6a2965cb39de",
        "cursor": {
          "ref": "7f08cd35-2380-4a2f-8add-39bfb96b90ed",
          "length": 253,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "54fc5d1f-d1be-4ff8-996f-99d49270e0b5"
        },
        "item": {
          "id": "ca8d7d30-6ba7-4e1e-8cd6-6a2965cb39de",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "303f6a8d-c37e-4c7d-8d6e-a7b25fad9f29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4114df2-18bd-4c8c-ab6f-876a7caf9df6",
        "cursor": {
          "ref": "09d8503b-7fd5-4004-81bb-3bf600a2d15d",
          "length": 253,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "71336aab-2e5d-41c2-8144-ce4db90a3edb"
        },
        "item": {
          "id": "a4114df2-18bd-4c8c-ab6f-876a7caf9df6",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "bec90f15-5fe7-41a6-b053-4a67f6d78b10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf1f07e2-8698-44ae-b870-2094a20da388",
        "cursor": {
          "ref": "0355c2fa-81e0-4f1b-af1d-205915a9e844",
          "length": 253,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "9888a4f2-3ba1-4e7a-9930-e992aa846244"
        },
        "item": {
          "id": "cf1f07e2-8698-44ae-b870-2094a20da388",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "4dde6e55-1673-4d50-b8f5-548985744995",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0065bc6d-bfda-477e-aaeb-4ba5460c4b1c",
        "cursor": {
          "ref": "187594ab-5fb7-4e62-85c2-64479cb9a459",
          "length": 253,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "f2f086ff-dc77-4645-8a9b-647aead06b0b"
        },
        "item": {
          "id": "0065bc6d-bfda-477e-aaeb-4ba5460c4b1c",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "8b1f7627-b48f-4dd8-83fb-a6c36906fc42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "acfb790d-50b6-4393-9b37-91a417410c83",
        "cursor": {
          "ref": "9e9ed5e6-6e57-445e-ac5a-c249b7887816",
          "length": 253,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "226ca9d3-9dff-4fa1-89eb-9d3bd97d711a"
        },
        "item": {
          "id": "acfb790d-50b6-4393-9b37-91a417410c83",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "b5fa434d-b87c-475f-b7a5-8f81d1548b37",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97090b71-2f42-48aa-a8bb-bea09a9324e2",
        "cursor": {
          "ref": "80924436-cc33-4a27-aac3-9c7748f93283",
          "length": 253,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a8c8dec3-fc9c-49c9-8058-05d9e66c5e73"
        },
        "item": {
          "id": "97090b71-2f42-48aa-a8bb-bea09a9324e2",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "68048d1d-a396-4df4-97a9-89dee9b83f32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b26b8a3-f88d-4bf2-9a8e-bcaa7db00d49",
        "cursor": {
          "ref": "b880d15d-bc17-42db-9e8a-921fe428d00e",
          "length": 253,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "b25831a8-ac1c-4e79-bdfd-691a9cd091d2"
        },
        "item": {
          "id": "3b26b8a3-f88d-4bf2-9a8e-bcaa7db00d49",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "33b578c5-ba4f-47e4-b5d6-c7b792fda33c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f41666d-588f-4ec7-953a-8203293b50bf",
        "cursor": {
          "ref": "d07957df-adf2-458d-b772-cb1c846a104e",
          "length": 253,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "058a0bd8-dd01-4552-95d6-55f894b835e0"
        },
        "item": {
          "id": "4f41666d-588f-4ec7-953a-8203293b50bf",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "8f367f1f-acde-45b3-ab72-bae027b982bf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c895ecc-d13f-4198-b729-9c4785ab940f",
        "cursor": {
          "ref": "fa61a932-53da-49b6-b65c-d42b20933812",
          "length": 253,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "386ce2ae-03a8-4a80-a2d8-26f83714768f"
        },
        "item": {
          "id": "0c895ecc-d13f-4198-b729-9c4785ab940f",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "44ee4604-05ea-4141-9bff-1496d9eef632",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22ae1afc-e879-46cd-b65f-946535d099d0",
        "cursor": {
          "ref": "446b59eb-2914-49b3-a075-07245fec6b17",
          "length": 253,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "b9529809-aa50-46db-bc30-bb3e215b8928"
        },
        "item": {
          "id": "22ae1afc-e879-46cd-b65f-946535d099d0",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "77500d5f-084d-4a5b-9014-ad8227ad745b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5aca567e-1dae-4262-b2a1-f6853cd49a59",
        "cursor": {
          "ref": "a8bf5beb-4856-4e9d-8ffc-0235cc3d26dd",
          "length": 253,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "64a1c237-e35f-4b6e-9ffd-b83c0bf775d5"
        },
        "item": {
          "id": "5aca567e-1dae-4262-b2a1-f6853cd49a59",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "57eb15ab-077f-415c-be72-5d1aca8664c9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eafbfeb1-7f82-42f3-9767-4ae23e6e2a03",
        "cursor": {
          "ref": "dc5e57bc-c837-4ae2-95e1-21feb22643b7",
          "length": 253,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "9c376d86-e0a2-4695-b17b-9e260a811170"
        },
        "item": {
          "id": "eafbfeb1-7f82-42f3-9767-4ae23e6e2a03",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "7ab6371a-f3eb-4a16-b104-242ebc50cbfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 33,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6731195d-1d7e-4804-9ab3-6a1c3808441e",
        "cursor": {
          "ref": "6d6feb68-d4bf-4b80-8622-dd4a8d09cd00",
          "length": 253,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "0feb3c73-302d-4d8f-a0a0-b6ad2ee050b9"
        },
        "item": {
          "id": "6731195d-1d7e-4804-9ab3-6a1c3808441e",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "22901f7d-8753-4fdb-93c6-2dc98e20990d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afe54363-d9f2-4526-bd83-a855284428dc",
        "cursor": {
          "ref": "ea6ca73e-8c84-429d-a9b2-2f99172c9af1",
          "length": 253,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "61fbacd2-1901-4323-8685-8727bb9be432"
        },
        "item": {
          "id": "afe54363-d9f2-4526-bd83-a855284428dc",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "962c6e25-3331-4d22-98df-6a49134a85cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b13bd1fc-e8e2-4375-a8cd-afb31bc68e6d",
        "cursor": {
          "ref": "2f37c550-8e24-4693-8915-46cd24457561",
          "length": 253,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "1fa06a30-6e36-4bde-bde6-7f7fb9fd2ca4"
        },
        "item": {
          "id": "b13bd1fc-e8e2-4375-a8cd-afb31bc68e6d",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "717d4ad1-c3ef-4d46-88a1-de0bbb2c6628",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ca76c95-608f-4470-b3ef-48d884061589",
        "cursor": {
          "ref": "e613bfa6-47e5-4251-8f48-41ee0f2827a6",
          "length": 253,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "97e2d037-ce9b-4dba-aa10-0c32382f4c75"
        },
        "item": {
          "id": "6ca76c95-608f-4470-b3ef-48d884061589",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "252eb3fc-502d-408e-8fc5-8918d322b563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4c3fac0e-919b-4e30-8cdc-6d283671ae40",
        "cursor": {
          "ref": "c74acdcd-f863-4294-9e69-25b0cc9f201b",
          "length": 253,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e75720b9-8c1f-4271-8d17-b865fa5134dc"
        },
        "item": {
          "id": "4c3fac0e-919b-4e30-8cdc-6d283671ae40",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "0849eb20-8169-4ccf-8466-7815ef7f7263",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0c61b6b-d899-49fb-91f5-be30e23150ea",
        "cursor": {
          "ref": "02cfed78-af9c-434e-acf7-176baa64f88c",
          "length": 253,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "fb9fca08-865c-4c0e-a00d-fbc4fafd4aa1"
        },
        "item": {
          "id": "f0c61b6b-d899-49fb-91f5-be30e23150ea",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "f96ac4fd-65d2-4bfb-8378-869f9620aef6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "da5fb228-e366-41d1-b6ba-169f59e3cf24",
        "cursor": {
          "ref": "4cc60ff1-4023-41f7-b537-5bf7b3aa8b42",
          "length": 253,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "060c0791-1255-4743-8210-1f156f18a118"
        },
        "item": {
          "id": "da5fb228-e366-41d1-b6ba-169f59e3cf24",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "d3bd0099-b779-4ad9-81b7-d1e3a8e86303",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dc4c82a-644e-4b9c-b5ca-76d7c733bd00",
        "cursor": {
          "ref": "5418e2e1-d05a-4d63-86e3-9e7d93275322",
          "length": 253,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "4adf3aa6-433c-4faf-916f-83b5b579c8b4"
        },
        "item": {
          "id": "9dc4c82a-644e-4b9c-b5ca-76d7c733bd00",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "d039d40b-c71b-43c2-8aee-55e13642a090",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d6cc0355-c73a-4901-930f-253250bae36e",
        "cursor": {
          "ref": "a6c53cfd-f85d-4ba3-9cce-aea6cb968c53",
          "length": 253,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "f4d9cf14-dac1-41ba-a249-f383b623158c"
        },
        "item": {
          "id": "d6cc0355-c73a-4901-930f-253250bae36e",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "42e2a2e6-a14f-4292-8db9-3711805ab807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af443077-b7d2-4784-ae28-c474476a2e7c",
        "cursor": {
          "ref": "331baf68-ec16-4bf0-b8db-b41416f60eda",
          "length": 253,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "428c6614-0386-4401-aa75-94864d89b2d4"
        },
        "item": {
          "id": "af443077-b7d2-4784-ae28-c474476a2e7c",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "34f8e129-cad2-4372-b746-5268d57da2eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab26f57-410b-46cc-9e1d-30fa7323cc8f",
        "cursor": {
          "ref": "95093545-c2b5-4773-83e8-7b0e941ef0b3",
          "length": 253,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "69f9778c-4c50-4fb2-9dd0-0af13f186a1c"
        },
        "item": {
          "id": "dab26f57-410b-46cc-9e1d-30fa7323cc8f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "2c07f0af-2a04-4b5b-be5c-0e07bdc75e55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37c8fb10-2d3d-42d5-b39c-2197311ac101",
        "cursor": {
          "ref": "1dfeb9ca-f8cd-451f-a754-6ec47ba6aa6f",
          "length": 253,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "6ba650ea-6930-473d-a520-1d92bd5fd569"
        },
        "item": {
          "id": "37c8fb10-2d3d-42d5-b39c-2197311ac101",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "56a5158d-16e4-4052-b06b-568c98264660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ee58633-cebd-422c-bdbc-00f0110d37c5",
        "cursor": {
          "ref": "e1b74f87-2662-477a-a647-ec7abe6115c7",
          "length": 253,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "a587536d-6035-49ca-bf33-7a33d9b2ba54"
        },
        "item": {
          "id": "6ee58633-cebd-422c-bdbc-00f0110d37c5",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "231d5b5e-c1ee-4d8e-976c-51e904883eaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 38,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 400",
              "stack": "AssertionError: expected response to have status code 422 but got 400\n   at Object.eval sandbox-script.js:1:54)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "6744a327-5929-4dd9-9ce6-859036757b63",
        "cursor": {
          "ref": "e80b2227-a450-448b-9f95-73d0c42bb7e1",
          "length": 253,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "2c6e3348-e5b0-4c82-b0ef-0a47e97fc055"
        },
        "item": {
          "id": "6744a327-5929-4dd9-9ce6-859036757b63",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3b6ea436-138b-4bb3-8018-e63012f6a3af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3793f1f-496b-460d-b8a3-71056f6228b0",
        "cursor": {
          "ref": "9d382e30-db4f-4f08-8d6f-7667ff94906f",
          "length": 253,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "7df37b8e-4dd2-47af-8a9e-83b462d35a3c"
        },
        "item": {
          "id": "d3793f1f-496b-460d-b8a3-71056f6228b0",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "57c51912-ee33-4b81-9e44-68d20b748772",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9143a445-b93b-4579-aa47-0ad80593886b",
        "cursor": {
          "ref": "a6178a57-4af4-4ddc-bcaf-0d03308bcf3d",
          "length": 253,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "62a70a5d-f7c8-4e96-aac4-24e8f7a8cc4a"
        },
        "item": {
          "id": "9143a445-b93b-4579-aa47-0ad80593886b",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "4471de30-3fdb-4f85-9f2b-2bfdea6c9801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c9bd65e-8095-4c4e-92f0-4ffb1a91491d",
        "cursor": {
          "ref": "91e19fbb-416d-4219-84d1-d8e9d211083a",
          "length": 253,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "8c4de9da-8f61-449e-8e7c-f3a5fbaea58e"
        },
        "item": {
          "id": "2c9bd65e-8095-4c4e-92f0-4ffb1a91491d",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "e7d4dbf3-0772-4ec3-a5d6-8a5d5318e384",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93b02ad8-77e1-40af-a8a3-9250aff77660",
        "cursor": {
          "ref": "0b98f184-0ba4-44bf-a5c9-5109bd948a3f",
          "length": 253,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "82e44980-c067-43de-8751-caae5f649830"
        },
        "item": {
          "id": "93b02ad8-77e1-40af-a8a3-9250aff77660",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "de49825b-2d14-488d-86d6-78a86f32b134",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8286301f-56f9-4628-991e-0515f9b1af10",
        "cursor": {
          "ref": "52e4bef7-00c7-478d-ad99-a4d143af99c7",
          "length": 253,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ef4f2f8f-be3e-4f87-8e41-6f893414d188"
        },
        "item": {
          "id": "8286301f-56f9-4628-991e-0515f9b1af10",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "5b730630-3469-465e-b33b-316cd09d9752",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69d139be-efc8-410a-94dc-d5192850a88a",
        "cursor": {
          "ref": "6149d93d-dc8d-4d46-a425-03dfb7b29007",
          "length": 253,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "57f633e7-3bae-42d6-ad42-ab8c3c33a321"
        },
        "item": {
          "id": "69d139be-efc8-410a-94dc-d5192850a88a",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "d3066844-d3a2-4ab1-9cc7-9ad376d227ef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b7ea8cb8-8d60-4a14-bd4e-d241bc65ef53",
        "cursor": {
          "ref": "27e52315-7479-4113-9373-4e810e5c537b",
          "length": 253,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "51dab8aa-d206-4a6b-9fc8-4b663cba2ec2"
        },
        "item": {
          "id": "b7ea8cb8-8d60-4a14-bd4e-d241bc65ef53",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "eab90d4f-7583-4b78-8747-4c497daace35",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "024b848f-2f11-4108-a63c-792671e88cec",
        "cursor": {
          "ref": "567fc468-3211-4faa-b9cf-f09aefefd507",
          "length": 253,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b37d412f-de58-4534-a6bf-efe90d7fa34c"
        },
        "item": {
          "id": "024b848f-2f11-4108-a63c-792671e88cec",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "1c8b93e2-8929-4012-87f1-5cbf08f9e041",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a37d409-cf35-43b5-8b41-2a5303e0b08f",
        "cursor": {
          "ref": "67a7e864-92ed-4f88-9ee3-001341b6b30d",
          "length": 253,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "a3fa599b-2a18-403a-93f8-fc7e75cb238d"
        },
        "item": {
          "id": "7a37d409-cf35-43b5-8b41-2a5303e0b08f",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "729090c2-df79-4c68-89b0-e67b9f79fe0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81ecddad-8458-4e83-93b8-f94901e039c0",
        "cursor": {
          "ref": "1a776b01-0527-4a55-97e0-0e21b76a215a",
          "length": 253,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "ea816a44-8f88-46bb-879a-46d2afcaef55"
        },
        "item": {
          "id": "81ecddad-8458-4e83-93b8-f94901e039c0",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "15c987c8-d8a6-45e7-ba23-99e2ebd8c60b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f0e91176-b234-4509-8986-0365909b345b",
        "cursor": {
          "ref": "226978a0-3731-4b9c-8d0a-b629dc4a9b64",
          "length": 253,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "d1a62a57-7891-43b9-a3f4-b94b05c28d0d"
        },
        "item": {
          "id": "f0e91176-b234-4509-8986-0365909b345b",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "bfe4554c-626f-410d-ae68-df507a76d621",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 150
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7bb8aa9f-0407-4bce-a090-4fb70e2aeb28",
        "cursor": {
          "ref": "d04a4bd4-3ebc-437f-bcc3-d8d0cf6f4a61",
          "length": 253,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "26b694b8-b219-4e43-aea5-5caf8bf4701d"
        },
        "item": {
          "id": "7bb8aa9f-0407-4bce-a090-4fb70e2aeb28",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "d6068404-b2b4-4d0e-99f0-28cc53267f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 144
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f33035-79dd-4787-9d37-9380105f68a9",
        "cursor": {
          "ref": "3f3fcdf9-9a2e-4b82-a90a-7dfa1e11424f",
          "length": 253,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "ad8f174f-94db-48ce-8adf-6efaa6fecea5"
        },
        "item": {
          "id": "60f33035-79dd-4787-9d37-9380105f68a9",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "e893b126-f605-4f18-a5b0-8e3e8b8e6878",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c75c1be3-a40a-455a-80a0-1ab30c811440",
        "cursor": {
          "ref": "1d82047d-ef2f-4bfe-81a5-9f50d9a009cd",
          "length": 253,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "4d19a5cf-c5c7-4d11-a004-c01a6af94843"
        },
        "item": {
          "id": "c75c1be3-a40a-455a-80a0-1ab30c811440",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "8e48354d-a095-4f7e-b8f1-692a017868bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35d28de7-434d-44bb-a0c0-e3ead5d09439",
        "cursor": {
          "ref": "707cc363-1163-492e-952b-82ee4724ef6e",
          "length": 253,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "e4eb9652-b094-4ff4-b104-30c3aa6ceb5f"
        },
        "item": {
          "id": "35d28de7-434d-44bb-a0c0-e3ead5d09439",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "8c5f2e6c-2c6b-401f-97df-a0a5d7e0aa2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e7ba03a-98e7-40db-996e-6c0dc4e876c7",
        "cursor": {
          "ref": "9ef5d5e7-afda-4a27-8b65-d0887311f0ce",
          "length": 253,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "8d683aa2-db68-4f96-8c6b-77f2b2b85ed2"
        },
        "item": {
          "id": "2e7ba03a-98e7-40db-996e-6c0dc4e876c7",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "4e5320ac-c28b-4776-81a0-b46ee0517c72",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 35,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c938381-b8f0-45ad-abff-94390d7b9f9c",
        "cursor": {
          "ref": "07539cd6-9bdd-4b3a-a079-8fbbb3928913",
          "length": 253,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "fef124d1-a9b4-415f-ac9d-e5da87034bda"
        },
        "item": {
          "id": "1c938381-b8f0-45ad-abff-94390d7b9f9c",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "9baffe8b-405d-4b7f-989a-88d6209e5249",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87cb9e14-0aaa-465d-9827-1b12345a84ee",
        "cursor": {
          "ref": "f0c094db-25cc-4e8c-be8c-0364040cba7a",
          "length": 253,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "1fd02183-5591-48eb-bde3-b468f8c95342"
        },
        "item": {
          "id": "87cb9e14-0aaa-465d-9827-1b12345a84ee",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1590e4c0-1c64-4b5e-a063-9ba09a4a4ba1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62e2a8c2-234d-49df-a9ce-70ded868ac47",
        "cursor": {
          "ref": "73281178-eb73-4639-96cc-78471e5ac5a0",
          "length": 253,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "14fc73c9-3d3b-4fbd-858f-e67f4b648b4c"
        },
        "item": {
          "id": "62e2a8c2-234d-49df-a9ce-70ded868ac47",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "e58e5d2d-8fc8-40b9-9dde-9f150a385d3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 684
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98753351-8d9e-48dd-a082-8d4f64128072",
        "cursor": {
          "ref": "ba7920f6-4f64-4578-9742-570cb8faeab9",
          "length": 253,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "5881577e-c711-4f3b-aa51-bbe4a50c8957"
        },
        "item": {
          "id": "98753351-8d9e-48dd-a082-8d4f64128072",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "0cfe74d8-7560-4308-a533-9be0d3addf3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 683
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1fbb293d-7831-43eb-9f5b-333212571ded",
        "cursor": {
          "ref": "f8230661-347d-40d9-9b88-e2fb9d887730",
          "length": 253,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8206d92b-9031-44f0-9323-4fc14b745f74"
        },
        "item": {
          "id": "1fbb293d-7831-43eb-9f5b-333212571ded",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "cbad8ad1-0d02-410c-ab54-cfa2de6a4bb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "05bb4015-1965-44fa-a56b-451055330f1f",
        "cursor": {
          "ref": "ae110457-9fc9-4a2e-82cc-cff4205734d0",
          "length": 253,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "c00b99f4-be71-4d56-8522-be69cafbda7e"
        },
        "item": {
          "id": "05bb4015-1965-44fa-a56b-451055330f1f",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "fc62da72-300c-40ad-b816-11da2ad854cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 211
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3276de92-7a04-4d1d-a426-e335f6c77ae5",
        "cursor": {
          "ref": "77a07d98-ec03-442f-a865-4f3bcac6abea",
          "length": 253,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "94fa8740-1438-406a-a08a-81bcbeb70226"
        },
        "item": {
          "id": "3276de92-7a04-4d1d-a426-e335f6c77ae5",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b4513a8b-956e-4e8e-8539-ceba639e2f15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf308334-0a6f-4f60-8ae8-ac24b1ccf3a3",
        "cursor": {
          "ref": "d12a8093-c4c4-445e-98f8-cf59a7123026",
          "length": 253,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "0e1d00b4-0b9f-40cd-b931-3666b3a15fe3"
        },
        "item": {
          "id": "bf308334-0a6f-4f60-8ae8-ac24b1ccf3a3",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "6d6c2a1d-7462-43f5-8110-2a88edbd6800",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4096c9fc-dba9-406d-b4e7-b5c85f99d2fd",
        "cursor": {
          "ref": "dbcc675f-f55b-4392-814f-5d0d218e403a",
          "length": 253,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "b8c13485-9a30-4705-8e4e-5df82944bd02"
        },
        "item": {
          "id": "4096c9fc-dba9-406d-b4e7-b5c85f99d2fd",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "cade78fa-d49d-45a4-9039-8887b119b890",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 284
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14a7f5d0-d337-4f53-a375-b753490d92b3",
        "cursor": {
          "ref": "cf4478a9-a246-42ed-875c-e0a954ad1505",
          "length": 253,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "e754548f-f9ad-441a-bd79-a2ed4e7acc45"
        },
        "item": {
          "id": "14a7f5d0-d337-4f53-a375-b753490d92b3",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "03b0e669-bcc1-4012-81cc-bab587dc43f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86590974-f5ee-48d1-9a2e-1160b9ac4d06",
        "cursor": {
          "ref": "ebd8e718-86d1-4d4c-8f5f-5a2b792ec57b",
          "length": 253,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "8fed4e20-6004-40c0-b18d-2b90ff27023a"
        },
        "item": {
          "id": "86590974-f5ee-48d1-9a2e-1160b9ac4d06",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "e6e9b4bb-e4b6-4e58-8557-1fc623d9539a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "236d7eb7-bc64-42ca-9312-ac3026e3489d",
        "cursor": {
          "ref": "e96836b3-feb0-4344-9bf2-fb53ebaac66d",
          "length": 253,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "7deba8b2-691c-472e-8e71-da9b9e610963"
        },
        "item": {
          "id": "236d7eb7-bc64-42ca-9312-ac3026e3489d",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "06a50aca-3946-4eb9-95fb-2a81c80f718c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc67867-6e15-406e-b48b-d025aced1fc9",
        "cursor": {
          "ref": "ed7f79aa-5e31-4292-889e-3a1508e2e0f5",
          "length": 253,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "cc6a7367-0d04-411b-8846-478ae7a7501f"
        },
        "item": {
          "id": "7fc67867-6e15-406e-b48b-d025aced1fc9",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "9fe0eb65-2447-4292-bd72-e46e8d720c90",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcae1e37-9ef6-4e13-996e-3c47ca395b82",
        "cursor": {
          "ref": "0836a262-6a49-48a0-b3d6-bbd0778d00ba",
          "length": 253,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "430105e6-7bc0-443d-b6db-cda07f97e724"
        },
        "item": {
          "id": "bcae1e37-9ef6-4e13-996e-3c47ca395b82",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "834133fc-0840-400a-af01-6ac125f4134f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 37,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6ab9fc0c-ae6b-48c4-98a9-cceb591ce496",
        "cursor": {
          "ref": "456d3763-880c-480a-b666-3bd877fe1284",
          "length": 253,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "986f8cc6-6464-455a-bc17-d37ace3f2b12"
        },
        "item": {
          "id": "6ab9fc0c-ae6b-48c4-98a9-cceb591ce496",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "4600fc66-2e62-419a-980f-f7318c76c695",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 355
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c227169-a448-4f7c-b6a4-79802ee9488e",
        "cursor": {
          "ref": "dc9a0dfe-2a98-4b01-a9bf-1927cc248c60",
          "length": 253,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "7918baaf-3217-42d4-8d58-4f9677b7f5ec"
        },
        "item": {
          "id": "0c227169-a448-4f7c-b6a4-79802ee9488e",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "5fb8e4e2-12af-48b7-8cc8-ada3c78ee9eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1375ab75-8be6-454f-8e28-62625f6206d0",
        "cursor": {
          "ref": "88fb3839-7469-4400-954b-641ca1c5bf80",
          "length": 253,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "484e4090-8b46-48a1-9dcb-7e11c0fd9ada"
        },
        "item": {
          "id": "1375ab75-8be6-454f-8e28-62625f6206d0",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "7822a4ba-2963-438b-b41e-b967fb14c4df",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4a496ef-0b7d-4700-8b74-fb1aff64b950",
        "cursor": {
          "ref": "f2ed0314-d790-4065-a353-5904553b2c04",
          "length": 253,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "40baa1fc-fd4b-49d0-bda7-f59f9ecf2770"
        },
        "item": {
          "id": "a4a496ef-0b7d-4700-8b74-fb1aff64b950",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "d6828b7a-b420-4666-a80c-650a1a84d958",
          "status": "Created",
          "code": 201,
          "responseTime": 47,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:89)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "8e35e7fe-dc6b-45be-9e6f-d595b822cc1b",
        "cursor": {
          "ref": "f7368cf0-cde3-41c0-9bfc-8fde0e36958d",
          "length": 253,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "02800d25-d102-4c48-8644-7684346c570c"
        },
        "item": {
          "id": "8e35e7fe-dc6b-45be-9e6f-d595b822cc1b",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "a5f388f6-d310-4465-8dc2-efb9f5c3fc9f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 299
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "151e068b-c9de-4ef7-9bcb-e6020beeac8b",
        "cursor": {
          "ref": "d25683bc-8e0b-4771-bdcb-f26e99b9b365",
          "length": 253,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f85da34f-9321-43b4-87a2-2918cb1b6b9c"
        },
        "item": {
          "id": "151e068b-c9de-4ef7-9bcb-e6020beeac8b",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "9d3c4bb5-0dbc-445c-ae83-c8e87d87d8dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 361
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7a5eb2a2-208c-4026-8809-a0abd404c6cb",
        "cursor": {
          "ref": "73c2c627-e21f-473f-b4dd-274b9c32d83a",
          "length": 253,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "fe0ba34d-dc9d-4ba4-8e5b-f76f3d48771c"
        },
        "item": {
          "id": "7a5eb2a2-208c-4026-8809-a0abd404c6cb",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "989b08ff-d6e0-44d2-a595-60c1f9d6dc26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 515
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "70b446cf-1b39-413f-8d14-b4a462dba530",
        "cursor": {
          "ref": "f82020df-91b7-4907-934c-595ddfc602fa",
          "length": 253,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "ddca014e-4b10-43db-b2bc-af44e7cc3620"
        },
        "item": {
          "id": "70b446cf-1b39-413f-8d14-b4a462dba530",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "4592003f-aa14-4496-9f7b-3f1463753142",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 514
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f413a17-7999-41f8-9980-57112ae8cf4a",
        "cursor": {
          "ref": "ed5959a1-6727-481d-b6d5-ac66e89b01f8",
          "length": 253,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "977c9f38-6f56-458c-b146-5701c0981443"
        },
        "item": {
          "id": "3f413a17-7999-41f8-9980-57112ae8cf4a",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "916b7829-e61a-408c-8711-54cf05fd84ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ee2a58e3-4fdd-4589-9bde-76a10e3aae85",
        "cursor": {
          "ref": "9dfbb761-a5d1-4c47-aa60-ecd00878a3b6",
          "length": 253,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "00292234-24c3-4812-944c-369408c9631c"
        },
        "item": {
          "id": "ee2a58e3-4fdd-4589-9bde-76a10e3aae85",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "a9173ce7-be40-490f-b923-5799336a7af2",
          "status": "Created",
          "code": 201,
          "responseTime": 46,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:95)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "f0a439ae-a77c-4878-91cb-d831345266bb",
        "cursor": {
          "ref": "a4d024f3-fd48-47c7-b022-103fdb5f9a04",
          "length": 253,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "df5c082d-b25e-440e-a9a7-4db77b6a814e"
        },
        "item": {
          "id": "f0a439ae-a77c-4878-91cb-d831345266bb",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "c7c69ddd-cc9f-4d2e-b7cc-30d3f9a6587f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 516
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "74eed073-e6b5-4d9a-a1d9-e0ff2ef67e42",
        "cursor": {
          "ref": "0bc4a022-4a5d-4858-b8ac-5602192d019a",
          "length": 253,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "4e8553a1-34aa-4aae-b526-31ddf55d1a1a"
        },
        "item": {
          "id": "74eed073-e6b5-4d9a-a1d9-e0ff2ef67e42",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "a416de72-8ab2-463e-9fe3-bfc08a7b030a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1d2b18f4-c78a-4061-8573-aaec532faf11",
        "cursor": {
          "ref": "d7ff8cb3-0abd-4a76-9446-0e4c69ba8ce4",
          "length": 253,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "590dfff6-be0c-4563-a661-669dab4452e3"
        },
        "item": {
          "id": "1d2b18f4-c78a-4061-8573-aaec532faf11",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "22ce8c42-83cb-499d-9bd8-c653e5c3db75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 301
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "160c99c8-fa82-426b-a9ee-3652d5ebbf9b",
        "cursor": {
          "ref": "1bd8ec12-f241-49e9-addd-022692465926",
          "length": 253,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "c31d5c32-d41a-41ff-a629-60d0ae407e68"
        },
        "item": {
          "id": "160c99c8-fa82-426b-a9ee-3652d5ebbf9b",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "4cf134c8-0138-48f6-8d2b-d287f5c20809",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 300
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1a5ae20d-4c58-46df-ba8f-1671aa7f657f",
        "cursor": {
          "ref": "00d953ff-a868-48ca-8ed2-02467f424631",
          "length": 253,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "04cd82b5-4ee4-4b33-9464-073778e7daa3"
        },
        "item": {
          "id": "1a5ae20d-4c58-46df-ba8f-1671aa7f657f",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "22f24c47-f744-4b1c-93ab-5a04e870a05d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2191b06a-20bd-4f3d-b1ee-7b9935f9a37b",
        "cursor": {
          "ref": "90655a55-64d2-4533-a368-330972a099fe",
          "length": 253,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "362974db-99fc-41f5-9d43-c96916ad313b"
        },
        "item": {
          "id": "2191b06a-20bd-4f3d-b1ee-7b9935f9a37b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "4222c13b-7171-4c17-a504-3bdb217d14b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9e28361d-b612-4b9b-8ea3-1f9d09e23579",
        "cursor": {
          "ref": "ae8c0a00-8c23-4bb6-be74-e9f945b1ef55",
          "length": 253,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "5dcaff4f-8121-4521-824e-abc2cec4db84"
        },
        "item": {
          "id": "9e28361d-b612-4b9b-8ea3-1f9d09e23579",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "f8a567b5-8ba3-484b-ae9b-827756ebc889",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 302
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f981bc0b-03d0-4ebe-8cbb-f84e61021668",
        "cursor": {
          "ref": "bd5bc5cc-4021-4f2f-ad36-1e12a9e4c25f",
          "length": 253,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "6d262fd2-f5e5-43e2-908f-4e75b43a87a0"
        },
        "item": {
          "id": "f981bc0b-03d0-4ebe-8cbb-f84e61021668",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "9237bf6a-b400-4d09-9f3c-3905b411ce3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 125,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82344609-72db-4ca7-8208-a8ab52134719",
        "cursor": {
          "ref": "e01ad486-6c2f-4982-9e75-e3c42e7df153",
          "length": 253,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "9efe904f-caa5-49bb-8b8f-b2a802b8afb8"
        },
        "item": {
          "id": "82344609-72db-4ca7-8208-a8ab52134719",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "0a2a09ca-a76b-481a-af8d-c8c6d5f68e6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:104)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:104)"
            }
          }
        ]
      },
      {
        "id": "48a89c29-2d87-43a7-98a5-3198adc53d86",
        "cursor": {
          "ref": "5f080b07-d03d-47ba-a918-f05362953fbf",
          "length": 253,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "2c462eee-3a2f-460a-b9c6-7b3010fd12b2"
        },
        "item": {
          "id": "48a89c29-2d87-43a7-98a5-3198adc53d86",
          "name": "credentials_issue:missing_scope:issue_credentials"
        },
        "response": {
          "id": "bc2f23fe-0508-4200-aa41-8e3905f94739",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:105)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:105)"
            }
          }
        ]
      },
      {
        "id": "56e9d74d-2631-46e8-af40-6b26eaecbacb",
        "cursor": {
          "ref": "59d6a646-55b6-4bfe-8239-c14d339b68aa",
          "length": 253,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "a7eecb85-928a-4a44-b886-642f28dc8ec2"
        },
        "item": {
          "id": "56e9d74d-2631-46e8-af40-6b26eaecbacb",
          "name": "credentials_issue"
        },
        "response": {
          "id": "cfa7a21d-fdb6-477d-b02a-0cbb238b7b5c",
          "status": "Created",
          "code": 201,
          "responseTime": 46,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "bc6bea79-964c-42a2-a474-daaa58c01dad",
        "cursor": {
          "ref": "08087264-ca5c-46a5-b0bb-8416c476fbe7",
          "length": 253,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "f41b695d-a002-4893-a236-d0002bf02eb4"
        },
        "item": {
          "id": "bc6bea79-964c-42a2-a474-daaa58c01dad",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "ef912999-a6f4-4bbc-bf01-f305249c8918",
          "status": "Created",
          "code": 201,
          "responseTime": 47,
          "responseSize": 651
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecd295c7-7843-4eca-aed6-c73ff4657faa",
        "cursor": {
          "ref": "223930eb-4fe6-47f7-93da-2486981a8752",
          "length": 253,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "ac9e25e3-661c-4a3a-bd5e-76157edefeca"
        },
        "item": {
          "id": "ecd295c7-7843-4eca-aed6-c73ff4657faa",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "5ac68f83-e594-4d6a-9a2b-907d0148e1d6",
          "status": "Created",
          "code": 201,
          "responseTime": 56,
          "responseSize": 673
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e7bafc0-e131-4731-93c0-7e65f75a11b1",
        "cursor": {
          "ref": "f1d7b94c-d293-4d64-a6a2-7c68842afe3f",
          "length": 253,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "bad97c81-4016-4b0b-b5e5-fca7a52b7c59"
        },
        "item": {
          "id": "4e7bafc0-e131-4731-93c0-7e65f75a11b1",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "aac53f07-b8cc-4b87-88bc-a82ba3df2109",
          "status": "Created",
          "code": 201,
          "responseTime": 45,
          "responseSize": 641
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "038c911d-2290-4143-9841-b8304e2f03b7",
        "cursor": {
          "ref": "88f2e4ee-4feb-40d2-878c-9660fe4d3b13",
          "length": 253,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f8a4bcbc-5788-4d2a-b9c3-cec3ee392873"
        },
        "item": {
          "id": "038c911d-2290-4143-9841-b8304e2f03b7",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "836d6d5a-e41f-46c5-a376-7931df7c3f27",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 480
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:110)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:2:110)"
            }
          },
          {
            "assertion": "response @context contains traceability/v1",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 2,
              "test": "response @context contains traceability/v1",
              "message": "Cannot read properties of undefined (reading '@context')",
              "stack": "TypeError: Cannot read properties of undefined (reading '@context')\n   at Object.eval sandbox-script.js:3:110)"
            }
          }
        ]
      },
      {
        "id": "3283885c-fab0-4516-9583-030742aed9c6",
        "cursor": {
          "ref": "844d1e67-1a9d-45f8-b8e6-7bbfa61b22b7",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4d1a41c5-34e6-47ad-b60a-ba40add8dba3"
        },
        "item": {
          "id": "3283885c-fab0-4516-9583-030742aed9c6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "07aa0648-02e2-4edb-a259-1ff5edfa16a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3283885c-fab0-4516-9583-030742aed9c6",
        "cursor": {
          "ref": "844d1e67-1a9d-45f8-b8e6-7bbfa61b22b7",
          "length": 253,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "4d1a41c5-34e6-47ad-b60a-ba40add8dba3"
        },
        "item": {
          "id": "3283885c-fab0-4516-9583-030742aed9c6",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "07aa0648-02e2-4edb-a259-1ff5edfa16a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c1ea183-7128-4aa0-b1dd-56c80cb0ffc5",
        "cursor": {
          "ref": "ca6c57b1-4738-43d7-bd51-2d79220965d3",
          "length": 253,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "8b9d71c4-bf89-4a64-ba93-777cf83105a3"
        },
        "item": {
          "id": "0c1ea183-7128-4aa0-b1dd-56c80cb0ffc5",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0296ca1c-5060-4399-b6bd-a331451d5a79",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 307
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1ee3e61c-1432-46b3-a1ff-a774872a81cc",
        "cursor": {
          "ref": "3ed17d68-33a6-483a-ba32-8c8e2b169a89",
          "length": 253,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "c19e4877-0b66-431b-b296-478ef5f52559"
        },
        "item": {
          "id": "1ee3e61c-1432-46b3-a1ff-a774872a81cc",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "c899fe7c-95b1-4156-8131-921c5ff961c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 306
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c009fce8-0f3e-439b-9e91-93cb2b83b407",
        "cursor": {
          "ref": "8ea72e7c-0d77-4a27-8f15-d9d67ec143e6",
          "length": 253,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "1ab967b7-516d-4cd2-a6a1-95fe40542255"
        },
        "item": {
          "id": "c009fce8-0f3e-439b-9e91-93cb2b83b407",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2ecc30e9-da10-4d9b-8d41-f660b78cd553",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ae58eadb-da45-41c3-89bf-3f88fc57c036",
        "cursor": {
          "ref": "373b247a-668e-49dc-a5bc-4962a112788b",
          "length": 253,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "2d42ea0a-8f0e-4923-90ab-8db9da5dcc0b"
        },
        "item": {
          "id": "ae58eadb-da45-41c3-89bf-3f88fc57c036",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "9c9fd835-67f7-40aa-bf20-358136acbad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce646936-e05a-44c9-9aba-f5606eb554f1",
        "cursor": {
          "ref": "e8db1be0-2458-480d-9acc-5203af671e33",
          "length": 253,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "f8727006-9ce5-4ad0-9885-b166a2abc701"
        },
        "item": {
          "id": "ce646936-e05a-44c9-9aba-f5606eb554f1",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "34b2358e-0428-460f-a07e-d1c7423b90c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 308
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c22b6f-3207-444a-bf1f-691f7c4ae466",
        "cursor": {
          "ref": "0c8e174e-32ef-4909-ac5c-70d52ee081de",
          "length": 253,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "5315d4b1-6430-490b-9ba6-2dd104e8209c"
        },
        "item": {
          "id": "16c22b6f-3207-444a-bf1f-691f7c4ae466",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "aa4fdadb-434e-43df-9d3a-84ba34f96ea2",
          "status": "OK",
          "code": 200,
          "responseTime": 29,
          "responseSize": 3
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:117)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "9b0ded6f-81a7-4581-a54a-b2e7fffed308",
        "cursor": {
          "ref": "7ff00d3c-75f9-4063-ab2b-021c84afb30e",
          "length": 253,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "0bb43532-7cc0-4ae3-a1fc-2522659d19f2"
        },
        "item": {
          "id": "9b0ded6f-81a7-4581-a54a-b2e7fffed308",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "8a6eb232-d028-4ea3-b879-c398b311b398",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d85eb176-22a4-4cdb-95dd-736d402da230",
        "cursor": {
          "ref": "9fa7cab1-791c-4312-9d1c-087b7bc95670",
          "length": 253,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "17ca0e8c-849a-4619-8413-1aa577715c70"
        },
        "item": {
          "id": "d85eb176-22a4-4cdb-95dd-736d402da230",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "2be8b20b-cd09-4eb1-8d61-5b5c926cc5cc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b2c851-0e5b-442d-9b32-531752f1fe44",
        "cursor": {
          "ref": "b99b4d75-e0f0-4f49-b916-ecf8dfa4835d",
          "length": 253,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "8285be4f-4e76-4adb-a0bb-a44f0bc5e4b4"
        },
        "item": {
          "id": "f6b2c851-0e5b-442d-9b32-531752f1fe44",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "40fe2aec-a9cf-4fac-9086-2c9378457644",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4d258e6-013c-4f65-ac7f-29ceff9bbef6",
        "cursor": {
          "ref": "44965197-dfdf-4113-ad8e-c46dbdd86e80",
          "length": 253,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "6c735a54-0b85-44ea-a33d-770de7409e5d"
        },
        "item": {
          "id": "e4d258e6-013c-4f65-ac7f-29ceff9bbef6",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "7315e0f9-c611-4af8-ace4-e890a4b1a38d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "531bef6a-2776-4e1e-a628-9016a5b0430f",
        "cursor": {
          "ref": "87c17ce5-6bb5-4a79-8585-c25d1c1e7c27",
          "length": 253,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "3988a9f0-5cf0-45d5-8f27-e982c8724fd2"
        },
        "item": {
          "id": "531bef6a-2776-4e1e-a628-9016a5b0430f",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "04958b76-888a-4f4e-87fd-cea223a8ad3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "692b709b-3964-426f-96a9-7d08fbcb615a",
        "cursor": {
          "ref": "37db9a9d-83e5-466c-a142-f498dcaf56d2",
          "length": 253,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "bb699a6a-b286-44f6-8198-a51da12b882e"
        },
        "item": {
          "id": "692b709b-3964-426f-96a9-7d08fbcb615a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "7d6a736e-4610-45db-a478-0eb9bf8c2296",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "40a33102-168c-415c-b368-240c476c404b",
        "cursor": {
          "ref": "868a7ea1-e4ba-4d7d-8c1f-fcfd7090d579",
          "length": 253,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "e7e49a1c-53e8-4aa8-8940-115e79dd01db"
        },
        "item": {
          "id": "40a33102-168c-415c-b368-240c476c404b",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "b56c1544-641a-4efd-bf67-64182fba417c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0e3b20ea-f6d2-4573-a3af-f01f7c214f01",
        "cursor": {
          "ref": "0384d210-e423-464e-9f43-596b51b55706",
          "length": 253,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "00388e92-c1a5-4e74-9d0e-cf9530a2acd7"
        },
        "item": {
          "id": "0e3b20ea-f6d2-4573-a3af-f01f7c214f01",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "3a7aac43-6863-42c0-b32b-ba0c04b894b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a4fb12a-7964-4219-a722-14f0c4ec1f9e",
        "cursor": {
          "ref": "7a944119-6e5f-448f-b619-8bbddd640937",
          "length": 253,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "576e8c53-6377-4a6e-8a15-180ce1296f1d"
        },
        "item": {
          "id": "8a4fb12a-7964-4219-a722-14f0c4ec1f9e",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "394668f3-948a-4a59-8990-396b054762c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1a0310f-788f-471e-95c1-dd33c37d0b04",
        "cursor": {
          "ref": "8c5599b8-f0e6-4752-9878-f90aa35ec2e7",
          "length": 253,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "f755794c-a59a-4e6e-9022-26678080c084"
        },
        "item": {
          "id": "f1a0310f-788f-471e-95c1-dd33c37d0b04",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "c0235f7f-2008-4846-a736-af63b507fa0a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce01bcb4-5cac-4cdb-9e1e-a9416e6225d5",
        "cursor": {
          "ref": "09ffe4d3-af09-4a70-b894-fb7878f9d3a1",
          "length": 253,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "cd68423d-9acd-4e4c-9f8d-f41dc1784e5e"
        },
        "item": {
          "id": "ce01bcb4-5cac-4cdb-9e1e-a9416e6225d5",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "287f81fc-c8f2-442e-8dbf-a14fb9a86e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3db1ac3f-4dc7-4856-aba4-eb3ac7183e3d",
        "cursor": {
          "ref": "44679741-2d4a-4cda-976b-3cb84dc74f8a",
          "length": 253,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "6a029da7-ce54-4b5d-bb3a-6300ca37ca77"
        },
        "item": {
          "id": "3db1ac3f-4dc7-4856-aba4-eb3ac7183e3d",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "983ff347-0333-4d41-bf53-50135a0c1f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cb7f5be-34f9-4fa5-a03d-26decc82fdbf",
        "cursor": {
          "ref": "2f77875b-d0e8-4f9c-89bd-1fa0a234b176",
          "length": 253,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "ef142dec-0fca-4c56-b823-40f630f3450e"
        },
        "item": {
          "id": "2cb7f5be-34f9-4fa5-a03d-26decc82fdbf",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "56456b93-58fb-4cea-b128-1f17437a8b38",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f9bf835f-1837-429c-910d-26b9282a328e",
        "cursor": {
          "ref": "889a6a14-58b5-49ca-9956-3ad8e85f295c",
          "length": 253,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "ce16bda3-a3a9-4866-9328-562498e8bcfc"
        },
        "item": {
          "id": "f9bf835f-1837-429c-910d-26b9282a328e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "6b048280-8cb2-4a95-8272-dbe2a5314e0d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a9e4b891-f0d7-4ad9-ac84-010eb8812aa8",
        "cursor": {
          "ref": "e5ae5f96-942c-4166-b987-cdddf52324bf",
          "length": 253,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "2e0f6017-fcab-4e09-9c22-5fcd7ca449a1"
        },
        "item": {
          "id": "a9e4b891-f0d7-4ad9-ac84-010eb8812aa8",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "f35802f4-ccac-4bd1-9efd-336125a12581",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c292c202-c546-4449-b1f1-899e8008f35d",
        "cursor": {
          "ref": "a2f25da2-05e5-41f2-992f-10ca6c02fa6a",
          "length": 253,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "1421da9b-3186-40e3-bb75-2e5733e143d6"
        },
        "item": {
          "id": "c292c202-c546-4449-b1f1-899e8008f35d",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "d8db9a89-fafd-41ea-b95d-5d0b1e2208b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c4078765-9093-4d25-b8a8-0d482a539a1d",
        "cursor": {
          "ref": "1afd946f-5279-42e3-a053-8dfa5977abb7",
          "length": 253,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "da482223-8883-408b-a3ff-fc51627bc89b"
        },
        "item": {
          "id": "c4078765-9093-4d25-b8a8-0d482a539a1d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9bdeb6e4-86cf-47d5-b7a8-edfb7c60e06b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80fe37fd-ad2b-435e-948b-4ba11cf31715",
        "cursor": {
          "ref": "9b705d57-1825-4dda-9b9d-9d3bd754280e",
          "length": 253,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "21ba6cf8-162f-4583-b22d-4d6a91ab1fdf"
        },
        "item": {
          "id": "80fe37fd-ad2b-435e-948b-4ba11cf31715",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "589ef3b4-5802-4540-8ffb-6f4088b532cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "de1908fd-c06b-4f2a-a4c7-92038fc31314",
        "cursor": {
          "ref": "1aea7109-db3e-446d-82b5-92cd8d715f73",
          "length": 253,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a6152371-5896-4039-9867-4e1dac487b73"
        },
        "item": {
          "id": "de1908fd-c06b-4f2a-a4c7-92038fc31314",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "34fc9db1-dd8d-4eef-a2d3-93e3dc7f78d8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff2f086e-5411-41eb-8c3c-83bdc6aca0da",
        "cursor": {
          "ref": "96c322b0-3c06-45ce-8af6-06bfbd11145c",
          "length": 253,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "26e4dc99-26d5-4a5b-a523-cd0fb960fe7b"
        },
        "item": {
          "id": "ff2f086e-5411-41eb-8c3c-83bdc6aca0da",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "8f6c7c30-ac1f-4af7-8141-390b79b01222",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7cd2b02-cd40-412e-bb19-8357c91e016c",
        "cursor": {
          "ref": "f4366183-9955-4138-bf0f-8516e7652d1f",
          "length": 253,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "87cf5bb0-7533-459f-bf9a-458e92806f77"
        },
        "item": {
          "id": "e7cd2b02-cd40-412e-bb19-8357c91e016c",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "fba1ac7e-1b21-4c14-a69e-99604d9cdc70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89eb7c2d-8bf7-4f32-b075-88fa06d6e3b6",
        "cursor": {
          "ref": "6037606d-60ea-445a-9b68-c7135478b953",
          "length": 253,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "062554f8-3088-4f69-a8ae-7ca4ecb93639"
        },
        "item": {
          "id": "89eb7c2d-8bf7-4f32-b075-88fa06d6e3b6",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "9095ef7c-6fdf-433e-b7a6-6801b020b4e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6e17476-e16c-4d1d-8294-85bb379ec0d9",
        "cursor": {
          "ref": "08b62625-9375-4c27-876d-56252b392a1a",
          "length": 253,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "e24fc020-de6c-40cf-947f-4b453dd023b4"
        },
        "item": {
          "id": "b6e17476-e16c-4d1d-8294-85bb379ec0d9",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "bb61c522-d817-431a-a3d2-6bf8f4733492",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2cfcb662-63f7-41d5-bbf3-4f9963ed334e",
        "cursor": {
          "ref": "e1e73f03-1d5e-43fa-b107-741e60ea8e0a",
          "length": 253,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "1bb5ef6f-3d5f-4514-975e-ab9d145c91ee"
        },
        "item": {
          "id": "2cfcb662-63f7-41d5-bbf3-4f9963ed334e",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "1039fcf9-72e9-4ba1-aeea-46aa57f229a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d8cfd19-4474-4d5a-89a8-37c4a4ed0ddb",
        "cursor": {
          "ref": "30f60904-184a-4a4d-ad4b-7adc125e7c79",
          "length": 253,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "69a0f121-cc74-4e4e-a77d-ccff06c1ecac"
        },
        "item": {
          "id": "8d8cfd19-4474-4d5a-89a8-37c4a4ed0ddb",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "21abf120-a299-4fbe-bc36-aa07b81e565f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 538
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "41dee9b8-e73a-492d-9375-1896dd31f45c",
        "cursor": {
          "ref": "28acd180-16e6-453f-b185-adb553d9b2e7",
          "length": 253,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "bd273904-5981-44be-a86e-b5a20850ef6f"
        },
        "item": {
          "id": "41dee9b8-e73a-492d-9375-1896dd31f45c",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "04119e72-6c9b-4fa8-a50a-b8d0c4d14e2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:143)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "3822227b-0831-4cc6-9034-d17d800abfcc",
        "cursor": {
          "ref": "6af67673-540c-4e3f-ab2b-9c778f22aeb0",
          "length": 253,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "a5a27caf-118e-4b13-baab-5397ed27930c"
        },
        "item": {
          "id": "3822227b-0831-4cc6-9034-d17d800abfcc",
          "name": "credentials_status:missing_scope:update_credentials"
        },
        "response": {
          "id": "e9b80107-93e6-410d-aa89-3de02f4d5358",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:144)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "a3a74490-d947-4a98-942b-9934db96d314",
        "cursor": {
          "ref": "62a81038-aebd-4384-8063-ff6f3a8bedda",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b1df9f1e-483e-4cf3-9a9f-cc5020b5544c"
        },
        "item": {
          "id": "a3a74490-d947-4a98-942b-9934db96d314",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "78bcab75-8c4d-4c78-b4ec-c2677191e660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3a74490-d947-4a98-942b-9934db96d314",
        "cursor": {
          "ref": "62a81038-aebd-4384-8063-ff6f3a8bedda",
          "length": 253,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "b1df9f1e-483e-4cf3-9a9f-cc5020b5544c"
        },
        "item": {
          "id": "a3a74490-d947-4a98-942b-9934db96d314",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "78bcab75-8c4d-4c78-b4ec-c2677191e660",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0afc16e5-0624-4f97-bfcc-d3e0c73f5b08",
        "cursor": {
          "ref": "ff80b4ec-1065-4c44-b2c7-00f3224125a3",
          "length": 253,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "31f43695-93bc-488b-9fa8-8dda68a95a1a"
        },
        "item": {
          "id": "0afc16e5-0624-4f97-bfcc-d3e0c73f5b08",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "1011fc2a-52af-42ed-96f9-76fbbdbe6e2a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "21ad5983-06fe-4e3f-98fc-24959c8e47b2",
        "cursor": {
          "ref": "4fa87db1-fb84-4c56-bd19-ebb1a7842350",
          "length": 253,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "ff7716a9-82c1-4f8f-bd37-d6a1974b58e6"
        },
        "item": {
          "id": "21ad5983-06fe-4e3f-98fc-24959c8e47b2",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "1c681ff1-789c-4127-aa5f-1a9451cc195d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0193a10c-d256-466b-8497-2bbb98dc0954",
        "cursor": {
          "ref": "0f7a113b-e350-48ee-8a13-4928651c3b13",
          "length": 253,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "71e4da37-b8b3-4e97-ad30-3e3323ac6103"
        },
        "item": {
          "id": "0193a10c-d256-466b-8497-2bbb98dc0954",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "412bc49e-f5d5-48e5-8160-47da1d35228e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a601a46-c92b-40c3-8ff4-f3c209edc159",
        "cursor": {
          "ref": "00f79e70-f5f7-45ba-a7aa-bcee5d7152cb",
          "length": 253,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "c19200f7-3fd4-4c00-b404-cb37a01dfd45"
        },
        "item": {
          "id": "0a601a46-c92b-40c3-8ff4-f3c209edc159",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "31d8294f-2f52-4d28-9a0c-b40742e97114",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f0e470b-a1fd-49cc-baa0-d8e09ddca7c9",
        "cursor": {
          "ref": "174dcbac-bd85-4efc-ac6f-7b61854896e5",
          "length": 253,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "19ee9b84-744c-4c41-ad54-1079ed083c52"
        },
        "item": {
          "id": "5f0e470b-a1fd-49cc-baa0-d8e09ddca7c9",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "cb646f3f-b98b-4856-9589-765e96ca037e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1e07dc72-ed52-4df9-b99d-80242b79d5cf",
        "cursor": {
          "ref": "3c25abc1-d2bc-41e5-ae6d-dd2cd28004ab",
          "length": 253,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "4fa0b31c-b4c9-44df-bc67-29e2ae85652e"
        },
        "item": {
          "id": "1e07dc72-ed52-4df9-b99d-80242b79d5cf",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "25bdbbd1-01cb-480d-b704-8f2ba826f2b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f32b76c-5295-4197-b1e7-761e50e5ef4a",
        "cursor": {
          "ref": "a00a1023-2016-4e4a-b076-a6e24dc304df",
          "length": 253,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "249ad386-429e-4ef7-9fd5-8939af9d6df8"
        },
        "item": {
          "id": "6f32b76c-5295-4197-b1e7-761e50e5ef4a",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "32046431-4cd1-4612-a5a5-8f2df653674d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "014fc875-0041-4468-b3c3-d97c940a9eb9",
        "cursor": {
          "ref": "315dbe6e-37eb-4f90-99f2-7d97f7053e05",
          "length": 253,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "55730bad-0867-4413-af61-095610c93938"
        },
        "item": {
          "id": "014fc875-0041-4468-b3c3-d97c940a9eb9",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "e0e205a2-aada-4f43-890c-2d824f8705c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8e88434a-0a96-4baf-ac22-96303179ad41",
        "cursor": {
          "ref": "b6907fea-fafb-45a1-ab10-40bc99ee581a",
          "length": 253,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "53550d62-98c6-46d9-9896-9c3f5b48c398"
        },
        "item": {
          "id": "8e88434a-0a96-4baf-ac22-96303179ad41",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "60b96476-3af0-41d0-9fc0-5bd5537c9a64",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dfe61e6c-3b1e-48c7-9135-159514415318",
        "cursor": {
          "ref": "2c5965cc-c660-4c17-a609-b52a1511e960",
          "length": 253,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "5214c7a3-d548-4b4a-9c5e-fadd531633c4"
        },
        "item": {
          "id": "dfe61e6c-3b1e-48c7-9135-159514415318",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f13bfd5f-1fca-4aeb-b1ea-55936c76a23f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "666caf90-c750-4376-a272-88010941ef45",
        "cursor": {
          "ref": "b736e51c-e1ad-470f-923e-9b2fedafba4f",
          "length": 253,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "8c3d2843-26de-4cae-89a9-087d40a98767"
        },
        "item": {
          "id": "666caf90-c750-4376-a272-88010941ef45",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "affe0456-0fb5-40e3-9479-95a54a174ea4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f83e8c47-5138-4a65-814e-6961de3c193b",
        "cursor": {
          "ref": "0bd700a8-8a2f-4651-b859-3b60614693f7",
          "length": 253,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "29799633-aeff-4181-b962-136b868235df"
        },
        "item": {
          "id": "f83e8c47-5138-4a65-814e-6961de3c193b",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "cd376073-5a6b-4aea-a736-e991edbf22ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09ae6768-fba4-448c-84f3-0c0b09d4e37f",
        "cursor": {
          "ref": "8855ccb9-5964-4770-99dc-267e340e5d0b",
          "length": 253,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "bf396c22-26fa-476e-8fb8-53fd46c75057"
        },
        "item": {
          "id": "09ae6768-fba4-448c-84f3-0c0b09d4e37f",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "eb1bc25e-0b39-45db-b0e9-6179239c0d75",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "898de7b5-73c6-4a70-9a95-e5b95eba21b2",
        "cursor": {
          "ref": "ef691fbc-6508-439b-b1dd-d3ef9ba84949",
          "length": 253,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d1188f9b-52b7-49e4-b067-b7e2314ef559"
        },
        "item": {
          "id": "898de7b5-73c6-4a70-9a95-e5b95eba21b2",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "690a39c7-29bb-443a-a7d7-894ff36d2c80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b59199e-64e9-4071-8186-703988953a1b",
        "cursor": {
          "ref": "405f6b2f-3336-43e9-9ab8-fd48438f6d20",
          "length": 253,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "ba57f9ae-e019-403d-a5c3-7a8bc1c603d2"
        },
        "item": {
          "id": "1b59199e-64e9-4071-8186-703988953a1b",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1877434a-74a8-4baa-8a9b-a6a027222499",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6b0f87ae-13c7-497c-b915-e1e4d6a3884f",
        "cursor": {
          "ref": "8265e53a-f74c-4e43-bb22-4c7a8d818c13",
          "length": 253,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "fd3da75f-5884-4cad-9fe3-b4cb396e9c76"
        },
        "item": {
          "id": "6b0f87ae-13c7-497c-b915-e1e4d6a3884f",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "d8642952-9670-4b03-8bb1-4ee5705e4b89",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "afa6b4ee-1d1a-4de1-a0b1-a21bf709fdbd",
        "cursor": {
          "ref": "fbd29735-2d41-47d8-bfad-972875b62e3c",
          "length": 253,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "a8f8ea68-afef-4e95-ac3d-1ae1b9d35969"
        },
        "item": {
          "id": "afa6b4ee-1d1a-4de1-a0b1-a21bf709fdbd",
          "name": "credentials_verify:vc:id:missing"
        },
        "response": {
          "id": "eaeee69c-5ce1-4997-9334-d379f15e37b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "064b4df8-bf97-46dc-8b12-da8cdd6d000e",
        "cursor": {
          "ref": "e9b21151-79bb-4ea6-a308-ca683bd12952",
          "length": 253,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "4f6bfd72-e3c4-43f9-8747-da0b5794f96f"
        },
        "item": {
          "id": "064b4df8-bf97-46dc-8b12-da8cdd6d000e",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "6dedfc5b-3fc2-4525-9c30-f2a9857e432a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5861120-23a2-42f2-a96d-e1c0403858d4",
        "cursor": {
          "ref": "9496c064-4bb9-442a-acc9-93a5d6b584b4",
          "length": 253,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "ec882e64-177e-4e5b-a327-a6213d49fdb6"
        },
        "item": {
          "id": "b5861120-23a2-42f2-a96d-e1c0403858d4",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "56268264-e8a9-40f4-ad9f-cf91a05cca4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2238502f-7875-4012-b4e2-ebdc3d06abfc",
        "cursor": {
          "ref": "1ddbd39e-332f-45aa-9ec9-36d1500e0ea5",
          "length": 253,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "5c601891-9d13-4f8a-846a-7a2e1edc788e"
        },
        "item": {
          "id": "2238502f-7875-4012-b4e2-ebdc3d06abfc",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "326dfa0d-54c3-417c-9ee0-733f15239bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d05d1392-2e6b-4055-8f42-45ffb033acd1",
        "cursor": {
          "ref": "81a7acc7-b81f-4702-9506-4965c6d5b1ca",
          "length": 253,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "b95138fb-2e18-442f-b01c-618e5a41b5ef"
        },
        "item": {
          "id": "d05d1392-2e6b-4055-8f42-45ffb033acd1",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "35a763dc-ae70-4b89-a738-036f427a4766",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f4e7e9-d39f-4230-8366-371c2b0496f7",
        "cursor": {
          "ref": "550fc549-29c0-4571-91c1-39ab14171b59",
          "length": 253,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "aa43ca55-39a9-4550-9526-20b80348d977"
        },
        "item": {
          "id": "22f4e7e9-d39f-4230-8366-371c2b0496f7",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "3dfda5fc-2d49-4be8-b4c3-72a2f9c66c03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "621c8a5a-4fd9-43dd-a831-dccb745c6e47",
        "cursor": {
          "ref": "f66df546-e73d-4ea8-8fad-79dfd88ef84b",
          "length": 253,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "4807668a-26f4-462e-88b4-604b8e5c5212"
        },
        "item": {
          "id": "621c8a5a-4fd9-43dd-a831-dccb745c6e47",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "454c49c5-0df7-47be-8e9d-894fedbf85b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b8566ed-c1f0-47c9-99ad-f11d05543eaf",
        "cursor": {
          "ref": "c6e4f5b4-ccf7-459d-be82-7387135e9442",
          "length": 253,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "9fe3f523-e555-4622-8cfe-d0bb7a7cc664"
        },
        "item": {
          "id": "2b8566ed-c1f0-47c9-99ad-f11d05543eaf",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "8bf9af2d-a98f-44d9-9ee8-1d467a274f6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3b9d459-659b-4a52-94d1-7484a811f326",
        "cursor": {
          "ref": "bb4120de-bb48-404d-9fc8-434b49baab6a",
          "length": 253,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "6d7a418a-b22f-4b1c-bf88-b1a96a4843d9"
        },
        "item": {
          "id": "e3b9d459-659b-4a52-94d1-7484a811f326",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "214b7983-4975-4407-b4ba-f6f87c1853fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22ca0919-2529-4ac5-b9df-de2f3826d270",
        "cursor": {
          "ref": "8abb409d-9b87-4f2c-a7d1-b10a0171e96f",
          "length": 253,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "438cd009-51c8-487b-883f-515f04a94b66"
        },
        "item": {
          "id": "22ca0919-2529-4ac5-b9df-de2f3826d270",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "91ea0c45-6d07-4fcc-bcc2-79722f0b8574",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "72752fa2-09ee-44b4-90a5-352ac495aa45",
        "cursor": {
          "ref": "1fa89f5d-f4ff-4a8b-818b-bcfcfb420ec4",
          "length": 253,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "02a7c6d0-c266-4f3e-b0e1-c94b55ad93bc"
        },
        "item": {
          "id": "72752fa2-09ee-44b4-90a5-352ac495aa45",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "4c4787a0-539c-413f-8f7a-68107bb9a97c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edae2fb7-7586-4f94-89ae-fee5af68beb2",
        "cursor": {
          "ref": "2ccf23f8-ed39-4fc3-bbfc-5d16e4c70a9c",
          "length": 253,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "02b2220b-aa00-4987-93c0-0824375fa6e3"
        },
        "item": {
          "id": "edae2fb7-7586-4f94-89ae-fee5af68beb2",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "77d40976-d0b0-4331-b624-ca3f1b86727b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb53a738-bb05-4623-89ea-296bced18e4c",
        "cursor": {
          "ref": "58b26331-e673-4293-8fe4-f344d456bbfe",
          "length": 253,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "476cfcf0-20b3-44bc-9125-63a6e2b07aa3"
        },
        "item": {
          "id": "eb53a738-bb05-4623-89ea-296bced18e4c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "85a1ed62-7494-4660-8478-82b0093850a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f8cfc71-bf5b-4e1f-a30d-6337874a600c",
        "cursor": {
          "ref": "0ac2e7a2-51a5-409f-b8dc-e3738b2a4be7",
          "length": 253,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "6f7630ad-e970-462c-8f37-11e26f12c891"
        },
        "item": {
          "id": "5f8cfc71-bf5b-4e1f-a30d-6337874a600c",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "5e7fb566-0393-4f7c-bb8e-61baa9c8965b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0951cf4a-467f-4cd2-8aa7-b0a5c5bc5a76",
        "cursor": {
          "ref": "28ca2480-314d-4e44-8583-a7cc34d3c518",
          "length": 253,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "df935306-24ee-447c-bcf0-2a6426ea6b33"
        },
        "item": {
          "id": "0951cf4a-467f-4cd2-8aa7-b0a5c5bc5a76",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "5201018b-763d-4fc4-b043-006807e4a96d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "591c9d89-28cc-4532-81c4-157e18773436",
        "cursor": {
          "ref": "c6b81ee5-6215-490a-b3e3-98ba231b4226",
          "length": 253,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "4bb86e7a-8d67-4b5d-a33f-8cde9eed3ed0"
        },
        "item": {
          "id": "591c9d89-28cc-4532-81c4-157e18773436",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "d647f08b-9a5d-4806-b69a-c4e574132702",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e482bda-098d-4215-a502-a3b903b53940",
        "cursor": {
          "ref": "1f25dc01-054c-4614-af08-a1912c011ec3",
          "length": 253,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "2f2aa45f-90ce-4d50-b106-aaf2a47b1903"
        },
        "item": {
          "id": "2e482bda-098d-4215-a502-a3b903b53940",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "dbf1ee72-07e3-41ef-84e0-1e9c4e9c138f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c381b2d-07d1-417a-99e1-cff5f0b2392a",
        "cursor": {
          "ref": "fc57da93-33e7-4bbc-8300-599a4fc77da5",
          "length": 253,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "a001d7e2-65fe-4469-8187-d450cb8645a5"
        },
        "item": {
          "id": "2c381b2d-07d1-417a-99e1-cff5f0b2392a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "a000abdc-064b-4868-8214-1add37d16116",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53260648-634d-41e1-9b26-53c817bbd966",
        "cursor": {
          "ref": "707a1828-cb6d-424b-8d5e-48d9dfb8da92",
          "length": 253,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "4bb126c4-2e1d-477e-8d94-c31edf768bf8"
        },
        "item": {
          "id": "53260648-634d-41e1-9b26-53c817bbd966",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "46f37720-d7fc-4812-a446-9e4f9a4bb8a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5fa0d518-f4fd-4507-82a1-41d86ad5db45",
        "cursor": {
          "ref": "f9a6dcef-f70a-4c8b-bf82-26095ee103cb",
          "length": 253,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "9ce71adb-9387-4c4c-a4a9-e2447e02777a"
        },
        "item": {
          "id": "5fa0d518-f4fd-4507-82a1-41d86ad5db45",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "bbc8e635-8539-477e-9116-9c6b4e467007",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb4fce1e-0999-4697-98ba-e02d42e1f8a4",
        "cursor": {
          "ref": "99e0806f-c7c5-4a50-9edc-8ac08e91c23f",
          "length": 253,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "13bb41ad-03ff-4c49-a806-96a1929dcafa"
        },
        "item": {
          "id": "fb4fce1e-0999-4697-98ba-e02d42e1f8a4",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "58be51ab-2ed2-41d3-a012-83c48c49604c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "344c9c26-a441-4b7c-b206-4e950b584ca0",
        "cursor": {
          "ref": "6d797e3f-692d-4e62-8d70-cc510feba217",
          "length": 253,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "0abddd60-f13d-4139-a865-99b36244427e"
        },
        "item": {
          "id": "344c9c26-a441-4b7c-b206-4e950b584ca0",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "8883013b-1b90-42f1-85a4-58027fe62e6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f2c91df-6b74-4f6e-901e-9c0e2598b2dd",
        "cursor": {
          "ref": "e8e847de-e25f-4895-929e-668e3985061c",
          "length": 253,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "5955f802-c39a-4558-89a2-5e6ebcca7b0e"
        },
        "item": {
          "id": "8f2c91df-6b74-4f6e-901e-9c0e2598b2dd",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "5954e7e8-b3d6-4d49-8f8e-5a53aedcb9a4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7819693b-a904-4fa9-ab46-76df0693112a",
        "cursor": {
          "ref": "ba10a742-ce1a-4358-b174-da3c6a3134e1",
          "length": 253,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "1decf028-8b3a-4e9e-ad75-5f4bba5c8623"
        },
        "item": {
          "id": "7819693b-a904-4fa9-ab46-76df0693112a",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "da7b5b0f-ff9c-4554-af16-dae296c07ace",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db6c0398-fd79-4584-aee0-e80145606326",
        "cursor": {
          "ref": "8927aadc-e6d7-448a-b9cc-cdefe3e12427",
          "length": 253,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "6548680d-1dfb-487c-9653-a2fcd79de9c1"
        },
        "item": {
          "id": "db6c0398-fd79-4584-aee0-e80145606326",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "ee16f99b-582c-4727-8ceb-638e2521c8ce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "591d1b44-4add-4b5c-a4cd-691d616135dd",
        "cursor": {
          "ref": "5b08d3c8-c211-4db0-8464-255fc88c263c",
          "length": 253,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "8e1e0b40-ed31-48b1-af8b-ffd857071217"
        },
        "item": {
          "id": "591d1b44-4add-4b5c-a4cd-691d616135dd",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "892b4e75-b14a-4e18-8a36-ed821370c3e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a46009d8-7cf8-4ccb-811c-cc635e030564",
        "cursor": {
          "ref": "d660ef77-2a60-4785-a728-ccf005406958",
          "length": 253,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "8c2812a7-1645-44a4-b4d8-e0dfd7a0b66b"
        },
        "item": {
          "id": "a46009d8-7cf8-4ccb-811c-cc635e030564",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "1a96507e-b3c8-4a2c-be52-ab1bc25bfd04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3ca8153b-5c46-4885-92d3-ecda1c68be1e",
        "cursor": {
          "ref": "fe664a17-e785-4930-89c0-22267348772d",
          "length": 253,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "93a4070d-ece3-472d-b61f-20abdc29d1c8"
        },
        "item": {
          "id": "3ca8153b-5c46-4885-92d3-ecda1c68be1e",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "4bdbd105-38ed-47e0-91d4-4b4b143e755f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93ddac1b-cff0-4ca1-9550-84733d866515",
        "cursor": {
          "ref": "79873048-38c1-4456-b6a8-749e5b013c8c",
          "length": 253,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "42f78db9-5508-4895-8d6e-2c4b3cd2a034"
        },
        "item": {
          "id": "93ddac1b-cff0-4ca1-9550-84733d866515",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "40bb546f-8166-4e0d-9c1a-6780c774b5e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b1701af-78e4-4bce-99e9-6e585b4d2295",
        "cursor": {
          "ref": "8be2b9ce-f49d-42ff-93ad-419938b26575",
          "length": 253,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "8560499e-6da8-45e5-b1c0-de1220ce758c"
        },
        "item": {
          "id": "4b1701af-78e4-4bce-99e9-6e585b4d2295",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "95f295f8-1cc9-4823-abef-8036f1d36e0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6b66351-076a-4d20-9be4-356e8443052c",
        "cursor": {
          "ref": "0a7f7070-2fa0-4fc2-a4fe-7f3cab563e19",
          "length": 253,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "39ead16c-5612-4c78-9eed-f9c185072ea8"
        },
        "item": {
          "id": "c6b66351-076a-4d20-9be4-356e8443052c",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c1372034-2369-4faa-8710-96d49092aa58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa91637c-d046-4a08-b12f-de5da7e88304",
        "cursor": {
          "ref": "e78891e3-1a72-4e15-a754-3245c8c1c574",
          "length": 253,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "26b40f77-61ab-4eba-9ccc-70e405866ade"
        },
        "item": {
          "id": "fa91637c-d046-4a08-b12f-de5da7e88304",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "700540fb-559d-49fd-a5b2-f255f1365c4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc44fca3-7d83-491c-8626-a9eb18524c0d",
        "cursor": {
          "ref": "5e5615a0-3f46-495e-8445-f295a3455d69",
          "length": 253,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "69e32546-af22-4dd2-92f6-e8eb5321adcf"
        },
        "item": {
          "id": "dc44fca3-7d83-491c-8626-a9eb18524c0d",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "ddaad06c-cf5d-4afd-b710-4119392dbdf0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "24d50522-1953-4877-8dbf-6d7ad334e4f3",
        "cursor": {
          "ref": "a9ccca29-7481-40ce-9b4e-c7646646b2dc",
          "length": 253,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "2f634064-c2f3-44c7-a893-4f7185232bf9"
        },
        "item": {
          "id": "24d50522-1953-4877-8dbf-6d7ad334e4f3",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "c40b12bb-7094-4f26-a0bf-4de427dc38f6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aa6c922c-0720-4d7f-a006-aeccf134936e",
        "cursor": {
          "ref": "94d25c73-9743-4ae8-bd14-9aa1941d5855",
          "length": 253,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "23acdb73-8da0-4a07-8527-00a14df5680c"
        },
        "item": {
          "id": "aa6c922c-0720-4d7f-a006-aeccf134936e",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "55df99ca-b346-4ca7-93b7-4cc59407eca2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b107750-375f-43ef-bfd0-6912486c9ee3",
        "cursor": {
          "ref": "d8da1ec8-f615-43ba-b4c7-46428194ce4d",
          "length": 253,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "8fe9c513-8df5-4b31-9671-073d6bf0c9cd"
        },
        "item": {
          "id": "4b107750-375f-43ef-bfd0-6912486c9ee3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "bc0a1cca-df4a-44d2-8d07-7de2d7cc05f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "91647f54-4887-46cd-b84f-45194aac824e",
        "cursor": {
          "ref": "62b28f90-1387-458c-82b1-04497f5e5aa2",
          "length": 253,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "761b18b4-7420-4e0d-9d71-a7ba512f12ab"
        },
        "item": {
          "id": "91647f54-4887-46cd-b84f-45194aac824e",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "7e0277e2-d7fb-4e01-938f-842f37362dd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b4bf70d-3208-410f-b304-6c4ae5cbdcee",
        "cursor": {
          "ref": "63b10eb2-c213-4d3a-8249-6af2a22cc687",
          "length": 253,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "5a462b27-d544-41fc-84a7-c69672bb45b0"
        },
        "item": {
          "id": "2b4bf70d-3208-410f-b304-6c4ae5cbdcee",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "b2548ebe-d0f0-45f2-9f2c-510ea406cc1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6523b69c-dbb9-49a9-90e3-36c7588e8d36",
        "cursor": {
          "ref": "b5b627f4-bd62-4705-81be-3178d4f282f0",
          "length": 253,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "5889da26-7f98-44eb-bff5-95001cd67f5a"
        },
        "item": {
          "id": "6523b69c-dbb9-49a9-90e3-36c7588e8d36",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "175ceb0c-577f-455a-8ca4-f9333876b8a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "021b775a-a758-4b82-b693-0caa2c931b7f",
        "cursor": {
          "ref": "ba4a6507-b93d-4596-a14a-c078236f35ab",
          "length": 253,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "7fd4fa46-bc49-47e7-92de-40c5725c12fd"
        },
        "item": {
          "id": "021b775a-a758-4b82-b693-0caa2c931b7f",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "d250fc4b-c4f4-4786-9527-774fbf89f128",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e5246edd-b6cc-44e0-b509-455f54f8a732",
        "cursor": {
          "ref": "206af295-64c2-40a8-8df7-d44e3017c3e7",
          "length": 253,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "7abb5bb2-de4b-4cff-9bb8-14750441fe9a"
        },
        "item": {
          "id": "e5246edd-b6cc-44e0-b509-455f54f8a732",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "cbbf58c8-1701-4f82-be81-5b9f42a31143",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "145cccef-c72b-46c7-8c97-e06640291c56",
        "cursor": {
          "ref": "d735a79e-e5c1-4af8-a611-7c3f637b4cd6",
          "length": 253,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "3c9baeb9-c7ce-4647-8e2d-bf54407c1fbe"
        },
        "item": {
          "id": "145cccef-c72b-46c7-8c97-e06640291c56",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "09239c80-1e86-400c-a174-845ed9c4ec48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 117,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "254ca270-5570-4628-97b8-eefce4e76c1a",
        "cursor": {
          "ref": "fc7c0eb1-815b-4fb8-8064-957cbc5b4af3",
          "length": 253,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "77a11473-07b7-4112-81a5-4b6cbab3ba1d"
        },
        "item": {
          "id": "254ca270-5570-4628-97b8-eefce4e76c1a",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "572cf554-381d-416f-bc88-6156271382e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7cfde650-2595-432b-a9e4-a9882f728f14",
        "cursor": {
          "ref": "50e7af7a-5e73-40d9-a0c1-7170fe1ee025",
          "length": 253,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d77f49a7-0bc5-4346-b188-7ae0a73b8c4a"
        },
        "item": {
          "id": "7cfde650-2595-432b-a9e4-a9882f728f14",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "bbae2fff-0615-4a6c-9cc8-3edc63504c5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c3dc8f51-28e0-4930-a916-fc74e964aa76",
        "cursor": {
          "ref": "31bf8143-b935-42b1-8798-4abc9a03be2d",
          "length": 253,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "8e69d1f2-53bb-4299-bff7-aaa5292a4f21"
        },
        "item": {
          "id": "c3dc8f51-28e0-4930-a916-fc74e964aa76",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "2c578760-5c57-4109-b180-40ca68523755",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54089713-6b47-4416-a62d-05c39c1fbfcc",
        "cursor": {
          "ref": "9f5c93f4-0a45-4dd5-a37b-492a5768163b",
          "length": 253,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "8e884e7d-e365-4c74-a669-cf19ae69aa8b"
        },
        "item": {
          "id": "54089713-6b47-4416-a62d-05c39c1fbfcc",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "af039f3f-e1d8-4cba-9ac2-68ec0cfa2ddf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1cb96435-d29c-4c19-882a-87d188306ffd",
        "cursor": {
          "ref": "0b0788e9-47eb-4d25-a48f-84ef40fa9667",
          "length": 253,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "b95cdcc9-81b9-413a-b3ac-f609b9503672"
        },
        "item": {
          "id": "1cb96435-d29c-4c19-882a-87d188306ffd",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "df9c7de9-42d5-4c39-86b2-b880f760d43f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82b9f1c8-2c34-47d8-9589-2a5d3b250b6a",
        "cursor": {
          "ref": "a350d440-7cc3-4e81-98f2-bdfe41f257cf",
          "length": 253,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "0e94e603-611e-4eab-ad08-bbe0708f0385"
        },
        "item": {
          "id": "82b9f1c8-2c34-47d8-9589-2a5d3b250b6a",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "8802a479-a690-4f30-8f98-620e7e564bd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c9145673-ad55-46c3-ac27-23e1a95c5ee3",
        "cursor": {
          "ref": "568bfde0-6493-4b64-9996-ea488932af38",
          "length": 253,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "4666fd2d-294e-4580-abb2-81a90cc4e236"
        },
        "item": {
          "id": "c9145673-ad55-46c3-ac27-23e1a95c5ee3",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "ac4408c6-e33d-46ed-b7fd-b5dc94ece599",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b81c3a81-f88d-4768-b43f-b652c09b75a3",
        "cursor": {
          "ref": "91a66fa2-589b-4a4a-846b-39bdf5a13de4",
          "length": 253,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "2d78be88-a8c9-4369-8d67-d3c43794f4d8"
        },
        "item": {
          "id": "b81c3a81-f88d-4768-b43f-b652c09b75a3",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "53b38c30-64b6-4983-a835-2c6d7af580fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "729abbb9-05cf-4d86-bac6-c99751f1a62f",
        "cursor": {
          "ref": "f6174c02-59f4-411e-8083-b8bc75dc5917",
          "length": 253,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "9acb8571-6eb3-4259-b1fe-fda843d193b7"
        },
        "item": {
          "id": "729abbb9-05cf-4d86-bac6-c99751f1a62f",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "9aa544b9-2569-4b45-9e16-685e77be4c69",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b504931-fbba-432e-821f-1d2af631b5f4",
        "cursor": {
          "ref": "763fbba6-6fd0-4403-8216-f80191b333f4",
          "length": 253,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "967bc975-ebb8-43f0-ae42-9c30ba72fac2"
        },
        "item": {
          "id": "4b504931-fbba-432e-821f-1d2af631b5f4",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "a2c821ea-e6fb-4f8b-b185-b2cb871cc689",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ebd5aba0-3c20-46e1-a7da-59565294bced",
        "cursor": {
          "ref": "056e3c15-e75d-4074-a240-4450cd7875bd",
          "length": 253,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "b5d2c1cd-4051-4999-b17d-d219e4046757"
        },
        "item": {
          "id": "ebd5aba0-3c20-46e1-a7da-59565294bced",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "75395973-18de-4a30-886a-16f538301f85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "936a2f00-feea-4905-b74a-00f134ad12fb",
        "cursor": {
          "ref": "119d966e-ccc2-4ec3-8c4d-ca85fdc2c5aa",
          "length": 253,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "a4c6ec73-6340-4f41-88d2-f04fb6eaf4fd"
        },
        "item": {
          "id": "936a2f00-feea-4905-b74a-00f134ad12fb",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "11fb56ff-66e2-4380-9a8f-20b017dccaec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bf27833d-f239-4f14-a85b-f6a182606922",
        "cursor": {
          "ref": "2bf2edbf-118f-4e20-9e60-20b03d0766fb",
          "length": 253,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "666c3ba7-33e5-40b7-9184-8fa621779330"
        },
        "item": {
          "id": "bf27833d-f239-4f14-a85b-f6a182606922",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "bc9a8a41-a217-4879-864b-d88caef4a65a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f20b58fc-b1fa-444b-913a-8449e67f2a9c",
        "cursor": {
          "ref": "a4cf4a9e-30d2-49af-8dad-eb2c8b402e8e",
          "length": 253,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "2ffcd4c8-a3d2-4e99-9d28-eac376f20e33"
        },
        "item": {
          "id": "f20b58fc-b1fa-444b-913a-8449e67f2a9c",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "0cdc047f-5b55-417b-a0d0-63cc4da49aee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb2e4975-c898-435b-8643-6b4582c20d52",
        "cursor": {
          "ref": "255179ef-b4d2-438b-bdbc-9e446fced777",
          "length": 253,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "1fe7b5a6-2173-42a6-b5c4-8b4a423ddecd"
        },
        "item": {
          "id": "cb2e4975-c898-435b-8643-6b4582c20d52",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "02c045a9-f168-4c43-b89f-be094e4de45b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fcd21fac-1d3d-4a3b-8896-029bd5e7cc8d",
        "cursor": {
          "ref": "0cde0f98-0ed8-4d2e-8339-da2cc3a02ff7",
          "length": 253,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "c5cba05e-c541-4671-b1f4-839cf341bf1f"
        },
        "item": {
          "id": "fcd21fac-1d3d-4a3b-8896-029bd5e7cc8d",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "faf71915-3e54-49c9-89d1-2a446095295d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da06d9dd-6782-42e7-a35a-c57457b2caa1",
        "cursor": {
          "ref": "ab581ea1-6278-4bb4-9c03-31807bc20fc6",
          "length": 253,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "b95c9f2f-9422-4748-b074-57e9ce207dba"
        },
        "item": {
          "id": "da06d9dd-6782-42e7-a35a-c57457b2caa1",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "c6b33eb1-2c8e-46d9-a84b-5f510daa31db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13fd88ed-5aeb-4461-8b42-d4d20fc4425f",
        "cursor": {
          "ref": "4d171443-4ec7-40a7-a5c3-569b497c051f",
          "length": 253,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "a4997c81-4d90-4657-a6be-d76d892cb2d0"
        },
        "item": {
          "id": "13fd88ed-5aeb-4461-8b42-d4d20fc4425f",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "d3812c14-f0bb-45fb-974c-9f44fdf71f4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c0eb57d3-d772-46be-9a39-a66c5210df7a",
        "cursor": {
          "ref": "1d004769-e650-4ad1-a831-6ace9beb8dbf",
          "length": 253,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "e67ab041-1545-4eb3-a7b6-652b0f3fc7f0"
        },
        "item": {
          "id": "c0eb57d3-d772-46be-9a39-a66c5210df7a",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "e194f9ce-4933-4ca9-bdb1-83ee638c8d6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35fedd40-87ea-47e6-8ddf-bd75d8930441",
        "cursor": {
          "ref": "3b5057a0-2023-4442-9074-2c7ab5052092",
          "length": 253,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "07c045f7-1daf-414d-b602-3bdaefc35bce"
        },
        "item": {
          "id": "35fedd40-87ea-47e6-8ddf-bd75d8930441",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1f731b2d-d99a-48c3-9294-edaada64b8d5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "377893be-9407-4b3c-a339-50b7a7e13797",
        "cursor": {
          "ref": "caec2a77-d453-4d6c-8cce-01d006f6c05b",
          "length": 253,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "f99adc2e-fc0d-4fa2-b0b4-1ac240055870"
        },
        "item": {
          "id": "377893be-9407-4b3c-a339-50b7a7e13797",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "ce3b73bb-7988-4c51-9676-d61b3ec73502",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "718fa399-9adf-4779-b40a-fe4aae9aaf15",
        "cursor": {
          "ref": "8b6f434a-941b-443d-aa40-0d26f43517e0",
          "length": 253,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "6daf7a22-fc20-4c3e-9cb3-c646a0c93b2d"
        },
        "item": {
          "id": "718fa399-9adf-4779-b40a-fe4aae9aaf15",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "7f42e04e-e8a3-4b43-92be-5a11b745d30a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0a4b6322-a63b-4df1-80cc-006b0220b563",
        "cursor": {
          "ref": "14a1b5a9-5888-4cf8-90a2-91082033e919",
          "length": 253,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "f4ac52f5-8602-4199-ae76-30566e6955fc"
        },
        "item": {
          "id": "0a4b6322-a63b-4df1-80cc-006b0220b563",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "867e701b-9d84-4ed6-a5e5-683d3dbbc6ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "46dc7c99-ec01-41e4-b534-8d24c4fa3564",
        "cursor": {
          "ref": "7b260089-5b12-479f-946b-ad5c48e97213",
          "length": 253,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "cac0f469-f759-448c-b1b2-1de895ac5395"
        },
        "item": {
          "id": "46dc7c99-ec01-41e4-b534-8d24c4fa3564",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "2990c64a-0d48-463d-8e83-3309b9499bb2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b33ba691-df1f-45fe-98d5-175f21377374",
        "cursor": {
          "ref": "4f1256cd-d87a-40df-a9a6-439a3cee9bd9",
          "length": 253,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "957686dd-8a04-48e3-b170-ce4572fc6eff"
        },
        "item": {
          "id": "b33ba691-df1f-45fe-98d5-175f21377374",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "f4a7e244-1028-4ff3-a8d6-52c682c075af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c5c7ccb-1168-4937-bb3a-79ac26fe25c2",
        "cursor": {
          "ref": "c9d24abd-8c94-4e55-bcd1-d58c07e513a4",
          "length": 253,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "286527f3-5a36-45b4-815a-d5b71f5d41e1"
        },
        "item": {
          "id": "1c5c7ccb-1168-4937-bb3a-79ac26fe25c2",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "c72552b9-e92c-40df-9fdb-d68dea6f43eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc85c1fb-6ae1-4c9d-a7a0-b87100222a45",
        "cursor": {
          "ref": "3b409573-d64c-40ea-8689-01be2603d403",
          "length": 253,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "8b241bda-9222-4dc1-8218-5cce0c417ea9"
        },
        "item": {
          "id": "cc85c1fb-6ae1-4c9d-a7a0-b87100222a45",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d4813aac-1771-49a3-95b0-b4b2ab31f035",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7dd2f25b-56f3-4b4e-989f-e88ffb8c3b16",
        "cursor": {
          "ref": "e479b00b-d485-42d7-ac25-0dfa56cdfa53",
          "length": 253,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "703af604-df0d-4386-81c9-e3c0028b551e"
        },
        "item": {
          "id": "7dd2f25b-56f3-4b4e-989f-e88ffb8c3b16",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "d705ef1c-a6cd-4448-9a98-bed27c66db01",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "81d34752-d331-42a5-b1dd-1e25212901e5",
        "cursor": {
          "ref": "83cef4e8-4c70-45b3-897f-470c67d519d9",
          "length": 253,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "c8028403-d1a2-4e93-8b26-b1b1997d5d6d"
        },
        "item": {
          "id": "81d34752-d331-42a5-b1dd-1e25212901e5",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "16e23117-5e32-4d40-a013-8a18667e1f7c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dd4c805-966a-45f9-afdc-44d6058aa2cf",
        "cursor": {
          "ref": "41e46971-f610-402c-a1f4-99478b6c9a64",
          "length": 253,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "b3ccc982-8783-4a6a-a5aa-5a87e067e783"
        },
        "item": {
          "id": "8dd4c805-966a-45f9-afdc-44d6058aa2cf",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "d02dbfeb-7c09-4583-b98a-a38b9294d49d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5a7c5999-fe38-48f8-ac52-c8944fe3a24b",
        "cursor": {
          "ref": "91eb7efd-91ce-4f99-bccf-bfe90d37f491",
          "length": 253,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "d4c22c60-65b8-40c3-b10d-4be8adc53fc0"
        },
        "item": {
          "id": "5a7c5999-fe38-48f8-ac52-c8944fe3a24b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "cf417005-abb9-42ba-afbb-4d80d19935f1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f39525fa-8f7c-4168-a990-d6bc4f6c04fc",
        "cursor": {
          "ref": "627af9af-d9d1-49ef-a3a4-509c27224390",
          "length": 253,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "a249075a-dc00-47b7-8b76-3f6815b8ee88"
        },
        "item": {
          "id": "f39525fa-8f7c-4168-a990-d6bc4f6c04fc",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "eeb83bee-6949-4b32-b853-42de96c0c7eb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c219b5a1-8105-4c3b-b290-8d7d5a4302a4",
        "cursor": {
          "ref": "e9e0aee2-a3db-4154-8d83-5cf319158c0d",
          "length": 253,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "4d884c1a-a221-40f8-9e71-4adf7bf5a58e"
        },
        "item": {
          "id": "c219b5a1-8105-4c3b-b290-8d7d5a4302a4",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "db2c1aef-067f-49e2-a8f2-fdec638ae708",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed92ffe-3c19-45d7-bbc8-447ac7782144",
        "cursor": {
          "ref": "a41325cc-1001-4562-ba9e-2454663157bc",
          "length": 253,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "c4ce3bec-edaf-4768-9210-ecb2916147c1"
        },
        "item": {
          "id": "bed92ffe-3c19-45d7-bbc8-447ac7782144",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "ae649081-980d-4e1e-9dfe-411035699c02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "157a92e5-195b-4cbb-abed-4355043bb503",
        "cursor": {
          "ref": "cd409b86-009d-4c06-a037-1ef7900c90ad",
          "length": 253,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "e74beae0-85a7-4d61-9df2-3878860ed126"
        },
        "item": {
          "id": "157a92e5-195b-4cbb-abed-4355043bb503",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "dd87fc6e-4506-4357-a83b-cd95d30ddea9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a40a22e2-e4af-4d83-85ff-9981eef3cf91",
        "cursor": {
          "ref": "cfc9331f-9189-4e0a-94bd-6fa7b27f7e6b",
          "length": 253,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "56318d72-f370-4aed-b6b6-8c011ebe6e84"
        },
        "item": {
          "id": "a40a22e2-e4af-4d83-85ff-9981eef3cf91",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "6bc13aa3-c49a-4d84-9058-75e309aa37cb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f06d784a-55b6-4c63-bea8-aa0306db87b4",
        "cursor": {
          "ref": "fe217e10-5b37-4f76-ad7f-9f68603cf273",
          "length": 253,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "40bec142-6240-4af9-89ad-e37612f259e1"
        },
        "item": {
          "id": "f06d784a-55b6-4c63-bea8-aa0306db87b4",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "876b91c2-04d5-4c6e-9870-299e82529d4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1b14ca49-9afa-4804-bdc6-5043386cc132",
        "cursor": {
          "ref": "4f3ad980-d08c-400c-8435-1c70d7f01f32",
          "length": 253,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "2c7e88b0-9ac3-4020-bb44-b5c40d3b35f4"
        },
        "item": {
          "id": "1b14ca49-9afa-4804-bdc6-5043386cc132",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "dc9ff4b6-81e7-4a63-a256-fce42e6568a2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "69a6d2f3-21a6-4268-a53b-7d883e6ea6f0",
        "cursor": {
          "ref": "6e92631c-59c2-4dae-a177-e04e01c08641",
          "length": 253,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "aebe4fb6-3c84-4f80-b9f6-788b76187fc9"
        },
        "item": {
          "id": "69a6d2f3-21a6-4268-a53b-7d883e6ea6f0",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "71fbd5b2-e6a6-4c76-b7bc-18bda06afd39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09db55d3-5969-4825-90e6-788d1ccec90b",
        "cursor": {
          "ref": "9e6e2259-8720-4f53-b15e-a7040f587d26",
          "length": 253,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "ba96cd5a-d0b0-43b9-83e4-af279ac1d5e3"
        },
        "item": {
          "id": "09db55d3-5969-4825-90e6-788d1ccec90b",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "e83f4747-1035-4a41-940e-78f7e1a129e5",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 30,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "713ce02d-5568-4b34-9df0-5ac0ff5285ed",
        "cursor": {
          "ref": "2d8a987f-3ff2-40ba-a005-8c32353df70c",
          "length": 253,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "a5b8cf0a-4f74-465f-b72f-72690a682362"
        },
        "item": {
          "id": "713ce02d-5568-4b34-9df0-5ac0ff5285ed",
          "name": "credentials_verify:missing_scope:verify_credentials"
        },
        "response": {
          "id": "3c0dc3b1-b472-42f6-a6b7-b3b655c763c2",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 29,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1ec0816-c81c-4421-8398-d2925215ced8",
        "cursor": {
          "ref": "7fc21328-1be1-455e-8cb1-3b95c7210dd9",
          "length": 253,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "b12c1fce-30d4-4754-b72e-bc62c01cb95b"
        },
        "item": {
          "id": "b1ec0816-c81c-4421-8398-d2925215ced8",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "0fdf42c9-3340-4831-acf3-3449c224546b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 32,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:245)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:245)"
            }
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected undefined to be false",
              "stack": "AssertionError: expected undefined to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "3a5923bd-3447-4938-a277-d6ba6658cb47",
        "cursor": {
          "ref": "fa6f60e8-0350-46f1-9723-dd892fd1c4cb",
          "length": 253,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "80a4c82a-c271-4164-9cda-35dd29a2db91"
        },
        "item": {
          "id": "3a5923bd-3447-4938-a277-d6ba6658cb47",
          "name": "credentials_verify"
        },
        "response": {
          "id": "d4fa370d-2c92-478b-8fcd-f818053b92a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 31,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:246)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:246)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:246)"
            }
          }
        ]
      },
      {
        "id": "bcde84ee-29df-4e73-ac14-3391f7edee73",
        "cursor": {
          "ref": "b28bd818-4dd0-4b00-9680-5b333b08f575",
          "length": 253,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "37c8ba03-6095-4c34-800b-d14b825a9b75"
        },
        "item": {
          "id": "bcde84ee-29df-4e73-ac14-3391f7edee73",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "9195e7ac-b491-4eac-881f-6a3297b0a2a6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:247)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified', data should have required property 'verifications'\n   at Object.eval sandbox-script.js:2:247)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:247)"
            }
          }
        ]
      },
      {
        "id": "2bf269d6-6d09-4392-93ff-8d0fdd7b0fa9",
        "cursor": {
          "ref": "e862bfd2-9a3b-4b9c-8442-f71888bda1ca",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e9ab1c51-02c7-419a-a1a8-5243c0036d36"
        },
        "item": {
          "id": "2bf269d6-6d09-4392-93ff-8d0fdd7b0fa9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "78489020-f38b-45bf-b9e3-2650896cb005",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf269d6-6d09-4392-93ff-8d0fdd7b0fa9",
        "cursor": {
          "ref": "e862bfd2-9a3b-4b9c-8442-f71888bda1ca",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e9ab1c51-02c7-419a-a1a8-5243c0036d36"
        },
        "item": {
          "id": "2bf269d6-6d09-4392-93ff-8d0fdd7b0fa9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "78489020-f38b-45bf-b9e3-2650896cb005",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bf269d6-6d09-4392-93ff-8d0fdd7b0fa9",
        "cursor": {
          "ref": "e862bfd2-9a3b-4b9c-8442-f71888bda1ca",
          "length": 253,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "e9ab1c51-02c7-419a-a1a8-5243c0036d36"
        },
        "item": {
          "id": "2bf269d6-6d09-4392-93ff-8d0fdd7b0fa9",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "78489020-f38b-45bf-b9e3-2650896cb005",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 29,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "31fc8466-a63c-490f-b629-4f1e055c2df8",
        "cursor": {
          "ref": "b5724c66-61cd-4a91-8900-ff92d0c3e224",
          "length": 253,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "b190fb56-2648-4d4c-bf43-654019c5df36"
        },
        "item": {
          "id": "31fc8466-a63c-490f-b629-4f1e055c2df8",
          "name": "presentations:missing_scope:submit_presentations"
        },
        "response": {
          "id": "b9539481-e74f-494b-b4f4-dc96d8beffa6",
          "status": "Forbidden",
          "code": 403,
          "responseTime": 30,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2bcaa1f3-9001-45b9-95f6-f5f8c0bf6d12",
        "cursor": {
          "ref": "7b1e2cb7-a859-4f5f-bdfb-14a9c6f40c73",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c3f6482c-cdce-4811-a23e-d748749e1dea"
        },
        "item": {
          "id": "2bcaa1f3-9001-45b9-95f6-f5f8c0bf6d12",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "738029eb-7a07-48b9-a352-4e65ba423a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "2bcaa1f3-9001-45b9-95f6-f5f8c0bf6d12",
        "cursor": {
          "ref": "7b1e2cb7-a859-4f5f-bdfb-14a9c6f40c73",
          "length": 253,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "c3f6482c-cdce-4811-a23e-d748749e1dea"
        },
        "item": {
          "id": "2bcaa1f3-9001-45b9-95f6-f5f8c0bf6d12",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "738029eb-7a07-48b9-a352-4e65ba423a19",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:250)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:250)"
            }
          }
        ]
      },
      {
        "id": "cdb79a4a-ceb7-4c54-a19e-98be98fdeb44",
        "cursor": {
          "ref": "814dfcf5-82f0-4def-aca2-2dd86dd0b85e",
          "length": 253,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "37d33d9d-a1de-40de-bccb-b78a84129994"
        },
        "item": {
          "id": "cdb79a4a-ceb7-4c54-a19e-98be98fdeb44",
          "name": "presentations_prove:missing_scope:prove_presentations"
        },
        "response": {
          "id": "ff5d05af-88b1-4635-9f55-dd40e9d35bc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:251)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:251)"
            }
          }
        ]
      },
      {
        "id": "702094fe-5810-4952-bfef-af3d288981ed",
        "cursor": {
          "ref": "b9b2d2c6-7735-40b7-b9a4-c75acac2bd9d",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "b51bba8a-02a3-419a-8c15-5180b1a12593"
        },
        "item": {
          "id": "702094fe-5810-4952-bfef-af3d288981ed",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "74998c54-41c9-4b83-a78c-21fbe4d74313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "702094fe-5810-4952-bfef-af3d288981ed",
        "cursor": {
          "ref": "b9b2d2c6-7735-40b7-b9a4-c75acac2bd9d",
          "length": 253,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "b51bba8a-02a3-419a-8c15-5180b1a12593"
        },
        "item": {
          "id": "702094fe-5810-4952-bfef-af3d288981ed",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "74998c54-41c9-4b83-a78c-21fbe4d74313",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 30,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 401",
              "message": "expected response to have status code 401 but got 400",
              "stack": "AssertionError: expected response to have status code 401 but got 400\n   at Object.eval sandbox-script.js:1:252)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:252)"
            }
          }
        ]
      },
      {
        "id": "4aefa8cf-9742-4b86-9f2c-111b657eafed",
        "cursor": {
          "ref": "1d700948-53a2-44d9-8d98-de9374bcaac9",
          "length": 253,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "39e686f7-72d3-47ef-af00-9ba194a7239a"
        },
        "item": {
          "id": "4aefa8cf-9742-4b86-9f2c-111b657eafed",
          "name": "presentations_verify:missing_scope:verify_presentations"
        },
        "response": {
          "id": "dbf875a7-1fa1-4211-a356-d56c4993b1b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 29,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 403",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 403",
              "message": "expected response to have status code 403 but got 400",
              "stack": "AssertionError: expected response to have status code 403 but got 400\n   at Object.eval sandbox-script.js:1:253)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be equal to one of the allowed values\n   at Object.eval sandbox-script.js:2:253)"
            }
          }
        ]
      }
    ]
  }
}