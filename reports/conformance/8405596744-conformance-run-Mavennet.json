{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "0ceea45b-bb8f-4ce8-91c7-c65326f9204c",
        "name": "Clear Cache",
        "item": [
          {
            "id": "d048fe4a-db9b-4941-bffe-251a3aeb8108",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a14583ee-8ba2-4170-a215-883175c3ed59",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9803020f-540f-4a3d-a86e-fbef5ff8f071"
                }
              }
            ]
          },
          {
            "id": "e923e2e1-0897-455f-a5e5-4385191513a5",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "8844049e-2317-4645-bec6-fc280e85eebf",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "30fb14af-cbfd-4409-841e-7617f533face"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "d84ec6c5-af84-4d10-8a50-91e027aaa082",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "13756ed2-92bb-4786-9b3b-808e2c5f32e0",
            "name": "Positive Testing",
            "item": [
              {
                "id": "89e713de-8547-45fc-8703-8a10055ba6ab",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "db9b875d-60b5-4c89-8677-2c7f08c6c653",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "3f06fd7d-ac64-49db-8655-6e7eb3466d0a"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "7cab383c-f048-47b7-8917-fd997187b543",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "78642db3-c26d-4fc8-836a-60732a0c36fd"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "82f376a2-c708-4f47-980a-cf4544d57fbb",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "7de64e82-0c87-40b5-865c-ed8bad4dd1c8"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "004a6d2c-70f6-4a43-beab-81932d7ddace",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "20f3af6b-b573-40eb-a5ca-af96b5e46d51"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "350fa42f-5576-4814-819a-c9dea3b47ad7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "0c19d0fa-2720-49ce-8f41-7105accb07bd"
            }
          }
        ]
      },
      {
        "id": "fafbaf81-c643-44e9-82c8-e8215133a1e2",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "835a6189-59d3-49ff-b8ab-37a26c8cfe44",
            "name": "Negative Testing",
            "item": [
              {
                "id": "443704d3-fc7b-4d74-81e5-52b9173ab331",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "62f37d23-531c-49fb-ba5f-16d9b5347977",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "600fc95c-dbbe-429c-a412-8161ee295db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "892b5b8a-0b5e-445d-98bd-3f0ead6dac4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5485066c-1183-4de3-b3e8-b71044108f03",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38d808d8-a526-483b-a763-d5ca42640306",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "65adcda5-6d92-4cdf-a9f8-d8fd56634c16"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7866b2f6-4a81-4c5e-a1e1-899519e6a2b7",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84438272-a333-4c27-9a1d-2ac054e84ab4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b2d029bd-af01-4d1b-a22e-cfd525da5e2d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "612f5fdf-4136-4ef0-9ac7-07d4175d6d9f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "edc7b07a-f857-4a91-bda1-bb802829e7cc",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee344fdb-98e6-411a-a0d6-a9053f5d6edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b08b1d75-e6e8-4fd7-9ac8-824c700da161"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5db7790f-b330-4fed-a4ab-ab89dddba407",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3d1dc16a-f6e1-4a54-adee-eac5e6b0b032"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "56a73098-5c7e-4873-b727-1a24a6ebe979",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2f7f607a-c609-4062-8d65-db5fc32b9639",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "1391f8b7-40c2-4a3c-b8c6-f50320de9591",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "cbe7e0eb-5086-4b0d-b464-9ec6a7b93df2"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "691a96e2-9e28-4b13-9637-c85f4f2dbaee",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "f8355c52-efaf-46f6-86f0-ba2c516b5064"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b6eb98d8-a940-48a6-af98-7ed915a46cf3",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c48dd27e-f9d3-4345-93dc-ba2a3cdd7464"
            }
          }
        ]
      },
      {
        "id": "d8b505f0-1cb6-432d-b246-7c923a562a00",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "22bd6e93-3172-46df-86cc-29db0f84fa0f",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b2af118f-a002-45ea-9309-ac7c25804b29",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "d3e7d138-dc7b-41a3-ad4e-a02540dadae0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b068833f-0486-46e5-993c-178739f9e54b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e4feeea-8f45-490d-a8ee-b7b865c7b96a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f75fc813-48a0-458a-a7b8-c80c07a5502e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "345e2857-06dc-4b32-b893-e55bb78233e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54ecc378-145a-4788-a738-cfd9e48837b8",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ef92845-692b-4dd0-93ad-d6635843db26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "affc6943-519e-4190-8c78-171b5779ed1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21864bc9-f9a3-463f-8c2f-7cf66ba006c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "923f553e-065e-4ebc-b265-ca5ce17e306b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a61b4bf6-5a29-426d-9808-0f655ed229e6",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "035f6c09-c6ca-4aa4-b2eb-fd3c06c1edd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b5bc424-26e5-4fa7-8818-f6173bbb8bc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b9bca2f-790d-4e6a-89eb-dff13b89d063",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f5f234ff-38ee-4b4c-8717-cfacc19dd6e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a1abbb5-2066-4e90-aa35-63369231c681",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fefceeee-f863-4e19-8310-f746201ab034",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77dc5d00-3583-4f83-a094-24c571e68b54"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc72854a-0b8e-4204-8585-1ea7e35f3f50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6223d94d-bf53-46e0-bcb6-a032a91254df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a5464b14-fdf3-47f4-9660-5ce3d6755a19",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "850180d7-ef0a-4af5-a280-5592bc4cdf24",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8a867460-7eec-4a47-8e22-e21fdc7c66e0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d77bf4a-868e-4a55-a77e-760f3e790987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "02bee382-9c58-495e-9f74-2ce45db9d50e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec61d6da-58bf-4bd6-9640-c2ec48441f97",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b499e06-aed2-48ee-967e-c46f056b8ba3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2bbc6604-a19a-449e-a37f-78c13dd0ff8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "179ccb72-1d0a-4dcd-b59c-1625de089915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b16c142d-6532-4d63-bcf3-db57b8a26654"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284f0bb0-e6b2-42c5-96ee-aa7d2bdf8f55",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2318052a-81b5-464c-a619-c145fe16223b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5bab082-82ef-4e20-99d8-462061bc3c5c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fadd999e-3aef-44b1-99be-680643e5251e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b9ba8d9d-cf79-45c8-bb9d-2e0a4862fef5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cad42617-5473-4095-b957-48e5848e38a6",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbee2b97-7e12-4b89-8b99-004c963be84e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc5b7ad5-2836-491e-9fb2-3f2c3fddce2f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68aca9b7-6146-4ae5-91bc-af1d443cc975",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "971575e6-424b-4539-8461-e70b02a9fc76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0614ac9a-4248-4573-a33b-a7b7e4baa9b9",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7a6a1c7-8083-488f-afbb-65cf563df5a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8871f5d-2b44-4069-b5b4-f86aa79f67a8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57f33a2c-0a0a-4e41-926a-c77608eec235",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ccec694e-2ea3-443f-9383-09af00d43dee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6db310ad-42d4-4e2c-87aa-ce26ebe24902",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07470329-31c6-4509-80e0-e531225e4812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d929a585-31b2-4d06-8529-3d5f146639db"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c383a674-b15e-42f1-a221-20394b2661ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c989c34b-a7f1-4eb1-95c6-7c4fa33f848e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13029900-22cb-4ef6-bf2b-edb0b7463dec",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e3a1eccd-5ce3-4968-ae08-1e537ab681e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45df7fb3-2c4c-4d77-a4b7-19bb5a3f8ca7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97fc8126-d408-40f9-83f0-3e33e787a106",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "729d5119-ecbe-4012-8956-31003cabacb6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51460a4a-61f7-4630-9f97-8f33ec123c94",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37050b5-c80c-418a-b6af-66f1cedcd447",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3449847-574c-4057-b8d3-04d958197d13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc52c240-c36a-49ab-967c-d1608692b223",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6a24dd40-5a05-4e94-b44e-3ca3cd3fbec1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d46b07ca-2564-4c22-b6a2-73097067d632",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c07e4c54-badc-466b-8598-1c55df60c82c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "68af0862-cfd6-44cf-8411-0673399d4605"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8490412-9c3a-4aee-8188-16564bed48a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "140f828d-ec73-4188-a7c8-ca17e9dd7000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1f34d88-82a3-4de6-8fbb-2bd46f69b311",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4f6caf3-fe70-403b-8250-c14fd09672a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77e49577-0fdd-4cf3-b2bf-9375d1ece746"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f7a6c8a-142f-4bd8-a937-b35cb080db4d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "68715ac3-9552-40d9-9f5b-5976bf324ed5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b57d5e9-3f3b-4e0e-93f3-8955abc5de87",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f409948a-4857-4ae4-a9a4-33d743523891",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "312ef61f-5bfe-4d8d-b5cf-23afdcbc4981"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5901ec6-bd2a-4e20-8fa5-84449c9232c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "f94b65d5-6623-439c-aa27-162570d80e0b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "75a4a48c-4eb0-445c-be9e-9ea5ad67d828",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d27e95cb-7a53-4384-babc-501d7a379c3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52c2b2b5-e842-4dfc-a26d-2d2286cb958f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5371301-7823-4715-a036-71ddb2b55456",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3f014f8e-2b0d-4d23-8264-57c29f9aaacb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c03c309-08a5-434a-99b8-f3f7d2578229",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f37816a-74ad-43a3-84b9-301942971f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "12887251-3e85-4daa-b9ef-c8ae568e263b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9721eb65-b862-4efa-adaa-81c37cd0fc3c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64692a68-d9a8-4ee3-80a7-da6a1f5b6e60"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b538839c-53b6-4285-b522-2d088eabfa86",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b606df4-be92-4e43-8d71-f8317c30d2e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0cfb579f-2d72-424e-b7b7-bf2748dddcc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "70bd8bd6-6d23-4173-af6f-78b0b74773ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "feea6df8-cf37-4d6b-8e7f-b0453450593c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d33bce8-6f20-413b-8422-9a0e991caaa2",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "70298224-6e4b-43d7-9b4c-c20265bd095b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cceb0cb9-3dfb-41ee-b5ed-f653f57c3b4b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "955f2c66-b57d-45d9-a50d-c1f87ecca10e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "5b9b41ba-022c-42fa-bdd2-4d25acee2ec9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0a33f30-fc3a-4a7b-89a6-93659766115e",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "47308f3e-a34d-4877-94b4-b1379709fdbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6cebce81-7520-434d-88d0-ce2721359707"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e758e7e-b589-41b9-8958-a534329c6763",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "578291db-7e17-4de3-a700-ffdd9a3515ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6acd9746-b457-4a38-ab38-1420bd0fa78c",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c28ce7f-9406-4598-b95e-0ffec21049b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "04ec50d8-49a5-40c1-ad1b-415001f2a811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "26ce7114-85a2-4bf9-9ac8-0b90088a9f39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e2b4dd3d-66b7-4492-ae35-a97e67db04f9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85ed5efe-cb62-4ceb-9b33-6ab5f24033b3",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "be81a3af-7c0d-4d22-a8a4-e70c9be8f1a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37fdcc17-53a2-4e34-99f2-bb18ec0caa11"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d840609-ab7e-4de4-8799-5f96410d1f8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "fc6ec750-d9ad-489f-bbc3-661d8ca45fdc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b3c2d1f-baff-4faa-8da8-74121f675940",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e61aad6b-9d79-4825-b18b-0e0c6ee99a18",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e3e3eee5-bbbf-424f-9495-0f6990d7599b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b79284d8-f2dd-43a1-937b-2a35503ecb25",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "9ca9acfb-91e8-4e77-982f-d9eaed5e0ccb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fa4d027d-56c1-4caa-94ce-2d3db0106b65",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7017b17-8a44-4cc3-9b7b-424479bf17e7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a341721c-b923-41e6-b0ec-e48bc08a9841"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "15eb950e-3410-4b49-a996-6c26ef027604",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f8d0e701-b814-406f-aa7b-b780d03c68a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "78d82988-ce81-4690-8578-610c5001f207",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8708fd2-8623-435b-a3a9-a13130ebc006",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "63dbe28d-019d-4d78-89ac-a60890d72688"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "80d6fb80-5086-45aa-8f68-c858b3b2705c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd291e1d-458f-460f-934a-206c4d5e44a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "28f451bb-4d85-46cd-ad1d-31605cc648e7",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a0ff0399-0eb0-4e0d-95b5-ebbb71c62e66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6ac3cc3c-60c7-4cd7-9b20-9a31a908a703"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f69e31c1-a31f-4bde-82dc-76a6fd053c89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f30dce7-009e-4f3c-a091-05719bea6cd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13ccd187-645c-44f9-90e7-badac9c767e0",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89542d54-92c9-43b2-87d6-38bc6441a7d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "680fc8c8-4bf2-48ae-85ce-ba6145f65ef2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2fd95a19-dbe8-4ffa-a158-7cf78e64ffa0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "2eb60394-f98f-4e59-8b31-c9cb1b3d6ab6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0555764d-61ac-48d9-8d5b-f60d1424ca27",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd535468-c476-4e04-a98b-51d025dbbc9e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e53796ed-b594-400b-8f2c-a3c049f8a2fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f0914291-65e5-4d87-bc2c-3aec72b33a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "51a1a0a3-2b59-4076-beb2-04ef6b152435"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26bb3966-1f40-4705-a3f1-55c93312ab82",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc23535-de46-49fd-bd01-8af1a3c01ffb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f5df2c4-6e73-45c2-8df4-c9615cdac75c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9368e5e-a0aa-4872-847c-f9c3a2841fd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "cc646fe5-08f6-441f-b1b7-e8a9692eabd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92389d1e-35d4-405b-b796-8dd6b618db90",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85c7755b-6f3d-4104-b076-a11b043a3820",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "232007fd-0d35-4da2-a205-f3902cef7963"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e21eb009-ea2e-41f5-a575-297a4b04732a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a61edec6-ae49-406f-a58c-afc9e76b9876"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b678903b-7573-4c87-9749-7bdad7682b10",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "036f7f80-3df2-4e5e-bdfc-a61126681087",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f68d52fc-b459-4b26-833d-fd35b5ec9261"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9efa5687-1243-402a-8ff9-a41345519098",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "79eb7d67-911c-43ba-96a4-02051d6a7daf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fdb8dba3-2717-46f7-abc7-1663f1c84abf",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d40a6f16-f474-44ab-9565-8875227d181b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c454333e-89c9-4da1-80fe-395240e238cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d44ecb8-4bc0-4930-b0a9-57121945b97a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8bbea20d-8b4d-478b-a7b7-84a8c9dcf283"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec0ffa42-7ece-459c-8126-3302e8837093",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d82908f7-3b2e-492c-91f1-9c7cdcf5e7f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7fc9a34c-52b7-447c-a3b4-48a42c5b3511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a062bc99-c1a8-41bd-a0cb-165282d8264c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "7f2f8b67-193f-43ab-978a-3b0fbc4e9825"
                        }
                      }
                    ]
                  },
                  {
                    "id": "21ebecfe-2d04-4386-96a7-703d77c91788",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d4d97bc-9fb5-46b3-a5ef-fdea95f3c133",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b0896f2-0ffb-4a84-a3e7-a4f39425c64a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b341b2-a459-4cf3-b752-8fb604a97d48",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6d697bc1-adcb-4425-8645-189b01067225"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59cb9d2-cbd2-4ca3-b3bc-7f94af2fd9a5",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca8e4821-8313-407b-87cc-dba28df45898",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "20a578c1-83ee-4453-9915-fbacab3b6d67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e04126c-055f-4288-99b0-3280517c381f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "d9dbb829-9e03-488f-95f4-1ac7d70f254a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "51140512-5032-4f92-967e-5c5a9da06ce1",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b2e552ce-5f6a-42b2-a533-30923d7a0930",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "85924139-1149-4af4-9ff0-62bab048e94b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9251e777-cac0-4133-a064-a1ee901dd98a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "8e5a9b0f-30ff-42e8-961a-2e872b216d52"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6851ce7f-81fb-446f-bd52-5b7d740dd555",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df808a3d-1ffb-4b01-a866-b8aa336ec701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0300d15d-5ec4-47d3-ad5c-d602f938d5da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d75c7b7-20d0-4512-875d-34be1dbc4eea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "cf6cf19e-7c78-4c89-aa36-0cfc3aae856e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "182dcdf7-53c2-4313-bbb2-d98a902fd24f",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "553d8617-b04d-4504-9a10-1f7cc0286806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ab6bd7-9a34-4667-9f71-2f425852e45f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7815bb60-22bd-47ff-9462-07786170871b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a5eb7eb-d304-4dc3-b561-ce3b2e7b811f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e3e3eb2-3482-4eff-aab8-19cfbb2163cd",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41416520-0a94-4d99-ade0-351d95b6e2d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "14e98e75-e574-42fb-9aea-9bd3d3b47c33"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d734f581-f373-403e-ab5d-523a3cab3167",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "a29ea1aa-1200-4531-8271-47d5c492eabf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "950514df-757b-456b-9ce3-af6835e30f86",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c1ace6f-9906-41ab-ae0f-88ef2f7e6a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44256fd4-2b90-4423-9faf-b701eab0607a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "437e939d-0db6-4203-9085-0e5de37e1712",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "9c8089a2-c98f-4893-85ce-2384964ac4bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "108d62dd-d589-4773-81e2-dfc626443ed3",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb1340dc-b341-48d9-a6a2-bedf26c1714c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5114d371-3a7f-4cae-bbce-dc484e9c97f4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8eecfb3-c03c-42e4-870d-65697b5b740b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "ad6fb0ab-e9f5-4949-95aa-0538d3bb3046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "310ea20e-f157-43c0-97b4-61907951935b",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87aae1ce-9215-44a7-bc4f-ae6552be5b5e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62253e75-4664-47dd-be0c-d47fa1c69993"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b32b7eaa-c129-4dca-8606-223bc0d316ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "4e185349-657d-42b9-9dcf-599aac4e9335"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77a211b0-ba79-4d2e-819e-022ddd407603",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0502fcd2-822e-458c-a2bc-a3a76f943a0e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a8ce5219-2216-4059-ab3c-b12037847a01"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "52c6eeca-8c36-4dfa-ba8d-d8dbd4b07c10",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "95d9dc01-bc4a-423c-bba8-31503b6485b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a00b15fb-d5d0-42f9-8767-4ed82c466258",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e87935b0-9200-47d9-9c50-1c2bd48a0093",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db65ff88-3082-47b1-b465-e284d124959e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec67d1f8-f433-4842-a54d-0854d928e72d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "b9ea2917-8631-472a-bca4-b6ff7080474a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "206c9e56-ac69-43ab-a821-8db49bb603b3",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "61b7daa7-3787-4de3-ada1-3e5512553cd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d3930ca8-a777-4bd7-b119-4035487ddfbd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "791e33d1-9d15-486b-b7ad-639048ab2ef0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "55642244-3c02-47cf-867d-4fe179f747dc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2cea333-87d5-4343-971e-9731336428da",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e62c525-639b-47a6-bfe8-8f4bc26b0cd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9b879501-1a3b-48c2-8448-24e7083c76bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e5f5088-c4fd-4bb2-bca5-757faefa6957",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d913da1f-a216-40c0-a3fa-7110d5fe86ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c3bf787-83f2-4ed5-8b6f-e5f075e9f89c",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b06b380-b62f-494d-8636-f0ce5e898635",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f0d1b98d-b96f-4105-9ae3-315f19ce0894"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a38f5b4-4f18-4b79-9365-533fcc8d7c08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fe6fa28-b046-49b1-a4a4-e15ac9ad990b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39a72f95-c2cf-4e68-bd0b-ccee2b6a502c",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3edeae4a-9cc0-466d-985b-aec310835670",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f8e38bab-26cf-42c6-b686-9aa78fa04264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1eef9b1f-3e2f-4afb-8928-55bd9206a112",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e285570a-9270-486a-8a0d-273e3db0e5ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8bbbe28f-917b-4c2b-a147-0b9cf92f185c",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4f20880a-9344-4413-955a-0dde62d7dbaa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a46b26e5-5a6d-4d6a-b682-98a331e352f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6d5913a-b571-4aad-8a9d-1bf1d01d85c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6633c69b-ccc9-4c7a-8602-77d63a7dbfae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f3510535-d5ca-4d62-8dd3-2ce6c30f4fee",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6171ba81-2488-43c6-b5e6-55167bf90d66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "79c9c08b-95ea-4141-89f3-55fb155649ab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "443de4c2-22de-4f97-8bc5-ccf724a6898a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "6f7d5c5d-9c2e-44d5-8b0e-cbde630f14c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a41d233-aa62-4b1a-a0e4-f53be7e50f50",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "38ddf921-f931-4c10-a1f8-121bb17b8d49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6e95867-c94c-48c8-bf50-9bd0678569e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17e517e4-3b18-4f28-b396-02211bcdacd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9b17c32-1c21-48cc-bfea-304402b76247"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f24b6c5f-0960-4dde-a05d-1ff2def0d425",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "188b7fe3-80b6-44cc-b5d5-f12593be7e9a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bfa7131f-47c0-45d3-b6f7-20aed42ae285"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4fdf6ae7-23eb-4816-8fbe-875b904bc09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3283b960-699a-4d62-b1c3-f71d2e02d053"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16919733-58b8-4899-a360-beadacc7be72",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66c2856e-8ce5-471a-bc8f-b329557258b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fc794545-ef5e-4ed4-b934-baff4421a10c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "853a0ee1-5c3d-4b3d-b2cb-afa7d6c5221c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d501ffaf-6aab-466b-a9c5-2dbde12a1118"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da4d7cac-b4c3-49bc-aeb1-3c0e93768d20",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46d3d10a-111e-46dd-b535-0faea97c5f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7399ff0a-b0d1-4037-a2e8-31d4a2857542"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f76b9ead-4dfa-4c3a-a295-51e2a89849e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0fc876c7-5f50-4b52-926d-f3487abec64d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf636837-b0ca-45af-85c4-b46708fbc902",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f17210-9833-4358-b382-035743442e6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7440f22-77c1-4f83-ba78-51d256e742fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49bec865-ecf1-4cf6-8cda-d256d3050a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "666cf56e-5f76-4f52-a284-b5715402bac4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1efd9049-1328-498f-8cb2-4b085da30059",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d43dd418-cfc4-4908-88d5-d4ded28ff10d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c9a4d5b-1bff-469f-9d25-80b1475e143c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "095acf7f-e554-44c4-b190-0e5169f56e09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "a802ac8f-890b-496d-99b1-2682f0d8f3ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8df6310-e5f2-408a-8474-057bbb41877a",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd2e816c-2f17-490b-958e-37d7be8ebd1d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e9c01c38-ae67-489f-ab7f-6c71f08e20a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7ae28ed2-ad79-473a-b893-a4776dde0f1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "962d21be-01de-463b-aea2-31266611fdf1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4f07b0f-36d8-4518-9cef-c4d042ffc1c4",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d20af22-4c54-48fd-a176-c1ac48a904a8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d31df33-12ee-408a-ac8b-05fd1204c12c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a9c53730-99d2-4dc1-867d-7edd0180f7f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "42a22acb-61a8-4151-8677-aade5c351a9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5c95f36-b70c-4d46-9955-500fe2267fcf",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e68aab5c-c491-4935-8808-86fe6e88a5f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6f4ed32-42a3-4c05-89f1-981a66df5f32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ee332af-d7c1-47ed-b0c5-6bba99e31323",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "d73952df-7f56-4d05-b918-e9b3dc5d280a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e772d66e-8695-41b6-955d-47c8182f2360",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dc77326-94ab-4372-8592-d94e801c7b12",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2177e5c-d992-455b-9442-22c27f83c5c3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a660ae59-662d-4d1d-ab3f-3017c0df662d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "9044c8e8-4d03-45da-993a-7ec3b09f92e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba81b414-a6b0-4bd8-95b8-c49163468b55",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0795d0e2-a8e4-4735-9ed3-f798d6f5d9b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d552edc9-8c3a-48c9-87c6-2f7c9dbe06e5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fea6bfb-ea8d-4be5-ad86-cb4d4fa9b781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "43e44901-aa76-4dcc-857e-6f02f7f8cbed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13a69365-73dd-482a-ad81-a25265d454f7",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30c282c2-18f1-4682-8506-495a747459ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dfc3de1b-51e6-4477-9b47-7073127bbf7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e606744e-66f0-4d7e-88b1-20f6868a50d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee98c950-f657-4eaa-a83c-e2327a16b90d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec001f07-90da-4f8c-b55b-244912b0131c",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10cbbce8-0322-4e7c-b87c-ac135e41ba66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19d541f4-4a71-4966-8ef6-c0ce88f7eca9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d01b7b15-0c31-43a5-b231-2df2c02b9748",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "bc33cfd1-6b10-4acd-a24a-48aead34dfc1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4d961ba6-c797-4f8a-bf51-02108f8e13fb",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0115bbc-fd80-460a-be88-667238e19076",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3e56b7d-8463-4184-8b7d-d09417a3840e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c32a4912-864f-4110-bfda-fdac74b95af3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "55989c85-7b51-42aa-879a-cc5d6b9574f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3c72297-42d3-47b5-a7bb-92d51cc8046a",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5229006a-9e04-4d62-82a0-42e71222ae8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09a4c3d7-a07a-4ac7-9755-528a1f8185ff"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8038f44-5041-4515-95bb-ad794807353a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "b2ba6fdc-0b05-401d-ba24-be250919567e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d6d3c83-95da-465e-bea8-1c0beaaecc41",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e3e7eb7-73c0-4396-a861-16963d25efc6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9a5bdf6-93fc-4dfd-b88b-e2c805e2063c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4580960f-75e3-4cdd-a067-be02666b8981",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4e6e57bb-7c7b-4584-9ee2-abb1e080346d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b73d6a4-86ac-4812-90c5-c300e501e70b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9ade0ce-5fa2-4300-b178-f9e22e7ae0d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f11d519d-0b39-4f2f-8eed-36b668ae6c32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b5d819-7bd5-4397-8044-f5877cc836e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "62080bf2-10d3-498e-aee6-a062354b0ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eae4940-205e-4db2-a276-e4ca05e0fe4b",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee042ef8-6afa-4de0-b144-22439990430e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "376e117b-ef9a-4476-a1d6-a98acc03828a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a630d259-6428-4881-b046-9bb97b725993",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "f98f9617-7acb-4e0d-91c9-49e523f84c9b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26d06c2d-d6b2-47f3-8529-d172e73114f9",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45990382-142b-40f1-9157-091ce7ca06db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6da871c8-0ad3-48da-ad91-47077abe26b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d6cf28a-5be6-4cfa-a5b9-bb2c1badb3a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "a8593c75-34e4-4c4f-ab01-7481d13460a2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b7c7a82-5062-4725-a329-86fd1515ee72",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "30b045d5-135c-48fb-99a4-c3868830ddb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a0f07b0f-ea53-4ce3-820a-75a3ade83ccc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68fe51fe-7d3e-47b3-9ba6-08b40bd6d7bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "523a49bb-d3a5-4b41-9c45-8b41ff2561f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26e636bc-0aaa-44f5-ae3d-2361df1169cd",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "219012a5-fae3-4bb5-b108-553582a1a411",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ebf0ef4b-a34d-4f40-9db8-2525822e7a50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a03952c-cbd8-439c-a808-c2f5c74db9c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e4156b2b-8321-43dc-ab83-df11a5cc0858"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9364fba5-557a-4df5-a012-c7bc711e7571",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff7fde93-eade-4ea0-a756-e0425f83f132",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5d83cb7-3d22-440d-acd0-f53560f94eab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6422e24f-48d5-41f8-9cf9-dff66ba06c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d147dbb-e942-42d0-8791-a6b1f2334a94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f31a558-17c3-4ef0-a180-3fb98bfb17b9",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed9ab453-04d9-441b-94ee-34c2b9481e7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "efc5cd9b-4615-45c8-85c6-5f10d3c4f0c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3027b757-5448-4ac9-9561-138d50f8f039",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "0a0fdda8-d125-4cee-9b23-ef822742a658"
                        }
                      }
                    ]
                  },
                  {
                    "id": "febc70d6-b2e3-499b-844d-b10bf7784491",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cad1e64e-8ddd-4b39-ac4e-82b297d8be97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e224eda7-e3b7-4c5b-a5e3-b7efe4cad1cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f3dbf093-a6bb-4f23-9bf1-135c829a9394",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "eece84b2-78e7-41cd-8026-533b297ae84f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62760ef9-51f1-4a12-b2a3-695049b5c37c",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c17de46e-e0cc-4995-89c6-3f76a2f5f2b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab2adc6d-0d18-4993-829b-c0e3f9322834"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93f4402a-325c-4a2d-9752-5fb692ba29d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "d86c6acc-9b98-498f-900f-9aeea471bf75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9e03922-43c0-4be1-9451-fec76d48305c",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b685dc07-fb60-4581-bbdc-678caf92adde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f673d630-70c4-4594-8678-f3c93a603c7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bb095a78-5027-471d-bf9a-e6e9c0aadf69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "8490d6ad-c595-40cc-85bc-a20060d6e039"
                        }
                      }
                    ]
                  },
                  {
                    "id": "929cacc0-7cca-4273-a761-843d5a1974b5",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66a9fbe5-b664-4c95-a0b3-b28e7e637a8b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cf81b28-120a-41c9-8cf1-cc7b9feac019"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0845e7d6-8b3e-47e4-b16d-78452060661f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "54078505-7983-4c20-8796-d71c5e77b821"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a113a5e2-3c9f-4a40-9f44-d2e4d34ef5f9",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7d0c970a-437f-4e6f-8eca-4bafbcbc2bcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9852030-2e7f-4535-a675-ce97714f9960"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f12ea0-215f-4b9c-ae8e-f9a6406bfca2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "32aa4796-df56-4d03-a25b-d1fcd9c2a383"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6af9ac10-470a-4e5a-bf79-03dc29b9e941",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b0731c4-a55a-45f3-b6dd-ac616ab3a928",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf9b262f-d692-4631-a145-cceb6f11b156"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bef8b8a1-ad7e-4d1a-8311-a4fae9124955",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "de4aaf86-bcf9-4857-8541-9632585f7236"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dab839e3-1333-4dab-bd06-c26631ec9644",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb4adac0-e25c-4369-b86c-272ac1e374b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e66fedf8-d3b0-4c5b-85e0-3d40e1dc7d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5c68848-b8b6-46a4-a0a9-f75e4428e5f0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "1614fe6b-550a-4663-8714-e2c6e5141cea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7aa7925f-4a90-42b1-b984-519f1fe0c4d1",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2dae0669-ce7c-49f3-89d5-bb0bf96c19db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "33081b0a-67dc-4484-b75a-e498d8b02cb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d61094da-a0c0-47b9-9e6b-bc503a7d3482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "9859fb5f-1229-45e7-b9e2-9cd8cd59e442"
                        }
                      }
                    ]
                  },
                  {
                    "id": "32420ba4-f2bc-4fea-a198-8321b2f2d2c2",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a1eda92a-fae8-4507-b702-ec582acd743d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ae8c9e04-9c5f-430e-bcb0-96b4cbff0af4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "088f789f-0b2c-4c2c-9137-39cae953dcf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1661d099-60ec-42f4-98b9-301229efc0a3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "101b6df8-6ec4-4d9d-9032-2b262e3eaaae",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33fba004-8734-4a76-b49e-ca37c623fa13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3db00f40-634a-42de-accd-6d20b825ca9b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "173431d7-4d13-4559-9a5b-4a33691841f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e5093d2c-fe5b-436c-83ea-788caa0ff941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6870a7af-ce16-4dbc-b970-b57a753d8231",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2fe58dbc-d5b0-4cf6-86f9-a3644353c5a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cf40ef53-7edb-4e03-9dc1-607c0700f307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82dee00d-7351-4b0f-9da4-e7be1db9a0fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ce39468-f68c-49eb-8bf1-3b6131f8445a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8125bcd-7404-4e1c-b8d7-30aa6f3f01f0",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4d708c55-15da-4ba6-85e4-633bb7c9f5e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af6094ac-e54e-4e5b-a406-67b95aad6ccf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d88446b5-ab04-4ca3-b1a3-ff64908c1ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e91d4276-5fb4-458f-89a6-3a84b4ce13bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26c52869-fea0-4da6-a514-044738b7e368",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef595aeb-07bf-4e11-b57f-b5aa9fe0e84a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5709d16-7e5f-4f33-88db-41c106ebb7f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a848b66a-4abe-4e67-bfef-07621bfad0c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b993af04-ac5b-4bf4-9619-da7511a66267"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e04e29d-71b5-452b-9704-5d0aee74ea63",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7100bdd9-0d1b-4125-8bc5-02eba360c1db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b019c3b9-65d4-43d5-9e48-647e4a68032e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4862a773-4791-41dd-bda6-bab6a57f76ef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "a770f5e1-1fac-4447-b30a-ff1000e62b9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6a0840f-26a1-4fe6-8a96-9ee90d82b0b4",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b780c96-2519-4e3e-9d24-ed260b718eb2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "80e7d7df-f723-47ce-ada2-b95af4be160d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54c4fcd-3342-4981-9909-be2f1b864d47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d94ea126-5e51-4b27-8473-feb2f1dfb64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bcb3035-26ff-4fec-954f-c81df64b94c9",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45a71f9b-41a2-4877-a42d-3452ab1aef89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69a6434b-39ec-4d5c-9416-015b3ee0a4b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "512064b7-661d-4878-8b44-6842fc7db5ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "4e401209-a5a1-4b8f-b5c5-84e6ff5d977f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ce43a3-4ac6-495b-bba6-d179b19a3f1f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "addc43c9-22d1-4d8a-a8fb-35ea4002d328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "19b6b2fa-a057-4c4e-bc9b-82d369b9cd58"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfe1fb3b-e2b6-45a2-b1ff-4c2373f9f0ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "f04cbfbb-0047-4f34-837a-1a8af43e3da9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f015b883-9a0a-4a71-8f97-dbb0bb2b3b51",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68f1b4e5-0a4f-432b-baa9-74f456fd76b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "764d1a0f-344f-4e86-a4cb-5d96853dee92"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1710c6a7-bc1d-41e8-904e-fa980c3d303c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "f08216db-ae36-48fa-9495-e63cd5eb35ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b1fc1f1-88d4-4757-862a-e4a384025a1f",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa25cf55-71e3-423d-856f-0effa0316005",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "e96f634b-ee6b-431c-a972-3bd64da7a89d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "79c570f5-324b-4a10-b9d3-b21037d67f8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "644a2d9b-a725-4f2e-96fe-e393838ec074"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "3d5f3334-9a03-4a6d-b078-2276a9b3179b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a2f45be3-c267-4061-afa8-3cac83191da7",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aa96d840-1bbb-4274-aa1f-daece8143857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e41c74b4-0f0a-4902-8999-5258311b0ea9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5d4b5b7-2d8c-4116-8c07-4f9e21f54215",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31fb8713-2598-462b-acd3-7ae8318fbeb9"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8543c572-2d40-4ce5-b727-4f3a654f5905",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fadc471b-8d89-4841-afdb-a0cd991fbf94"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d3b33976-3192-459a-862b-ad46ad13d6e7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ea583f61-13f6-404d-9083-c89a61d5f0e3"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "e91b9009-d903-4682-8f64-0dbe31ef5c0c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8b02a9b7-7d8d-4477-8993-a068162360b6"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "7e48b08c-2c47-4d79-92ce-af5715f648a8",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "77858da1-9249-4ed0-8e33-38bc8ee9101e"
                }
              }
            ]
          },
          {
            "id": "e2e4d568-3832-4332-8d5b-f9beee62617e",
            "name": "Positive Testing",
            "item": [
              {
                "id": "eee14986-4467-4c24-bf71-618d789385c3",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "22f25f46-f137-4bdd-9fa6-4d76772794c7",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b4d7e7-f0e5-44ca-a695-d6957e14152e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "54644fc2-4196-4ef5-aa04-54275ff7ab34"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f73f25e2-0d7f-4bcb-97b8-4f1f9e136041",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6d0c2f71-8cb6-4095-8fb4-7f96356372c4"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "1a219d2e-839b-4c0a-a37e-24a1f1ca7982",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7f9e5e14-bfcf-47f4-94a0-d059dd2a9b3b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "33f2c606-51f0-4a21-b00e-23ecdd75eca7"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d1303e9f-712e-4f8c-8580-cfbb38dc294b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "a8a4f673-917b-4387-8b3f-8e8b0510f447"
                    }
                  }
                ]
              },
              {
                "id": "b0ecf663-4b02-4d50-8d63-bbfe7a62c668",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "720f7122-e4e9-4844-8132-81bfa8d095d9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d43d34a4-4897-4fe0-a11d-ff2adf2fb094"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "b0c0297a-9e8e-4576-8435-3131739154d6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "1508e81d-0f00-4cc7-b6db-eb8f62261b5d"
                    }
                  }
                ]
              },
              {
                "id": "63fc83fc-31f4-42e2-8ee3-8c1360ebf2b4",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8eb8fc41-d429-42ee-bfdc-6cd8e2854fe1",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "c2ec5b32-1261-42c9-8db6-52d976def03d"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2ad3ad63-71db-4aa7-bd63-6f29c08a833d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3696f877-19d4-4506-9cad-f153220bb047"
                    }
                  }
                ]
              },
              {
                "id": "1c0aa0e2-0051-4504-b637-e18f260b7426",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c3d80b36-27de-4886-9c72-b9bc2b935ff9",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "7a781888-0b10-4480-87e9-22def6f32b9a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "08acb4bb-4450-4c62-b981-50e7f127de0f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "f185fc52-0e04-4677-8aa1-f7bf883b7916"
                    }
                  }
                ]
              },
              {
                "id": "4b02caa0-3046-4f85-80a2-52e568084e8f",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e9d4df8d-2c37-4293-ae30-626452fcb13b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "cfb39ee5-c380-4ca9-a77a-d1668317edf2"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cfb377f8-5137-46b5-bf90-c6b4bcb65668",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "6934009d-8f8d-485a-8247-1eae6eb6ee21"
                    }
                  }
                ]
              },
              {
                "id": "ca47fef8-f383-4469-b047-c6ba67d7c9e8",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b2c0f68f-35df-42cd-adcd-ece2df760726",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "8600b192-06c1-448e-9b53-fa51ff801362"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "32be03cd-d77d-4c8e-94cc-8ca82be78431",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "ad413955-0b4a-41ce-a8a1-56c9ca84b409"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "5bf89706-b91f-4ec7-880f-fecbacb1be5f",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e27f80b6-576c-4dbd-bfa9-9e8c24a9da94"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "90bfee47-d52e-46b7-bb58-17356545c478",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "8fba1211-9f23-4b3d-b722-9a8c0daf4072"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b5edbb05-aa48-4869-824a-02adb2f3b9d3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "43f4ecdc-e7db-42a7-a4b3-3e61759d36d3"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "5eff77b9-5aaa-4812-8baf-ea3372f13a75",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c81a31a0-480b-492a-a0f5-e8839b59456e"
            }
          }
        ]
      },
      {
        "id": "396aa7e0-d932-4bed-997d-d669b9689357",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "0f53d703-ce6e-4c19-b9bb-90dc75dcefd0",
            "name": "Negative Testing",
            "item": [
              {
                "id": "3bef0456-a878-4e2b-af2e-34c04d597795",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "352ffafa-6277-4cf7-a1e0-15edfc98e5f8",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae66211-0c42-4256-856f-1fde47ca4ad5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4f5be3d6-c17d-4690-8a0f-45654a106f59"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "acc3d44d-dfba-47bb-8455-df304561655c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "1567eec7-8d4b-47ed-815d-55031eebe7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3c05c34f-594a-44ed-b481-8639ce19c0f8",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f30dbaf5-8e43-4f19-a00f-35fe4cad5095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77b7c683-b2a6-4634-bdf7-46353e609cd8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0dd09fb7-81a5-4b58-8ab0-9c35ca01c813",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "3c7de708-4125-4951-a163-a6eac7afd83b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "695b4063-4987-45fa-b2b9-8342330280db",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "01303ad6-6288-4db7-b993-de2b388588aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c66986e7-73cb-420d-9248-701aed597545"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4ccaad2-c051-467b-9e4f-fd59b11f84a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e13c63d8-ef96-4f56-bd91-edb74f76b43f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a2cd540b-0c71-40af-99e8-7c3539660f56",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "27ce4bee-6730-4580-aabe-69f739ef389a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f376e28-af93-42b0-bfd1-644625417621"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9f1bce8-f8c0-4a70-8b68-752ae2dc6079",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6eb8f73-6bd8-4b14-96e3-e3200450560e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d59a437b-1294-423e-882b-8c5e70da3f2d",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f13a2442-2f94-4cc3-92b3-ff7dd36fc295",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b7d6ed9-4055-448c-a9ab-ff01d72c7b96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "041d0e5b-8aff-41f3-9bc0-18f381dc2df8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a3f6b303-04ae-459b-8ded-2e53d5a116bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a8dbc0e-6fe8-4467-a75e-de07ada76499",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28a3af3d-8302-44d8-813f-45630e3a9e6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23429d46-b174-4ac9-ad88-55239bebed8a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee389dd1-32d3-4ccc-bb67-fff6b0d18bf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d0ed37a5-6e23-4cce-abd1-0696e039d046"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adadd270-3286-45ec-ba34-40d03a414e90",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "528dd84b-7ca4-42d0-8789-6d8e316704ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "796fe324-9ced-4d21-8ae8-c4c38df53cef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ffc1627d-bff4-4c5e-bdc8-11a65ccbc058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "12fb47fd-5d72-4430-99bf-e443094fa14f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9546eee3-a055-4920-b11f-b6da2f5d50df",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a9e8292-275c-45d0-8d52-24ad663febe1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9c8a91be-1ea5-4a1e-a036-b48b2dd77978"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d391866-43a8-4098-82bf-5f634d7c50fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "df5aec5b-5f6c-4f06-b4bb-c9c7641cd7f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8a8781a-ee72-4758-9501-0b03070ad874",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c995f81-0144-4d9d-9950-71ccd31b22f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "693ded56-5986-4945-a8dd-de9376e440d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9432c4c8-dc94-440f-84f1-61478b3aecd4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "f3dc5346-41be-4543-a61e-ba958339b511"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c47e315f-98a7-4ac2-bb6b-d125788058e8",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db2ddb1d-5a6e-4fe0-a217-10ef586def15",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bc96a32f-9b4d-4732-a332-bcb7bde1f7aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17bee908-c708-453f-9921-7ee3199b1da2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "fb7bdcc1-8e4c-4907-b503-a4a99c718f39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b15f0c-fa04-4db4-aec1-9f11ea3ee783",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "45b01d11-b75e-41f3-82d2-ea8843a323ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "01b542cd-2790-409f-a9d8-6da703761b2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a242510c-efed-49f1-88cf-2f844b5a09c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3f81e423-ab8e-4c89-935c-56a0ea5b4534"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c25d0249-021a-4fb8-821e-177da8888e6c",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04bfaed4-9884-4b88-9f3f-72527ac23cd0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0081c058-91bf-4ab4-afe3-e4faaf890203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6549025-b885-4fbc-89ad-830a83728808",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "e30c7284-4f09-4263-bfe9-2c05bd82b486"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2db0e5e3-bd4c-4733-80a8-94264437586a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df1490c8-c899-4d86-85d1-e138e1f7f429",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d55300da-7154-4f78-85ba-199dfc10d1c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88a39eec-ab5c-4fd1-8a67-c289eb149f0a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "13f1f8ae-d72e-430a-b814-ab00515bd39e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52105b9f-ac1c-466f-8c4b-a9da319a8f60",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "437e7262-a4d1-456c-a65d-29420e5658c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc4f344a-0879-40b9-8deb-b011b37f199d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99b3d87d-4523-4a74-8578-52644b086241",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "390184f2-5892-4584-ae7d-585321bf2f92"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc444b02-0ce4-4152-a808-63f18582303a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8b3dbe1-ec97-40c4-9ded-1f3c6421b3f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "155aa6ca-3f02-4804-80d6-475818f01dc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e065cc2d-75f6-4ebb-8492-838ff0824812",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "a3f7f807-5ca1-44a4-ae5a-c043e197ca04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e2e02d9-10a6-4202-a0f5-ac14a1bea10f",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eecc194f-5b38-4e46-b224-c230e3bb42dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d1dfea4-9b7d-491d-afaa-ca1f45e9d007"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c70e7b29-e178-4889-9196-b17da16fdd8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a5c774a-0df6-4315-9bc6-7113cd239c63"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30c02fa5-e646-471e-bdea-4bfb7747caf3",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578859fd-3229-46bc-9a59-5c88ff0f2b27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ed70771-84f7-4b84-9b1f-7c8c7cb96eea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3999d105-143b-4e91-a249-42b6f70eb65d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1f780ebc-dafd-433f-9e88-f0135ed8f1f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "abddb961-7bd8-437f-9766-12b76ab7c272",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66b9e956-aa1c-47bd-bf28-cd3b78166a33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98815f6d-47e8-4420-a5e7-7e87f19110de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d2eb7c49-eccb-4724-870f-a932ee5aa23b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "1c230803-4b86-4098-86e5-0cb8f88c3164"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35973b75-b7f7-4c0a-9f9a-34b30c2f0336",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28e42ed4-afe0-4480-8e8f-42624670c027",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ed1342d-a1af-4c87-9229-6b680043576c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "40e554c8-655c-4b34-8459-17341509bc11",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e57a7d80-10f7-42f2-8ac2-440ebfed9d72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d59817-1f12-437b-a9d2-2819138f8e60",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d38525-b8b1-44dd-aced-202e289c5857",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b8dda4ad-d517-447e-b268-24839ea43e0f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "62b8089d-30b7-4321-8104-393a1f57798a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ad8c69af-ce1f-4e48-bd0d-3accf4c5aef8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "edbae745-c2db-4fad-9e97-7170a870037e",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b783a4-1276-4069-abea-63f18701fcef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70ae7076-6da8-4a96-8437-5061570e0735"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1bc94ca5-0486-4f3e-b7fd-94510481471e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a998497e-968c-444b-98d2-de242533ee26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0094d652-f635-405e-8cae-af010cef185c",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da614212-2558-402a-aecf-4a88c3dc9750",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0f7f13b-b085-412d-8dc1-2f5b00fc49ed"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b87f58d4-5430-4028-8b7a-2ec425003388",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "9f8f8c89-cfd1-4a62-a937-f548fd8f821e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04f43cb0-fc77-416a-9abc-07ba9986a587",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79708f29-b877-4e4c-ba83-e3825cf24ff9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26702fd0-3610-4b94-a3d4-1c9d22e4741a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "33c033cc-58e9-4477-aea1-96a7692c83dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c9a1fbb0-5c0c-45b6-bc1b-5d9c78454cfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bfa0ab9d-07a7-45f3-b693-3fc0f055ef03",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "831c774d-f56c-46a2-92fd-bc5a288aff07",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b47432e1-55ed-4251-94fd-b7fa7298d42b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5a6243a-3cdb-45de-9c66-79f2f113ec06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e681d8a3-1a3d-4637-94e6-f55dd9b591fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa2a5e8-c98e-4759-84a2-afcf4248187e",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dfbb5ab-7f9e-493d-b431-0d27c142d1f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ceedac0b-b96e-4a05-8019-a595d281c7ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd913dcc-cc0c-476c-a4bb-c9cae5d8dbbe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "255f95c7-a657-4e47-b585-3d38c7c1218d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3ab303c-87e8-465c-8cf0-2d94492b6f06",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b1541c7-990f-40b2-bf35-37bc6944bcab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e9a4f25-4762-40ec-bfe9-fbf021711eb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02cf6a4d-8011-4eea-ad12-e5a0481ad509",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "783b6f0d-4274-4100-b009-58b17c6a3186"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ca437863-0d4e-414c-b306-b2ff954e95d2",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "58588785-3a4f-4c42-b33d-2539a9532723",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "11a2fd5a-0844-4e89-ab4e-67cb8999b22f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "59fb1249-e6d2-4926-aef6-a04884b1aece",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "800b9bbe-d58a-4955-9f83-a7860ab31e7d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8b28d24-f74f-4a74-b2c9-2e1f88d94c7a",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a17b2648-e9ee-45d2-b6dd-71d355be6ad9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c70386e5-2648-42b3-aa43-22a3e4e1cc52"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "45206247-d83d-41c5-a0a3-281788f0fae9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7c89ee6-b5f7-421e-95e1-56f9adcfb381"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6c6117c-ebab-4bd4-84ef-5a2ad2c1f8ab",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1427ca8c-7424-4b93-8110-e46afeb31337",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "54b81fc3-846b-4387-a53c-f201fc1de7df"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b219a23f-c5cf-440a-80c9-1a0f36c020ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0acb88b-928b-481e-bd2b-1eaae5f92100"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1574a414-c6fb-4767-b1b7-309ca5dd0a8a",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "959da378-02f2-475f-84ee-e2bf87628746",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d5c2f56a-43ba-4615-8cad-7c541aa06b80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73d7586a-cd1e-41a8-9704-eecddf0aabda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4b756ca1-ea71-4ca9-8618-6b1f8857c5d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da3c7ff8-c271-4f8e-85e0-e9ebe737c184",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "44e479bc-4f7a-41dd-941d-298fb3e4370d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eebfa5c3-2ba6-479b-ac83-1b8bf20a040d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2711c54a-f746-46aa-a1ab-83996f207d5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4d6b53b7-f1d0-4e62-b5a0-f5225416edab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59cbb54f-99f5-4b06-9b45-58e07fb74ac3",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efb3209-e381-4986-bc1d-be3dd384c78a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "969a469b-375e-4f52-aaed-c594c3e50246"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2420964f-1257-4119-990d-e44093750ead",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b2dec5f-9be2-424e-b763-950d37c11b8d"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "423e1c4e-cb4f-4cc1-9e98-ba6a846b7215",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "4ee13e5e-90e3-4263-aa2a-a46bc7bc22c9",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9def48c-a1d4-49dc-be8f-0293de0d47dd",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "baca2822-05de-4f28-9baa-0abea4b7904d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "28918730-3c68-44ff-b8c6-9538288b117d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "4399598e-fd04-423b-bfca-65a60ec5f8f4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b011d32-259a-421b-9409-336661b68b94",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "406bac7d-563f-4517-886d-8e3299b6dcc6"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f9837720-2019-4166-8fc7-7656fa10581e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "51cdd87d-5d62-42b5-92cf-eec0593a399f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "7540ae9d-4f92-4093-82d0-c8f8de06fa95",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "3b293ba8-0437-4d13-9359-7367a05dbcb6"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "d6de20a6-f123-4cdc-848c-4caeb12421fe",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "5296cf85-f5a8-4058-b69c-189312412615"
            }
          }
        ]
      },
      {
        "id": "6103133c-c49b-432c-868b-e0badbd88adb",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "408a3165-d68a-4dc0-8b93-65c739abb74e",
            "name": "Negative Testing",
            "item": [
              {
                "id": "342a8ff2-96d8-4d2d-9062-cd25d84b47d2",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "98b52824-55c2-4d4f-8773-e1439d4bbea5",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f48a931-181f-4aed-be29-a20e580d6f29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "39cbdd4c-b5c7-4326-b0d6-d442537287fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d4b8b7b8-6eff-4770-af3a-ddbbf6fda38f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "83982ffc-4eee-4e51-b6df-686d13052623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60e237ec-2c52-47c2-9e7d-a8009f502d84",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "508c99f2-cf8e-44ca-b32b-976c2b84a187",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8c3eadf1-6c85-4545-9e42-ac8c8a94a456"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "130e0c1c-7e63-493f-ad28-65857eb2402c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "2c7cde3a-1f57-4d3c-8ff1-29c07f3b7c58"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1eff716d-8492-4037-b70f-5a1ee1b38ade",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6677b7dc-e9bf-478a-a464-7b3f0185fb73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5eeccf4-5d16-4e72-a715-f956146f30fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c8ae960-d3e6-41d2-b3d5-69555eb3f806",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1ebfa5ac-5afc-4183-85d8-c606ed9c9730"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0812270-96ad-4412-bf5e-2fd6fde09f98",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60124c2c-df37-4707-b7c2-874904bb22f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d9d70d83-e8a8-449e-8f1d-15915f6ab02b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0382f831-e77a-4ec1-80a2-a3375840b980",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c59c9e0c-3c0f-429f-88e0-192db7b7a079"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce0f5090-390e-4901-9c3b-dd797227e478",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51791824-c36c-435e-bb72-167593fda357",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc1ae750-1d22-4a75-8e0c-f45a1839d7f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e862a5a2-bc4f-4533-8369-8f2d15562af5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "d802e46d-ba1b-4b17-a7e8-636eeb33a621"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d909d807-febc-4b11-9283-859159357ce7",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec104434-70e9-485f-9045-2c14fa80cc6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "490111fd-5ece-4605-ac07-77cfa561ddda"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a05f311-8a4c-43b1-9353-8c94c5db8608",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "d43a3741-0fe9-407e-90a0-2e5388664579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6e42517-7fdf-4a40-9fe1-2d88b659fe44",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3140e89f-e364-4937-8991-82fea89d72ec",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f60011e0-012d-41ef-9634-5ab6a60aa0f9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7550a944-89bd-43d1-9cca-359869a3190e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "ee8a6222-1034-43cd-a924-0e0ad12e25ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "685e4543-9703-4805-b4d9-e0a7ac2f031c",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9145d98-05f1-4a2c-8e36-f51a1d6fe28c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a6e43bcc-47ec-47d6-87a9-228a34fc4d03"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "031fdbb6-b596-49b7-a00e-d6b3f89dcb7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "dd33efe9-7082-4b38-9f06-ef26cfdffddf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b10861c-db3a-4c2d-b893-dc70dfdd6896",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a033ed1f-f019-468e-99d8-bc6835305bfd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "676d7c24-220a-4df4-9109-25bbda8ca451"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "877fad62-d3d4-4d29-a421-a716a4e506fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8c768dd3-41ff-4c11-be69-25842278db4f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a02e53a9-70bd-487f-810a-2394962e935d",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21dee0d7-7c00-4998-a25d-e5552ab67ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7892ab1-1c24-4b85-8c58-64b477c1ab3f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d501ee9-6ec4-412d-964b-87ea102970d6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6e66fa2f-9656-4b7d-8ae7-bc105ff26519"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0957440f-2fa3-4619-bd89-1eab136f9a4e",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "35ec0d2a-1104-4c5d-bd43-4f1714aea7c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c9937a47-a5a7-497c-8131-080246f4dff9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "93b6e3e0-e4d9-490c-b530-20526602764b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "4a0d6c7b-f8e0-44f8-82a3-07b1761312f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d1c473a-3e80-4a79-b302-f6266966e397",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e69dfb83-a586-4bac-9adf-986b0aa2357f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "06069692-1aa1-40c2-b441-b5d08d95cb6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "151df171-9907-49d9-8f59-64686a30ce4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "c548a7e7-fc80-4777-9fe7-29997a48aa95"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c00c1351-14a7-40b9-bd6f-ac39040c0e0a",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bbf5772f-07ea-443f-8f2a-b663782ea39d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7e7ddd21-7549-4b54-9deb-4dae08e153e9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c0d12d1b-e0dd-424d-9a99-17a70c105fea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5f45373c-9574-4338-869e-5559c4a165b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "493330d5-448f-4d87-b1f7-a7c580eb24ef",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a13ca5b-4db0-4572-b04a-e02c11f592c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "65fabcc7-70f4-4d0b-9fd2-b060490e5645"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c45eb059-d79f-47da-b28e-c21fb27a4010",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "9862a0b3-3eff-4a9b-b4dc-ac8d4f4a2fd4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0717f77f-d799-4c47-887f-5852113f34b5",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "43a148c1-290f-428a-a690-26785450aac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dce411cf-e585-4af3-80f5-fbdf80bc1f31"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "03408b46-274e-4177-9654-791c4d102046",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b07293e2-9de4-43a7-9bd5-d832651a5dca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "477988ba-2fc5-48a6-9e29-2675a2d07e5b",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ade6ddde-ff43-47ba-a1ce-c10b31fe529e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "077fc3db-ac37-45da-92f1-346c70d03037"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0de5ec62-3201-416e-a9ce-6c14d0085045",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5ebee48-bb0f-49c1-8103-150d406dbe28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0be74a65-e006-4176-94da-dc9c409e05ae",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "73e4697f-343e-4644-a30a-11b641984943",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d2e9ae2-9684-40b2-b8ac-7a83dd0daaa8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30b295b5-9131-40f2-a136-b069f30a5768",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffc80449-0bf0-4922-9416-f04d27ca7d70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2969ae58-02c7-4092-8c99-650cde78dac2",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f6306fb0-a8b9-454d-bcb4-ee6bf9027249",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c40d02d2-fc2d-4c64-b9d6-2f10dc43d41d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4b46051a-e1f3-4034-9bef-e7952d00c700",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4fff565d-19ea-42c9-adf3-4f008269a64b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a57602d1-ccb4-4285-ac03-c7762f6b5b9a",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b26df476-f882-44f4-8e97-66315622cce3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e0d25df9-eec1-49f1-9084-8d5648f27562"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faea6ace-13cd-48eb-9691-0f91306bf02f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f0f2c22e-5622-4352-bf58-5a8f6588a706"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1561f6c9-edac-4eb9-b5c1-8205d5afa7e2",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4b6a641-5cb5-42f8-9416-b92a970443d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "90f5c3c0-f3f5-48ed-9772-dd55a8451d5d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d587251-579d-4327-878b-800ec9a9aac7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "237950f6-eec2-43c4-9db5-01278d2b2f3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2df32a6a-803c-43d4-abf9-cbc361fc65dd",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3f263d1-7583-4b4d-a794-8fdf46a5e219",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2f3ec818-aeb7-4109-af0b-0ed47895d7da"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "556bfd36-3ced-43e4-98bb-7860c0ebbab8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f10bb59f-9784-4d89-8572-8b0c90819f3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27c89301-4c6b-4656-9600-85f05a6cc880",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cc9dbe9-e1ae-494c-b103-81b316804dca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e087bf05-609f-4d8a-adda-79a1e989c33d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c5b4d73-3758-43cd-b74b-b65f745e61ae",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "99cc3f67-89fd-4fbe-be7c-e3684f8c3ccf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44921076-08f4-4753-8fa6-c84dadcddebf",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2660a42d-cd92-4b3e-b6b9-ffc3f5335b14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b17a6cff-81af-4b41-bd8a-9dd23ad53796"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c41bb8f-94a0-4251-ab06-f58b6a605bd1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "45758609-44c7-464d-be53-b3b9b8f3c7b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44de3943-e1b1-4b13-9a17-83516707415d",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "60b6a777-b11a-4ba5-9f05-b5b77a35d876",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "326f37b3-e4bf-4bd1-9c11-14c5972aca0a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "633b16f4-75f4-4971-8bfb-bd2885286b67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "76728737-c3dd-496b-8e3a-f2b90ee11a55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8b0d298-a5e0-49ed-b4cd-2e70c9733afb",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3c4964f-7296-4df1-b914-aef2c677175d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c8121d4-5f5e-403c-bd58-b4941d1ef3ef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13880401-d875-427e-9a3b-eb82339e776f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "723e3ac4-811d-41b4-b2e7-abb880e94166"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5dd83e33-69fb-42f5-ac3c-81e8f82e0720",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de192bdc-153e-4606-ab69-98490f49b37c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73bf89c8-435f-4e69-8e29-a25fe3ef27a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c05d4c6-88ee-46da-b9d6-5a9d73874913",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "04488653-d46c-4499-b304-2d5c090d1111"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f75c6e91-93a1-454a-8096-99fe7807a083",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31a24c41-f818-4654-bbf4-c5874e6349fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c238b247-fd14-4a82-9b19-08fbdcde4d44"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9ba01ca-f15b-4b95-8dd8-b78e2df9545d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb2f6d17-083f-45ae-aaff-e8b24795403e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c803b0bd-6b77-488c-800e-27c29ba89911",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4717c31-3cfc-4a75-b16e-8defbdf5dfc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea36fc28-39ea-4ec2-a667-b195eeb872d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ace49c8d-8e71-4057-ae75-b308115b5205",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6cea2262-e336-4ea7-94e8-82d080c3f7da"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33c858a6-a927-4e31-9822-0b3f26982318",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f38ae46-8955-47a5-9e3c-194a26d6b26f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d6c72fa-64a1-428d-964b-c223c1de4a3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05cd0829-1681-4099-995a-e57632e97e46",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "20b00c56-ddd9-4d1e-9a13-4ba9053c68c0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4225faef-a78e-44ec-8faf-ae20962db9e2",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db262eb7-e43b-45e8-89c2-2a8dc564f311",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4fb49688-1c9d-4db5-93e2-166ca4f8cd94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3c7e368-ffa4-43f6-99f5-f53b16f1f248",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2d16a5a-235f-4c70-a622-4a48f906f2e4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "39dd081e-53ad-4c79-83b0-cd62eac522ac",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "87c15238-142c-4647-af68-2ac738b57753",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1f04614-0633-4b43-8a38-e4325dc94f06"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb0d50b3-492d-4798-b807-a7405ad5a832",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "fa726c6e-fe98-4946-98db-6379a97b19b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b48e3d1-f945-45be-bc86-61b83ae7c15f",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "04e92728-e852-4c18-aea8-6e68d7c6d199",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "902f4de6-ecd8-43c9-8c24-b00190719f7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ba15ea76-d7a4-4ccd-9eae-62ad7e50eeb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "775fa156-cc1f-497c-abae-555f960e0301"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dff62a5b-dc26-4332-85ba-d11a84938968",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e7906c1e-c8b5-4f31-895f-1f4ea6850d1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3936e841-f9e7-4caf-b836-a74e51fab035"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c5c7348-4a4c-49a0-99aa-600291795f41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "26500c34-c254-4c51-8699-b9f32c4c2443"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab3e41ce-a5e9-4ea9-bea2-d3c9631835ab",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6dd0b520-8c4f-466e-8cbb-48a9dba45157",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c5be6ae4-fea5-40a3-b477-1ef370fb2ed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec30f5e9-907f-4f75-a533-2e76d7d2f1bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "54b73021-4bae-4b86-897a-a6b5a6278f88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d41bae9e-67b1-42d8-b906-40163feacd63",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d2b31348-1b83-4a43-bc8e-0a0e5643bc29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "814a41be-7ab8-46a8-95ec-73f24260aefc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78490f3b-30da-416b-bad1-a076f72a78bc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8aaf8d79-d0f9-44ec-a42d-018466838eea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3436c795-d36d-496d-8bb9-aee906eba806",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f1140dd-d310-4fb3-94ed-b94de9ae2acb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "42685583-74c1-4156-a8f2-9cd91694494c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aa851055-2ef4-4787-91ea-818feee76c39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ceea0f0d-ac92-4bba-8a01-2f39cc417c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d70a5e4-5879-4c7c-a195-612f2d662be2",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "508df090-308a-4e81-b1a0-333e0eda55d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb6b6973-a641-45a6-9518-8e7884367203"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01e365f9-099b-4317-834a-1242f6d43407",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75586eac-e7e0-42a0-a09e-bba0ac62184e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "db6de6ef-5c89-4b43-a480-09a779f84beb",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d5e91bcf-0fe2-4b39-a446-29dc75ae773a",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2c30690-bf23-41ed-9929-b10ea9421881",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "a7275d05-bc44-426b-96f3-834948c964bb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "96a9c4dd-9725-4d84-8780-70e62afa4fb1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e0a79720-1953-4a1f-80e3-8b97957f380b"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "84490e2b-f0dc-42d8-b245-35faedf87601",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f20da56b-0ebf-4ff3-94f6-8601c5c9d0c4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "514d1e7a-2f68-47b8-a2c4-47a3316b35bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3c5a3879-a681-4fdf-b0d8-77a2a4fc773b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6fadf54e-2653-49cf-b685-b33ababea2a1",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c6aec226-70b3-4652-a14c-f2c238542775"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "797a5d93-0b70-413c-b04a-0c8e419cee81",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6b32823b-7775-4ba6-9aea-68423712f88d"
            }
          }
        ]
      },
      {
        "id": "71eaf0b0-3b83-4d9b-86ac-8fd0ae13bd2c",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b85754f7-1592-4340-a972-2a4a8af5042d",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b676f42c-684d-4b99-b164-5d014a0efe40",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "78ee8fc2-3bd5-4499-8691-b46890a8a3ed",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "878b6bd9-bb20-46b8-8426-313344910f02",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16cad339-f324-46e1-85f9-7a37c3a16d89"
                        }
                      }
                    ]
                  },
                  {
                    "id": "25e45d4e-90a4-476b-aa75-881fabab51e9",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "826d7750-2afd-4f04-8bf9-4f222360d062",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7727dfc-1082-434b-8c22-7f6c52c7541f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dcbc45d-24cf-43b0-9b05-fce9127cd3b9",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42c69b6d-5f28-440b-81dc-d0449c73ea03",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ff25391-ae79-49e2-aa60-023bb1acf30b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c9c535b-4b5e-40e7-9810-36c7169a8274",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "887e2960-0b58-431d-9946-448c54c6176a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5a2b853e-5302-4db7-8971-7096aeefdd8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3473e341-14c5-4136-8318-1bb85f5ab9f3",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c406af62-1208-4c78-a3e8-82b7c796292c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9df506c7-9d8e-4f92-be61-9139eb45ca82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4745fc3-e5fa-46b2-bf24-da4eacc2710d",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "31d040fe-3502-4ced-b2f7-c7a7ca1f9707",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ebf5e8e8-0737-4d42-8a3b-60c3e65fbde5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3199d9a1-b7f2-4c58-a800-db4c753518e3",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3129400-4e15-4049-b678-67d2253d0849",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a9aab4e-d3b4-462f-8e26-69665e8de82b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "efca6a2f-f1ff-4622-8a6e-7eba04b7e2b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88bb7f1d-d6ce-4d49-a4e4-1017ce19d5e2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cfb0adab-0648-43fb-8070-26e66ca74c31",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "61ed2b2b-e3e0-4e64-9324-de5424d1f241",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3c5961de-f1ba-4908-8125-7e0d9cfee29b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36202b4d-2131-46c1-b7ca-735dd1bddb14",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fe85ee26-c5e8-4641-8aee-90f2867a3147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "661ce646-5e93-42ad-a442-d269cdad9c9f",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9e2abf70-1c46-4516-81d3-2bf9e6033a03",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e306a41-30a4-4af3-b367-a2160b511463"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c7863f-699c-43d4-96d5-c66bf3a6cfda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df8a304c-c16c-453f-9bae-67bed313f184"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ca73b58-173d-4482-88bb-1d33b0aaf04b",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d20edd1-9703-47b1-b046-a5b76e6b72b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "120ae192-4ba9-4e67-b96b-e9d8fb10c5a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c21ad70a-5844-42fa-8171-50b9e9585a9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "38abd5a0-73d4-4030-9791-73da689f45e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab31e62a-ec70-4721-bcae-d3628bd1f411",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921969f8-4bc8-4898-be55-a7a0061ff787",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ea1930a-1406-414c-9e43-e4e5b7c49f4b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ef448f12-1feb-4aab-9554-87ed05f5d635",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5225880b-34b7-446a-8ee2-b30807330362"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d32ea2ec-0a99-4c3d-a400-773e1ee61598",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92768a7a-71b1-496d-bb88-d82951314565",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6b523864-7c87-4374-97e2-efe901e65b50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9c5655a8-838f-48eb-9362-d8e92c10d09f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e3d8c38-d2db-41da-bc9d-4550084807bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed89e635-53b6-4076-91b6-cc8e0a0d4a2e",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17bcb219-f07f-4832-8e55-f2602609f620",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "00ae6756-383f-4ba4-ac6e-8131572bbcf7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9922ac7a-76c7-443b-97b3-63825e9ad4d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bc6f4899-d51b-4c44-b0c7-a214c5a303fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c8d84827-72b1-46d1-8670-2a4a3f6c653a",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "55220635-8df3-434b-8481-04089bd29088",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c7f91943-a279-40ec-a42a-4da5c377d89d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "465d240c-32b3-4307-bc47-26736447a41b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be9f44d8-2443-4452-b7e5-a3dca5fa068e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f96ae35-cd6f-456d-8f2a-dc4b496e82c0",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91bb9dfb-776a-423d-92a0-19851239312a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "436575a0-700a-4198-8305-e54cf3645a91"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "02e57323-c4de-4b95-938e-cb3a7615cd42",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7e69e907-73bf-4f4f-baf4-cbe13d059e09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b5bfe682-1938-4d4d-a2fd-fe1bb104e16d",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "445ae0fe-0bfc-4ceb-8696-b2f3b8f0adc1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f9791628-76c0-4287-97ac-b0c17b7f414f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ad130a9-4f1a-4422-a336-c17b1f8af8a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dbe2c5f1-ef56-48c4-a8e8-5cd029ab7eba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "65652249-d988-42e7-b564-8d16792402e8",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "719e2287-946b-4a46-87c2-d2ea0bcb325f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2ff6340d-8c81-4dbc-9775-06e941708ca8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4c24c7e8-0756-443b-a467-0d9645dbbac9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a621389-9048-4636-9c06-30f35632c65a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a4063d9f-0cfe-4ac9-8e74-17b5633944a0",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4548690c-17f8-4171-a3f0-18a9445267f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7b89e0f-a934-48e7-98d0-7cbfdf119850"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea01fccb-cf97-4e11-8aed-55a9253c65cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c7c7076e-0d63-46ab-b93c-1a23fa2fd007"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9fbeed00-32f9-43b9-8ae7-0f47bc869e3e",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "742c2020-a8ce-49e6-be7f-9730ba91a1cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80e6161d-0ae9-4e31-a16b-082726dc71e9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "505e9e64-5a1e-47d8-8fda-c443effd58b9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ce23b56-6129-4659-88e1-832d8eda0bde"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4bc0f2f3-80e9-4d56-b18f-de448cd82445",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "233e4f84-3abf-433d-ba7d-3705dbaa69f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66e104a4-7a08-4e28-9261-9b88eb8f587b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19a44ea5-7061-4e0b-b4af-33a9cd9322f3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "858489d4-17e9-4ce5-9f1c-2d99cfd9e9ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35ca1d4c-3fe5-495c-a09d-e0906ad3a8cd",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ced41e9-cfe7-4b8a-8a3b-deb701f4dc95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f265bfb-0afc-4313-a498-a9a9e46b6d27"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b9e8fa3a-7bb2-4a80-9cea-b33a8e6ac001",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "883bcd88-1f68-411d-850e-7ab52d702f75"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b6546e4f-047f-4e66-a5e6-28c7e6d58015",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0afc7797-b641-4757-84d0-2328ab886ce8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a9ad596-3a5d-4129-8006-b9b7e8b0e97a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2e8fcea5-e37c-4d82-820d-63dc70b2275f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26a52f02-4e34-4992-92de-8eadb15d6b29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d2f8f75-32c7-423f-a707-9c6b5f5c24da",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fac64132-059a-43a0-9838-434f92e80e88",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b06cd51c-4e42-4288-8a9d-cb9bb1417903"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a32564a-e908-40e1-b9fb-9b0db171b308",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "781fa54c-3c38-44de-bbb1-39c7a6167270"
                        }
                      }
                    ]
                  },
                  {
                    "id": "42ec74ea-8c90-426d-a051-a614b8b7752e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5a65580-f481-4994-9081-64f3ba2433a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "251c2dc0-ad99-4ef9-8137-733f0975b926"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "175f7d75-049c-4e8d-990a-e494fc075c68",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4fd0037-6979-4df1-b7ed-41f1cb889bff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c961e29-ea9c-4a88-81dc-c8b5dd829c16",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d5bd1977-91d6-423a-a2ef-9dc906558b4f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83f45b52-c73e-48e5-9432-1759bc297d1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "33249273-5b59-4dfa-8f50-293fa187f109",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "daab6db6-0b47-486f-bde0-9cc52e8c2edf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5643c2e6-5675-40f5-b253-5846d3c665ae",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25331e49-edf6-40d7-aee3-31b870538a94",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6a9ed23-3009-4912-a79f-0ee3bbe13a94"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e478422c-973d-4292-bf15-c5836cafdfc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bbbbd6d-b16b-4e19-8528-952f4ae9ebdf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "658eae90-cf0a-4372-9db0-704fb1cc7ab7",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8776503a-def7-4394-b95a-79b393b95830",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aec03a63-c180-443f-8f44-f4751cf3619c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a0b95a6-8459-4dd2-8492-969dafd53ff7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cb13e10-3e03-40b4-9606-a7dcb0c79c51"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adbe5c8a-e320-472b-b107-3b61022bd0bd",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9be4ed14-7479-4761-a072-e9f5749f2658",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14d312b8-f58a-4bb9-88dc-72107faf55c5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ece501aa-6095-4fcb-962c-353728f4ca7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1322bdc3-9e47-4f2f-a2b1-c5e957990d01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1254ef4e-cdc3-43f9-88df-b9d7af85321e",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3a7f4be-5a6e-49e9-b7bc-8268e00ee49b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "941d5cd3-3a65-41ef-96d0-4d398a7328c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e90b3c3-b378-422c-a1bd-4e44c8f8e072",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "766c0149-d101-44de-9c66-356c1e53d37a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36e46c62-0031-4e66-8fb2-d40086ddc765",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9707953e-bdf5-48b6-8adc-9bd2c5b63ff2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "aa556b77-1982-49ec-8c05-c807face6d96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "045acbd3-9025-458d-b0a8-e2071e493598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "20976c1f-7229-4432-be8e-39655a6faa2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61a3872e-bf5d-49a5-89a3-20fbe04da589",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cc2808b-1a36-4acc-9dc1-94560e1c273a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3de8e7ef-e148-4798-a7e9-6ed7c8f5dbc9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a04947e0-e2e8-4210-9be8-ed343a78363c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "465ed6f1-2f31-44e7-86fa-b8e423a5c595"
                        }
                      }
                    ]
                  },
                  {
                    "id": "faab3aa8-00ec-48e3-ab5f-eec83cd5be90",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6470c5bc-2e27-4db4-b923-d3395b6d93e8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "eb334551-409b-4ade-bc4a-171be44a84a4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5d015dc-a105-4e00-97a0-7e65c3db9a0a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65666f91-e692-4e7e-9b48-d0d59cc20119"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0c7d9f54-4377-47b2-9e2f-eaf288d56c98",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddec7ae8-4a3e-4540-b52e-a1a2bcedfca1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "909353b4-71d6-4e29-b12f-0639dca26e74"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ac5f5b7c-a92f-4105-b53a-228ec7155f8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e243deab-0537-41dc-9a73-84144d5a7a36"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03f2961a-1b1e-452c-a810-6feae441490a",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f96eeee-1fee-4a68-8cf0-7e2daab089e3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "90452ce5-a002-4ca8-a320-b24de9c3225c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4807f19b-729a-41b3-b6d3-957b40816c45",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7251d783-0482-41fa-94f9-174abda4f426"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89f699c6-7fb5-418d-8753-f9be0bf8c726",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "450b8537-c7d8-4544-906a-2bcfa751ca8f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65528e57-ef20-4785-847e-916840d40756"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8390cc18-a9da-4bcd-9c46-1719d11145ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ab35c36-23da-4801-81a1-d1a586a7a514"
                        }
                      }
                    ]
                  },
                  {
                    "id": "959c32c7-7863-4a07-a0f6-f1bdbef131b3",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a01d04fe-b9e0-4c12-b385-52e25a98caf2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06ca43a9-b4f1-4a85-8f84-509a73f11ab7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "476a960a-0795-43bf-b480-a9f0886d30a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f11fb503-4a23-4393-8f10-2173c236eb1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b2b1ca7-486c-417c-9a5b-65bba86e6dce",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c189c6a8-8006-4c86-9737-338e22749a5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4c8774d7-4833-4aa9-997d-ac58a3d061e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60c7719f-fbf8-4cd0-9d3a-88139ffdd539",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f89cace-ed52-492d-ab30-fce6078ad80b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cc7babe-512d-489b-ae10-4b844ac3efa1",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6ed4df9-6ed3-49fa-870c-b9cb38a2e305",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a115a414-f2ba-4fa5-bb5b-1d69d9411cca"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "61aeba85-a0c0-47e1-8d52-ecc14595ebab",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66fcbb0c-e744-4cf1-bad5-04af6af92fbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a59158cb-7bdc-4748-9cc0-f355ed60e9e6",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83c51b3f-4641-4a99-a87d-d439f50d6f75",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7287452-7d8d-4f3f-a38c-11d55146b210"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "376ef975-1638-4cf8-a978-567c88cd862c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b96471a-1a04-4a08-a932-5a637388a7e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df240d1-bba6-415c-9c65-533eeb913a0b",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8f9149b9-4cbb-4ebf-9884-857043d4f94b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d448f236-4d6e-4913-99cd-f1acbbefe158"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6e00dc2-8b31-4952-8ad4-6cc6017e3ecb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c9ce1d04-e3f4-4650-ab0d-63ff66f5b2be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "232aaab0-caea-491b-954b-1b656632b5d8",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6b8e408-4605-4037-8389-8ec8cabd2256",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0d13801a-eaaf-419a-837f-66288805bbdb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "acc9e440-8e97-4dd7-9c56-642113ccc4e5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3e2832a9-6da0-4402-986f-00c6aff08e13"
                        }
                      }
                    ]
                  },
                  {
                    "id": "44823f2d-d4d7-4d05-9b97-bf6696d81b79",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57619d96-c093-4549-9d30-39176006f44f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efa148e8-afb6-4421-881c-03332a70b221"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "10332570-cfc7-41d1-bf52-acf9056baefb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "45e80460-c865-4a83-8666-a9d1fa3cbbeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61d2fbb1-4896-4054-904c-85a36ddde35a",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab8973ba-c88c-4201-867f-beb700f50af8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c5dbff9b-18ad-4a96-bf4a-d9a58c87bd57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ec04fdd-6f5a-4a20-9890-db373c5b8d32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b814ec22-c49f-4b6c-80c5-24c5f279ee97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "343dbcc4-bf90-4b28-aba7-fc49be9d0cc6",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "224889fc-2d4e-47d9-88c5-d2368e0b15fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "380369eb-bee5-48b0-a76f-eefed4609ae8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4870d738-b6d4-4b82-bd0c-6b1bb9da5b82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c38abd2-4d7b-4644-97a2-df5805efc91c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15be9b08-6aeb-4742-8f05-606c2560cc5b",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a6191c-2af5-4c5c-8a13-0004c8a5d070",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ed288bbb-142b-432f-bcce-cce5454e6856"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "78d0ce37-da3d-40b9-81d8-834b53e61c3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72914052-610c-451a-a4ed-247390e78732"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e849e83-b602-43eb-a495-b30a084376a4",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c622cf5f-1508-49f3-ad9f-c76a7d8c660a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "99450b9c-3092-44db-bcb9-82ecbaaf9141"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "294d508c-8336-48e2-b572-4aefa7e536a8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7246d994-c07a-4b6f-b3cc-9451b133104a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "538f2f33-2aad-4728-88f1-ef7f7da720e5",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df0491d4-efa8-4ff7-b3f9-932162641188",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ad2b151-9f64-4b66-b5aa-0c0d811988aa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "486fb848-18e5-4134-9e71-66c01f8ab3ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9100cae3-b1a9-4c6e-9c53-920f9f58afbf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5516517b-5ef0-431a-aec6-dabe5b806b69",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "05892b77-6a50-46a3-b4f5-4742fb467562",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06db8b87-0afa-46ef-9cd0-de03504ce933"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2cbf4a0c-f214-4c93-ba14-da54b907aa06",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "044e3979-c78d-4ba4-b30c-c3816f55f48c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92d5b612-4b3f-49a7-bca0-d7b80218d3b5",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b3bc016-04f5-4a38-94b8-c7b10806d437",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00c627bf-dbec-44a7-be3e-eeeba3dfed58"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "eb92c70b-5233-4dea-80bd-602ea334994e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e79e268d-1885-4e8c-a229-7736e059a2f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61944eae-0939-44f4-bb24-194ac6ee1e91",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8bfede9c-d060-4a1f-87c1-56aa75e8ec19",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5579c46d-976e-4769-a169-944e771e10e6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "18c22019-e9de-4c00-8270-508f5fb47915",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "96603dd3-0247-44a0-8efc-886b0f1e9ee4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ccbe78f9-f8a1-48b7-9e6d-a2a004b37279",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab98c56f-8d8b-4a9a-af3e-496cffb0ecbf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "214cf891-7c3b-4e23-b64a-8d9c1e1007ba"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e8adcd90-5403-4934-a582-90ab256c6b25",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dab2e13f-95f3-4c9e-86e8-589a354f4523"
                        }
                      }
                    ]
                  },
                  {
                    "id": "59999190-3f22-4dcb-afcc-1347d16aa9d3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56648ed2-848f-4909-8a68-691db397bd36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba166e2a-8e0e-4691-88f2-fc1876b1defa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb29c9d-6147-4f6c-a7e6-92653ff03c7e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "550b8556-7514-4a06-b643-3747f7d7baa5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "594e2c73-6436-46af-9268-e566a5bd3ffb",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22f0f82-7d59-4e5d-b22b-ae1cbd512f09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "68a9a004-cb3e-4b9e-b5d5-f5de3f7f526b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31076ecf-3913-4ff9-9a1f-b2f1d00b0a2d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c321500f-e8fc-47fa-b588-fb2d4680b05e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc558a2f-8da2-47bb-bdfb-21ec8db5e317",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6437f04a-fe85-475f-b771-4716d401aa7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e21045ed-a82d-4a53-a609-2179edd2e343"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5fc34174-88db-41fc-8898-c7ee917069f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7454a898-2652-46f2-9da9-48ffdca63b46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6dc4539b-a930-41de-9ab6-ff0371df4d7b",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8ca0b081-cae5-485e-8c8f-822a5e2903e2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "49bd69ed-138a-410c-adca-38ea4ecd88a7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5364767-83e2-4881-a7bb-8077cceeac4e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "11e4479c-dc36-457d-b542-0556c12a2db3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "09550d1b-5643-4590-a322-2b5c4ce68ebf",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ab7d7cb-ba54-459e-9c61-892f844c10dd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "170f5222-4823-4065-8886-fa4157917ece"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "569ba0fc-c342-4a7b-b07c-8aaec33ba3ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef8e7466-b035-4cd5-9a54-1d47c78184a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d95c963-4bee-4a3f-b018-a2d1d6b1cd99",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d2c0f3e-f01c-42ab-9b08-931fee0bbea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f51ca608-3cdc-4d0b-9082-5dd8845dc408"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d68573cb-82bf-4ffd-8d6c-f67040dcc450",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7bdd27b1-e426-4af9-a4bb-1e6310e57918"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84fab11e-012f-4985-8710-9af866b9b51e",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f3afe50-8fe0-468b-a951-d1d2415f0536",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3d5e518-975a-4376-97a9-c4b8277ce816"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c5d464ed-688f-429e-8830-0a492fea1dcf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6fdfba36-6743-4a9a-8e22-d573fd9549a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ce27152-fa9c-4622-ae0a-8ba981ac493e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39c66bdf-62be-48fd-bc7a-1eb8f60b7897",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a5cd542-d197-41ef-be02-6450398e1f36"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "418746d8-efb8-45ba-a316-55799c0172d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22cbda9a-6b12-4c24-96ee-7f6f590c841e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76c8d379-22e0-4873-809f-baafc9c28cb7",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aebf7469-d53b-4f25-a7c4-3cd1b98acb85",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cb5072f-5558-4eb4-a0ce-25179f2cc46b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "023422d1-abde-478c-8771-eb927ad7bdd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e84e933b-129b-4504-bef7-788ea2c26e3c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0b8de69-a31c-4d82-b07c-21239d3a2062",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "17c98846-8645-4ee8-9c74-c3ce97d7b9b4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ff40745d-f3ec-49c5-9b36-b1dd99b2dffc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a05b130a-06b1-49b3-bf46-502d3b22ef53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4b4a11b-9e2a-4b4b-aa9a-ef21de73964d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "264182a3-a37f-46e5-93b9-b13143c6d104",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9839ede7-3da7-44a9-9c44-7ab2106f0262",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "47fde170-fdc4-472a-bb3d-633ca882aac1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ab9c71d-8b85-4862-ad27-f298759f9257",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b73a01fa-30ad-4af5-bde5-b011dbfd98bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d54c053f-602d-4354-aaac-c627c1225894",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "312e1cd6-ada0-43a1-be81-c3006bf91598",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fc3ac64-9bc3-4b20-9775-8a2145a54fd9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "29b44950-c527-4130-b281-23df26922012",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92f02f14-6c9c-4772-b1f8-ced35e2bc346"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9be81ebf-db9d-4a26-ab1c-de54a8236b6b",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "71d82d4c-fe03-43f0-8b96-92a664698b20",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "83539bd7-e8d0-412d-8bee-db80951839bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b020d84-5867-4340-9865-b106a4966ce9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1b18bb1f-cc99-4fe1-a23d-28d72983af2a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d14eb5f3-8f59-4c47-8221-f926cae26abf",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7875bfab-dd44-4af0-b0d9-2029ea8eb4ff",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdb16ad6-b2d6-4ab4-99a4-dcd79c6d789a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9ecd96cf-f21b-4eff-a56e-c4ab7ef4357a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1362f255-4022-4c80-afc8-d37da477452d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "018c885e-7a1a-4058-a7fe-936be717e71d",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec7de36c-549e-449b-b0f6-a0b7f1fe41f6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "81e81edb-d5ff-4697-8e18-d6d6b7dea224"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b91cfdb-09ca-4ba0-996d-593734948842",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ac8850a8-fec0-45af-a919-9a7235a26f90"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16c2d63a-50e9-4125-8d83-f4a74abe3449",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1e8e45ad-6f8a-4d73-9a87-5f1882f75497",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ff3f180d-7f2e-4356-8cbc-0ac0283802cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e6b4c2-6076-411b-8462-dffd91579ddc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3cc7e4c3-5f22-448b-8ce3-dba5605a251e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3f7ff22c-3b22-4d4b-b8b6-07f622861983",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f60929c-166d-4903-8e8e-f3ab164c68fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c0de18b0-fbc8-4c1e-91d1-0a523759f58f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dac2d72a-1d6e-4acf-92d3-2de23b81b592",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9af20e89-8719-431b-ab52-28b06e1f47b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d8086412-c870-4e75-901c-746d1c8979c4",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cea3b0bc-96d6-4fbb-a8b0-7c44bdc29db7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "de522724-4342-469a-bac8-8de51c4a0c0d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e682aa46-d9f5-47d2-807a-a56a089018bf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "698c3181-9ae6-47d2-a79d-58a747f7a34c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6f01de3f-0a6f-4eb9-9d1e-2ca04f631a10",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6b80a88-f557-41e2-8696-9f7c9eedf73b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9a106535-fac5-4843-9d9f-3f9542b787e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ec458954-1b1c-4b38-8e78-a6a1667298bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f4a446f-4ef6-4ff3-9933-e572515da40f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33250624-ed50-4c74-8359-aa48361fd9b5",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "12362a81-4138-4102-bb19-4f16026691c0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ce29a63-f863-4e5d-8004-9e8224669d29"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f892e36f-d64e-4eb3-adc7-f5aa3baa54af",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9fd91225-9e62-4227-827a-dc65de31c3e6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d8cbfb4-0408-4e57-83b3-b32ad1de35d0",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df331c7f-1178-4bf7-ac76-8916ec947ce7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e316bc71-a4c7-45b3-b796-43eb508bed5a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "46e27521-fa76-47df-aa44-63188f36bb73",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59875c25-5d85-449d-87c9-eb5b64831e6c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aeacf05a-d8d0-4579-b5b2-735538440dc0",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c17676e-5058-43a7-95dd-8ffce18c36b1",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "94f0a481-fb65-4941-8fdf-d7e1e1b9d168"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b545be0a-760c-4815-af0c-b24e3c513774",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "115d3da4-bc77-4f01-96df-7bd83ca5c416"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63c625b3-4f2f-40b9-b171-197151fe8fee",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c7fdbb12-da97-4201-95c2-d552e0a14d2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5441e69f-9556-4761-a17b-50670b72d0f4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "481f23fb-cebc-42c0-870e-84068c3aff09",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5d8ba922-0f43-4e46-9d10-48e66b361ced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7fa41a97-9e91-4ac9-b78f-0577cc9fbccd",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "96389a0e-8c77-4faf-9edf-e20572bffa7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a7013dea-968b-4de1-873e-54430e829c87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "803b37d7-ce2a-4e4b-b66a-cacba47c9f23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6784a0b9-a935-4e40-a5e0-e359a16dae04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3a7f4c10-3eb7-4fa3-8aca-19e19397e681",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae0866a-b653-410f-b6d0-fe65bf8007b3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a8655dc2-98a9-4a88-8cf0-ed035d894213"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b975639-9380-47fa-a35f-a21d5f114312",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "156275e5-9ca8-4897-a68c-56f9bfdd1501"
                        }
                      }
                    ]
                  },
                  {
                    "id": "17ab05b7-f8be-4eef-b5de-49c66bc3a4da",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7e825516-91c0-4d33-9ec5-06dfe912d929",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cd165c3b-2602-417d-89da-47d4433e82ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d6521da3-7698-4847-a61e-e6a6dd80ab7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9292d9ab-0791-4a04-bd5a-7d01814c96f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d7dd4730-6eb5-41e9-93b4-70e80085c7b2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f142d1ab-681f-4a41-96c8-84bc6bd444d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed5774f7-89cc-4c75-b408-d06f8cd123ed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f8e3787-eb80-4408-ae8a-43332f52644b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "29220899-5fb3-4bca-962f-25365f26b391"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8fa0db9-6d98-4dbe-ad86-f217d0baf099",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7d09588d-e9e8-430e-805f-cbc7ab7d9756",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ee2f86b5-2912-498e-b26c-51962f758bbc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "333dbfc0-1926-4399-817d-84bdeb691dbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9d884603-d44a-4042-9357-a6722d98c1cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d20deee-0dfb-4e60-8045-5d39292e79e7",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5848de35-96d8-468b-bab2-5c91f13c01dd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3241f9ac-f39e-45db-b886-be3e4ef7c893"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89f371bb-a53f-400b-9216-79d1d28fb613",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bf2bf1b6-6f99-4e0f-a590-c3c0fba79421"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64c0d87e-3c37-4d49-a6d5-3325385f3232",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e00cd443-373b-47ac-808b-502debe654d7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a9d89777-869f-4364-8f7b-5f1adb1fcd37"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc041a58-670f-4820-90da-51d5e50bf9b0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dce1701a-ca42-4fa3-80b1-69a65edf566c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b859c3c-70e4-446a-bd62-536926857e0c",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57dd190a-0364-4277-a5a1-320fcf88fd67",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78a69136-8218-4517-a0f6-f8b0f462c5fc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59cb22a4-1ce2-4e63-a88c-6bc97ee850ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "70abaac1-422b-4969-aa95-9175fc0c023d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "514d174a-d213-445b-b2d1-d76a5d84162d",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddd58da5-c90c-478f-a77d-9b3a1b28a618",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e6977538-90e7-42c6-a2c1-1d4e8c8d66a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d92d923-7843-4abf-9675-2f1179ad663a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "19ac382f-378f-497f-9559-d393047e8d84"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e652ea2d-1fa2-4f4e-8f2e-32832186a7de",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cb8033b-c894-4626-9eb5-529adda72345",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f6598542-6872-443b-99e9-613c4e494cb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d424350-9531-4022-a0c5-fb7188caa288",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "59017edf-998a-4132-9848-9fe4bc5cd478"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ecdee310-150b-4be8-8617-36b9f0073200",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "253c0ac2-7e0c-4fb6-9531-e10cd3137463",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "78e40655-699e-4a26-86a7-ba917d58863b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f02104f-5594-43b8-a885-5ed7897e1f5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "750969d1-343f-4a81-be79-5b304f8494bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "54e266bc-404e-422c-a89f-54ca06daa9ab",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d1d619e-a7a8-477c-b56b-6190ee51ca9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "27623621-d2ef-4ab8-b0a3-1b891e8096ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ff313c3c-465f-4019-a2e1-016f4171d02d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "506bb20f-bf99-4088-bebd-f5ddf737d881"
                        }
                      }
                    ]
                  },
                  {
                    "id": "688a78f6-8f06-4eb9-9681-f1cd20d537cb",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a746231-58d1-4134-991f-257a88c4acc7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e1797dbd-9627-4558-92c7-ba71b80b376d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5758dfe-08b8-4dbf-b26a-cd8f31fc9084",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edfff5d7-89cd-492e-8726-03b2f2d0e113"
                        }
                      }
                    ]
                  },
                  {
                    "id": "01b4ea1a-53a0-4fc9-afb5-c74df059f804",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b8e2be6f-d487-42fa-aace-0b8ba0d1f5a2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5af91409-b71a-491a-bb5c-4984238d7317"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f664ac03-cfc9-4e73-b5a0-d41e0b71e648",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7393ae9d-fb58-4c27-81fa-ffcf0202175c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "62f4e761-2125-41d4-be86-c2b5509d6558",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a27058c3-286f-4f32-9520-6a6dcef15314",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ac47160b-b43a-4013-9d35-3ae01f6f14e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "77d8785a-c46c-41bb-82be-3ac99855ce37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d4781b00-ccb1-44ff-abc1-6b6e772015af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a81fb68b-9e40-4148-a7e9-3917046a235c",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f932f6b-b67e-4d36-975d-9d7bc8a79800",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "708119c7-6900-479a-b3c1-17c6242bbc15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a9ab8fc-6596-4834-8be9-161c70769d65",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f3120b81-03e2-45e8-80eb-6f39097d7023"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92e155da-7ccd-4122-a96e-9ade7dd84927",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ab6af148-850a-4492-93ae-948b0d4ded32",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4537ed7-f0da-4c6c-ae2e-7e63e9243f8e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3818f0-2b47-4483-bbd9-3b40af8ead97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "712b8204-8eaa-4d9b-883d-c5377973f605"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a244f6c2-2792-4522-a0b0-804bd12398a3",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c3f4696a-fd00-49c4-8155-74faf214be91",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c9154ab8-bf40-4f83-8908-a0ab60794c96"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "466680e2-691a-4de5-931b-078218f89758",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0bc15bb7-f425-4439-8806-3862a161e844"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4967c7cc-ceca-4171-82e5-fff7fb8423ca",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a46a711d-1fe3-49c4-9e82-b7c6aae24358",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1031432f-369b-4ea8-b625-8a598f7c100b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "86383489-659f-4fd7-84ae-a2426a62bbc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4306f10b-f0a4-47da-902f-fbe748b81a9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fd6ea077-fc46-45e0-aac8-74be780e1535",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "af509a73-ace0-486b-b99f-a2d0870e0705",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "29abad26-79cd-42c9-90b7-257fffc12cf5"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c576bf8-f78e-4437-981f-c7ad6c1430c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c2b33ce1-8432-444d-a761-ae82dad47b1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bea214e-fa88-450d-a5b1-0e9827306ed3",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "41dbd57e-775e-41ec-a5a9-b731a57f3dde",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d0d2c451-191d-40f6-bb14-73cb3b420c2a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "070c7a56-4d27-4504-86b1-ace2f077759f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8b1d0d6e-aa7d-447f-b945-c141b47de1e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7ee1e406-9497-4a6b-8036-0cd804e75d5c",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f362494-85b3-42e2-a314-f3ed8f4b95f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "468d020a-165a-4d59-aa32-8a113f1aa2e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d479dca1-2cc8-4629-96c1-a86a72435051",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1cfc8ae4-2b8b-44df-98cd-22a8be396708"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56e0b12a-01f0-4777-ad86-2bbd20c0eec1",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef6fee07-03ca-43bf-bd6b-624ab59a261c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd84e4ed-06c5-44c2-a289-071c0d2ea0c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f4c8bc5-1162-4133-ac27-2d9257b7bfda",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f3c27829-5137-4b02-a350-b2c42339d5c6"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "203590ba-fd0e-439b-acd7-fc011ebdaad0",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "648fc21d-1013-4845-8b60-8c571ed2f993"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "9d87167f-e31c-42ed-a18c-729398654b99",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f6a76922-5f40-426c-82a8-bef919afba78"
                    }
                  }
                ]
              },
              {
                "id": "c615429c-4b33-4437-9089-12425b0a2b53",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "36d04683-bf60-44ce-be44-eb876eedeb16",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0511b7f3-b73b-458f-b64c-c1370fcf310e",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "b03b676c-2b6e-474d-90f7-61d80057c6af"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "530e6128-e187-4e82-ad6d-fed108359581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "38aaca51-6415-4d84-88cd-88ecbbcf8d2c"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "affc2768-3174-4726-aa66-3373d7573745",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "81b8f62a-5862-45a0-815b-1d62c6643949"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "e60e96a8-982b-486f-9b06-e23b28c9dfdf",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f922dbcd-c045-4abf-9965-728e576637d9"
                    }
                  }
                ]
              },
              {
                "id": "37cc7ba0-36d2-459c-9bbe-e10366a3a800",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "ec8d061a-62d8-4002-89c8-5a38b0969453",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "928da735-f23b-4f0e-b06e-50062a392817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "97d50989-e8be-45bf-b5f7-5c3ea7545efd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb70460-9170-41f3-9944-a0a7b0527784",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "22e86db6-117a-4513-8247-9fade83e1633"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "edaf6e26-8413-40a2-9689-8fc502bb7a9a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "954cb876-9444-473d-b005-1eb36af4e82c",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0290c096-1f3b-423c-98b6-86e3a3b7ccd3",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "677f097a-3b07-4bcd-8d1a-e3a82f90b993"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6fe6700a-9895-41e7-bd7a-06663a73175a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "75df4722-0766-44b0-8ab0-27d07156091c"
                    }
                  }
                ]
              },
              {
                "id": "4fea758e-d937-45e5-8c99-f079da499a3d",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "bb305965-01dc-40f0-b58a-e8bbda254273",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "4dee5724-1a0a-47ef-ae81-0b3a98365a00"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e99eb5a1-67bb-491c-8a15-93c0277542ed",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "f9a6caaa-5205-4672-b605-a82853d6e1ed"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e4305405-d2f0-447c-92d2-16dcd3058af2",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "07f6902b-3681-423b-9489-59fcf7b774ac"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "633d2d7f-a319-431a-9775-4f857a28f2a8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "bad31ba4-aa32-4786-968a-83106ad0342a"
            }
          }
        ]
      },
      {
        "id": "56366be0-c9f1-4968-bc9c-f09cfdd1172b",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "3805ed47-e583-4094-8bfa-a0989ddef6ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "2ed213c8-8c92-4d0e-b2cc-9d1e5951ab18",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "859424dd-2fa4-4b98-8208-1aa556ea84f7",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78c9b19-9797-4561-b959-488c42adcab1",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "a131439b-cf52-4999-aa2e-adff7b41b9e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4efc628c-c986-4d1c-afc4-61526f1c18e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "438205ce-b76f-4dcd-bfb8-68c654ec83be"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "2bacf8c6-6ac1-4b53-bab1-18d853786185",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4296ca37-7a41-4953-994e-b6cd3a487407"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "13cfc22c-f51e-41a4-ae77-0b64906a8dce",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9a78cc70-52a3-43aa-9980-c0f59bd0581f"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "99d8ff86-46ef-449f-9161-e8c81a84f5a3",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "58a1541a-9a76-4c63-afd8-522130d6ac10"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3dc25c31-e61e-47b3-bc78-a3561f6ef99f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "e22d9c5f-a74e-4bd1-b66a-561d02e9f4bf"
            }
          }
        ]
      },
      {
        "id": "b8025f95-4a78-46dc-9762-b39fae0e94a5",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "77dab834-2274-4db7-8c9b-e3347a5eb291",
            "name": "Negative Testing",
            "item": [
              {
                "id": "97199e4f-5221-44c2-a040-a767818d33e3",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "87f4fdce-b606-4f5a-876b-436588cc825f",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19adc14d-b43f-4234-ac94-48e32c6a6e43",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "9f488133-844a-4748-8d7e-f69050d53ab1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "399d425b-8c75-4d53-b0bb-f9def82facf5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b06f86fa-9826-4862-9f2d-930195dde206"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1f60b24a-f225-4116-a8cc-5811f4ebdb1e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9b9e20d5-f31a-4c83-81bc-d1914a5845f1"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d66573c8-f195-466d-803d-a16e9ec4308e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "024cfca5-6058-445e-b87b-0c24a928604e"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a339fd2e-63b3-47bf-b04f-c725094ea766",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "b421a5b4-2b6f-4856-93f5-7584db23daa5"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a5b68c24-6bc0-46cb-bf4d-5c4ee4635b3e",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "30b45942-424d-4c6a-b679-b5829d044d45"
            }
          }
        ]
      },
      {
        "id": "da4065c8-26f4-4256-a14a-afbaf63e22d8",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "2b300240-ded8-47bb-b352-8a23f4562182",
            "name": "Negative Testing",
            "item": [
              {
                "id": "21586ee2-0df3-447e-b70e-8cc981a0474b",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e76da008-bd7f-4df1-a1a6-c7c73f153e19",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1ae05427-39b0-4b28-8343-62fb8207ee74",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "595da9c0-c3ab-406b-97e7-3a8f1bdc1a2f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "08979289-5a31-40fc-961e-20f343423987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "37ac5573-e941-4e19-8fe4-c5c7e714bc3d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "796bf457-b737-4379-a24d-7f1cd0c6c45e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "e96797e5-97bb-4965-8594-afd5957e62c2"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "78dcfba4-5897-4d3c-b198-b48b044f77bd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ae103e73-69a0-4585-b04f-5c168bdeeaf8"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "45903e24-7e96-4f28-8d65-fa1b76c606a7",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6cb0eded-b0e3-4c2f-be52-867f054fc0ff"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "39f76dc0-a307-4aaf-81ed-d49f53a48109",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6563abfe-18bd-4189-9ea2-1e89b1e05c21"
            }
          }
        ]
      },
      {
        "id": "95620124-d9f0-4273-b412-611630935c01",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ee36adab-6844-4f39-945d-1afc0837fea9",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "9c4fcf8a-1ece-463f-a837-39ae4f9c714e",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "0d8b56ab-3e88-472c-a897-6547995e3309",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "6c1814cd-dc8a-4c8f-baf5-5ac30d2fbc35",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "58b5131a-2b35-44db-9bf7-efb8b4f826dc",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2091,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 285,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 283,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 573,
        "pending": 0,
        "failed": 77
      },
      "testScripts": {
        "total": 1050,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1041,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 66.98245614035085,
      "responseMin": 6,
      "responseMax": 568,
      "responseSd": 65.18811947190343,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1711240660033,
      "completed": 1711240688420
    },
    "executions": [
      {
        "id": "d048fe4a-db9b-4941-bffe-251a3aeb8108",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 283,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "621c3f1b-cea2-44a9-a74b-a90210380ee3",
          "httpRequestId": "7f3bd6d5-599b-4a0b-8dd6-f3ee08b8a1dc"
        },
        "item": {
          "id": "d048fe4a-db9b-4941-bffe-251a3aeb8108",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "f4d2f0db-e317-4052-9513-712a495a5754",
          "status": "OK",
          "code": 200,
          "responseTime": 69,
          "responseSize": 0
        }
      },
      {
        "id": "e923e2e1-0897-455f-a5e5-4385191513a5",
        "cursor": {
          "ref": "2d954948-0ab6-4e75-922a-95ee06565a60",
          "length": 283,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "f49c3c1d-b3d9-41e5-b342-f26164bb775c"
        },
        "item": {
          "id": "e923e2e1-0897-455f-a5e5-4385191513a5",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "a420dd48-2133-431a-9e8a-6dab1ba2f204",
          "status": "OK",
          "code": 200,
          "responseTime": 6,
          "responseSize": 0
        }
      },
      {
        "id": "89e713de-8547-45fc-8703-8a10055ba6ab",
        "cursor": {
          "ref": "f68ca7c5-4103-4751-a2b3-8ae716ab48bc",
          "length": 283,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "5c38313d-b44c-4159-a9b3-9122064066c0"
        },
        "item": {
          "id": "89e713de-8547-45fc-8703-8a10055ba6ab",
          "name": "did_json"
        },
        "response": {
          "id": "0d9771fa-2f32-45f7-aacb-e8a77e0f2f2b",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f37d23-531c-49fb-ba5f-16d9b5347977",
        "cursor": {
          "ref": "d8371176-947b-40b6-a738-b4146f02df72",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c125f306-1078-4a5a-b642-63010ebbe626"
        },
        "item": {
          "id": "62f37d23-531c-49fb-ba5f-16d9b5347977",
          "name": "did:invalid"
        },
        "response": {
          "id": "e6d55d6f-e5e8-4415-8c16-95505f659196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f37d23-531c-49fb-ba5f-16d9b5347977",
        "cursor": {
          "ref": "d8371176-947b-40b6-a738-b4146f02df72",
          "length": 283,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c125f306-1078-4a5a-b642-63010ebbe626"
        },
        "item": {
          "id": "62f37d23-531c-49fb-ba5f-16d9b5347977",
          "name": "did:invalid"
        },
        "response": {
          "id": "e6d55d6f-e5e8-4415-8c16-95505f659196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 59,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5485066c-1183-4de3-b3e8-b71044108f03",
        "cursor": {
          "ref": "59225e3a-8538-405d-a9be-5fda2e9482cb",
          "length": 283,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "63988a9a-e1c4-4a7d-8abd-ef88d2a29448"
        },
        "item": {
          "id": "5485066c-1183-4de3-b3e8-b71044108f03",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "132c5aa7-c762-4450-a99a-af4d5fcf5a45",
          "status": "Not Found",
          "code": 404,
          "responseTime": 156,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7866b2f6-4a81-4c5e-a1e1-899519e6a2b7",
        "cursor": {
          "ref": "d33a10b6-c07d-49c8-9a39-1697344a984e",
          "length": 283,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e059f1b2-90e5-433d-a6ee-4bfb4683f9d5"
        },
        "item": {
          "id": "7866b2f6-4a81-4c5e-a1e1-899519e6a2b7",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "867a23d0-5291-4833-85a2-cbd801ac82f7",
          "status": "Not Found",
          "code": 404,
          "responseTime": 64,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edc7b07a-f857-4a91-bda1-bb802829e7cc",
        "cursor": {
          "ref": "21f077b0-ba55-40d5-b77a-1392916e311d",
          "length": 283,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2246769b-b9fe-4c49-8ffd-498cc89b7e15"
        },
        "item": {
          "id": "edc7b07a-f857-4a91-bda1-bb802829e7cc",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "5d5222ec-3306-442e-b129-73470d654f22",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 42,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7f607a-c609-4062-8d65-db5fc32b9639",
        "cursor": {
          "ref": "7467e4ae-e4e9-440b-9d4e-4b84b3ce7800",
          "length": 283,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "2bf60ee2-12f9-4bb7-a64e-efca2dde39ef"
        },
        "item": {
          "id": "2f7f607a-c609-4062-8d65-db5fc32b9639",
          "name": "identifiers"
        },
        "response": {
          "id": "9adf202c-2c9f-4d1c-a57b-a5297b976a80",
          "status": "OK",
          "code": 200,
          "responseTime": 92,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3e7d138-dc7b-41a3-ad4e-a02540dadae0",
        "cursor": {
          "ref": "0f2fb6fa-d08f-496c-8510-fa3046b16fd2",
          "length": 283,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "5c5781ce-a45d-415e-be2b-55f49abba917"
        },
        "item": {
          "id": "d3e7d138-dc7b-41a3-ad4e-a02540dadae0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "93641ec6-0dfd-410d-b357-4c99d3b1e515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54ecc378-145a-4788-a738-cfd9e48837b8",
        "cursor": {
          "ref": "7dc137b8-7596-4c47-bcdd-8a0e65f3abf6",
          "length": 283,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "8ab21573-d425-4a7e-94cb-81ff4e8ecc96"
        },
        "item": {
          "id": "54ecc378-145a-4788-a738-cfd9e48837b8",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "74452c5d-4f23-47ba-9dbc-4c13efe2206e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a61b4bf6-5a29-426d-9808-0f655ed229e6",
        "cursor": {
          "ref": "f386df1f-46cb-4a0f-979c-54d6088ac060",
          "length": 283,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "a02b95e7-7a89-4038-acf4-307972d11c71"
        },
        "item": {
          "id": "a61b4bf6-5a29-426d-9808-0f655ed229e6",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "54c92358-8d2f-4ed5-bf97-e30fd1168e92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6a1abbb5-2066-4e90-aa35-63369231c681",
        "cursor": {
          "ref": "8208d03c-8a53-4a24-b697-7802beb4eef5",
          "length": 283,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "3de8deb3-4f5e-4e7e-9dd2-e0a393fbdaed"
        },
        "item": {
          "id": "6a1abbb5-2066-4e90-aa35-63369231c681",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "b77ad7e4-9a5e-45a9-bd4c-1c5b72ffe7aa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a5464b14-fdf3-47f4-9660-5ce3d6755a19",
        "cursor": {
          "ref": "687e62c8-6c08-4136-a8b6-f98e427be69d",
          "length": 283,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "2638ef0a-a341-4b41-a8f1-9ea8f2e2a7ba"
        },
        "item": {
          "id": "a5464b14-fdf3-47f4-9660-5ce3d6755a19",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "32516b4d-8be7-4968-bb3c-68a4c5d5ad99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec61d6da-58bf-4bd6-9640-c2ec48441f97",
        "cursor": {
          "ref": "ef1d2817-cd37-4b87-b2e7-0e0dc7a029fa",
          "length": 283,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "74c2fa19-9cd2-4d71-90d6-3bb491881afe"
        },
        "item": {
          "id": "ec61d6da-58bf-4bd6-9640-c2ec48441f97",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "40d38f2b-9d3d-4270-a6f9-18d8243589ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "284f0bb0-e6b2-42c5-96ee-aa7d2bdf8f55",
        "cursor": {
          "ref": "a5606bff-9bc6-401c-9e04-cf981b058e10",
          "length": 283,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "82e8d06b-2b32-4b81-85b6-dec3f30699ec"
        },
        "item": {
          "id": "284f0bb0-e6b2-42c5-96ee-aa7d2bdf8f55",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "a5617366-bbd9-437c-bb6c-7a3080cd6f05",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cad42617-5473-4095-b957-48e5848e38a6",
        "cursor": {
          "ref": "87aeccac-5e86-4b4f-af3a-76c7e1fe50d2",
          "length": 283,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "8b6edf42-030c-452a-9439-8a7678ae068c"
        },
        "item": {
          "id": "cad42617-5473-4095-b957-48e5848e38a6",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "f4d1f0ba-a932-4b97-b34f-11b93433a13f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0614ac9a-4248-4573-a33b-a7b7e4baa9b9",
        "cursor": {
          "ref": "1a1a6cb3-63ed-4e49-8990-0110351d277e",
          "length": 283,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "dd56ea99-1b65-48ba-9d26-940aaf646dff"
        },
        "item": {
          "id": "0614ac9a-4248-4573-a33b-a7b7e4baa9b9",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "de91af1c-b3a7-462c-a7fc-0be895c6def1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6db310ad-42d4-4e2c-87aa-ce26ebe24902",
        "cursor": {
          "ref": "066a417c-71d1-4f2e-8a02-fb9e29c90fbe",
          "length": 283,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "c32dc0ae-a238-409e-812f-392d1c7e3066"
        },
        "item": {
          "id": "6db310ad-42d4-4e2c-87aa-ce26ebe24902",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "99611b95-c52f-4ace-9a0b-8a3a90fa8f8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13029900-22cb-4ef6-bf2b-edb0b7463dec",
        "cursor": {
          "ref": "2d6f4f66-e48a-4a3e-ab69-c8261a972020",
          "length": 283,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "34506012-5d87-4f46-90e3-33069fa76db9"
        },
        "item": {
          "id": "13029900-22cb-4ef6-bf2b-edb0b7463dec",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "0962b5e8-c9cb-4ec1-933d-060cedf63e2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "51460a4a-61f7-4630-9f97-8f33ec123c94",
        "cursor": {
          "ref": "4e5d7e8c-e4c3-4b95-8cc9-d32b54a8b934",
          "length": 283,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "6612d342-030f-40a3-9ef6-2dee37170a69"
        },
        "item": {
          "id": "51460a4a-61f7-4630-9f97-8f33ec123c94",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "ee3ddb11-5f7c-42c1-a778-f8ddae5dec14",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d46b07ca-2564-4c22-b6a2-73097067d632",
        "cursor": {
          "ref": "14a588d6-d9bf-47df-b389-29638a3f3d1b",
          "length": 283,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "639e5f2c-aec9-447c-a3d6-28bf00287977"
        },
        "item": {
          "id": "d46b07ca-2564-4c22-b6a2-73097067d632",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "738a3df9-40be-461b-9347-f5b0cd86d3c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1f34d88-82a3-4de6-8fbb-2bd46f69b311",
        "cursor": {
          "ref": "1fedd418-4120-49f0-bde5-d3a27f829200",
          "length": 283,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "2af1fd7d-c9c4-4a39-aa46-c1e856c9b371"
        },
        "item": {
          "id": "b1f34d88-82a3-4de6-8fbb-2bd46f69b311",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "2ab0fe83-c521-475f-9ca9-597724faf33e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2b57d5e9-3f3b-4e0e-93f3-8955abc5de87",
        "cursor": {
          "ref": "17c5b5fc-fa55-4f29-9057-54801a5e26f0",
          "length": 283,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "5fe064cd-51d8-4174-8710-27a79baa5921"
        },
        "item": {
          "id": "2b57d5e9-3f3b-4e0e-93f3-8955abc5de87",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "ec1a6f6e-a336-48e6-bca1-206bb8ce62c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "75a4a48c-4eb0-445c-be9e-9ea5ad67d828",
        "cursor": {
          "ref": "814df0cd-b91e-4b62-a329-a8477ccfc4e1",
          "length": 283,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "9659c894-4d41-46a7-83dd-19f5a81a2bd4"
        },
        "item": {
          "id": "75a4a48c-4eb0-445c-be9e-9ea5ad67d828",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "9a17adbe-53c7-4fee-a8e1-4a1f8f71874c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c03c309-08a5-434a-99b8-f3f7d2578229",
        "cursor": {
          "ref": "a1baa08e-4613-4b5b-882b-a22177e948ec",
          "length": 283,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "d0b1dbb3-bccd-4684-8046-8da0e9d09f71"
        },
        "item": {
          "id": "3c03c309-08a5-434a-99b8-f3f7d2578229",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "9fd447e3-180e-4013-b30a-4bc6762125ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b538839c-53b6-4285-b522-2d088eabfa86",
        "cursor": {
          "ref": "9f13a131-298a-4b39-a382-76cc429ccb66",
          "length": 283,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "0a534d54-ea50-43c3-b31a-edb82256eadc"
        },
        "item": {
          "id": "b538839c-53b6-4285-b522-2d088eabfa86",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2ebc17d4-44dd-4c5d-b798-d330e0f171c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d33bce8-6f20-413b-8422-9a0e991caaa2",
        "cursor": {
          "ref": "97d08ef1-ada4-4b9e-9de6-067074190094",
          "length": 283,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "4a7b2daa-6cd1-40fd-85f3-911305746174"
        },
        "item": {
          "id": "3d33bce8-6f20-413b-8422-9a0e991caaa2",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "035e81fe-618b-443f-be62-f7d44d8e8fad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a0a33f30-fc3a-4a7b-89a6-93659766115e",
        "cursor": {
          "ref": "468b231f-06ac-428c-8401-7a31dc4ee33b",
          "length": 283,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "95b83b3e-2d03-4160-9b5b-627773259882"
        },
        "item": {
          "id": "a0a33f30-fc3a-4a7b-89a6-93659766115e",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "48b65074-05a6-40b7-8862-02d17b961a67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6acd9746-b457-4a38-ab38-1420bd0fa78c",
        "cursor": {
          "ref": "ac83d8c1-5f4c-422b-8ec9-84afec7fca46",
          "length": 283,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "70baaf21-20f9-42ca-b5be-a34cb5792285"
        },
        "item": {
          "id": "6acd9746-b457-4a38-ab38-1420bd0fa78c",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "1d837959-d38b-4e06-afdb-94b50694ba0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85ed5efe-cb62-4ceb-9b33-6ab5f24033b3",
        "cursor": {
          "ref": "f091c452-e4b7-40f8-841d-fb92558d17f8",
          "length": 283,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "1031ed13-9e99-458b-9c1b-a6bcde22a47b"
        },
        "item": {
          "id": "85ed5efe-cb62-4ceb-9b33-6ab5f24033b3",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "6c1817d0-3b5c-4887-92b7-b43c8935c943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b3c2d1f-baff-4faa-8da8-74121f675940",
        "cursor": {
          "ref": "4dde666e-cde8-4052-80a0-fdeb9e53cd5e",
          "length": 283,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "3c33d6d2-5422-4922-8859-1a039d882d87"
        },
        "item": {
          "id": "9b3c2d1f-baff-4faa-8da8-74121f675940",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "8a8f459f-e81f-4d4d-989c-10f80c3225b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa4d027d-56c1-4caa-94ce-2d3db0106b65",
        "cursor": {
          "ref": "6ec45414-698f-45b7-8b14-a313eedc4fe6",
          "length": 283,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "1d6d16c7-cbee-411e-8bda-add5dc5937df"
        },
        "item": {
          "id": "fa4d027d-56c1-4caa-94ce-2d3db0106b65",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "aedf5037-4a8f-4bb1-8d3a-ad4b2c4b5ebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78d82988-ce81-4690-8578-610c5001f207",
        "cursor": {
          "ref": "e5c12b07-4afa-4765-b562-bfc3015fe354",
          "length": 283,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "00bd6714-9f44-47c5-ab62-fc691fb51659"
        },
        "item": {
          "id": "78d82988-ce81-4690-8578-610c5001f207",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "2684f57c-e20b-423c-96c4-a4e94e2759c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "28f451bb-4d85-46cd-ad1d-31605cc648e7",
        "cursor": {
          "ref": "035d4e8c-c7ff-4fea-b79a-23336f3889dd",
          "length": 283,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "7ce7b655-a3fb-4f41-98d9-926623198ada"
        },
        "item": {
          "id": "28f451bb-4d85-46cd-ad1d-31605cc648e7",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e39cb41c-5d3f-4aca-843c-afe662a3d616",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13ccd187-645c-44f9-90e7-badac9c767e0",
        "cursor": {
          "ref": "30408a5a-350d-4c07-8e64-3115574903f2",
          "length": 283,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "a5e618ca-d3e2-434a-a5fc-74e28857e46a"
        },
        "item": {
          "id": "13ccd187-645c-44f9-90e7-badac9c767e0",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "57dc2bd7-1f7a-4d2e-b985-ef2548a3f989",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0555764d-61ac-48d9-8d5b-f60d1424ca27",
        "cursor": {
          "ref": "9b5335ea-30e1-4f36-8dd0-b1c4642d700e",
          "length": 283,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "52b724c8-b07c-4d00-bee0-976a5e17f047"
        },
        "item": {
          "id": "0555764d-61ac-48d9-8d5b-f60d1424ca27",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "927d474d-e07b-428d-b188-002f5e1144d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26bb3966-1f40-4705-a3f1-55c93312ab82",
        "cursor": {
          "ref": "bea65b57-943b-48a2-ad7a-a4cdaf14e789",
          "length": 283,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "a5723393-ddc4-435f-a8a1-6afa0c36ded0"
        },
        "item": {
          "id": "26bb3966-1f40-4705-a3f1-55c93312ab82",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "a59f0553-b617-4721-b5a1-d97274617db1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92389d1e-35d4-405b-b796-8dd6b618db90",
        "cursor": {
          "ref": "844db2a7-21a7-40ea-81f1-4b7c00998f0a",
          "length": 283,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "01156dfb-b8ad-42d2-8ba7-3278797bb7a9"
        },
        "item": {
          "id": "92389d1e-35d4-405b-b796-8dd6b618db90",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "48c9a042-3e2a-4210-917e-9a7f3eb1368e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b678903b-7573-4c87-9749-7bdad7682b10",
        "cursor": {
          "ref": "418ca962-818c-4295-83d3-cac7213e846c",
          "length": 283,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "ba105aa4-b13a-4657-8521-ecc09623c716"
        },
        "item": {
          "id": "b678903b-7573-4c87-9749-7bdad7682b10",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "2a10fa21-500d-49ef-981a-b7235963b477",
          "status": "Created",
          "code": 201,
          "responseTime": 568,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "fdb8dba3-2717-46f7-abc7-1663f1c84abf",
        "cursor": {
          "ref": "081f5950-450f-42cf-94ef-5f296a893318",
          "length": 283,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "0a47138d-3460-4cfb-b09a-f11001770078"
        },
        "item": {
          "id": "fdb8dba3-2717-46f7-abc7-1663f1c84abf",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "face087c-fb56-4c3f-813f-5824173833ba",
          "status": "Created",
          "code": 201,
          "responseTime": 284,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "ec0ffa42-7ece-459c-8126-3302e8837093",
        "cursor": {
          "ref": "dc594c21-840d-4e70-ab09-183a2d8db085",
          "length": 283,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "97de681f-bfd1-46d8-acf1-615697a3dcdb"
        },
        "item": {
          "id": "ec0ffa42-7ece-459c-8126-3302e8837093",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "8338e396-3312-44d4-80fa-d95c70207927",
          "status": "Created",
          "code": 201,
          "responseTime": 237,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "21ebecfe-2d04-4386-96a7-703d77c91788",
        "cursor": {
          "ref": "c96e0546-e339-47b3-bcb6-fdeec6eb681f",
          "length": 283,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "78ee2b35-804a-423d-ad76-b6fdb47edd62"
        },
        "item": {
          "id": "21ebecfe-2d04-4386-96a7-703d77c91788",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "c3d0f74f-9f13-4b45-87df-1a5cd32d77b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59cb9d2-cbd2-4ca3-b3bc-7f94af2fd9a5",
        "cursor": {
          "ref": "ba316106-b463-4ed2-84aa-5bc5438ec908",
          "length": 283,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "3a7d26f0-736f-4f50-82a2-ba026242295c"
        },
        "item": {
          "id": "d59cb9d2-cbd2-4ca3-b3bc-7f94af2fd9a5",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "f9f4e926-937d-46fb-be99-0b4c202f4cf2",
          "status": "Created",
          "code": 201,
          "responseTime": 250,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "51140512-5032-4f92-967e-5c5a9da06ce1",
        "cursor": {
          "ref": "6d71555f-606f-4694-94d9-e71d437f1003",
          "length": 283,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "ddb22e33-6f19-4a97-8dc8-4a4bf8551b03"
        },
        "item": {
          "id": "51140512-5032-4f92-967e-5c5a9da06ce1",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "1ed0077a-014b-4740-bebe-ec140f256a63",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "6851ce7f-81fb-446f-bd52-5b7d740dd555",
        "cursor": {
          "ref": "bb1f380f-2848-40db-854d-42147767992c",
          "length": 283,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "e5c63851-ffb7-40ef-948d-4190935b2b65"
        },
        "item": {
          "id": "6851ce7f-81fb-446f-bd52-5b7d740dd555",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "81404bc9-26f1-427a-89cc-0e8cdc5a6b3b",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "182dcdf7-53c2-4313-bbb2-d98a902fd24f",
        "cursor": {
          "ref": "8217f9fa-865c-4cc0-9614-15c52ae09838",
          "length": 283,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "e993a3d3-7226-43ac-a934-89da2dd33902"
        },
        "item": {
          "id": "182dcdf7-53c2-4313-bbb2-d98a902fd24f",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "8f1e58e7-8a09-4d09-9e21-383053f977b6",
          "status": "Created",
          "code": 201,
          "responseTime": 264,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "2e3e3eb2-3482-4eff-aab8-19cfbb2163cd",
        "cursor": {
          "ref": "6766c47e-9a3f-4313-9fb5-d613dd024bb4",
          "length": 283,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e86fd5c4-a878-423c-bdaf-bb938be0d342"
        },
        "item": {
          "id": "2e3e3eb2-3482-4eff-aab8-19cfbb2163cd",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "9f063e8a-1f46-43b2-9f4d-cbcc0974c925",
          "status": "Created",
          "code": 201,
          "responseTime": 247,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "950514df-757b-456b-9ce3-af6835e30f86",
        "cursor": {
          "ref": "bba4b612-53c6-4212-be21-d1f86cae69d9",
          "length": 283,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "b3c4c16b-53a8-4fc2-aaad-ce77cf181841"
        },
        "item": {
          "id": "950514df-757b-456b-9ce3-af6835e30f86",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "34588ab3-cbd7-4bd3-b3eb-fffeee0187ed",
          "status": "Created",
          "code": 201,
          "responseTime": 213,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "108d62dd-d589-4773-81e2-dfc626443ed3",
        "cursor": {
          "ref": "5d970ab8-d8cb-450f-bb78-0cbb3fce88bc",
          "length": 283,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "c52a9653-4314-4968-9b8b-099a6c032b75"
        },
        "item": {
          "id": "108d62dd-d589-4773-81e2-dfc626443ed3",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "332c7e55-cb79-4541-ad40-5dfa7d199032",
          "status": "Created",
          "code": 201,
          "responseTime": 221,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "310ea20e-f157-43c0-97b4-61907951935b",
        "cursor": {
          "ref": "5edf657b-26f7-4987-9974-1dd479f3bd92",
          "length": 283,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "29a019ed-0fc2-4f26-9458-c9529d999ffa"
        },
        "item": {
          "id": "310ea20e-f157-43c0-97b4-61907951935b",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "e89c645c-2d9f-477b-8ca6-7cd1af33185b",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "77a211b0-ba79-4d2e-819e-022ddd407603",
        "cursor": {
          "ref": "b8d8350b-8059-46b2-9be4-7f009aa4c202",
          "length": 283,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "d6c731c7-de60-4c77-9b70-2d61c98e8e0a"
        },
        "item": {
          "id": "77a211b0-ba79-4d2e-819e-022ddd407603",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "bd30e81f-8821-4e00-b19d-8101ea88860f",
          "status": "Created",
          "code": 201,
          "responseTime": 248,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "a00b15fb-d5d0-42f9-8767-4ed82c466258",
        "cursor": {
          "ref": "7149f016-8634-49fb-b052-c29417ed87c6",
          "length": 283,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1bbb9b36-12ab-43b4-9039-95e36010ce94"
        },
        "item": {
          "id": "a00b15fb-d5d0-42f9-8767-4ed82c466258",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "8ca0575d-af15-4433-b1f4-98b30606739e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "206c9e56-ac69-43ab-a821-8db49bb603b3",
        "cursor": {
          "ref": "a943b682-cba3-4a96-825e-19e1b4c5037f",
          "length": 283,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "37407d5f-30b8-42ab-aa8a-e052889077ea"
        },
        "item": {
          "id": "206c9e56-ac69-43ab-a821-8db49bb603b3",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "50f5b2d2-6a62-4e49-b39a-5297dfc0db08",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2cea333-87d5-4343-971e-9731336428da",
        "cursor": {
          "ref": "24465c6e-b048-4978-bd99-9c5b15b023f0",
          "length": 283,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "8d893434-29b1-4862-88a6-4ae696f3e34d"
        },
        "item": {
          "id": "e2cea333-87d5-4343-971e-9731336428da",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "82893398-dc56-4189-b9d3-f3dba90a5dc8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c3bf787-83f2-4ed5-8b6f-e5f075e9f89c",
        "cursor": {
          "ref": "e0dab040-26d8-4485-bb41-32bcc4c0c4aa",
          "length": 283,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "ff19627e-7b19-4696-b6e8-2d7b1523f86e"
        },
        "item": {
          "id": "1c3bf787-83f2-4ed5-8b6f-e5f075e9f89c",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "304d601d-1efa-45bf-b000-cd72a6b470f8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39a72f95-c2cf-4e68-bd0b-ccee2b6a502c",
        "cursor": {
          "ref": "dc950659-d727-41ee-a468-0a18d441f4ec",
          "length": 283,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "b6d8efbe-d4e4-4720-8872-c8a3c8e258f3"
        },
        "item": {
          "id": "39a72f95-c2cf-4e68-bd0b-ccee2b6a502c",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "d3e479cf-4c9b-4e9e-beb5-7c63efb528e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8bbbe28f-917b-4c2b-a147-0b9cf92f185c",
        "cursor": {
          "ref": "dbe385f2-6854-44c2-a9a2-81666100463b",
          "length": 283,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "d96fdc77-f119-4fb6-aba7-4b5e1e1eccae"
        },
        "item": {
          "id": "8bbbe28f-917b-4c2b-a147-0b9cf92f185c",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "ec3e554b-9c71-446b-9ebd-a329c84a6533",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f3510535-d5ca-4d62-8dd3-2ce6c30f4fee",
        "cursor": {
          "ref": "fe543b50-9302-435c-b169-46a576d2f88f",
          "length": 283,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "de3cf647-037c-4b65-bb70-affc195b61ce"
        },
        "item": {
          "id": "f3510535-d5ca-4d62-8dd3-2ce6c30f4fee",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "02d2c093-bb8f-4ec8-ab60-6fd5b99dcdf8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a41d233-aa62-4b1a-a0e4-f53be7e50f50",
        "cursor": {
          "ref": "a0888353-d7ab-4eed-8c90-60d6d7668d13",
          "length": 283,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "a4c05ff4-367d-42a7-a811-d8a520edcc85"
        },
        "item": {
          "id": "3a41d233-aa62-4b1a-a0e4-f53be7e50f50",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "01744b2c-8007-4219-b924-a70c550e86b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f24b6c5f-0960-4dde-a05d-1ff2def0d425",
        "cursor": {
          "ref": "47a1ec4e-9c47-496c-80a3-1c00a711c3b3",
          "length": 283,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "ba809df8-9554-47e2-9725-215a52ffb6da"
        },
        "item": {
          "id": "f24b6c5f-0960-4dde-a05d-1ff2def0d425",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "fd50b756-e4d9-4bc7-9749-3fb6f9a9e704",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16919733-58b8-4899-a360-beadacc7be72",
        "cursor": {
          "ref": "e604b44d-615c-4777-b0c4-a1da04874ad2",
          "length": 283,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "7f8255fd-12ee-4ded-a0fd-bb1207fddd1b"
        },
        "item": {
          "id": "16919733-58b8-4899-a360-beadacc7be72",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "a7c32df7-d5e1-4ca6-8f39-f7355b4ee807",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da4d7cac-b4c3-49bc-aeb1-3c0e93768d20",
        "cursor": {
          "ref": "2b0417e9-c19a-4c5b-adb1-ef16110a6928",
          "length": 283,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "4cdcf6f1-3cd0-46c5-bcc5-8cfe6f4a4dc8"
        },
        "item": {
          "id": "da4d7cac-b4c3-49bc-aeb1-3c0e93768d20",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "ff772bd8-f777-4fa7-8377-64aea7ac4261",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf636837-b0ca-45af-85c4-b46708fbc902",
        "cursor": {
          "ref": "e4f32d44-5092-4791-a19c-66cd57d1ae69",
          "length": 283,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "5fc3fac0-6626-4023-8cce-8385a3a6fd0b"
        },
        "item": {
          "id": "cf636837-b0ca-45af-85c4-b46708fbc902",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "0d746ac1-a55c-41d3-a520-ad1fd2965c39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 68,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1efd9049-1328-498f-8cb2-4b085da30059",
        "cursor": {
          "ref": "fea3f687-fb70-4014-b748-077886d896dd",
          "length": 283,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "3acf316f-9f3b-409b-a91d-6fa7dd562554"
        },
        "item": {
          "id": "1efd9049-1328-498f-8cb2-4b085da30059",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "c814fc6a-353e-461f-ab8a-01b6995a5678",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8df6310-e5f2-408a-8474-057bbb41877a",
        "cursor": {
          "ref": "a274f072-3fa9-4e67-b2f7-a28af688b14e",
          "length": 283,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "2beadfeb-0ec7-43d0-9653-044aa47351bc"
        },
        "item": {
          "id": "a8df6310-e5f2-408a-8474-057bbb41877a",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "b335528d-ebda-4914-84d1-c1139e21b3d1",
          "status": "Created",
          "code": 201,
          "responseTime": 232,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "b4f07b0f-36d8-4518-9cef-c4d042ffc1c4",
        "cursor": {
          "ref": "8d0332ff-7227-4d2b-a533-02e7fe334562",
          "length": 283,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "4fa6c8dd-dedb-41c9-b143-090219fc7906"
        },
        "item": {
          "id": "b4f07b0f-36d8-4518-9cef-c4d042ffc1c4",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "b3e936b0-e811-4cc6-b121-3f2887dd9c8b",
          "status": "Created",
          "code": 201,
          "responseTime": 254,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "c5c95f36-b70c-4d46-9955-500fe2267fcf",
        "cursor": {
          "ref": "ce52e056-34b5-4d89-98c3-1866a948a262",
          "length": 283,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "226cee0d-099d-40cc-acdd-e48e9052dc6b"
        },
        "item": {
          "id": "c5c95f36-b70c-4d46-9955-500fe2267fcf",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "6c9031da-851e-45b9-b76d-6a52a098a333",
          "status": "Created",
          "code": 201,
          "responseTime": 222,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "e772d66e-8695-41b6-955d-47c8182f2360",
        "cursor": {
          "ref": "20f65890-6dec-4362-b6d2-ef8218af2553",
          "length": 283,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "6e8e66e1-9b6e-447f-9f45-6c11e3782c6e"
        },
        "item": {
          "id": "e772d66e-8695-41b6-955d-47c8182f2360",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "3b79962d-6459-4fdb-a546-de651e447893",
          "status": "Created",
          "code": 201,
          "responseTime": 238,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "ba81b414-a6b0-4bd8-95b8-c49163468b55",
        "cursor": {
          "ref": "7398fc0f-3d0e-4e27-909e-756e0f8fc5ed",
          "length": 283,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "667e2600-65bb-4057-b653-6d6234004d72"
        },
        "item": {
          "id": "ba81b414-a6b0-4bd8-95b8-c49163468b55",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "44e47bf1-5e36-43d8-97d9-b2d713612c0a",
          "status": "Created",
          "code": 201,
          "responseTime": 251,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "13a69365-73dd-482a-ad81-a25265d454f7",
        "cursor": {
          "ref": "29fa410f-83a4-4840-9143-35f6e250944a",
          "length": 283,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "f8225204-0cc7-4a04-a09c-8e529c8bb7e9"
        },
        "item": {
          "id": "13a69365-73dd-482a-ad81-a25265d454f7",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "f5250f71-8721-4f6d-b856-d131b888fbb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec001f07-90da-4f8c-b55b-244912b0131c",
        "cursor": {
          "ref": "74338230-6205-45c6-88b6-82d54eadda0a",
          "length": 283,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "6107a171-55ff-4697-921e-611d572a3901"
        },
        "item": {
          "id": "ec001f07-90da-4f8c-b55b-244912b0131c",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "65043864-36f9-4d8d-85fa-31804543be9d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4d961ba6-c797-4f8a-bf51-02108f8e13fb",
        "cursor": {
          "ref": "ad73b535-b377-4a56-97da-edc6ad59e781",
          "length": 283,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "f53368ba-f8cc-44c8-8336-866832efb185"
        },
        "item": {
          "id": "4d961ba6-c797-4f8a-bf51-02108f8e13fb",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "22631a74-852c-47ce-bb6b-005133ef95bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3c72297-42d3-47b5-a7bb-92d51cc8046a",
        "cursor": {
          "ref": "9ebe82dc-031c-4568-a9f8-bffa69c837a3",
          "length": 283,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "2f095b49-f94c-496c-aeb1-76eee99b7736"
        },
        "item": {
          "id": "e3c72297-42d3-47b5-a7bb-92d51cc8046a",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "c562162e-4e38-4b74-90d3-95f0cf103900",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d6d3c83-95da-465e-bea8-1c0beaaecc41",
        "cursor": {
          "ref": "50c854fb-6e28-4c72-831d-bc768569a128",
          "length": 283,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "25c33888-6451-493e-8bc4-7c9c5bcc364b"
        },
        "item": {
          "id": "5d6d3c83-95da-465e-bea8-1c0beaaecc41",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "f3207ef3-2066-48a3-9e03-deb904c35e6c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b73d6a4-86ac-4812-90c5-c300e501e70b",
        "cursor": {
          "ref": "568d0602-1123-4e11-9a6a-f1d3bd034878",
          "length": 283,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "6bb4f8cf-b545-46f3-8c68-658ccb9c2d73"
        },
        "item": {
          "id": "7b73d6a4-86ac-4812-90c5-c300e501e70b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b44a6c19-31ac-4987-a205-37e0ebb1d407",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eae4940-205e-4db2-a276-e4ca05e0fe4b",
        "cursor": {
          "ref": "d14fef8e-ab80-4f92-8ba7-91cab781371b",
          "length": 283,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "b1d3e3c9-d61e-418e-9371-a3e67c9bd0a9"
        },
        "item": {
          "id": "1eae4940-205e-4db2-a276-e4ca05e0fe4b",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "b3735680-15e8-4ef6-981e-902e0787b9de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26d06c2d-d6b2-47f3-8529-d172e73114f9",
        "cursor": {
          "ref": "dee28556-78ee-48a2-ba9a-84353ab9dd97",
          "length": 283,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "15f1b041-7bd7-48c8-a083-6069305b6dcd"
        },
        "item": {
          "id": "26d06c2d-d6b2-47f3-8529-d172e73114f9",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "905675e6-946e-41d6-bcc8-7b9340b3fe0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b7c7a82-5062-4725-a329-86fd1515ee72",
        "cursor": {
          "ref": "1f229271-79ac-4b78-bbc7-7a3195114632",
          "length": 283,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "1713c06d-128a-4a66-8c7a-4795dc71ef09"
        },
        "item": {
          "id": "9b7c7a82-5062-4725-a329-86fd1515ee72",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "d1534a2c-0455-448d-9ba9-68c8418ce283",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26e636bc-0aaa-44f5-ae3d-2361df1169cd",
        "cursor": {
          "ref": "8214d761-7db6-4670-998a-bf9b85713aca",
          "length": 283,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "2195c852-400a-4278-9291-77963fd3afa4"
        },
        "item": {
          "id": "26e636bc-0aaa-44f5-ae3d-2361df1169cd",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "bba82d5e-f56e-4d16-b08c-3fe7a0153fe9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9364fba5-557a-4df5-a012-c7bc711e7571",
        "cursor": {
          "ref": "b3ee40e6-565f-472a-83a8-cf033c1705d6",
          "length": 283,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "d01e0406-68f1-49ba-b535-f6f2a0bcbefb"
        },
        "item": {
          "id": "9364fba5-557a-4df5-a012-c7bc711e7571",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "fa50cee3-75b7-443c-aced-dce2444d5acd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f31a558-17c3-4ef0-a180-3fb98bfb17b9",
        "cursor": {
          "ref": "064d7a84-2669-43f2-8d5b-64bcac0a3748",
          "length": 283,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "7970045f-8407-4be3-95fc-ab37bbd31220"
        },
        "item": {
          "id": "3f31a558-17c3-4ef0-a180-3fb98bfb17b9",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "4a1e674f-c246-4367-942a-a0bd5a2eab83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "febc70d6-b2e3-499b-844d-b10bf7784491",
        "cursor": {
          "ref": "96ddaba3-570d-4371-a158-e2c5a39f2ec7",
          "length": 283,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "a455aa9e-35f0-4d41-bcd2-72a732af9611"
        },
        "item": {
          "id": "febc70d6-b2e3-499b-844d-b10bf7784491",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "5424e8de-7481-459d-88c9-4d3b83820156",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62760ef9-51f1-4a12-b2a3-695049b5c37c",
        "cursor": {
          "ref": "5ddebda6-826b-49e8-96bf-2ce59e15b214",
          "length": 283,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "21b35d7e-ac68-4c44-bcd7-f569704c57f1"
        },
        "item": {
          "id": "62760ef9-51f1-4a12-b2a3-695049b5c37c",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "51e9df11-2750-4282-a6be-25e28106af12",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9e03922-43c0-4be1-9451-fec76d48305c",
        "cursor": {
          "ref": "523409de-8047-42f2-ac86-1921196c82a8",
          "length": 283,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "c145ae28-d1bb-4326-916c-92f078a4da73"
        },
        "item": {
          "id": "b9e03922-43c0-4be1-9451-fec76d48305c",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "86d11518-fa90-4749-85e7-a622c2715ffc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "929cacc0-7cca-4273-a761-843d5a1974b5",
        "cursor": {
          "ref": "5a4cf96f-26b9-49b6-96af-48718cf7f1e7",
          "length": 283,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "5d3f3f5d-fb6a-4993-bcbb-1047c5f4c2c8"
        },
        "item": {
          "id": "929cacc0-7cca-4273-a761-843d5a1974b5",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "e87db517-c72e-4f07-ad00-c6e1a65c21e0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a113a5e2-3c9f-4a40-9f44-d2e4d34ef5f9",
        "cursor": {
          "ref": "3f0b2f98-5623-4c74-88bf-3e2a8bdc3f9c",
          "length": 283,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "f832b581-ea4a-4634-bf19-dc04198c0e21"
        },
        "item": {
          "id": "a113a5e2-3c9f-4a40-9f44-d2e4d34ef5f9",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "c33af4ed-fd72-4a85-a45d-ce71a087e63e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6af9ac10-470a-4e5a-bf79-03dc29b9e941",
        "cursor": {
          "ref": "01014a4e-f149-4ee4-bcc4-cdb703ef395b",
          "length": 283,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "dea1e7f9-e1bb-44bb-8a23-0ab53496ab67"
        },
        "item": {
          "id": "6af9ac10-470a-4e5a-bf79-03dc29b9e941",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "8cc4de01-6f47-4cfb-88ed-9173b51bc210",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dab839e3-1333-4dab-bd06-c26631ec9644",
        "cursor": {
          "ref": "76405b5f-c428-4e7b-960b-94ad542b2954",
          "length": 283,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "64b5fd0d-d2ab-494c-9656-23812be9fa99"
        },
        "item": {
          "id": "dab839e3-1333-4dab-bd06-c26631ec9644",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "973a4dbf-fa1f-4973-ae85-ec5a9ebe4c3c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7aa7925f-4a90-42b1-b984-519f1fe0c4d1",
        "cursor": {
          "ref": "a33b7e10-1668-405e-8f85-237b39056be8",
          "length": 283,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "1d9f24d6-d800-4eb8-b512-8e4d4e0fb484"
        },
        "item": {
          "id": "7aa7925f-4a90-42b1-b984-519f1fe0c4d1",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "89ce9ffb-b98f-4267-9919-6727b0db4597",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "32420ba4-f2bc-4fea-a198-8321b2f2d2c2",
        "cursor": {
          "ref": "8e7e4dac-f44e-4664-aa57-5d80efe2dd16",
          "length": 283,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "b63643a1-2810-4bb5-a79b-f2a892dac20c"
        },
        "item": {
          "id": "32420ba4-f2bc-4fea-a198-8321b2f2d2c2",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "2d471969-1ec2-4006-bef2-a6cda064f3f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "101b6df8-6ec4-4d9d-9032-2b262e3eaaae",
        "cursor": {
          "ref": "04cd8ad0-026e-48ec-ac82-0d294f5593c2",
          "length": 283,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "faaf7403-7319-4374-9e30-83607529c75d"
        },
        "item": {
          "id": "101b6df8-6ec4-4d9d-9032-2b262e3eaaae",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "2f6eae70-76ef-4805-90b8-f070a0e4b507",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6870a7af-ce16-4dbc-b970-b57a753d8231",
        "cursor": {
          "ref": "b37e0158-975e-496f-87dc-4959939f1bd8",
          "length": 283,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "fb46bf64-b9f3-44f1-85c4-6b2da19d6115"
        },
        "item": {
          "id": "6870a7af-ce16-4dbc-b970-b57a753d8231",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "001d9592-d9c0-4189-84b4-f4ca86aa5baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8125bcd-7404-4e1c-b8d7-30aa6f3f01f0",
        "cursor": {
          "ref": "e4e3d724-e97e-45b3-86af-1d0e0769fb84",
          "length": 283,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "a994a3a8-57e9-4c42-b01e-6dab711bbf6c"
        },
        "item": {
          "id": "f8125bcd-7404-4e1c-b8d7-30aa6f3f01f0",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "d43cd32d-2ca7-479e-b1bc-edd8da1c3746",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "26c52869-fea0-4da6-a514-044738b7e368",
        "cursor": {
          "ref": "81399f1c-ae9a-4e34-98c1-e1b09aa619e4",
          "length": 283,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "9db42984-b8c1-47e4-b83f-feb718cad6cb"
        },
        "item": {
          "id": "26c52869-fea0-4da6-a514-044738b7e368",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d1560cac-86c2-4bb4-903e-e99d085b4d96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e04e29d-71b5-452b-9704-5d0aee74ea63",
        "cursor": {
          "ref": "0e73cd35-2b82-4d07-be21-6ac268c46ba2",
          "length": 283,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "525b616c-363f-42c2-8426-22fa4c9d5c1b"
        },
        "item": {
          "id": "3e04e29d-71b5-452b-9704-5d0aee74ea63",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "dda56709-1c4c-4df4-931b-24a738794c0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6a0840f-26a1-4fe6-8a96-9ee90d82b0b4",
        "cursor": {
          "ref": "6875162a-3357-4230-9eba-1e6d25e03e1c",
          "length": 283,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "7391b6b5-9e8f-48d2-88d7-3f71daf0a659"
        },
        "item": {
          "id": "b6a0840f-26a1-4fe6-8a96-9ee90d82b0b4",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "7f2df00a-251c-473d-a3ef-3e706c1d0979",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bcb3035-26ff-4fec-954f-c81df64b94c9",
        "cursor": {
          "ref": "4c234158-0bdc-42ec-957b-da12286be605",
          "length": 283,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "f309497f-7dad-4fb2-a351-d46ad11cc90f"
        },
        "item": {
          "id": "1bcb3035-26ff-4fec-954f-c81df64b94c9",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "9afcadf8-9f19-4a9c-9c82-a69fdb2a792f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ce43a3-4ac6-495b-bba6-d179b19a3f1f",
        "cursor": {
          "ref": "6ac40638-2dd0-43d8-a71c-429deb25ea30",
          "length": 283,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "a89b4e0b-72c8-44a0-a0b3-991e2e4af6db"
        },
        "item": {
          "id": "b9ce43a3-4ac6-495b-bba6-d179b19a3f1f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "a2c1bd23-c282-4b39-a964-3215d5d28c33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 66,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f015b883-9a0a-4a71-8f97-dbb0bb2b3b51",
        "cursor": {
          "ref": "a0038db0-001b-4832-b495-129bd32d3a59",
          "length": 283,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "ee6ab41f-4c6c-47a6-a730-963b402dbf55"
        },
        "item": {
          "id": "f015b883-9a0a-4a71-8f97-dbb0bb2b3b51",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "e599775a-8778-4ef9-a2a2-32dc630dc497",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b1fc1f1-88d4-4757-862a-e4a384025a1f",
        "cursor": {
          "ref": "a47fe137-eee8-4b69-93ba-f6543094d283",
          "length": 283,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "4ae2a31c-120f-444d-9fc9-171d79ccd1bc"
        },
        "item": {
          "id": "7b1fc1f1-88d4-4757-862a-e4a384025a1f",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "612b011e-ab4e-4b46-9624-239a334baf58",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 534
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2f45be3-c267-4061-afa8-3cac83191da7",
        "cursor": {
          "ref": "a633a318-1d9d-4450-8045-7e0734a95359",
          "length": 283,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "abc01c92-3708-4b79-8cad-0d9d5a97ab20"
        },
        "item": {
          "id": "a2f45be3-c267-4061-afa8-3cac83191da7",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "c44e4b44-e343-45c9-8550-38f66a5a94d3",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "22f25f46-f137-4bdd-9fa6-4d76772794c7",
        "cursor": {
          "ref": "07dc81d9-cf52-4504-a065-4dd3df0b2a10",
          "length": 283,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "f2f4d19a-6c5f-45b2-974c-b3eb9d646cd8"
        },
        "item": {
          "id": "22f25f46-f137-4bdd-9fa6-4d76772794c7",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "1566b3f5-42a7-4552-a6e5-dff35f348615",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "1a219d2e-839b-4c0a-a37e-24a1f1ca7982",
        "cursor": {
          "ref": "71250ba1-3f74-4971-bcb1-d0b4b276257b",
          "length": 283,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "e3785316-40b6-4f79-bf77-46266f9cc430"
        },
        "item": {
          "id": "1a219d2e-839b-4c0a-a37e-24a1f1ca7982",
          "name": "credentials_issue"
        },
        "response": {
          "id": "5cfbccdd-7465-49e4-bb19-e8f3d04bc914",
          "status": "Created",
          "code": 201,
          "responseTime": 266,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "b0ecf663-4b02-4d50-8d63-bbfe7a62c668",
        "cursor": {
          "ref": "09bae068-8283-4e64-b4ef-c0c90e21e288",
          "length": 283,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6ac8f5aa-14c7-4132-9dc1-1d7e0d6456e7"
        },
        "item": {
          "id": "b0ecf663-4b02-4d50-8d63-bbfe7a62c668",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "c33ef8cd-e8d3-4fa7-8a77-3f13f009b19c",
          "status": "Created",
          "code": 201,
          "responseTime": 234,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "63fc83fc-31f4-42e2-8ee3-8c1360ebf2b4",
        "cursor": {
          "ref": "a4e829a0-0ee1-4b14-90fc-03b1209e8c01",
          "length": 283,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "0374f95d-d26d-41d3-83c7-a835768257c3"
        },
        "item": {
          "id": "63fc83fc-31f4-42e2-8ee3-8c1360ebf2b4",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "a2348547-812f-4fc6-8efd-676402420df5",
          "status": "Created",
          "code": 201,
          "responseTime": 241,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0aa0e2-0051-4504-b637-e18f260b7426",
        "cursor": {
          "ref": "a802e410-864f-4c40-bd96-e8244a75e42d",
          "length": 283,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "cad69a51-acb1-4082-87fc-4bceb6072aee"
        },
        "item": {
          "id": "1c0aa0e2-0051-4504-b637-e18f260b7426",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "6b138ace-7183-4858-b30b-b34bd58ea225",
          "status": "Created",
          "code": 201,
          "responseTime": 334,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b02caa0-3046-4f85-80a2-52e568084e8f",
        "cursor": {
          "ref": "8933d7f8-d122-4b96-a5bd-588db70d2bd5",
          "length": 283,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "55e094ab-ad41-486b-8005-7d8209307b2f"
        },
        "item": {
          "id": "4b02caa0-3046-4f85-80a2-52e568084e8f",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "7a5e558f-ff83-45a3-bef3-2e4bd85843b3",
          "status": "Created",
          "code": 201,
          "responseTime": 226,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-03-24T00:37:53.983Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-03-24T00:37:53.983Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "ca47fef8-f383-4469-b047-c6ba67d7c9e8",
        "cursor": {
          "ref": "2e8e75cc-ff74-45ca-9d94-277905cf648d",
          "length": 283,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "defb6f38-f76d-4fc2-85c7-7dd471fdb9b7"
        },
        "item": {
          "id": "ca47fef8-f383-4469-b047-c6ba67d7c9e8",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "0781a819-2e15-42fd-ab17-fbe6eeb50db4",
          "status": "Created",
          "code": 201,
          "responseTime": 262,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "352ffafa-6277-4cf7-a1e0-15edfc98e5f8",
        "cursor": {
          "ref": "fee7c089-a33a-4cfa-a4b3-b091a79ed9fb",
          "length": 283,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "025fb494-7525-4baf-ac67-0976b3a8ee30"
        },
        "item": {
          "id": "352ffafa-6277-4cf7-a1e0-15edfc98e5f8",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "a03e9e00-95bd-4dd5-b5db-dd4ff7f9ee40",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3c05c34f-594a-44ed-b481-8639ce19c0f8",
        "cursor": {
          "ref": "ba65e0ee-560c-4923-86a1-f41a736487f2",
          "length": 283,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "96e51c34-c811-419a-9e1e-2380d2d8947a"
        },
        "item": {
          "id": "3c05c34f-594a-44ed-b481-8639ce19c0f8",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "0fe7c100-58ab-4222-b01e-f6bff808731c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "695b4063-4987-45fa-b2b9-8342330280db",
        "cursor": {
          "ref": "2c23c8bf-7cfb-4b14-bfc3-53d32657d7a3",
          "length": 283,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "98601ef0-7540-481b-ad02-ac30519ecba1"
        },
        "item": {
          "id": "695b4063-4987-45fa-b2b9-8342330280db",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "d9432443-b335-4b9a-8759-b5e864cc7f25",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a2cd540b-0c71-40af-99e8-7c3539660f56",
        "cursor": {
          "ref": "7d084a7e-a61d-4cc0-a704-79a9cfd5a277",
          "length": 283,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "b36684fa-feed-429f-a4e4-18cbc1b70a1f"
        },
        "item": {
          "id": "a2cd540b-0c71-40af-99e8-7c3539660f56",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "3e6cb302-81c6-4a62-b005-65f48eb32998",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d59a437b-1294-423e-882b-8c5e70da3f2d",
        "cursor": {
          "ref": "01c47095-9d01-4bb9-9be4-fc124b418f3d",
          "length": 283,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "f925f952-dd5e-4a6d-9cf3-640daf7ae465"
        },
        "item": {
          "id": "d59a437b-1294-423e-882b-8c5e70da3f2d",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "f9ca5de3-9dd6-4c42-abbf-4af379033743",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a8dbc0e-6fe8-4467-a75e-de07ada76499",
        "cursor": {
          "ref": "689676e8-d4d7-49a0-9f63-62c0140ff33c",
          "length": 283,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "459677df-86af-41c4-97bf-0f8b28aaf8ec"
        },
        "item": {
          "id": "8a8dbc0e-6fe8-4467-a75e-de07ada76499",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "a6c1814a-6607-4b09-9e37-200479e044e9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adadd270-3286-45ec-ba34-40d03a414e90",
        "cursor": {
          "ref": "4f1ee159-f57f-4590-8fee-30d28f0ca070",
          "length": 283,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "74c22e20-9cc0-4d8c-b402-4d5b4e31eadb"
        },
        "item": {
          "id": "adadd270-3286-45ec-ba34-40d03a414e90",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "d7fb5007-3555-4d52-ba93-7a508d435ffa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9546eee3-a055-4920-b11f-b6da2f5d50df",
        "cursor": {
          "ref": "3037a141-3823-4387-b303-4a8b18ec923c",
          "length": 283,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "1da43716-75f6-48ca-bb58-3961199b64fb"
        },
        "item": {
          "id": "9546eee3-a055-4920-b11f-b6da2f5d50df",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "849871af-c8ad-47e3-9469-4d9f9c706450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f8a8781a-ee72-4758-9501-0b03070ad874",
        "cursor": {
          "ref": "4665cb07-6589-46ef-8cb9-c59cf049a3dd",
          "length": 283,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "df8b653f-e4f3-44c2-8fb1-942d24a709ef"
        },
        "item": {
          "id": "f8a8781a-ee72-4758-9501-0b03070ad874",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1ab9a230-a2c0-4d08-9dfd-357595e3fe4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c47e315f-98a7-4ac2-bb6b-d125788058e8",
        "cursor": {
          "ref": "55a16ee2-0867-4422-b5ea-a950483be470",
          "length": 283,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "a5faeedb-3390-4a47-b49a-bdca37da0401"
        },
        "item": {
          "id": "c47e315f-98a7-4ac2-bb6b-d125788058e8",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "8f42461c-a081-4a6b-9da1-fd6eecd72e6a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01b15f0c-fa04-4db4-aec1-9f11ea3ee783",
        "cursor": {
          "ref": "0b01d261-85e1-487c-b067-d9eaf6922b2b",
          "length": 283,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "ca7658ac-20bf-4d7c-bdc7-f29c30395251"
        },
        "item": {
          "id": "01b15f0c-fa04-4db4-aec1-9f11ea3ee783",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "e2f32781-2bd2-4e73-a908-68cc35c78917",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c25d0249-021a-4fb8-821e-177da8888e6c",
        "cursor": {
          "ref": "f4c6806e-c343-406f-8fa2-dbed76328ee3",
          "length": 283,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "ccd1717c-ecfd-4b15-abac-b08382ead33e"
        },
        "item": {
          "id": "c25d0249-021a-4fb8-821e-177da8888e6c",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7ab83ef1-79a5-41da-a6f1-4c0081811e06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2db0e5e3-bd4c-4733-80a8-94264437586a",
        "cursor": {
          "ref": "5cf529c4-b45b-446d-8c8f-8c7c7b6a7e7c",
          "length": 283,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "c63030d5-9e45-4578-b129-b07511fb40ad"
        },
        "item": {
          "id": "2db0e5e3-bd4c-4733-80a8-94264437586a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "51b94072-45b4-476c-a806-bd6c5739a797",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 82,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:121)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "52105b9f-ac1c-466f-8c4b-a9da319a8f60",
        "cursor": {
          "ref": "6141cb12-6210-40a0-b04c-fc52cde237c4",
          "length": 283,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "b98e9df0-9507-4451-b280-12a90023be59"
        },
        "item": {
          "id": "52105b9f-ac1c-466f-8c4b-a9da319a8f60",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "dadf53f0-b0a5-415b-8112-4a3639241e22",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 72,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "cc444b02-0ce4-4152-a808-63f18582303a",
        "cursor": {
          "ref": "0a0f54ae-ae26-4ae5-88d6-4f533125ad2f",
          "length": 283,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "ca2b56e2-fbc8-4e0e-931a-78dbcb0639f2"
        },
        "item": {
          "id": "cc444b02-0ce4-4152-a808-63f18582303a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1ced6404-8989-4abf-a4b6-458b55032950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e2e02d9-10a6-4202-a0f5-ac14a1bea10f",
        "cursor": {
          "ref": "a32fa2fd-8fd5-4ae2-b7d9-1886421d3504",
          "length": 283,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6c0deab8-70d5-4c3c-a933-7d66fe7acf98"
        },
        "item": {
          "id": "7e2e02d9-10a6-4202-a0f5-ac14a1bea10f",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "b9d1aaa7-3d1a-4aae-b435-77a9d2c93c16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30c02fa5-e646-471e-bdea-4bfb7747caf3",
        "cursor": {
          "ref": "1584c35d-38d0-4473-9381-ff91e87c929f",
          "length": 283,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "611b3bb4-4f2d-45f0-b24d-102a4c00f6a3"
        },
        "item": {
          "id": "30c02fa5-e646-471e-bdea-4bfb7747caf3",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "f937ce75-b54c-47e0-ac6d-25d7a9c6124d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "abddb961-7bd8-437f-9766-12b76ab7c272",
        "cursor": {
          "ref": "aab20bf3-4d03-4939-b1bb-1c7a92813f96",
          "length": 283,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "1078f669-c4b8-4fe2-9384-5d992af47d87"
        },
        "item": {
          "id": "abddb961-7bd8-437f-9766-12b76ab7c272",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e7989a30-b983-4071-a8d6-c356e86239bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35973b75-b7f7-4c0a-9f9a-34b30c2f0336",
        "cursor": {
          "ref": "fc7e8a52-eb04-4e33-be41-6065876316a7",
          "length": 283,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "9a506234-bf3d-45bc-b35a-7faf9a12a806"
        },
        "item": {
          "id": "35973b75-b7f7-4c0a-9f9a-34b30c2f0336",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "4537e67a-1c0e-4fb8-ba3f-5e137bfd87e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d59817-1f12-437b-a9d2-2819138f8e60",
        "cursor": {
          "ref": "0f560aa1-12ab-4849-be4d-1121af22eee3",
          "length": 283,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ddba812c-8821-4d1c-a0c9-97fc4d6720cb"
        },
        "item": {
          "id": "c8d59817-1f12-437b-a9d2-2819138f8e60",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "15f18302-3268-4aee-811f-d1a20b9f2a86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 53,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "edbae745-c2db-4fad-9e97-7170a870037e",
        "cursor": {
          "ref": "e54ae304-455c-4c9c-949c-5f9ee8f265a9",
          "length": 283,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "42dd2f32-2400-4074-a3fd-76b4415066ac"
        },
        "item": {
          "id": "edbae745-c2db-4fad-9e97-7170a870037e",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "878fea1c-a0ad-4002-951a-de795ff71564",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0094d652-f635-405e-8cae-af010cef185c",
        "cursor": {
          "ref": "2ef63cd8-ad8b-4c42-b5a6-4cd9e1223474",
          "length": 283,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "9a70b025-791a-4b69-88a2-9a1a6434f308"
        },
        "item": {
          "id": "0094d652-f635-405e-8cae-af010cef185c",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "c15b041b-96f4-4704-a8d1-b042067e9ea5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04f43cb0-fc77-416a-9abc-07ba9986a587",
        "cursor": {
          "ref": "6455ed33-e228-40bf-b994-de3b194d5182",
          "length": 283,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "1e3c5044-8383-4c2c-88fa-3d1bcedfdc14"
        },
        "item": {
          "id": "04f43cb0-fc77-416a-9abc-07ba9986a587",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b4851d3c-096f-4fce-93b9-0ed3eda76baf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bfa0ab9d-07a7-45f3-b693-3fc0f055ef03",
        "cursor": {
          "ref": "661575f3-67ed-49ca-9800-bfcf4b2628d2",
          "length": 283,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "1a0dae17-427d-4756-ada1-24fb9cb9691f"
        },
        "item": {
          "id": "bfa0ab9d-07a7-45f3-b693-3fc0f055ef03",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "9effe28c-cd7d-454d-9a5e-b9adfeec934d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa2a5e8-c98e-4759-84a2-afcf4248187e",
        "cursor": {
          "ref": "21fd84ca-56f2-4532-8b72-9082335110bf",
          "length": 283,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "90b0f5c8-2561-4da6-8062-47f401ddb1c2"
        },
        "item": {
          "id": "6fa2a5e8-c98e-4759-84a2-afcf4248187e",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "a9e21e0c-e4e6-41b4-a171-857a536671fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a3ab303c-87e8-465c-8cf0-2d94492b6f06",
        "cursor": {
          "ref": "cd0108d1-9532-4c2d-a74c-734fd649f3c4",
          "length": 283,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "520efd65-60e1-4d91-a80f-e32a3fb367a6"
        },
        "item": {
          "id": "a3ab303c-87e8-465c-8cf0-2d94492b6f06",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7a76bd4a-1291-4be3-8698-add54018abd5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ca437863-0d4e-414c-b306-b2ff954e95d2",
        "cursor": {
          "ref": "a87ba694-1f19-4ca5-b182-dbddcca16400",
          "length": 283,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "e5e03dfe-a124-48a7-8905-988950d555c0"
        },
        "item": {
          "id": "ca437863-0d4e-414c-b306-b2ff954e95d2",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "15a6a01a-011c-4627-8c56-1bba5d308ac7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8b28d24-f74f-4a74-b2c9-2e1f88d94c7a",
        "cursor": {
          "ref": "c39957e0-bc9e-435d-83c2-0e05244189af",
          "length": 283,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "a6661e39-0802-4be3-b776-fa241e440a36"
        },
        "item": {
          "id": "c8b28d24-f74f-4a74-b2c9-2e1f88d94c7a",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "62de9357-09b0-4108-a875-b979495fecf2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6c6117c-ebab-4bd4-84ef-5a2ad2c1f8ab",
        "cursor": {
          "ref": "2273e61a-e84e-445d-b031-d73353f0c643",
          "length": 283,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "e8076f75-c9f2-4134-8347-8d2c1e0e7e6c"
        },
        "item": {
          "id": "f6c6117c-ebab-4bd4-84ef-5a2ad2c1f8ab",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c6f0db37-fc4e-4a1e-a27f-ba7ac4155304",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1574a414-c6fb-4767-b1b7-309ca5dd0a8a",
        "cursor": {
          "ref": "d75ca232-a17a-4cf0-87a4-d113037a4be9",
          "length": 283,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "e602c4a1-caf7-4e67-8d0c-a01ed0e03292"
        },
        "item": {
          "id": "1574a414-c6fb-4767-b1b7-309ca5dd0a8a",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "92323c9f-8111-4087-97ff-1fa2da03ff62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "da3c7ff8-c271-4f8e-85e0-e9ebe737c184",
        "cursor": {
          "ref": "0c2468c3-e56a-4007-ad6b-8cc26b96ad78",
          "length": 283,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "b93b5e6e-501c-41f3-bfc3-10a90f77a439"
        },
        "item": {
          "id": "da3c7ff8-c271-4f8e-85e0-e9ebe737c184",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "9430f79b-b5f3-4fa2-81e4-8485ec9f9848",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59cbb54f-99f5-4b06-9b45-58e07fb74ac3",
        "cursor": {
          "ref": "0357544e-e83a-40b0-8851-cea3a013b40d",
          "length": 283,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "9ba4b459-ce94-403b-945a-0bb93e530909"
        },
        "item": {
          "id": "59cbb54f-99f5-4b06-9b45-58e07fb74ac3",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "acb53c2d-fcfc-4166-af86-b77360611aee",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 78,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:140)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "4ee13e5e-90e3-4263-aa2a-a46bc7bc22c9",
        "cursor": {
          "ref": "81f38606-93b1-4a7e-b9b8-1c613471f88d",
          "length": 283,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "b73d584d-c41b-45a9-835e-0e94904e9022"
        },
        "item": {
          "id": "4ee13e5e-90e3-4263-aa2a-a46bc7bc22c9",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "2baf9b50-00c0-44e4-be14-4433a57394dc",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "98b52824-55c2-4d4f-8773-e1439d4bbea5",
        "cursor": {
          "ref": "c9d0b4a9-e1b7-49af-a7f8-86e05189d1ae",
          "length": 283,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "ea330224-6ad2-4018-acfe-73ab7b2a717d"
        },
        "item": {
          "id": "98b52824-55c2-4d4f-8773-e1439d4bbea5",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "c7e64a4b-ac0d-4e44-ae45-d258dab8305e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60e237ec-2c52-47c2-9e7d-a8009f502d84",
        "cursor": {
          "ref": "a6542ba4-d7ab-4331-87d5-1200a2d0ad19",
          "length": 283,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "dcaa3a16-eb7d-44a6-b124-b7f45bf52085"
        },
        "item": {
          "id": "60e237ec-2c52-47c2-9e7d-a8009f502d84",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "fc1c6b68-8a16-4e05-9d59-1c0434126350",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1eff716d-8492-4037-b70f-5a1ee1b38ade",
        "cursor": {
          "ref": "2abbf724-f4f3-4303-ab60-cdd394f063d9",
          "length": 283,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "7cdff268-3467-4853-a389-b95ae75c3f4a"
        },
        "item": {
          "id": "1eff716d-8492-4037-b70f-5a1ee1b38ade",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f4569aa0-4646-408a-a986-09630144fd39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0812270-96ad-4412-bf5e-2fd6fde09f98",
        "cursor": {
          "ref": "79bfb881-d4a6-4dcf-b6ba-3ebdb446dc40",
          "length": 283,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "20e0859e-8011-4113-9c06-4966d963aa5f"
        },
        "item": {
          "id": "d0812270-96ad-4412-bf5e-2fd6fde09f98",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "2d72429b-8f64-4560-9110-411dc96786f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ce0f5090-390e-4901-9c3b-dd797227e478",
        "cursor": {
          "ref": "89b8d90b-b209-4b29-97f7-666857291298",
          "length": 283,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "0874a45c-fd12-420f-b28b-7a4d3bdc243e"
        },
        "item": {
          "id": "ce0f5090-390e-4901-9c3b-dd797227e478",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "5bbca028-46c1-4dad-ae86-813fc40b31dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d909d807-febc-4b11-9283-859159357ce7",
        "cursor": {
          "ref": "e51eff28-71e9-4a56-a195-b826e3f1b262",
          "length": 283,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "9154fa39-ffe1-4951-96ef-a8dbf24f3f05"
        },
        "item": {
          "id": "d909d807-febc-4b11-9283-859159357ce7",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "fa8eea93-f720-4c45-9cc6-92d7fc7a72dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6e42517-7fdf-4a40-9fe1-2d88b659fe44",
        "cursor": {
          "ref": "9ce9fca2-4187-4113-8ff1-5909317b9e02",
          "length": 283,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "574fc0cd-c33d-4f71-9201-679aa8395052"
        },
        "item": {
          "id": "c6e42517-7fdf-4a40-9fe1-2d88b659fe44",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "de68ac08-dbd8-4666-9064-bd2c13e73f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "685e4543-9703-4805-b4d9-e0a7ac2f031c",
        "cursor": {
          "ref": "665e57e2-b1a8-4d19-b9cc-26e597d6d9ba",
          "length": 283,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "90e5774e-d449-4b68-8741-184eb8c81083"
        },
        "item": {
          "id": "685e4543-9703-4805-b4d9-e0a7ac2f031c",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "03eae662-637d-4d00-97f8-2821ad147e3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b10861c-db3a-4c2d-b893-dc70dfdd6896",
        "cursor": {
          "ref": "01c48a36-2359-4264-bc4c-cdec7584b3c2",
          "length": 283,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2c93201e-68cf-489f-af28-6fe6aa8d7cd3"
        },
        "item": {
          "id": "8b10861c-db3a-4c2d-b893-dc70dfdd6896",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "d8a4c1a5-abd6-4d24-a6e7-df9f9c42cf26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a02e53a9-70bd-487f-810a-2394962e935d",
        "cursor": {
          "ref": "589a4615-40e4-4b7c-8f72-d04970439080",
          "length": 283,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "210dd19c-da90-42c7-8796-8b5fb08a8fa3"
        },
        "item": {
          "id": "a02e53a9-70bd-487f-810a-2394962e935d",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "6763327e-2cbd-424c-a5a4-832f11b35478",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0957440f-2fa3-4619-bd89-1eab136f9a4e",
        "cursor": {
          "ref": "24e7a5e7-9a17-4c63-aa59-dd251778f8ef",
          "length": 283,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "45294cd0-5e96-48fb-b8e2-e46686355dfe"
        },
        "item": {
          "id": "0957440f-2fa3-4619-bd89-1eab136f9a4e",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "62f256e4-62a3-4183-8dfd-f116d9687684",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9d1c473a-3e80-4a79-b302-f6266966e397",
        "cursor": {
          "ref": "138d5677-3b8a-40ea-b9b6-20b448d8f5d9",
          "length": 283,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "6d544b3d-fc5f-4816-b442-033711ae79e8"
        },
        "item": {
          "id": "9d1c473a-3e80-4a79-b302-f6266966e397",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "77769b0a-1818-4e4d-bd23-7c594d07ea92",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 228
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c00c1351-14a7-40b9-bd6f-ac39040c0e0a",
        "cursor": {
          "ref": "a3a47ce3-35ab-40ff-b469-f68f134725e7",
          "length": 283,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "daafa91a-30f2-4f9e-b2c3-c0ed05b19e47"
        },
        "item": {
          "id": "c00c1351-14a7-40b9-bd6f-ac39040c0e0a",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "294e7890-54b0-4b80-bee5-9c17456adfb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 194
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "493330d5-448f-4d87-b1f7-a7c580eb24ef",
        "cursor": {
          "ref": "dcf47bd7-309c-47b8-a0f9-e9e534825be9",
          "length": 283,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "7777a123-1c0c-4fe2-9ebe-fc6b84f1ce4d"
        },
        "item": {
          "id": "493330d5-448f-4d87-b1f7-a7c580eb24ef",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "9cec35a0-b4c9-489f-933f-3fe9fd632393",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 77,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:155)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "0717f77f-d799-4c47-887f-5852113f34b5",
        "cursor": {
          "ref": "1aaac4ba-5d98-4171-a366-81c702dae376",
          "length": 283,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "48c7f25d-b264-4458-9a83-2ae58dcaed8b"
        },
        "item": {
          "id": "0717f77f-d799-4c47-887f-5852113f34b5",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "4a9f081e-3a4f-45e8-8020-843312434294",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "477988ba-2fc5-48a6-9e29-2675a2d07e5b",
        "cursor": {
          "ref": "dd4b0946-ec72-4599-8912-8df747d9761e",
          "length": 283,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "d8be7fce-816b-4a0d-b828-aeed360c59bc"
        },
        "item": {
          "id": "477988ba-2fc5-48a6-9e29-2675a2d07e5b",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "eeb6098e-3384-407c-8e62-44246123ea68",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 55,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0be74a65-e006-4176-94da-dc9c409e05ae",
        "cursor": {
          "ref": "a27b9986-a3c9-4cfe-ace2-6bc60ab801c5",
          "length": 283,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "66257c1d-a17e-44e7-83cb-6a7d3a133f00"
        },
        "item": {
          "id": "0be74a65-e006-4176-94da-dc9c409e05ae",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "dd1f098d-0056-4aec-bfa8-cda9643cce88",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2969ae58-02c7-4092-8c99-650cde78dac2",
        "cursor": {
          "ref": "7739572d-c437-4139-b015-646b2f90128f",
          "length": 283,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "d4d7b989-0ace-475c-9d70-5754ac661a5c"
        },
        "item": {
          "id": "2969ae58-02c7-4092-8c99-650cde78dac2",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "14e071b3-b9e7-451f-b93f-347a087ff301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 153
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a57602d1-ccb4-4285-ac03-c7762f6b5b9a",
        "cursor": {
          "ref": "ae41c011-9363-4aec-b53c-cfa96eef109e",
          "length": 283,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "d700789e-98b8-4d68-8445-03ffdc462e35"
        },
        "item": {
          "id": "a57602d1-ccb4-4285-ac03-c7762f6b5b9a",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "d6143591-ad4c-45bc-826a-3afa3cb4707b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1561f6c9-edac-4eb9-b5c1-8205d5afa7e2",
        "cursor": {
          "ref": "0e95acaa-bda2-48ce-8d05-a6a5b9b1950b",
          "length": 283,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "279b7246-c583-4635-a332-6a4c0404b3db"
        },
        "item": {
          "id": "1561f6c9-edac-4eb9-b5c1-8205d5afa7e2",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "7ca0c2be-ebcb-40d9-9e1b-7f027cd70eae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2df32a6a-803c-43d4-abf9-cbc361fc65dd",
        "cursor": {
          "ref": "dae8ad3b-d155-44d3-ade9-7eceeb4d6bc5",
          "length": 283,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "45992fee-8ac1-4670-a82b-6a9891477cd6"
        },
        "item": {
          "id": "2df32a6a-803c-43d4-abf9-cbc361fc65dd",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "210016da-3fdf-48d5-87ed-817fa72e9d4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27c89301-4c6b-4656-9600-85f05a6cc880",
        "cursor": {
          "ref": "5c4f821b-2dfb-4ebc-ae53-620fb432413b",
          "length": 283,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "812e4ba9-a3f6-4a09-9d0b-5b0cf4b84382"
        },
        "item": {
          "id": "27c89301-4c6b-4656-9600-85f05a6cc880",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "8d131a46-1275-4ab9-9dc5-5666d11ca98a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44921076-08f4-4753-8fa6-c84dadcddebf",
        "cursor": {
          "ref": "f5869ff6-0a1f-4e26-a969-1414f14a7ccd",
          "length": 283,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "245906f9-d631-4f4e-a532-d1cd1d8494aa"
        },
        "item": {
          "id": "44921076-08f4-4753-8fa6-c84dadcddebf",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "b3cbc1e2-9cbc-40c5-ba3d-2efb8b678a07",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 39,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "44de3943-e1b1-4b13-9a17-83516707415d",
        "cursor": {
          "ref": "d92e9e6c-f86d-4883-9fa6-4ea82d3ebf86",
          "length": 283,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "a38d54a4-cc14-446f-95ac-01829ab216d8"
        },
        "item": {
          "id": "44de3943-e1b1-4b13-9a17-83516707415d",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "50437134-1f14-44be-b005-cc085a6c397c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 169
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8b0d298-a5e0-49ed-b4cd-2e70c9733afb",
        "cursor": {
          "ref": "241980a5-e298-43f5-b061-45b784222964",
          "length": 283,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "58a7c122-4260-408f-a02a-cfb2f7056d45"
        },
        "item": {
          "id": "d8b0d298-a5e0-49ed-b4cd-2e70c9733afb",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "7617f310-bd55-4463-9cbd-e8b88b202fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5dd83e33-69fb-42f5-ac3c-81e8f82e0720",
        "cursor": {
          "ref": "66908dd4-4270-442b-9b92-1c35109aa54c",
          "length": 283,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "72b5b7c8-849b-4f16-ac18-4ecba418b1bc"
        },
        "item": {
          "id": "5dd83e33-69fb-42f5-ac3c-81e8f82e0720",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "eb70f664-b115-4577-96dc-114b13fe0add",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f75c6e91-93a1-454a-8096-99fe7807a083",
        "cursor": {
          "ref": "9ddfd058-0746-4d04-8c33-9f657cc4daeb",
          "length": 283,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "abaaa61b-b9ec-4b71-b80f-00a29c13e835"
        },
        "item": {
          "id": "f75c6e91-93a1-454a-8096-99fe7807a083",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "7b1e0445-fe38-451a-9af0-9842682d90cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c803b0bd-6b77-488c-800e-27c29ba89911",
        "cursor": {
          "ref": "2be736f6-1439-4044-b3cb-3557f76e6127",
          "length": 283,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "d88144a3-60a7-4d1a-87d1-24dab599589f"
        },
        "item": {
          "id": "c803b0bd-6b77-488c-800e-27c29ba89911",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "22e3aa03-48e7-4f47-bf82-28ee0a45b29e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33c858a6-a927-4e31-9822-0b3f26982318",
        "cursor": {
          "ref": "0b9063ee-90fc-49eb-abff-991fb8d6637f",
          "length": 283,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "1692796c-ed07-44cb-9944-233a5e0f205d"
        },
        "item": {
          "id": "33c858a6-a927-4e31-9822-0b3f26982318",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "c6b837b8-b187-4327-8cc7-aaee4a021a8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4225faef-a78e-44ec-8faf-ae20962db9e2",
        "cursor": {
          "ref": "96f8d44a-4cf8-4043-b96b-677f3170782a",
          "length": 283,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "405069c7-35ba-41bf-ac71-9938af716e7c"
        },
        "item": {
          "id": "4225faef-a78e-44ec-8faf-ae20962db9e2",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "a9f4276b-cbdb-4916-a4c2-5993e0d39ad5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 221
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "39dd081e-53ad-4c79-83b0-cd62eac522ac",
        "cursor": {
          "ref": "8c231b17-8816-41b4-b5df-cbb70aede0eb",
          "length": 283,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "4f181cad-3f8f-4f22-93d7-1cfd6b6d178f"
        },
        "item": {
          "id": "39dd081e-53ad-4c79-83b0-cd62eac522ac",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "e5a0889b-6b35-40e2-b494-1a0ca83c691a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 71,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b48e3d1-f945-45be-bc86-61b83ae7c15f",
        "cursor": {
          "ref": "db6f6833-d4e8-4eed-a29a-3d34f02edee7",
          "length": 283,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "7a7367c1-bd2f-4d46-a140-fb32e16a5e06"
        },
        "item": {
          "id": "0b48e3d1-f945-45be-bc86-61b83ae7c15f",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "6b1b7b6b-6d71-4f73-987d-9a15fe8922b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dff62a5b-dc26-4332-85ba-d11a84938968",
        "cursor": {
          "ref": "645c7291-4fed-423d-9e85-fb08712872ea",
          "length": 283,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "039f21f6-61a9-493b-be52-cb396aa16d1b"
        },
        "item": {
          "id": "dff62a5b-dc26-4332-85ba-d11a84938968",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "71895f7d-40b3-4ec4-8764-3965a3af4b62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab3e41ce-a5e9-4ea9-bea2-d3c9631835ab",
        "cursor": {
          "ref": "1ac783e5-d674-4713-9dae-cad10cc9064e",
          "length": 283,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "70a028ef-92a5-4185-b746-33954e5f35c1"
        },
        "item": {
          "id": "ab3e41ce-a5e9-4ea9-bea2-d3c9631835ab",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "dc019de7-0c4c-490b-a7ed-702d4b4e57e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d41bae9e-67b1-42d8-b906-40163feacd63",
        "cursor": {
          "ref": "b62daba3-b05f-4148-86ba-d01564dfe322",
          "length": 283,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "7c586061-c699-43fc-bdb3-a561bf64f969"
        },
        "item": {
          "id": "d41bae9e-67b1-42d8-b906-40163feacd63",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "b310b801-9fb2-4d79-9ff4-614894113c84",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3436c795-d36d-496d-8bb9-aee906eba806",
        "cursor": {
          "ref": "2c4ac345-08d7-42c6-8469-65a0f238605e",
          "length": 283,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "80249454-f896-42ce-b57c-5f7a365d5d6a"
        },
        "item": {
          "id": "3436c795-d36d-496d-8bb9-aee906eba806",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "fe330159-edfd-4443-9173-d38b8d094dcd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6d70a5e4-5879-4c7c-a195-612f2d662be2",
        "cursor": {
          "ref": "c36a4fff-4793-434f-bf7a-75c1e8592da6",
          "length": 283,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "91718468-ae74-42bd-9add-6d1a3ac25f67"
        },
        "item": {
          "id": "6d70a5e4-5879-4c7c-a195-612f2d662be2",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "4afc11b5-196b-4a63-a0bc-d2a48fca016c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5e91bcf-0fe2-4b39-a446-29dc75ae773a",
        "cursor": {
          "ref": "bb3fee17-f270-4a90-a693-be1b5c14cb03",
          "length": 283,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "aa7669bd-abd4-41ad-9571-5e9909ae4c9e"
        },
        "item": {
          "id": "d5e91bcf-0fe2-4b39-a446-29dc75ae773a",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d7ee2fee-6ff5-409d-a8ae-18e6957044ae",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "78ee8fc2-3bd5-4499-8691-b46890a8a3ed",
        "cursor": {
          "ref": "828a2c3d-1440-4c86-919e-166ed65375b2",
          "length": 283,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "84ceb21f-1558-4d0d-86ca-3d35262bafb1"
        },
        "item": {
          "id": "78ee8fc2-3bd5-4499-8691-b46890a8a3ed",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "95a8f505-0cfc-4ddc-a447-1beef716c070",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "25e45d4e-90a4-476b-aa75-881fabab51e9",
        "cursor": {
          "ref": "cd0e18ed-f34c-4700-9423-16830c39e74a",
          "length": 283,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "786c5633-f242-48bd-977a-781713c65af6"
        },
        "item": {
          "id": "25e45d4e-90a4-476b-aa75-881fabab51e9",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "2791b7aa-1d03-482b-abe3-882ae737447b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8dcbc45d-24cf-43b0-9b05-fce9127cd3b9",
        "cursor": {
          "ref": "758f5148-9b47-420a-ac17-e1d35bcd008a",
          "length": 283,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "a8564f1c-51e3-47b5-be47-c24678a814ba"
        },
        "item": {
          "id": "8dcbc45d-24cf-43b0-9b05-fce9127cd3b9",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b773734e-d062-4824-b6df-a2e01028df59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c9c535b-4b5e-40e7-9810-36c7169a8274",
        "cursor": {
          "ref": "9196b690-e70a-461b-9ba5-4f82e8ad6edc",
          "length": 283,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "c3873f0a-e378-4680-b3ee-3fbfb820067c"
        },
        "item": {
          "id": "9c9c535b-4b5e-40e7-9810-36c7169a8274",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "6ce2e04e-0966-4b50-bb2e-2d115b99df8c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3473e341-14c5-4136-8318-1bb85f5ab9f3",
        "cursor": {
          "ref": "6aa7a983-757c-447d-80a6-3610dfbdc626",
          "length": 283,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "03a61223-507a-46b7-bad1-40e40e17877b"
        },
        "item": {
          "id": "3473e341-14c5-4136-8318-1bb85f5ab9f3",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b4b4c246-f677-40af-9af3-60adb0af699a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e4745fc3-e5fa-46b2-bf24-da4eacc2710d",
        "cursor": {
          "ref": "d84fc7f6-3281-450e-8885-f506c369dba0",
          "length": 283,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "9e32e05f-2f37-49f5-9b13-7233684cd6f5"
        },
        "item": {
          "id": "e4745fc3-e5fa-46b2-bf24-da4eacc2710d",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "96841744-0ee3-4f46-b26d-8cee4856273d",
          "status": "OK",
          "code": 200,
          "responseTime": 123,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:185)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "3199d9a1-b7f2-4c58-a800-db4c753518e3",
        "cursor": {
          "ref": "bb676d98-4851-4734-b34c-5a8aff9c58c4",
          "length": 283,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "6d47e16e-8e5a-4648-952c-5d6a1b07a66e"
        },
        "item": {
          "id": "3199d9a1-b7f2-4c58-a800-db4c753518e3",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "e4d777fa-24f8-40d8-8c70-99a46fe18217",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cfb0adab-0648-43fb-8070-26e66ca74c31",
        "cursor": {
          "ref": "36b87791-ca0a-42d0-b0b6-9b1db352f74b",
          "length": 283,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "633c7e4b-e0cd-4b38-a2a8-b56671bf6b97"
        },
        "item": {
          "id": "cfb0adab-0648-43fb-8070-26e66ca74c31",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "3a8fd005-526b-49e4-8fa2-c60314305d3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "661ce646-5e93-42ad-a442-d269cdad9c9f",
        "cursor": {
          "ref": "37040a99-ab9b-48eb-80d6-77c27803e8c3",
          "length": 283,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "fa544f78-cf57-478c-8239-ae1187df02a9"
        },
        "item": {
          "id": "661ce646-5e93-42ad-a442-d269cdad9c9f",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "48997c00-c6d7-48eb-a8de-d3b702443eea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ca73b58-173d-4482-88bb-1d33b0aaf04b",
        "cursor": {
          "ref": "6c02a1a7-c13f-4279-a1ac-b5f078e47520",
          "length": 283,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "6fd3ea6f-657d-42c8-b628-3ca6425bee34"
        },
        "item": {
          "id": "8ca73b58-173d-4482-88bb-1d33b0aaf04b",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "8f81623f-cfa9-4934-b370-1dd9d0298a1f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 305
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab31e62a-ec70-4721-bcae-d3628bd1f411",
        "cursor": {
          "ref": "47d265b0-b61a-47e3-914a-3ca3c3f59e0c",
          "length": 283,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d4f4c68c-b6d7-4b0c-b9db-5b075082ee50"
        },
        "item": {
          "id": "ab31e62a-ec70-4721-bcae-d3628bd1f411",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "0a151231-21a9-45c3-90f4-d78018360fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d32ea2ec-0a99-4c3d-a400-773e1ee61598",
        "cursor": {
          "ref": "6d4c1a35-5015-4d6a-9c92-435162db7052",
          "length": 283,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "e5ce5599-c041-4a82-a57a-d57fd9e0d816"
        },
        "item": {
          "id": "d32ea2ec-0a99-4c3d-a400-773e1ee61598",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "8095ccf4-bcf5-4481-90e1-79846eaf64b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed89e635-53b6-4076-91b6-cc8e0a0d4a2e",
        "cursor": {
          "ref": "4d9e039d-538a-49c6-a48b-38b4042a17d7",
          "length": 283,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "e1cea830-bb9f-496d-b7d9-06f763529e1a"
        },
        "item": {
          "id": "ed89e635-53b6-4076-91b6-cc8e0a0d4a2e",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "d50a3219-d51f-40ce-9572-01e7b59e70d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 49,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c8d84827-72b1-46d1-8670-2a4a3f6c653a",
        "cursor": {
          "ref": "6a674983-a584-43ac-a86b-513d2e346b66",
          "length": 283,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "d52e5b81-518e-4323-94f5-7f0217304cfc"
        },
        "item": {
          "id": "c8d84827-72b1-46d1-8670-2a4a3f6c653a",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "9e86970b-b35e-4ff8-96c2-be38e45618a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f96ae35-cd6f-456d-8f2a-dc4b496e82c0",
        "cursor": {
          "ref": "fed6a68c-6a86-498c-ad40-882a09a93252",
          "length": 283,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "c934a446-0cfa-4e45-9d19-2023de1d7bb0"
        },
        "item": {
          "id": "5f96ae35-cd6f-456d-8f2a-dc4b496e82c0",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "fdc0365a-dd86-4967-bd4a-b24d74dfc102",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b5bfe682-1938-4d4d-a2fd-fe1bb104e16d",
        "cursor": {
          "ref": "b6c49a1e-f463-452b-beb6-48a810e6a717",
          "length": 283,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "236d3f43-2630-4d0a-b313-f36e059ffa64"
        },
        "item": {
          "id": "b5bfe682-1938-4d4d-a2fd-fe1bb104e16d",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "e14f1a42-08ea-428a-99c4-8c80c480550f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "65652249-d988-42e7-b564-8d16792402e8",
        "cursor": {
          "ref": "dfc88da4-6b96-4e37-bd0f-960092b40969",
          "length": 283,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "f7b66c75-cb46-47d9-9806-3c20fe8de311"
        },
        "item": {
          "id": "65652249-d988-42e7-b564-8d16792402e8",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "ab304c7e-d73c-44d5-a80a-ed9a09c6ea7b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a4063d9f-0cfe-4ac9-8e74-17b5633944a0",
        "cursor": {
          "ref": "10ab746a-351d-4f34-8599-962ef8fba7b5",
          "length": 283,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "2b8df9bc-3c58-4892-a28d-a794d5009e17"
        },
        "item": {
          "id": "a4063d9f-0cfe-4ac9-8e74-17b5633944a0",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "90ab8c19-6116-47ce-b09e-c09d1c8c8039",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9fbeed00-32f9-43b9-8ae7-0f47bc869e3e",
        "cursor": {
          "ref": "d2c4238f-8e11-4db2-b570-8759e552026d",
          "length": 283,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "ffff46c4-b2a6-405d-a2c4-0222f9b2c94e"
        },
        "item": {
          "id": "9fbeed00-32f9-43b9-8ae7-0f47bc869e3e",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "40ba0dc8-5bd2-4017-ae06-e2bea6a3efd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4bc0f2f3-80e9-4d56-b18f-de448cd82445",
        "cursor": {
          "ref": "5b501487-ad40-4834-9623-910d01d35583",
          "length": 283,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "a82ef7e0-e482-43f1-813f-cffdbadd21c3"
        },
        "item": {
          "id": "4bc0f2f3-80e9-4d56-b18f-de448cd82445",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9b8dcb3f-9b65-49a5-abf5-a389a2db915c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35ca1d4c-3fe5-495c-a09d-e0906ad3a8cd",
        "cursor": {
          "ref": "7d536312-662b-453c-8f38-c29d586c5e9f",
          "length": 283,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "35891db7-f43d-446d-85e8-4b28ec000bc0"
        },
        "item": {
          "id": "35ca1d4c-3fe5-495c-a09d-e0906ad3a8cd",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "7d6c27e5-8a0e-463e-acdb-3a412368411e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b6546e4f-047f-4e66-a5e6-28c7e6d58015",
        "cursor": {
          "ref": "dccaf07c-cba8-4ba3-9834-92badc337cef",
          "length": 283,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "c461b326-6866-48da-8af5-7ab456059ea1"
        },
        "item": {
          "id": "b6546e4f-047f-4e66-a5e6-28c7e6d58015",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "ba0997b8-da65-46bf-95f4-7285d56d1e9b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d2f8f75-32c7-423f-a707-9c6b5f5c24da",
        "cursor": {
          "ref": "95bc2b45-1693-4f90-b009-8fd35b9a43fe",
          "length": 283,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "476c7ffc-7c42-4f9c-8b4b-4c7a2be07a03"
        },
        "item": {
          "id": "7d2f8f75-32c7-423f-a707-9c6b5f5c24da",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "eb0d1c93-4b91-466d-8d70-96ef78419c0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "42ec74ea-8c90-426d-a051-a614b8b7752e",
        "cursor": {
          "ref": "5ab98e1e-90fc-41ac-a57e-5314e03aa8d8",
          "length": 283,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "d18f4099-17f7-43a0-ae48-2890b63076aa"
        },
        "item": {
          "id": "42ec74ea-8c90-426d-a051-a614b8b7752e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "9477ac23-4fed-49d8-a791-b7eb185eedd0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c961e29-ea9c-4a88-81dc-c8b5dd829c16",
        "cursor": {
          "ref": "0e490aab-337a-43ef-8474-25c642f74f8a",
          "length": 283,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "306dd913-e88f-4969-8c07-10bdda9d066f"
        },
        "item": {
          "id": "9c961e29-ea9c-4a88-81dc-c8b5dd829c16",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "0c9062e0-9692-4159-bc7f-f38edee10613",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5643c2e6-5675-40f5-b253-5846d3c665ae",
        "cursor": {
          "ref": "3c64cdba-b25d-4fe8-a046-38fe90d70755",
          "length": 283,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "03cb732b-1f7a-49d7-b0a3-c6bbc9662720"
        },
        "item": {
          "id": "5643c2e6-5675-40f5-b253-5846d3c665ae",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "76627605-07c9-4658-8ca2-d9364e55e474",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "658eae90-cf0a-4372-9db0-704fb1cc7ab7",
        "cursor": {
          "ref": "4823782e-9950-4cee-85c1-8a0da9ef9947",
          "length": 283,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "2ffa930b-38bf-4bc8-a746-6d688f2a1218"
        },
        "item": {
          "id": "658eae90-cf0a-4372-9db0-704fb1cc7ab7",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "e97fab12-0877-4a5d-90ad-81e46181bf8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "adbe5c8a-e320-472b-b107-3b61022bd0bd",
        "cursor": {
          "ref": "fee4f1b3-13c3-4072-bd9e-969b55a223a5",
          "length": 283,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "e70fdb07-8900-4e03-8129-3fce9bce7abc"
        },
        "item": {
          "id": "adbe5c8a-e320-472b-b107-3b61022bd0bd",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "bc09913b-9e11-4424-ba8b-f34f1e84ce22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 51,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1254ef4e-cdc3-43f9-88df-b9d7af85321e",
        "cursor": {
          "ref": "ed40e8c7-ba71-4880-960c-054d1bd3499a",
          "length": 283,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "1e3f11c2-5d2c-45c8-be0e-a7241205278c"
        },
        "item": {
          "id": "1254ef4e-cdc3-43f9-88df-b9d7af85321e",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "1f78e2f3-48c2-4a22-80bd-db3a0bfab11b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36e46c62-0031-4e66-8fb2-d40086ddc765",
        "cursor": {
          "ref": "fd2fcc89-de83-4b4e-bace-39b635eb9541",
          "length": 283,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "731989d5-94fa-4c0e-a639-60d548266ac1"
        },
        "item": {
          "id": "36e46c62-0031-4e66-8fb2-d40086ddc765",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "9732139d-1118-4253-97a9-e14b091d0af2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61a3872e-bf5d-49a5-89a3-20fbe04da589",
        "cursor": {
          "ref": "c32991ab-13a3-4fa4-b82d-46952e2308f7",
          "length": 283,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "8698588b-4abc-4abd-9165-d3ff97c7a071"
        },
        "item": {
          "id": "61a3872e-bf5d-49a5-89a3-20fbe04da589",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "bea18d84-bc92-4a5d-a9e0-2ac1c3d13d43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "faab3aa8-00ec-48e3-ab5f-eec83cd5be90",
        "cursor": {
          "ref": "989c08df-760f-4745-a9b9-befa1d71a715",
          "length": 283,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "9bca9b5c-e8e0-4ef8-84c0-0416c71d21bc"
        },
        "item": {
          "id": "faab3aa8-00ec-48e3-ab5f-eec83cd5be90",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "e55f4009-10fd-4b8c-922d-51fa8892c783",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0c7d9f54-4377-47b2-9e2f-eaf288d56c98",
        "cursor": {
          "ref": "ef9afaf8-9367-4647-b653-0a8dad4d690d",
          "length": 283,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "f4ca7991-88c0-4701-9666-6b7952d66900"
        },
        "item": {
          "id": "0c7d9f54-4377-47b2-9e2f-eaf288d56c98",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "36e65def-6f24-41f0-992d-66a1123d2256",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "03f2961a-1b1e-452c-a810-6feae441490a",
        "cursor": {
          "ref": "8b17949d-9024-4e36-a8c5-9c0b38411568",
          "length": 283,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d1b9e44e-81f9-45fb-a699-8e8beaf4457e"
        },
        "item": {
          "id": "03f2961a-1b1e-452c-a810-6feae441490a",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "73fb66fb-fdb2-4c06-89e7-d0d57cb35def",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "89f699c6-7fb5-418d-8753-f9be0bf8c726",
        "cursor": {
          "ref": "509c9804-276e-4327-a2ba-f5d39f06b6c4",
          "length": 283,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "2af6c937-f932-4df7-b1ec-1e1449bb13cf"
        },
        "item": {
          "id": "89f699c6-7fb5-418d-8753-f9be0bf8c726",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "99e46f64-76cf-4341-8499-685c341e491b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "959c32c7-7863-4a07-a0f6-f1bdbef131b3",
        "cursor": {
          "ref": "b51e17dc-371c-4ee5-9958-96821b0cef88",
          "length": 283,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "c6089353-7c40-4d2e-80f7-12cb30113dca"
        },
        "item": {
          "id": "959c32c7-7863-4a07-a0f6-f1bdbef131b3",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "afbcf972-471a-4047-be93-78cb6dfae6b2",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:215)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "7b2b1ca7-486c-417c-9a5b-65bba86e6dce",
        "cursor": {
          "ref": "6cd6e174-6998-439d-b839-75edf66ae972",
          "length": 283,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "acc9e30e-5f07-4051-80f6-bc3cc0336444"
        },
        "item": {
          "id": "7b2b1ca7-486c-417c-9a5b-65bba86e6dce",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "ecdae677-149e-4b8c-b9ee-9c12275c6aad",
          "status": "OK",
          "code": 200,
          "responseTime": 82,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:216)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "5cc7babe-512d-489b-ae10-4b844ac3efa1",
        "cursor": {
          "ref": "463c62d4-38dd-4f7f-b21d-5392cb92c69f",
          "length": 283,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "de5d695e-be17-4737-8ef3-f4c8bbe28e50"
        },
        "item": {
          "id": "5cc7babe-512d-489b-ae10-4b844ac3efa1",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "0a9edb78-c1cd-4926-b632-0c365df19038",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:217)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "a59158cb-7bdc-4748-9cc0-f355ed60e9e6",
        "cursor": {
          "ref": "3b876c69-27af-48c1-96b9-f375e1830fe5",
          "length": 283,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "ce881662-ecb7-4046-bc6e-d6cde23787a4"
        },
        "item": {
          "id": "a59158cb-7bdc-4748-9cc0-f355ed60e9e6",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "7da77cd8-808c-4d48-88c7-7a6c398ff072",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 106
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df240d1-bba6-415c-9c65-533eeb913a0b",
        "cursor": {
          "ref": "fbe13761-09b5-40b5-b700-d4d080528cf7",
          "length": 283,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "3e2ad3e5-6b88-4677-9294-ac779315ce78"
        },
        "item": {
          "id": "9df240d1-bba6-415c-9c65-533eeb913a0b",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "fce9fb7f-6b51-439c-9daa-c406f61731d2",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:219)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "232aaab0-caea-491b-954b-1b656632b5d8",
        "cursor": {
          "ref": "c1de98a3-1eac-45bc-ac69-d637aceed5be",
          "length": 283,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "89379014-e80b-4ba3-bcde-12a130ec0f69"
        },
        "item": {
          "id": "232aaab0-caea-491b-954b-1b656632b5d8",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "22ded2bd-d5d0-4122-92dd-37470b466846",
          "status": "OK",
          "code": 200,
          "responseTime": 91,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:220)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "44823f2d-d4d7-4d05-9b97-bf6696d81b79",
        "cursor": {
          "ref": "d2b34c04-7d30-4bc6-a489-127b8d8eb244",
          "length": 283,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "53e76c6f-21a7-48e3-9b15-da64d6469d44"
        },
        "item": {
          "id": "44823f2d-d4d7-4d05-9b97-bf6696d81b79",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "f2218243-2691-4f3c-9425-531940303cd2",
          "status": "OK",
          "code": 200,
          "responseTime": 88,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:221)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "61d2fbb1-4896-4054-904c-85a36ddde35a",
        "cursor": {
          "ref": "28bf2d33-67f5-4da6-ad14-18e7f4f32da6",
          "length": 283,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "6fcd6a06-a653-41c0-9eb5-ed11de8c0644"
        },
        "item": {
          "id": "61d2fbb1-4896-4054-904c-85a36ddde35a",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "a148b93f-2d1c-4578-82a1-ad9dd0429789",
          "status": "OK",
          "code": 200,
          "responseTime": 87,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:222)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "343dbcc4-bf90-4b28-aba7-fc49be9d0cc6",
        "cursor": {
          "ref": "20e8e927-c811-4e0c-96f8-b0408a152ee4",
          "length": 283,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "622db1a3-ce34-4935-be16-2b6f0a43b9a8"
        },
        "item": {
          "id": "343dbcc4-bf90-4b28-aba7-fc49be9d0cc6",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "b07be64f-c7cc-4e55-bc62-3049f9c18bea",
          "status": "OK",
          "code": 200,
          "responseTime": 78,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:223)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "15be9b08-6aeb-4742-8f05-606c2560cc5b",
        "cursor": {
          "ref": "ab5a810c-0f90-4101-befe-c2e86976fe37",
          "length": 283,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "5dbfc342-6e30-400e-b19d-4c95459b718c"
        },
        "item": {
          "id": "15be9b08-6aeb-4742-8f05-606c2560cc5b",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "ff396b22-368c-41a5-8d76-b2bb5d44e226",
          "status": "OK",
          "code": 200,
          "responseTime": 79,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "1e849e83-b602-43eb-a495-b30a084376a4",
        "cursor": {
          "ref": "6bf5e5da-f047-43eb-91eb-f3a26a12d20d",
          "length": 283,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "a6d3fa76-fe4a-4129-b84e-2b8afce308f9"
        },
        "item": {
          "id": "1e849e83-b602-43eb-a495-b30a084376a4",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "aeab469e-068a-4224-bab4-90084b56539a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "538f2f33-2aad-4728-88f1-ef7f7da720e5",
        "cursor": {
          "ref": "7b0b126b-fd83-439d-aec0-9f88a9f50c87",
          "length": 283,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "7b3c977b-a023-4693-870a-784e08f8d0bf"
        },
        "item": {
          "id": "538f2f33-2aad-4728-88f1-ef7f7da720e5",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "051557a2-ac17-4fca-89d7-29ee819c6438",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5516517b-5ef0-431a-aec6-dabe5b806b69",
        "cursor": {
          "ref": "d9cec9f1-b07b-46d7-a061-5a794619dc4b",
          "length": 283,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "5697830d-e1e1-4075-bc63-adb1b7ecb3f9"
        },
        "item": {
          "id": "5516517b-5ef0-431a-aec6-dabe5b806b69",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "92d6a20e-5f92-46d6-9293-50a212c482c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92d5b612-4b3f-49a7-bca0-d7b80218d3b5",
        "cursor": {
          "ref": "e99c46b4-ec10-4c4b-8ff9-58478b6b2d41",
          "length": 283,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "87d0fd1a-957b-432e-9b98-e853518bb6f5"
        },
        "item": {
          "id": "92d5b612-4b3f-49a7-bca0-d7b80218d3b5",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "2486d55b-53a2-47f6-8146-9a1f58d07df4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "61944eae-0939-44f4-bb24-194ac6ee1e91",
        "cursor": {
          "ref": "f5335ca9-d121-433a-ad30-038e6d8af6e1",
          "length": 283,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "c297fd17-7978-4dc9-876d-4059fd337cdf"
        },
        "item": {
          "id": "61944eae-0939-44f4-bb24-194ac6ee1e91",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "1d451aba-48f5-4077-8dc2-b77d362a1fce",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ccbe78f9-f8a1-48b7-9e6d-a2a004b37279",
        "cursor": {
          "ref": "d09035c8-2472-459c-a0cb-12dc3b2fdd90",
          "length": 283,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "d647dc78-0d2b-4321-a2b9-dbae14f62740"
        },
        "item": {
          "id": "ccbe78f9-f8a1-48b7-9e6d-a2a004b37279",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "bb6d1d35-ccde-4b5b-91b0-38342e03a373",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 69,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "59999190-3f22-4dcb-afcc-1347d16aa9d3",
        "cursor": {
          "ref": "97daec55-38eb-4749-8ad6-8fed6b7a9ab2",
          "length": 283,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "2628125c-b5d2-4348-b3f3-f43a0daa7b14"
        },
        "item": {
          "id": "59999190-3f22-4dcb-afcc-1347d16aa9d3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "48c3e7e9-eca3-4839-94f0-b042f60181c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "594e2c73-6436-46af-9268-e566a5bd3ffb",
        "cursor": {
          "ref": "11aafd0d-f696-48f7-ac61-78507bbe8053",
          "length": 283,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "83d9d919-e479-4dd0-ab96-99ccdc387858"
        },
        "item": {
          "id": "594e2c73-6436-46af-9268-e566a5bd3ffb",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "2e8fdf91-4d33-4f0c-9270-a4d24ea697af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dc558a2f-8da2-47bb-bdfb-21ec8db5e317",
        "cursor": {
          "ref": "804de91a-3099-4de0-bbb4-3e525eca8b01",
          "length": 283,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "0bc40579-c8c0-4a99-83c8-e6a9fe27fcd2"
        },
        "item": {
          "id": "dc558a2f-8da2-47bb-bdfb-21ec8db5e317",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "1ce5ffe8-5b79-4515-a567-6f5d282fc3fc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 223
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6dc4539b-a930-41de-9ab6-ff0371df4d7b",
        "cursor": {
          "ref": "b86f7334-abdb-48ca-9ed2-b4b5a6be6d86",
          "length": 283,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "93327059-3ebd-468d-9a1e-c047b54680e4"
        },
        "item": {
          "id": "6dc4539b-a930-41de-9ab6-ff0371df4d7b",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "284dc074-db03-4a0f-82ff-d92e317cd9cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "09550d1b-5643-4590-a322-2b5c4ce68ebf",
        "cursor": {
          "ref": "cef41667-73e9-4400-914a-e6f49c7ad7a2",
          "length": 283,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "02692f02-07c9-4681-8915-7d8f9ae5b3f7"
        },
        "item": {
          "id": "09550d1b-5643-4590-a322-2b5c4ce68ebf",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "ffaa4662-5700-4f0e-ab14-c2ef1708f380",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d95c963-4bee-4a3f-b018-a2d1d6b1cd99",
        "cursor": {
          "ref": "8934f486-0fe7-4535-9818-e524406c0a8f",
          "length": 283,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "3dde8687-c70b-4639-b70d-769470dded29"
        },
        "item": {
          "id": "7d95c963-4bee-4a3f-b018-a2d1d6b1cd99",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "8a086d54-52a3-4526-90a4-ef47d74026a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 268
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84fab11e-012f-4985-8710-9af866b9b51e",
        "cursor": {
          "ref": "fb84623d-976c-4005-bbb1-6d14bde861e0",
          "length": 283,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "08d8fda2-9b67-4197-bb6b-d294092cc7a5"
        },
        "item": {
          "id": "84fab11e-012f-4985-8710-9af866b9b51e",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "106821c3-26e3-4d29-8dfb-135ce054e682",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 205
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ce27152-fa9c-4622-ae0a-8ba981ac493e",
        "cursor": {
          "ref": "703c2cfe-89b6-4c76-8547-9687c39f79c8",
          "length": 283,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "97e78e3c-80e2-480f-9c82-97ec5fa47d07"
        },
        "item": {
          "id": "8ce27152-fa9c-4622-ae0a-8ba981ac493e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "27895cd7-8c1c-4a8b-a814-3b28f4e6f628",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "76c8d379-22e0-4873-809f-baafc9c28cb7",
        "cursor": {
          "ref": "b18667a5-9362-49a0-be61-9bc68f2a3d14",
          "length": 283,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "ef4a9dca-8f3e-483b-951c-2204969ce4da"
        },
        "item": {
          "id": "76c8d379-22e0-4873-809f-baafc9c28cb7",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "67e10417-e1b7-46f3-993a-c4d6d651c12c",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "a0b8de69-a31c-4d82-b07c-21239d3a2062",
        "cursor": {
          "ref": "5b16e06c-6f04-444f-a93e-5663931ddd8b",
          "length": 283,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "7ac0dc63-1497-46a7-bf2f-baf5650c2a45"
        },
        "item": {
          "id": "a0b8de69-a31c-4d82-b07c-21239d3a2062",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "9ce4e8b8-c62a-4180-b8ce-b3819b68a91e",
          "status": "OK",
          "code": 200,
          "responseTime": 83,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "264182a3-a37f-46e5-93b9-b13143c6d104",
        "cursor": {
          "ref": "468d5049-a4ed-425d-99e1-90d215f05d1d",
          "length": 283,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "fa1ff098-f2f8-492e-853e-83f5faa946b2"
        },
        "item": {
          "id": "264182a3-a37f-46e5-93b9-b13143c6d104",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "ef79628e-ae24-4c54-a72e-09e0bc817d90",
          "status": "OK",
          "code": 200,
          "responseTime": 80,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "d54c053f-602d-4354-aaac-c627c1225894",
        "cursor": {
          "ref": "c4a3e734-8d99-4157-bdd7-fd63e698995f",
          "length": 283,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "9799e168-be48-43d8-a1db-920cce71b4fc"
        },
        "item": {
          "id": "d54c053f-602d-4354-aaac-c627c1225894",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "28d85b33-6fa7-42fd-b0ba-a886b3a29b31",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:242)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "9be81ebf-db9d-4a26-ab1c-de54a8236b6b",
        "cursor": {
          "ref": "645bf572-d31d-455e-a34b-ad50dda748a7",
          "length": 283,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "6dc0fefa-da11-4ac3-b4eb-135cbd251375"
        },
        "item": {
          "id": "9be81ebf-db9d-4a26-ab1c-de54a8236b6b",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "55dd850f-c72d-42c3-9ebc-821159ffd14d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d14eb5f3-8f59-4c47-8221-f926cae26abf",
        "cursor": {
          "ref": "9f90023b-b1fb-4cd8-87ea-9f99ed595afc",
          "length": 283,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "ff69a723-254b-4f4e-ac10-709175249f43"
        },
        "item": {
          "id": "d14eb5f3-8f59-4c47-8221-f926cae26abf",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "83cd06c9-c29c-4399-a9c7-49d522616fb5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "018c885e-7a1a-4058-a7fe-936be717e71d",
        "cursor": {
          "ref": "6c1434fa-4e66-4a6d-816c-08f65be4f165",
          "length": 283,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "45a76146-e868-49dc-a23f-2f169ae28a8c"
        },
        "item": {
          "id": "018c885e-7a1a-4058-a7fe-936be717e71d",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "6898932f-f25c-4506-be8c-7feb9851fec3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "16c2d63a-50e9-4125-8d83-f4a74abe3449",
        "cursor": {
          "ref": "d615e9e4-483a-4795-adf0-6c4ca64f07a1",
          "length": 283,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "31301455-6bef-46e0-91fc-038b9a2c05de"
        },
        "item": {
          "id": "16c2d63a-50e9-4125-8d83-f4a74abe3449",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "74a0bcc3-5ebd-4fec-93e7-c7e3e40b1871",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 47,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3f7ff22c-3b22-4d4b-b8b6-07f622861983",
        "cursor": {
          "ref": "291b8bae-4de2-43d8-9cca-0e628eacc9f5",
          "length": 283,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "43b99343-4c7a-4840-a697-e1b6dfa1a1af"
        },
        "item": {
          "id": "3f7ff22c-3b22-4d4b-b8b6-07f622861983",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "932cb715-ffa5-4fd5-b5f2-7bd8bd769853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d8086412-c870-4e75-901c-746d1c8979c4",
        "cursor": {
          "ref": "35d4cc26-7202-4df0-9a82-683c6b2e5b12",
          "length": 283,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "0a4b924b-54fc-46d5-aeae-d13542c82a5d"
        },
        "item": {
          "id": "d8086412-c870-4e75-901c-746d1c8979c4",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "1473f016-f319-47b6-bb32-a49189780728",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6f01de3f-0a6f-4eb9-9d1e-2ca04f631a10",
        "cursor": {
          "ref": "078fc1ce-db71-42b2-b540-0c73273366e7",
          "length": 283,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "9e57f39a-3f0d-4dc2-86c1-e58ef0909588"
        },
        "item": {
          "id": "6f01de3f-0a6f-4eb9-9d1e-2ca04f631a10",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "f59e2c42-cd11-4ba4-9fb5-c0118ca1dda0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 48,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33250624-ed50-4c74-8359-aa48361fd9b5",
        "cursor": {
          "ref": "6c02a484-a34c-44e1-8864-8eebbe92d324",
          "length": 283,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "6fc78b13-c12a-4c71-a4a8-d25e9de2ef1f"
        },
        "item": {
          "id": "33250624-ed50-4c74-8359-aa48361fd9b5",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "adb9f5b1-5014-461c-a977-289e997fe269",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d8cbfb4-0408-4e57-83b3-b32ad1de35d0",
        "cursor": {
          "ref": "105b77cd-e6f5-4c65-b545-19d076be9be4",
          "length": 283,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "ff2eb566-8e65-43ce-9465-c433de2a62b1"
        },
        "item": {
          "id": "5d8cbfb4-0408-4e57-83b3-b32ad1de35d0",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "d8348ab5-ae95-4cc1-8000-cb9dfad2e385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aeacf05a-d8d0-4579-b5b2-735538440dc0",
        "cursor": {
          "ref": "62d65464-3245-4a3e-bced-6e462945c9ea",
          "length": 283,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "ded5c6ed-b4b8-45c0-9095-d020f904841c"
        },
        "item": {
          "id": "aeacf05a-d8d0-4579-b5b2-735538440dc0",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "e77d2279-9e8c-41e9-9466-2edcaca2d19c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "63c625b3-4f2f-40b9-b171-197151fe8fee",
        "cursor": {
          "ref": "af1f4660-d288-4632-9667-0b64be9405c9",
          "length": 283,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "972b8238-ddd2-4e31-8b84-9b6117b53ba0"
        },
        "item": {
          "id": "63c625b3-4f2f-40b9-b171-197151fe8fee",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "8ea41c24-fed8-4853-afd9-bdd2005370db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 345
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fa41a97-9e91-4ac9-b78f-0577cc9fbccd",
        "cursor": {
          "ref": "d9a20a34-cdb6-4d62-afb9-cb830861bd80",
          "length": 283,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "da57c0d7-e45f-4bc4-90a0-163fa0c01d06"
        },
        "item": {
          "id": "7fa41a97-9e91-4ac9-b78f-0577cc9fbccd",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "b5bf2e46-7124-4984-adda-2c9c5f81124c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3a7f4c10-3eb7-4fa3-8aca-19e19397e681",
        "cursor": {
          "ref": "54079363-a318-4f82-b698-da218f931f94",
          "length": 283,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "46d21bc8-346d-4b7c-adcd-4c07081435f8"
        },
        "item": {
          "id": "3a7f4c10-3eb7-4fa3-8aca-19e19397e681",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "bb8b791a-103c-46c3-8d17-51859b99dd4e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 289
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "17ab05b7-f8be-4eef-b5de-49c66bc3a4da",
        "cursor": {
          "ref": "732bd1a6-5ccc-4bee-9ca3-c6dfdc76fd44",
          "length": 283,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "b51a5acd-192b-4aa0-aad2-a059fc16d2fa"
        },
        "item": {
          "id": "17ab05b7-f8be-4eef-b5de-49c66bc3a4da",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "48970693-085c-482b-8a7a-49aeef79f611",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 57,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d7dd4730-6eb5-41e9-93b4-70e80085c7b2",
        "cursor": {
          "ref": "c1c20a93-71f2-45f3-b45f-bf327ecc2937",
          "length": 283,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "6f788957-6b0a-4a9c-8b6b-cac43d4b60cf"
        },
        "item": {
          "id": "d7dd4730-6eb5-41e9-93b4-70e80085c7b2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "05eefcab-2fc5-4303-960d-9e102be203c3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8fa0db9-6d98-4dbe-ad86-f217d0baf099",
        "cursor": {
          "ref": "3dc5d467-6465-4463-b17e-17e6ead3863d",
          "length": 283,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "f7399032-46f4-4014-9724-9f6caf7cc63e"
        },
        "item": {
          "id": "a8fa0db9-6d98-4dbe-ad86-f217d0baf099",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "a0cec822-0b10-44aa-a546-112ee7cd7b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d20deee-0dfb-4e60-8045-5d39292e79e7",
        "cursor": {
          "ref": "dd76dbcc-13e1-44d5-bf24-5787fb8a912e",
          "length": 283,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "385d8cf5-de96-4a82-ae46-4e1eaacf9973"
        },
        "item": {
          "id": "3d20deee-0dfb-4e60-8045-5d39292e79e7",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "b87ad401-14fd-45fc-9f32-73f4dec316b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 252
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64c0d87e-3c37-4d49-a6d5-3325385f3232",
        "cursor": {
          "ref": "e066f489-83c0-4bc7-a688-754206cc8bd3",
          "length": 283,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "ddb622fe-2ad5-49c6-9977-2947d05a43ca"
        },
        "item": {
          "id": "64c0d87e-3c37-4d49-a6d5-3325385f3232",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "32ffe735-104b-4554-b095-a4b39a31f28c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 193
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b859c3c-70e4-446a-bd62-536926857e0c",
        "cursor": {
          "ref": "00f9d074-9c70-4541-b726-c675686809d6",
          "length": 283,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "15436435-65b6-4b1b-af30-a8645c0812f1"
        },
        "item": {
          "id": "7b859c3c-70e4-446a-bd62-536926857e0c",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "6eb7a078-24b9-403a-969a-5f7598c67183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "514d174a-d213-445b-b2d1-d76a5d84162d",
        "cursor": {
          "ref": "7ff862cc-2999-4085-b5e0-37e39d498d66",
          "length": 283,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "e3d6045f-8a22-49a9-b6f0-a4e09df482ed"
        },
        "item": {
          "id": "514d174a-d213-445b-b2d1-d76a5d84162d",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "b1f56504-48b5-40cc-b666-b5d7f8d9a07d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e652ea2d-1fa2-4f4e-8f2e-32832186a7de",
        "cursor": {
          "ref": "b66ba5eb-e562-4eaf-840b-d78bd5a6a075",
          "length": 283,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "c5ab284e-120d-486f-bb27-bd144eec8c43"
        },
        "item": {
          "id": "e652ea2d-1fa2-4f4e-8f2e-32832186a7de",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "1d7fc316-2849-427f-a97d-8cd32075d3ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ecdee310-150b-4be8-8617-36b9f0073200",
        "cursor": {
          "ref": "94d53eff-06bd-4b58-8de1-52357f8b6eba",
          "length": 283,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "6511713a-c32b-41dd-8b78-d55db641f542"
        },
        "item": {
          "id": "ecdee310-150b-4be8-8617-36b9f0073200",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "d6768e20-a0ad-4e77-af2e-0277fa4bd7e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "54e266bc-404e-422c-a89f-54ca06daa9ab",
        "cursor": {
          "ref": "34f5b8c6-8bd5-449f-9936-00b10e7ac3ba",
          "length": 283,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "79b2792c-841e-4374-bc58-9f6f52dec97a"
        },
        "item": {
          "id": "54e266bc-404e-422c-a89f-54ca06daa9ab",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "b956af05-fae3-4454-80d4-13f864eb2ebd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 184
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "688a78f6-8f06-4eb9-9681-f1cd20d537cb",
        "cursor": {
          "ref": "2ea22aaa-5f47-4cd4-a463-62425e6b71b5",
          "length": 283,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "690e6072-07f8-439b-8bff-249592d335ff"
        },
        "item": {
          "id": "688a78f6-8f06-4eb9-9681-f1cd20d537cb",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "47fc27bd-d992-487f-a60d-69a7708cb9ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "01b4ea1a-53a0-4fc9-afb5-c74df059f804",
        "cursor": {
          "ref": "a1844e53-409f-4313-91fa-d3603b750e29",
          "length": 283,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "b2648a9c-dcbb-49c4-898c-3e3daf8bb7f1"
        },
        "item": {
          "id": "01b4ea1a-53a0-4fc9-afb5-c74df059f804",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "50cad948-3b66-4578-95c4-c93e12fa4f5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 40,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "62f4e761-2125-41d4-be86-c2b5509d6558",
        "cursor": {
          "ref": "c12949c8-8012-44bf-b2df-f57d4ccc8648",
          "length": 283,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "45d34b3f-7634-49c4-a928-66d6717bf362"
        },
        "item": {
          "id": "62f4e761-2125-41d4-be86-c2b5509d6558",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "1663a3b6-605d-4cd6-b2a5-0cbe33237c8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a81fb68b-9e40-4148-a7e9-3917046a235c",
        "cursor": {
          "ref": "a2d8f938-19f5-4320-8721-e006471b48e0",
          "length": 283,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "06d97e2d-2f48-44ca-a6ed-fc546f270f31"
        },
        "item": {
          "id": "a81fb68b-9e40-4148-a7e9-3917046a235c",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6591e392-3950-49f4-877b-0cd44abde0ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92e155da-7ccd-4122-a96e-9ade7dd84927",
        "cursor": {
          "ref": "e6d01004-b1ae-4b77-bd1f-5a2d591f5ad6",
          "length": 283,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "52a9d428-1524-47a6-9df4-a3cd65fe605f"
        },
        "item": {
          "id": "92e155da-7ccd-4122-a96e-9ade7dd84927",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "26c1e3a0-396b-41f5-8cc6-5badf8efdb46",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 41,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a244f6c2-2792-4522-a0b0-804bd12398a3",
        "cursor": {
          "ref": "6a2229a4-9151-45f1-bdee-9262a422d3b1",
          "length": 283,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "88c3806d-ef87-4135-9764-26098edc85d8"
        },
        "item": {
          "id": "a244f6c2-2792-4522-a0b0-804bd12398a3",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "2ddd5700-b1c1-475b-891d-33209a540393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 44,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4967c7cc-ceca-4171-82e5-fff7fb8423ca",
        "cursor": {
          "ref": "10ed69ec-b23e-465a-b01a-17b7a612f86b",
          "length": 283,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "7d2f04ec-4394-454e-bd49-4644f9443fab"
        },
        "item": {
          "id": "4967c7cc-ceca-4171-82e5-fff7fb8423ca",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "1c380ff5-d9df-4b78-bfeb-84d74ea78215",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 45,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fd6ea077-fc46-45e0-aac8-74be780e1535",
        "cursor": {
          "ref": "2532779c-aaf7-49ad-a131-9935d075aac4",
          "length": 283,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "2d67d6c9-abc3-4d81-b6de-82da9ab83d4e"
        },
        "item": {
          "id": "fd6ea077-fc46-45e0-aac8-74be780e1535",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "96277b0e-5d4c-4786-817b-27c251b82c95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 46,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bea214e-fa88-450d-a5b1-0e9827306ed3",
        "cursor": {
          "ref": "4a74f5c1-6053-4acb-9892-e3ee73a4a20e",
          "length": 283,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "a0df1083-8da7-451e-ba43-1f0c84b08399"
        },
        "item": {
          "id": "1bea214e-fa88-450d-a5b1-0e9827306ed3",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "b3719bc6-8d42-45ff-a6b9-3c7bf5d7eabf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 43,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ee1e406-9497-4a6b-8036-0cd804e75d5c",
        "cursor": {
          "ref": "a4e1a7e7-2263-41c1-aa47-d0b5dc57ad5b",
          "length": 283,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "2294f0f4-8d12-4183-a900-6a186e4c1e21"
        },
        "item": {
          "id": "7ee1e406-9497-4a6b-8036-0cd804e75d5c",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "d3170281-12ae-466b-af88-29dea15c75c1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 50,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56e0b12a-01f0-4777-ad86-2bbd20c0eec1",
        "cursor": {
          "ref": "76835e40-ef3d-4485-9de2-59059296c92f",
          "length": 283,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "36c5c0c9-0da4-473b-b244-93a69aec6e6c"
        },
        "item": {
          "id": "56e0b12a-01f0-4777-ad86-2bbd20c0eec1",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "7bd63a2f-1369-4f33-a9dc-e2c65b772656",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 42,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "36d04683-bf60-44ce-be44-eb876eedeb16",
        "cursor": {
          "ref": "64bc038c-f62a-4eb3-a01b-109076c39ea2",
          "length": 283,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "be01a1d4-6b07-4793-bd10-795761ac2a1c"
        },
        "item": {
          "id": "36d04683-bf60-44ce-be44-eb876eedeb16",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "32c64fd3-7ea8-44cd-a847-5bbe351a814c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ec8d061a-62d8-4002-89c8-5a38b0969453",
        "cursor": {
          "ref": "9ff90ee5-c90e-466b-9fd5-0c5ce825e9bd",
          "length": 283,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "ff614978-e3c8-44c3-a4b8-8b2eeb76f187"
        },
        "item": {
          "id": "ec8d061a-62d8-4002-89c8-5a38b0969453",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "c1b47d38-76a3-4a00-966b-0ca6293460a5",
          "status": "OK",
          "code": 200,
          "responseTime": 89,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:278)"
            }
          }
        ]
      },
      {
        "id": "954cb876-9444-473d-b005-1eb36af4e82c",
        "cursor": {
          "ref": "239fc32f-d7e8-418d-8b5e-2e8eab499b59",
          "length": 283,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "dc0eae21-bb20-42cf-8d3f-ece20a718089"
        },
        "item": {
          "id": "954cb876-9444-473d-b005-1eb36af4e82c",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a7744618-2959-4744-b229-1c6e05473ba8",
          "status": "OK",
          "code": 200,
          "responseTime": 90,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fea758e-d937-45e5-8c99-f079da499a3d",
        "cursor": {
          "ref": "7450c630-f6dc-4d98-9896-7856847e0f6d",
          "length": 283,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "969e14d6-1cd9-4b76-b246-9908308c1516"
        },
        "item": {
          "id": "4fea758e-d937-45e5-8c99-f079da499a3d",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "d1d0b8ba-e2af-42db-b388-0ed0cd4bbe04",
          "status": "OK",
          "code": 200,
          "responseTime": 77,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "859424dd-2fa4-4b98-8208-1aa556ea84f7",
        "cursor": {
          "ref": "7eb6c2ca-1489-4c70-a510-5b273546b449",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "8f6d3f59-e34f-4b7c-bc3b-d3ee3a44c805"
        },
        "item": {
          "id": "859424dd-2fa4-4b98-8208-1aa556ea84f7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6fd8e2eb-961e-4898-b1b6-fbd15ea5a366",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "859424dd-2fa4-4b98-8208-1aa556ea84f7",
        "cursor": {
          "ref": "7eb6c2ca-1489-4c70-a510-5b273546b449",
          "length": 283,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "8f6d3f59-e34f-4b7c-bc3b-d3ee3a44c805"
        },
        "item": {
          "id": "859424dd-2fa4-4b98-8208-1aa556ea84f7",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6fd8e2eb-961e-4898-b1b6-fbd15ea5a366",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 36,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "87f4fdce-b606-4f5a-876b-436588cc825f",
        "cursor": {
          "ref": "0320ae09-ea7f-4c9f-bbb1-85f1087eccc4",
          "length": 283,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "b6a63692-99c6-4a92-a8c7-65157049bf6a"
        },
        "item": {
          "id": "87f4fdce-b606-4f5a-876b-436588cc825f",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "113eafd3-6c27-468b-9ed8-cf14d229fb85",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e76da008-bd7f-4df1-a1a6-c7c73f153e19",
        "cursor": {
          "ref": "4da14f72-2cc7-4faf-b8ec-2ee6f1111df6",
          "length": 283,
          "cycles": 1,
          "position": 282,
          "iteration": 0,
          "httpRequestId": "8141baf8-b1ba-4952-9b78-6c2688b0a0ae"
        },
        "item": {
          "id": "e76da008-bd7f-4df1-a1a6-c7c73f153e19",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "38c6cdda-c972-4dde-9002-67e2cbeb324d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 34,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}