{
  "collection": {
    "info": {
      "_postman_id": "4bd78d4a-8f35-432a-a4e9-9e5a47c7c93c",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "5db0370a-93cb-4e33-b45f-51abda43809b",
        "name": "Clear Cache",
        "item": [
          {
            "id": "da114064-d0ab-4b48-b83b-887299289f17",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "57cbbb04-c4c6-4bbf-8b53-0c3f6649abe0",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "ba85afac-7b8b-473a-91cc-be291ea42f16"
                }
              }
            ]
          },
          {
            "id": "9e5a9777-e1fb-440a-8ffc-e5f6d746d800",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "eb489d51-3de2-4a76-a397-57e13051ccbc",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "04182e27-7c1f-409d-9798-02dce95a9b35"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "c2b04aea-12f3-4b83-afa2-1bbd92fe6923",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "a529b9f7-17c6-453e-807e-58a684a8dac2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "51352694-445b-4c0c-abe4-63f7c94cfdc9",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "48d4a951-5c1b-4ea4-af05-aefc0a815482",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "89bb4b30-38e4-4010-85f8-9a075e28bc59"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "0d54a25f-2a84-4cc2-9546-3838973c614c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "faba2f8c-4c1f-4462-a4b7-d16e68aa991e"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2de86723-1694-4996-8e9b-6ead4d9e5367",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "33f4339c-7d3d-45bd-b110-fa456fbab266"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "d8ee668a-d0ab-4db1-9dfc-49eb73817e1c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "b0452565-e6c0-4eb9-8bb3-5607a786367a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e0a2fea6-093b-495e-965a-ec9a7571dba7",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "a568bbbe-b806-4f5b-ae33-0a814202bb10"
            }
          }
        ]
      },
      {
        "id": "e39d2b3d-f847-4fec-9ff3-cff34f77ccbe",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "8eb13765-f4f8-430d-a29f-9b1c4c32ef85",
            "name": "Negative Testing",
            "item": [
              {
                "id": "7ce0efcc-d085-4138-b1a5-a42daa5248ff",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "078f4fe0-6f79-4d7f-b2b4-81c7c4fdd931",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c553c676-6ad2-4ee0-8bf8-a25eecb8a617",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "24b3cf90-489e-44c7-9fdc-9fddc6bf89b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5788c9f-e035-40de-8cd4-de79c7f3630a",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "49643948-68f5-4411-8616-7d2d794450a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b6de150e-10a0-4490-8316-5f7f3364bda6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ad507dd-e566-43b1-a290-8f3a6204e1ef",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09aef73d-1fb8-4400-a72f-6f090bc2b915",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "41d5c536-a06b-449c-b338-0f90a746bc85"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "99f12844-ae63-4407-8222-a68f54b5db93",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "623ef4c9-e693-46a7-926f-77678a022906",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a6c4db0-a89d-404d-8ed1-3bd36799e0a5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "3ae97311-c2b5-46db-9708-bb22c2f1c4be"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2473ef61-9070-4182-bfd0-f39bc2a139a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63302b88-bcdf-490b-b1c5-1c0eeba65740"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "dd7a1416-f3de-4433-a903-b3a87b3a2b66",
            "name": "Positive Testing",
            "item": [
              {
                "id": "eeb9746f-7583-43ec-9772-3edf147a8d07",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "5a9a6838-9675-4869-affd-f9be3f915340",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "e53e813c-cd54-4dad-804a-03f102f0ae7c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ae00b89a-00e2-4b0d-a184-21d8a13309c6",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "750aee1b-8ec6-4833-813b-b2d48e1b8110"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bc162ae0-2aab-4f45-8c77-c6731052c507",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "8876a799-b3a9-4cfb-8485-318b2697566a"
            }
          }
        ]
      },
      {
        "id": "93c7cf2e-18df-4d59-8c9f-8e428e367271",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "84e37d94-9f37-4e60-9108-5e49b25d335b",
            "name": "Negative Testing",
            "item": [
              {
                "id": "454894b8-9dd9-419a-8f25-f1d1b0e7de1f",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "86e70135-0db1-4f9c-990d-cc17a3ad41e0",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5e9c00e-3bd0-4519-aab6-54557595c678",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4dcbc401-b083-4fab-ba39-b181a38bfada"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f6f03f3-6222-4bc9-9eed-518544a3f095",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "80937553-7381-4323-bca9-a3c2ebd61c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f1420ca3-12c4-490d-b1c6-bbc716cfe7c0",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f91cfa05-21b7-4d6b-b777-62ee20812572",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad5ae137-f91c-4538-8bca-608f770d0480"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d80382a9-4ef5-4b51-9a1f-509e12661b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "c211e350-541a-4f0c-add3-a8f520757437"
                        }
                      }
                    ]
                  },
                  {
                    "id": "922e2e5a-09d5-421b-a0bf-652eec37894e",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f3a843c-33a4-4bf3-a781-995d771ee7f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "69fde43e-417b-46d9-9611-f80b61d953a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cac527d-ee36-444c-b6ae-30c0681b342c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0d235f7e-3a5b-4e44-bb48-44fcecd3777d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9c1044c0-0e33-43be-ac26-e68c6ff900a5",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "267acfb3-ae13-4519-82cd-69ef7180c5c1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "73505df8-78a3-4c5b-861e-bb1ea6a1909f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "309a5684-0b44-4b5d-8b02-f16d75cad172",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "6dd9434f-e557-456b-b320-4eff91c04d86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "426760f0-9c39-456d-acc8-36524295ba22",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a4ecbd9-908e-41d3-b41f-07dca4007bb3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "03d62d41-fbfc-4695-b146-84a186482162"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28cc2b09-fbcf-4588-9a69-ae0f8cf1fe3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "48aa92fd-3240-4ae9-8161-f91ee9c89441"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b085bd5-1b11-46b3-86c7-7e9014ce835f",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fc10155-e719-4445-ae35-a1bc23892315",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c7abb4f-33f1-4efc-8d61-271219ce9fad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "83fc22d0-4f7b-40ef-b0c7-6d4358495c88",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "903a943b-ba38-44dd-bbcb-43b0d72b1c9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e2034426-dad5-4da7-a55b-dcda829f017d",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "25248d48-80a8-494e-bdbc-e085109b2607",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "22e61734-b2af-4cf2-a41b-4f532adf0359"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "57c8c139-07f7-4b5b-be91-2989ac6f3c77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3cc5d534-ec0d-4f80-b981-be00da9c0cb4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f800a10-7a90-4d4c-8ca8-7e6c095894bc",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "347a58a7-1c6d-44e2-a953-2806a8cc8a56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "78d6718a-99b4-455e-90d2-7f760854f3d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efdd7521-068d-46e1-a267-c2c0c48e6934",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a7418700-bc2e-4236-aac5-67e16b94315c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8d26b761-9192-4303-b866-3374d95c0abd",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1caf5405-7156-4779-a558-f33e984b0716",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b13a2195-b693-4a88-97b2-2446fcc30aab"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f78b1426-a221-44e3-8085-0c9e7dd6c325",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0f579f44-3232-48aa-b0a5-47c1fe412c5c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f7e0b292-4ef1-4597-8604-d6cc9775c693",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7fd0b1c2-55d3-4990-af5b-d160184c0bcc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a79f47e4-f615-4f17-adce-bdbb92aa5488"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f33d7a6e-b606-4cd3-b254-63aaf295ce35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4274dd5b-22c3-47c3-a3b7-c933188a06b4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed992298-9909-43b4-bf92-552d36275c2f",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d77678c0-8b10-4f9f-8bc1-b7c803ba8af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e64a5ffc-477a-49d3-a5e8-634f42b8f79a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30505733-c88d-4d00-aa44-c900c92cc3c7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4329babc-37b9-4fc3-a5cc-757a5d3de0a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdec3487-3130-4468-abb5-e49d51b0990a",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "274bfc60-7f63-4ed6-bbd3-20a92e116645",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7aa1d1a2-4631-4958-9647-65be0dfb8cce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "28f2f720-7434-47ed-a5d2-012a1eb9e369",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "50cdee58-307b-4562-a2ea-2df1e9e12b00"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fa2eb26-ace8-4600-b21c-e0d5a9fee016",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "07d4d21b-cda5-4b33-99c3-5b20a6f2eedc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e2e9b38-5037-4e92-ba5b-14ea50c1b2f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef329e46-f6a7-4b45-b1ce-2c5efde66e68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a875488c-515e-4f3e-86ce-acb47e50b8c1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d791bc54-b054-4e25-bc1c-430bb5a3841a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e170f53-2137-4994-a8d4-eae3a561e09f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71655781-1537-4443-a017-788811ad1b56"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3bbdce03-1a23-493b-bd1c-346a6ab3e6e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "b0a75315-a1b3-4307-bf39-57a079873082"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9250e447-eb3f-4bd8-95b4-c28a57e8ac97",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cc784e6-90ab-47dc-9ab1-13747ded2334",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d037c680-887d-4a9a-ba47-8833210d6e9c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e57c0744-d83d-4923-a90d-d65aaf23737d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "eaa107b9-1aab-4b77-9d92-a1d83e63f469"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0d36e50e-5309-4ce1-9a2f-0a6f37196cea",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "578f5480-3192-48b6-8fd2-99ca52b62ebb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "265f17f0-49f0-4cb9-abb6-6407ddc3ad95"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25fc1bcc-d165-4b0b-aa2a-385e7feeaac1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4f1b922d-19fd-4bdf-983a-31258a336c09"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e9c34fe-b59c-42b9-afe4-4c5795482616",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eded4793-9a3f-45ad-9594-8614c8aa5566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "080d1095-e7c4-4664-84c3-9986c8fcb3fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d86a8813-da51-495e-83da-126e2412caa6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0b1fccba-164e-412c-a74f-a1b80ed78869"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cc68eb1b-f2e5-4340-8aa6-ff8b7a729f21",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9984e1f1-f780-4012-9cc9-a3dd2527e6e0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "edc3997a-8282-4b7f-8975-b1d5e24f7f5e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73c7fd94-6452-4d00-ba84-20b63c2e745e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "eccd280e-c6d5-4be6-b795-c4eaf52dc39d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fadd5b1-42ec-48f6-b649-1f1eecac6c5f",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "051a98d5-5785-4765-a77b-29566d60cca8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09d03357-67d5-4dee-86d6-a91955ee047b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ee37d5a-ed0a-4c22-838c-1c1acfdbb8e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "675b633e-a009-46fb-adf9-a620708f8fe7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff37612e-955d-485d-8732-cfb441eed6e8",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b597b4b8-89d0-4e46-a9f7-a4a4cf450706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad7c2d7-b758-478f-8390-d5bdde5764b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb85743e-3ffd-4339-9fef-31177fa16490",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "1d9eef28-6705-4907-88d2-17992f8942cc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e99fa53-e98f-4a36-8136-b8d28611eb43",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca35a17f-b901-42fe-bb8c-25a3c0358f9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a77d22e-9647-477c-93e6-8a819b59c5b8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "775f8ca0-5278-47f0-be70-6e6fde14a7b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6857d0c5-ca1c-4f41-b4c6-4f20269bc290"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a1ad3aa4-cc8e-4d6c-bd2b-aa7316466abd",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f03ac13-76b2-44ec-a981-0af5f4b0c662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4f3007a-bad8-4909-bf7f-9c0dc66e03bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3edac741-876e-40a7-9583-70a7a4c016ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "901e312d-9c95-47e8-be29-b60dda4a9e91"
                        }
                      }
                    ]
                  },
                  {
                    "id": "58bc5261-9251-42eb-8867-f4813bf1d54e",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8114ed1d-1344-4864-a1a5-63fa741b5568",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9745e7ec-3b03-49a4-b66c-4c02fb4415ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32f27f06-76c0-4ab4-a036-30ab0a4f3986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "72445780-648e-470e-9a4b-d1883bd4b9ce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bffe4831-eebf-45b1-80ee-354268e35a4d",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "507e5b82-20ed-44b9-9b8a-beacfd289aba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6d551cea-1450-4d49-b65c-b48f2ac4d0ad"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ff813937-dbae-45a2-8a08-ada8bbafbb67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "d721e280-bc35-411c-9c6f-8ff92389df8d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8808bd42-e1b5-443f-aeec-707a36b183ed",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "239fdf72-a2a6-4ca3-82eb-3c15ac09dd8d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "178e7083-4960-4318-8556-d0a4ffff99fe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3d9c1a55-23b7-4c33-b54b-a99bb811c912",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "40d455ee-bf2c-4e84-b229-3fc98680bc8f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d241b63d-ea08-4eb9-9304-78fc8969618b",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f0efcfd-6e45-45ff-a73f-228ddf072858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "46391110-7dc8-4221-9d92-e9efa32ce454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4a3cedf-ab17-4176-a9a2-f00e265f3c9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4cabb3a-0705-403c-9f91-4f73166b20aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7080fd32-fac3-428d-bcdf-b7d3e54f53a7",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33ae4739-091d-44f4-9881-c4cc16a882a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9961886a-4402-4c09-a01c-27e86a63e4b2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e93dcd2-1d6e-4cf9-8c90-289f636390b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "bd13a446-03a2-45f2-8af5-e99627e890e8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0f055db1-2d16-4336-a529-0b566de912cc",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57afd3ed-19a1-4307-90f7-d2b0b1cee1d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c8561cd-0440-4f7e-a2d7-e2b30722c543"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16028c96-610a-4154-8c83-4e872588884a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "caba830d-cc21-4a16-af84-0291e1049577"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b814bfa0-3d03-4878-9491-3329beba169b",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84a3f971-b4f3-4e35-b566-413975b2ca33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6fe0ef98-d070-48c5-8887-f2b2b0b8c25e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7247b0d5-7c52-4c8b-abbb-ba42cf553567",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "21db1244-d93d-46ce-8932-859d7b7fa1af"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab1947ec-273a-456b-8a5e-3c515189de42",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d16b2c6-606d-48e9-b1be-1a2b3f8c645c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "619fb10a-a35a-4fcf-b60a-9d670ae31c28"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0515d7f2-03ff-46b9-b39b-e9cca2a5faf8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "a6642594-e1b2-4ba3-8dcc-d4569d360277"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f9b91ba-649e-4086-bf2d-3cada99a8251",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb0f70be-a080-429c-abd5-feb332eb4c87",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a63012ec-fa03-4ad5-95f5-3263aa5644a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbbdbf8f-258e-4082-a89a-bde780b288da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ccd833e9-2276-40c3-84b4-115204d119d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2cdf3895-2abe-4d82-b48e-5234b63f8485",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "947fb3d2-24b3-4715-a475-c78b0a4f9aa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3d5cb6b8-3889-495a-84f5-72ffa38ecc87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e1d9da91-02ec-42da-8265-38db90247b0d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "f4bd0116-0929-41b6-bb76-050a838e4133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1231c526-5def-40be-9401-1177d86c545f",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e582ad5-aef1-4ce0-851e-ed4cfdca2e1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4aa2f5fe-a1eb-42b0-b405-b404fc8f00fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56813227-fbd5-42a5-953e-bfe23e374a69",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "41a6883e-841e-4cc6-9674-2d3df126a2ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "838ac75c-ba43-40b5-bfeb-4203fb083d0e",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f90741de-7b59-44aa-88dc-e7222c8d953e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0ba7d113-5b43-4ddb-8837-c9d043fa5ba7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8754cfb9-1a98-4967-b0e2-8b86d732063a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "4ca6b4ab-ce47-4490-9637-6335a3c52a46"
                        }
                      }
                    ]
                  },
                  {
                    "id": "67fe281a-2b3d-4a53-b307-5b961590e91c",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3df89095-f55a-4f21-9906-e7fba6674bd8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "228336e7-b5b8-49d4-8102-1397e50714fd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16da5b42-6286-4b17-938c-9f8995d75d9b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "b2ea7b9a-46ab-49a6-8138-9fa0cd9d9cbb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e9a2a00-f748-46f3-80d6-dc37208fe2a8",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a52763a0-07c8-4873-ac2f-17def814b8b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "e18550f2-3c09-4c8e-9afc-6683f81c0319"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9422e3d-c375-434d-b086-72643ff3b482",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "36837830-783b-4b6a-ba1e-0f0503c7f951"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4079c9b6-ec96-4076-8d08-4a2ee8760168",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cc30d00-fa08-488f-ad0a-d373eb25edfc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2cf78c37-7291-4da3-bd95-9b569989e1d4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24abb8c4-8a7c-4ba7-a856-4fe968e797b8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8bfc18ab-a05c-4e4f-8112-b23384242992"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e640512d-d7d9-4dac-87ab-6d95de10b6b1",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d51b84fa-15ca-4476-9b97-e6c023093506",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10a29ff5-85d9-4be2-bfbe-25e0c65c57d0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb9faa4a-b4d6-4a2b-b174-9d73d30e9d5a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9a0e252e-f9ea-4e7d-b2ad-f00b5bf79a1f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "759755e3-772f-44cb-9a40-a35f471fafaf",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cae3b0d9-00c4-43f9-b601-b5a160d2a383",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1257e782-847b-4b69-af2c-00a53de3ab08"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06de0da4-e991-435a-a4b2-669715d7b11e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "68218198-8226-4cb9-8b2c-c3a3321e3e2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "307ec2a5-1a2a-474e-be6d-5a1b1cd64ea3",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bc9ad237-2eca-42e1-a5ef-5e2fadb1987f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "919818ff-4f36-452b-8a3a-0d7f4e17d198"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae184a5e-ba64-4153-b61d-b89bce62b033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "e876487e-0bdb-4632-86f9-41cc83e5ba8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "adc5dedf-02a7-4a7c-bcb9-86a028361f6f",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3da71f9c-7b9a-4823-b1dd-995cee56dc61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b88d490-84bf-4ac0-970a-0b4cfecdd28f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3ab4e4af-99b6-4d85-beaa-9421caea740c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "756dde39-3a95-4cb9-8365-296308558941"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e5f2f557-9a89-40d0-960c-52282341f619",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "948bbf17-2a2f-47d2-93da-dc850b03d9fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "50c22547-5050-4a8f-b9f9-0969776bbcc0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "de7efa03-50eb-4718-bd9c-86adb9efebcf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "3ddb8a9d-a7ee-47db-832d-bc83061018fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "03596bb0-00c4-45c1-9929-ba548e5638ac",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6b0f7fda-5fb3-48e7-b408-ae3be0adbb45",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "53cd02a8-730b-4643-9e00-4f9caf751dd5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3b20dc28-f3ad-476c-8836-4f5bf4f24e82",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "82221304-a806-4478-81cf-3024806291d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "402b5c06-811b-40a7-ae5d-574ebeb5e4d8",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6b825b3-82e2-45e3-b69e-ed73cf2a6562",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d1cb790-ecce-4bf9-bb42-cc6d737171f0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "faaa3799-c776-400e-bf2f-2949000ac130",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "0c2e1772-9433-4766-b77d-d1e0f9ffb2ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "210429ab-0770-4e8a-a7d9-19bfce6fbac3",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aec7c6ea-abcc-493f-878c-f5cf59c673ee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5df60bd2-b7bd-4f89-bb7b-de34c609845c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3067cddc-3120-4509-87db-fe5515923158",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "ea98ffd9-2c91-495b-8ce2-21a67e792133"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aaee1797-2916-4d4b-b48a-80a3e01c94fa",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "74a3f6fd-5d17-4477-ae19-6f654a8ab094",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0bf38b4c-9e2e-446c-b383-eb6ddb8b5994"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c3126e5-6a99-4826-8f61-09d7a712ada3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "db78c772-f747-4ae3-8419-5b95a2844db5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b798f2e4-a7fa-4dbe-a53b-6a6765eb4846",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5802fb7c-9e47-40ad-a9cb-b0da8581cdf1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "67ad3e53-7034-4e6b-a9a8-24c2a7b1beaa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2456a575-19a8-4ea5-8821-61d4dbcfcce6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "574d9015-731c-4814-9313-097afe0634a5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8089d14-8d10-496c-a1ff-e97209f11567",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c0fcc85-4ac0-4c20-ab52-0cce56e8ec5d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "74987be0-e95f-4002-a4f7-b657b35af0b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdf2abfb-ff96-41ee-8acc-e954615dc9c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c768caf-4649-4728-89fa-a675c08a0f62"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b4d17c08-8717-423b-bf56-5f6746952b2f",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3fb32824-2948-4d86-a965-2df98588739b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e12dec87-9f42-4500-95b4-0d3d01a26696"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1759f7e0-a52c-40a4-819d-71466f61e57e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6e42855d-3599-4f6f-be3e-9ac070f7684e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bed75eb9-b6a7-443e-a2e3-4dd2d0c09846",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b273b0d6-d4f0-4539-bbd3-44bab2e5fb1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ace485bd-4cc5-4f0a-973d-69ee4077eb89"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9df42f70-cb8f-4537-b7a5-8532e1144907",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bf2357fd-b000-4103-98f5-c7a04a698a5e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5c5aaec-3aa2-4c2b-851d-efd4022ff52a",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0e88f62-1986-4523-a1cb-e18b8cefc0e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a3e5390-6a0d-49fb-be4f-cf17d86467ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "73688670-e6bc-4328-96e2-1ab8687d0ab6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "dbfdc09e-3b67-4429-b5d9-01f7d57f0bac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b78f66eb-0015-4643-b73f-90f7f300b016",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "588c62cc-2e2b-4061-a771-ce1b44ee325d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b679b521-7235-46f0-a2f8-fcd2c26ebb6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36f0d936-8db5-46e4-a4ff-defee97741ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5d7d0ac-a3ca-4d9c-ab59-44439fd0a284"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9b50bba7-a1db-407c-8986-e3669834c11e",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "889e510f-8e69-4947-a602-ae70f6f03edf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "89c4dd8c-1fb6-488b-8589-2a30e39218c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "054c9a3b-f693-435c-b9b0-7a8f50db9932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "69659cf0-1c60-4b1b-a98a-6e0a162686a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "af1dd541-7f84-406c-8877-52af15808774",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5f9411bc-37a3-4661-8c34-d6f9614e3e73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "960a58d5-5e89-4ecb-8834-3934df8e1524"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "75736455-ac6f-4f95-be9f-7ab001d2ee6d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "d9188385-3311-43ca-894a-e2b5800b6ae1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b412b930-1c26-42d2-9522-99ed4d59e11a",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b98f5f77-da5d-4b72-a903-e4e3effb5585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "765cf596-375d-4500-8631-16a42b2ca670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7510faa-469b-433e-95f8-2125bc173936",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "f40d89a9-1942-456c-90f9-70c72a30199f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6764d254-127c-4a3a-9fc4-04f931f55d6a",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16edf080-1b10-4dbf-8a23-e9c7aaa10f7e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a1ad9bab-5d82-49b6-9aae-9fc562898572"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0ab7ff46-719d-490f-850f-d5ea67a09f3b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "da3686d3-d5b3-4c9a-8608-c78807034ad7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1c0eb20b-52ae-421c-93f2-75e73fce73f5",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98a40647-c2b2-471b-8de1-7d2faa2d39ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "db9eb8fd-6079-4f42-a94d-10f61b280663"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1aec9263-5337-4504-9192-288ae7df5b0f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "741fbb22-fd87-4be5-8445-43ac82c09483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "507a09e9-8d49-4b49-8935-f6d1c83f6801",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1e246045-be33-4e8a-ab2b-3e236b839c38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c40342a4-bbc8-486f-a602-c048c3c172d3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eeea1cc2-4129-4f9a-929f-2bc1f6589648",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "4be84c23-afe6-4b2e-a3e6-c50675b40162"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f0dc12e7-c954-4eea-9a19-8dafa17b606b",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d54a4abc-4ec4-40cb-89b5-38b31820ac73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "943a4d83-ae22-44d8-95f3-a49c7e50e4d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4646a550-1164-49eb-a3a2-1e5f1f04e710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "0c26c137-52eb-4478-b451-5e117daadc7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45046943-c4b0-4a43-86ff-999edead6d01",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84818126-8af1-4715-8ad5-776d3555d5c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d66c07da-28b5-46c9-9361-c5142ba1ec99"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3512b6d-a13a-4609-b108-d8104cd1ab42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "968e8c61-f321-4945-b08b-4c1153aa4c1b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8653d669-50b8-4c33-985e-2a9febcbaf79",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb3aa552-917f-4535-8cb3-5c46447885b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f5714f4-3978-4cdb-b577-4c25d1601cf1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5f06f924-a4c9-46f6-bcc0-e1e1a010c866",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "3612e73f-f1b5-4c97-9a12-e581a9cda9c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "913ba34a-6896-4ea8-a835-1aa0cf64a6c4",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "79c3bfec-b953-48c1-929a-c4ffbc33f58c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e801a42-972f-4b88-b8f1-d8f07e1574bf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9d3a8cb5-014f-47d4-b80d-74508fed0a39",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "d58459ed-a2dd-471a-9d98-ed76f1ed6ed0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deb1253d-0c25-4c03-8dea-9b54127929b2",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "64ea6f7b-c62e-47f1-b6b3-bfc00fea34f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fa3fbc85-7541-4fe5-90ab-a2f9c460f1a5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "009ab009-b834-479f-b1fc-a9aad11c3929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "f1fae4de-b8d0-4326-ad47-9de386f0f394"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77e28241-3c32-4526-8a04-475ec5fa971a",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75b202a3-a4d4-4dd9-a8f4-992a5cc335fc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45be6d11-e988-48bc-ab02-b17e3a498415"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b9bad562-aa86-4398-a85f-77fa582acff8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "d6a24906-75b7-4f97-8488-84119e17b949"
                        }
                      }
                    ]
                  },
                  {
                    "id": "66e35092-5c2a-4eb9-b9cc-e3561f507676",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fb7a51f2-7609-408c-b675-43bffd75e85c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d8269e19-73d6-45d3-b550-4e4de573f084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "72df70c9-200a-485a-b4ba-05251eeaf5f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fc2ddd5f-550e-4eee-a48f-e3cf4a5c195e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "84730113-0ad7-4946-8be3-8e317dc15195",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3d88058f-7526-413a-9149-7e4286377799",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5333fe76-99b8-4b5a-8d31-18d952438f3c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "36bd1635-b703-473f-9961-c5c972db13d4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "e8cabc5a-b640-44ef-bd26-9e924096b47a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e61f1b72-9426-4664-a244-25dca04ef56b",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3699cd87-2b5a-46a2-b82e-2046bd4cbb79",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fb4bced-dbb0-4d81-867e-df8c3d6bce13"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "002f8984-9e9a-4250-bd84-8e4ce164a31e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "93881778-a48f-45e9-802a-3ea2076b7988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4fe4c434-3404-4616-96f7-e6be98acf4eb",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "53de2b59-b6b9-43c3-ae8d-9fc9321c18ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "45fc32f3-20de-4c26-93ce-92448032cf7d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "641e69c2-7958-4077-b3bb-b7b14681829e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "67ee8fbb-36aa-42d7-b270-c37162a7f968"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2944709b-111c-47d7-9d0b-40e27ad14653",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42649949-2d33-4e23-8b4b-c51b96df5a08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff303611-5bf6-4e37-b881-d33c3bc7b4ea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "efc9f15c-da68-4d87-861a-9da1aa3fa4dc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "6142244f-d626-472e-a5a3-d338d36c57d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5d9c0ab2-2400-40ff-9da8-f37d63047c11",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bb7f9a55-3eb6-4c8b-a9cb-0075f81d1b36",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1bc37e77-d7fd-455d-ac88-064fe40b27bc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd80fa5d-9ad8-41ed-b295-404bbd2b879f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "bee5c386-9318-47b8-aceb-895d0a4ada77"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4591641e-74ec-4129-b297-86e05fac191f",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8f4bd072-ae2a-4649-ae3c-2d5b62e0e233",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "af098e37-8c5c-4047-b7f1-41956e8078f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "24eaefb1-ac46-43e8-aaed-24fa54b6a120",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "0680867c-1403-499c-b927-2e57485ee379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2e389898-acfa-40ed-8a1c-dc82536c5ed9",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "65a21200-f380-41f0-815f-17d6bd230c4b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "28fe59c3-b111-4b1d-8810-458ab4a2445e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "267bfbb6-84ef-492e-8ff4-393b31a97877",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "542eb981-f6aa-475e-9489-34d339ddc0b5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64190dc1-21aa-49ff-872f-fadd4caca2ba",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3ac404f5-3981-4370-9b95-f2aacf424e54",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aee079f4-2584-47a4-9886-b3f9bfd9350f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85b71c59-cbbd-49b6-9e5d-99a275fa299c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "3b340f54-9380-41ca-8a2a-0f8c3c1862a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "80408580-d8b8-4baa-b74c-7f009ec46533",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e41ebb4-843e-44f1-89e6-b65b2a05826a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e997b869-fea8-4f73-83d0-0e00d30a1080"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90996027-9a93-455d-9ac8-acd4ec8ce61f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "4878441d-987d-4d4e-b509-6f4fe3edd8bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79ad6f6d-6351-4eae-b995-f796f3f6c255",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2c68103-d846-48c4-a646-057b09400760",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a189e85-c852-4c0c-837f-b32018a71eca"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "22cee4cd-701b-43e1-8952-803bbb63ea38",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8cd4d43f-4e54-4dbd-98b7-81d2dc8cdced"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93484e5d-bc93-4b49-9581-36fb9018ee9f",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "46541400-aa0c-4dc4-bcba-9a64421f3443",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "071e0b82-53c4-4ab2-950d-d7bdb44806d7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6bbea06e-34ca-4805-adff-0fed24f2ce41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "b562a120-ccce-4797-82f5-80841c012c2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c3104b7-ba59-4b88-bcbd-533c766edbfc",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1197ea5b-ee69-491f-9cb4-a5925b0f313a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8d2cf5dd-a518-4a20-a3e1-4e8d984bc511"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f110901-5bdf-46f5-86d8-96709dad29c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "18f523d7-32cc-40b9-8679-85a0b157b4f8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e7af57ba-f1a6-47cc-b2dd-c7fa0c6e5da3",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ecef38a9-3210-4282-b160-a8041b0cd4cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85d91a94-66ab-4bfb-a421-3511dd2c29a6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf01d790-acb2-487b-bcf3-602d2d345730",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6941756d-96ff-4134-b3e9-9b7598e6b847"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4f87770-0af1-4995-ad58-6c5dd5bbce15",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9bb2c810-c067-475d-9020-71031e98a7a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3bc25f38-d98e-45af-8876-4e529ca383ec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27182527-a41f-4c79-8e3f-096ebaf72805",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "8364be40-bca7-4357-8f9f-2d6ccca53eb1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba88433c-0aa6-4475-bfad-23faa2eabfad",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "bdc02069-132e-4fec-8b8f-9ad88eda5f96",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "40875a06-c29c-4a20-a1e1-cce091c6a647"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eadcc6e0-dd68-445f-874b-5c48720efd51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "87ef37db-8193-428c-9dc3-13a997bfcf9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1ff8684-8c97-441a-b043-c869ce785d6e",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e130d1a9-9a58-4705-bb24-3a3f534e6a23",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "320f7b7b-0e4b-435c-89c5-a989c3aeb7f7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c40ce38f-a8b4-4879-96f5-92760e6529ca",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "bb39838b-f14b-4f36-b2e3-304052acaadf"
                        }
                      }
                    ]
                  },
                  {
                    "id": "85921394-c957-41a1-8f90-8ab4fe938f73",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fc00c7ac-1b38-4929-9f34-8202f1f28484",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18cab6d5-6271-43ef-ab05-44778a6b8fe2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4517d03-cef7-494c-85ed-0da7a6e6f56e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a530ad7-d645-493a-a98a-018437133f96"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c531391-7b7e-4429-92c3-183982207a63",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d786d644-6502-4053-831d-602e11bd3b08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a7e97098-0dba-4ad0-88c6-deb4287691fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc04126a-9d7f-4ecc-9510-bb84f1922058",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4d1fd5b1-6877-459f-943d-0ed99ec2a154"
                        }
                      }
                    ]
                  },
                  {
                    "id": "308037f8-6f05-4969-94ba-560d5eba41b5",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a6da424e-c43c-4b67-b167-92bd582ef71b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f2f477f4-4108-4a0a-8a2b-930c2d549317"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c9bdd643-a4e3-4945-8300-b271bc235d4f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "41acf760-cae8-45f7-bfd6-ac9d5d57e3b6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20cec6e8-137c-48be-9cc7-1c997188577e",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a258eee1-db4a-4802-bf0a-377c4e8685fd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a35901fd-33e5-49ce-8a7d-b447629bc530"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a4937c5-a679-4ac9-8e21-fb3f9f981859",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "0f1f15a2-c86f-48a2-a8e1-6f3ff05668ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e4d4534-8e07-416d-8408-9299f717ae46",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e353b4d5-dac3-4b93-8e8d-a53dd041cec4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1c47a692-d3c6-49aa-9392-4185cc4e3f2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e45fb926-fffd-494e-8492-61b8639e44a2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "922933ff-49f3-4429-bd60-02db3f7eaa15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5f4e1b4a-b56d-4827-89fb-bcc98bc0ca2c",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f1bb91f-2bde-4e7a-9f2a-0dad29c07a2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1eb7141c-60c7-4e3f-b677-033e54fc1c2e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf874088-f2ce-4eb6-b278-530f62ab77fe",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "53cd65f8-0f1f-4ed9-807e-b464e886d579"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47929636-8142-43f6-9dca-23194bb9d089",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "105169f7-18cd-4740-bbca-b207ecf145ba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7a6fc1cd-a395-49dd-9156-c755a5dd3b4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4060316a-4bcd-43a7-98fe-6f46652fee50",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "d6143908-3fba-4f08-9bfc-902f2ebb8e7e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e282dd54-6e2d-4b49-96ab-bcd5de67fd6a",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9798a5b3-aa7a-4993-824c-712def74853a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df64c63d-722e-4f13-b19f-0fc13c1e289c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cb97882-1745-4c3c-959f-967addd65fb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "ae3de9ae-97fe-4197-b832-4c22166d8dc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30df9187-666f-45ad-93e8-f90d58f12b0b",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0243b223-f2e5-4475-9a49-0eff822732c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8b88de7e-6c57-4727-bb53-d886ece25fb4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0fc1435d-ab0e-4127-9a2a-071615e008aa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "d8c7963a-b06e-45d1-990c-93a1f25283b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2611a98-30a3-454f-b602-34dae8145cfd",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ff236f9-5ab9-466c-9dc0-3515a3e3980a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9ace1fe7-f7d7-44db-bd45-49308f2b0ea4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27bad334-46bf-462d-89d7-2508c54bbcc4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "aa405606-03ec-421e-a435-e0fcd65cb2fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "04aa0162-e5cd-468b-8d81-84969bf6c3a0",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cc75dd95-48e1-43b4-87f9-dca97d57e916",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "d86240a0-1b88-4f53-b81a-1a2bd025ffea"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4979f905-c521-42b5-96ac-75d65126e3c2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "599b8cd6-d680-42f4-9f64-9a0a57ae0f3c"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "8fe5545b-1fed-4155-96ea-552fa484302f",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d2d29961-0e4c-4739-b7e2-8fdb14c0b0a4",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df2a9b09-fc56-4ab6-850c-1c2eb78565b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "07d83820-5d78-41f1-b74f-0cc21dff5f1c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5dec422b-0e35-494d-b21b-87e37fb862b3",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "99bfdff2-7747-4f30-b1ba-a3d9a15b7e14"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "66111956-41c1-4651-903a-e65febe50f42",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "93e757c4-fbe0-44b9-8abe-b8b0df94fe23"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "c71414b7-d447-44b7-a295-2a7871f421cc",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1a108d36-a975-4b77-9c42-6b19402cffca"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "fafb51ef-ef12-4468-a37f-7fb25c42e474",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "68cee5d9-2bd0-4fb7-be3c-be0f1d2f55b7"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2697adae-389d-4ff4-80b9-6902d0212ee5",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "a13b6f66-1f0c-42c3-bc66-46cc4d7d202b"
                }
              }
            ]
          },
          {
            "id": "5f2c236c-dc61-42fc-8400-ce0001441cc4",
            "name": "Positive Testing",
            "item": [
              {
                "id": "3af176ba-5a18-4788-b779-f16914af6550",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7414c971-472d-4fea-b4e1-6026b907c9cb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject matches request credential.credentialSubject\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject).to.be.empty;",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b25b5d6b-3a75-4c1f-9b3b-bf9ccacf06dd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "097e5a8a-3881-4c0a-9256-5b78c1887012",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f7ad8ea3-ff34-4585-83fe-3a888bf71ab1"
                    }
                  }
                ]
              },
              {
                "id": "d0ca8797-8678-4908-a672-8a8d3429bb1a",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "16f2d238-793f-4676-a659-3da2c7538966",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "271110b1-cc97-43a0-8ed4-ba05756429fb"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9d9db884-153f-42c6-b524-bcb0dab8cea5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "f5486012-1e63-4ac9-9e03-279d0a10beaf"
                    }
                  }
                ]
              },
              {
                "id": "e46e8b18-c806-4086-9458-1f5395f5c7ce",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "da7e58f6-21e9-4ad1-85b5-1f3bfa1cc618",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6244e64d-75b9-46ee-a5f9-f13e4da187ca"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6efdfde0-2848-4875-8445-1a73bcd6a2f6",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "d1159e63-1c08-4d49-a3cc-0b91632999e8"
                    }
                  }
                ]
              },
              {
                "id": "020a4ffa-7e93-4520-addf-7dc64a3a7587",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "09bfad30-68e3-4cba-80e8-9824ba0c53c2",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1b731aec-0705-4597-aabc-433601bf71b4"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "21493a7f-74fc-43f8-9660-5262400e84f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "086f906f-a677-4584-a7b4-9e7b210dac56"
                    }
                  }
                ]
              },
              {
                "id": "8d985711-ec3c-41f6-b224-926710be0211",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "aceea06a-c103-4b55-8cf3-9db1bf9957e8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "d5dcfdc2-c648-4c29-933a-fc112698689c"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "1b4259dc-7deb-4174-affb-9ef441290f7b",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "ac25edba-3ba8-456f-afb4-13f2f622661d"
                    }
                  }
                ]
              },
              {
                "id": "7fc216e6-0740-45ef-a4bf-45830d1b19c1",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "e47c1e13-2dc5-4262-a02e-0e0b1a9f263a",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "5b8f7138-3cd0-4a47-98cf-dfc9c1edd7cf"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "e48df7eb-628a-4beb-aaf9-72b226509081",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "fdcdc119-daa4-46a0-9cee-678e22a6faac"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "461bfd4b-f3f6-4af8-8e59-52c83d79ee2c",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "c3fe541e-e985-4a6a-88ca-07f77c473a31"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "6175919f-2237-4747-9bca-f1e428ed7309",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "e9c33dd4-5d3c-4ca8-b444-6551956df94f"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "a5d6529f-fa07-4f4e-b617-41edb7f2c72d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "768ea2ec-be9f-4567-b9f3-b96f0a5f7dbb"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "57ad6640-74a7-4ad2-8ce5-305b3afe5082",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "6afb20fd-ef93-464b-a247-6a5bfe1132a7"
            }
          }
        ]
      },
      {
        "id": "e8b413b3-c0d6-4853-b49b-bb12af3ec31e",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "3e3bed9a-49c4-4080-8de3-ba9b789f9074",
            "name": "Negative Testing",
            "item": [
              {
                "id": "0d6b0f93-41a0-4327-9720-7ba831e1853b",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "55df6977-6532-4f13-bfc3-51c38b25108a",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "16e8758d-8ab0-4afb-8552-51ba40cc8ec6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "625f3ed9-411c-4b62-9277-f83472fcbe8c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a1cf659-a192-4e6c-8933-e75365159e71",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "0b6086ce-b96c-42b6-8cbe-32d45b8f8fce"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3690b97-76a6-4d6d-b9d8-d26e2c17b0d6",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b8d73e0-03f9-42e2-a1fb-e57fcd6d6510",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "946ed663-de5d-4a40-b6e9-56684084ad94"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e0c7eed-2abf-404a-b357-ac6c4772aa7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "231c59b3-b447-49c0-9709-b51cb9529c12"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c6f013ad-7658-42f3-8511-e4d02180dc9b",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8bb5fa88-81be-4cf9-8520-19e6feafb5b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "570ca46c-bb06-43fc-814a-043519b4bd73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "318d0eb9-5a14-4415-aa1d-55ade70ed4ab",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "e9db72ed-2ede-450c-a12d-0d7f085dad9f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d3050f11-4c88-44f3-aa5f-7e2a5c64a61a",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdcd6389-7ab8-4a78-aa51-9881065f9c7f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d829ae3b-2f86-4c3d-967c-86d86115262f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc205a0f-3226-4da6-8e22-0707ba03f7b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "790024fd-58e6-4a2b-9b05-cf3cbc305a35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b04926a-a2f6-4905-891b-fe4a1e15da2b",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c0a897d0-5acc-4dec-9c99-0f21c61615c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8349a5c5-b74f-4ebd-b288-c8e60696f072"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ebb4af93-be7f-44de-80f5-4dafbadf129c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "b56df1de-27c9-483f-93a3-bdf3710510ea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "92f84f63-cd15-4056-a0ed-3f9b2b5e2667",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7e5a1504-bce3-41b8-bca7-7690a0957909",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b2d180ed-67d1-4721-9152-c5a61baecf80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31431e47-7a90-42fa-8e16-aee8d0d81505",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "75a41b0c-b1eb-4ab8-b298-10a8093e6832"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9df7af68-0908-46a3-b076-1b3f04978c63",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2da97de6-5572-42c0-a2a5-62abd6be912c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09ba3b79-ff2d-46a9-9ce2-f1c320592798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0aa8d50a-9cab-439b-8a30-e30336929704",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "fbcdc6f0-1377-4d62-b7ea-b69245a67e70"
                        }
                      }
                    ]
                  },
                  {
                    "id": "37e21999-2ffd-4086-ab19-83c919ea396d",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "680dec86-5267-4d45-9ceb-8dc8f8e0f1b5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c0078e03-2e2d-4313-9f82-c64c6c37b552"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e11fbaa5-b116-4daa-a61c-3eb811345350",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c46a6e33-9e15-4eed-8165-4f4bc9fa2222"
                        }
                      }
                    ]
                  },
                  {
                    "id": "befee93a-2c2e-434c-80eb-7bee35b754fc",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cb8df8e-aa01-4a9f-9d2a-1a825c508759",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3813308-0001-4099-b0a6-a910fe816803"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d82b269a-82de-4951-a5a3-fffc2f77198d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3220d4e5-7593-4df5-89f9-284802f0903e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "494b90e6-84f2-4d59-8388-1f3b5e543c51",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e281939-e2dd-422b-a610-a92d42f92536",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3ed2de56-79f1-4749-b881-cef0225d8366"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63aa2d74-1b58-4efc-bd0e-3170a4af694a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "77c6f873-805c-46b8-acc7-4f14dd729ee0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e0dcf66-9b76-4ee6-adac-866e87fca0e8",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "118717e5-67ab-4883-a0ee-3c9896dd0c16",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6af1a3b-f349-407b-85e7-39bbaf18f955"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a44cfac1-156b-44a4-a114-7f548792b0d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "3979b415-dfa0-4e10-a040-4c2c7e6fd8fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68071a66-242a-4b20-af42-eddcfc50bdbc",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5a2b866-21ed-4c86-94d0-506b515ee0c6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "813c18b7-8f8c-43e9-b1f1-c5f152e812e3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0890eafd-a197-42b0-8c7f-bfc4faccf8ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"RevocationList2020Status\";",
                            "}));"
                          ],
                          "_lastExecutionId": "b3372e6d-c805-4ce8-bf27-c50ab109b1d3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b139a521-d460-4a13-a5fa-b300a568a224",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13430094-4358-4655-895c-425d3414fb2a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "98da8905-01a1-4a8d-bcc7-0bad9d563bac"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bc2de926-d6e0-4b10-94c8-a2f00a037581",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"RevocationList2020Status\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d6d5f6b9-7e71-40ce-ac09-e04416f2a3a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3de5d93f-1e45-4e66-80a5-5d43135bb970",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6074ce1c-a00b-41c9-beb0-51fc2f485527",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e11c6111-60c5-4445-889f-539f616aa6a0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "beb9cfe3-8737-4b61-b23b-135ed445b56b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "5761322f-4b03-44cc-9180-5d6e61099016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "79f5dca2-9629-428e-8a5c-53bf6fe31bde",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d8d8c581-46a7-41f1-9c56-f729cc0f17a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8041dcae-4794-4edd-8526-33434555428c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb7d0d91-4d21-4581-9972-cb578cbc1f61",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "b4b4d26c-c195-46d9-b9ae-10be9885c35c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f21ec983-ddd5-406f-becd-008d8ac7f5d4",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b143d54f-b476-404c-b970-dcd1e421a6ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e154dec1-362d-47b3-9403-9431e76dadc3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e191a50-34a8-43be-8c9a-15be6cfab2cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "24b356ed-98b8-4446-a9a7-012dc9e42e4a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1dbb7f4-4b7e-44ac-b4a3-56911d11ee45",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2a16b3e-aeeb-4431-b1de-d18884c23d35",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3420019-6d72-4660-b5fd-e563d7cd741c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8d0c3be-a901-4744-afd8-3629e0980b8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "a84f4411-5ead-4451-896d-bde2c5d24115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9b3937a-f05d-4d95-9181-e97bb1e7c22e",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ded9f804-f434-4e80-83ff-3986e2c19a97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1b583fc9-a5d5-4e07-a69a-df24c0979567"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d3444f7-6dfd-47db-b919-d49275f39b1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"RevocationList2020Status\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "49ae01a3-81b9-4ec2-9512-25621f1eb8d0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7b5943b0-edd2-4693-882e-7b687bf692c9",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ca0c15c-b4bb-4c47-b4ce-2fd3a84d4a13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fb26f8f-15ec-4765-8d1a-adc4d31ef706"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82af9587-9ab8-4437-887f-235727a63a76",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5e16504b-4953-4d7b-9e62-472cfa467058"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f992b0eb-469f-4dbd-b6ea-576dde6f9d30",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "173531ac-514e-49e7-96f4-38e51a91df8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "897b26a0-abc2-49b9-a458-376051b2d798"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99a13afb-6ea4-4c52-8fff-0e520ec4b9cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"RevocationList2020Status\"],",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f3705fd1-7187-495a-839f-7857bbf89d88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "82c33c82-5ee3-41bf-8b5c-de588e468b2a",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d3dae82-ec41-4519-8025-f8e86cfacc97",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "57283e7c-f3bb-4d29-943e-e86d7a562be7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "732a709c-0552-4e63-bbba-3c265d21aa27",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d23cc049-4294-48cc-8dc3-435071165088"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f34c96de-05e0-4a6e-bd8b-a87ac50921e6",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "552a242a-2252-4f63-8d52-ed224b78ef95",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10fcd647-43d7-4127-8a27-cb9dd037339c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaebb40b-5bc9-4718-89a0-1f4257d245df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a5919670-f345-48d4-8b65-38a984554561"
                        }
                      }
                    ]
                  },
                  {
                    "id": "33f29628-a0b8-4356-aa39-ebba6fd5bc25",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "dc2394ab-1b22-4f8d-8465-4d81cf39f124",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a273e20-cd6f-4c9d-9228-ed496db91f87"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "49a1abc9-1dd3-4aa8-ab54-b73aa0b36148",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5607c76e-5546-4772-bcbf-865bce00a453"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cd74c398-c291-4848-b2be-5595e50665cd",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6a267750-acc2-417c-8d81-954f5aa29e4e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "806e3ba9-9a8f-415c-bd02-c32f5d012937"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "da043ffa-fbb4-4348-a5b2-2ebbdd29270a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2d2cc8d7-0898-4f32-8fc9-96805f549d94"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6586324b-469f-4943-a170-f953cad73d94",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "89b68f35-40cd-4872-8623-42c8a6cbdbbb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b45c9194-e2c4-4424-a2a9-14035fe6a274"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c9d5e6-f034-4139-9e33-246e046e51c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6eec5813-0d65-4381-af3f-91dbe4a685d5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0cd51ea8-00b6-4744-a7d3-39aeca55c927",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe84dad5-1bfc-439b-9e69-734a8c62d191",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b393ff15-0cec-42e6-8431-b4e4f0e862c9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f65face4-b551-4f00-99c9-ed9d9ae3369f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f2c35c57-7c06-4523-a9d8-b6c11bc34d76"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc8cfdd5-180e-451d-b225-87f6920a8e05",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fcdfbaf-077e-4ea7-961b-b4d2f8adcc7c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0959c669-263f-429c-9e22-aa1b05b2f593"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe6e7f7d-fc81-4b2b-bd70-1ea4fd8a444e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "134b7946-04bd-40bb-a956-06b5e29ad3b3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "77ed2956-f483-4534-a261-4b37ffc2b6a3",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "772c78a3-8fcf-4d18-9e4f-a88d4e30c0ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ad0907b3-96b1-4868-aab1-948dda3b5438"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "19ec6444-f342-4e5f-bf5c-8b25ddb42e34",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0cf67c8d-2fea-4c9e-ab66-e7d64945a20f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a677798b-d6a3-4433-a937-18d0386339c7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "99bdb382-869a-4f81-8494-08c89f8eba9d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2ca8c0fb-e413-4168-957f-90c682a96715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "857d1ebc-80ba-467f-a01c-bbdf91e58ea1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b0b5d628-1bc7-471d-987e-e426880da68b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "56a534e3-96d7-4c5d-a94e-027f26a70eaa",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a4e80da-8b1b-483f-863a-3c9fd31a96e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d061ad7c-e97e-4ab0-9835-f33852b777a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60e2515b-85ca-4292-a4f1-4b325c8e5762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "828b100d-98b6-4f32-9a4c-b9529d5160aa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "35af716f-025b-4e34-bfce-73f667f5edff",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b32a8e0-440f-4fb8-b8e0-d406fab1587f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d867487c-600e-4085-b41e-78c41f9fe4bd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d9108241-71a6-4fe0-8299-3d855d91f128",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1d71dab9-5aa9-4f7b-97c6-258cbf3a97fd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11ed3a45-ee4d-4f7a-a2be-1bf75fd82096",
                    "name": "credentials_status:credentialStatus:item:status:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8cbd84a3-908b-4b36-a796-a5b4f4bd19f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82687469-d6bf-454f-903b-83eae2be7eee"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8d460ea5-888b-4161-a8fc-b3c9995b2566",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"RevocationList2020Status\",",
                            "        \"status\": \"invalid value\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d1cf74e6-22b9-43e9-82f2-32a735b7ad8b"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "201afdd1-7259-4d18-b561-24f7ef3fd30c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3047f661-bdb8-4909-96c5-8558e2fa302d",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14b0ce12-d8ec-4377-a337-a33138896a3c",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "188414bb-4a55-41d1-b8de-bc496a548363"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b18e004c-69bf-41d2-ae07-601c44ab08ea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "ff77d1ae-6810-4df8-b37e-16fdb7dd2f37"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f94bd664-fa58-4d62-bb6c-f1096b180b9b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7f38158d-6ba8-4412-876e-e3cf1cd52af5"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "ff49e018-c546-4a16-8ca2-8b96049edf29",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "d5c4f11f-7b87-4b84-b9c2-d8e8ecb29d6c"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e82d67e6-ce5f-474a-888d-6f4feb985108",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "c09e160f-2779-40f9-9fb0-859b63e674d1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "920d9a9f-af6e-49fa-a746-27e799b426aa",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "88297ed7-7a67-4c50-b91e-7302ef3868b9"
            }
          }
        ]
      },
      {
        "id": "f9233a5e-ed84-442c-acec-377cfb3a1f9d",
        "name": "Credentials - Update Status (StatusList2021)",
        "item": [
          {
            "id": "2a0dcd1d-e528-43ce-9ba0-5ca0e0cc7bb5",
            "name": "Negative Testing",
            "item": [
              {
                "id": "15cb5f07-2747-47f2-8fcd-459b2540e339",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "c14f8bfa-2c42-49e7-9787-010d6abfa8fc",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "105aa4dc-ebb9-4c74-95e1-cc816f55a4b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e4abfeb3-1da2-4bcc-b866-04d6258beb67"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a79a5d3-8490-407a-b1a1-d4f7f9f18069",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "5908c040-0de5-4c1a-94da-765b8db3371b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9bc50fed-3dc9-4252-a8cc-342a20f2dfdc",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "297900b5-f4bb-4606-8847-4539c01bd27f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4d98b177-e4c9-4e77-960e-be2d294b2ed5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1c9da4f0-bc27-4148-8c3c-3df6437dd880",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "a156670b-a0a9-43ea-88bb-80c4026b41c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db9cdecd-9cbd-4c24-befb-a5c613060e42",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8437b80b-c33c-4c83-b849-834d1df31584",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d428c0bd-d7f6-4eca-b960-e8bd46578659"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bf5ef4e-dec2-465b-a641-1f3d518d83da",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "0050422e-c427-47f4-aeeb-43d26edfc34c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ae982e-490b-437f-b525-a330e8639882",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e552df66-6d9a-449d-b65f-40b81e1fd1d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "77f89078-6ba8-4e48-a9cd-f4982ad0f460"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "df2a0d77-c9ea-4ed7-a3fe-c920e272a90a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "39f3ec41-efa6-445f-820b-575979659d29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b235716-b445-481e-929d-5f844c82c168",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "68fb1ade-1f12-49ff-9467-4c1b86d6a033",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8896369a-3422-41e9-b963-f33f477082fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1539f2d4-e7ab-4411-bed9-d869c537cac4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5c9bec20-0f5a-49f8-820c-d4908906537c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a50c373-6012-47f7-b32e-5e7a99c3bcc6",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a5a89241-c628-4dcf-a486-9a413b2d64cd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "26ce27e2-036b-4729-8753-5d2866280e3e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bbc7ec57-3500-421e-bf0f-7444e7cbdd6a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "6ed66cfe-2708-48e1-a069-8993714792ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "613f574a-f4a4-49fc-a0f7-4cc2f16ec056",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "497a09f0-96ce-442b-b1f3-15056d69f988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ad7eabb-a5fb-4310-9040-a54d004ec34a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1a0aeec4-ce36-4453-bfa0-3237c05469b1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "b4582d3b-b9ff-4f45-894d-957cc4a39ac2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6514b175-6fab-4622-a74e-07e8a9fbb95b",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a98a3723-dcbf-4853-897d-d69765bbb27f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6c61e556-5830-44d3-aa36-35f6ecdd2d71"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51259b22-399f-420d-ad0d-ba9852ea99fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialstatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "91b56a41-0925-4f59-b501-f38a03ae504f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8b2708b1-def2-4979-96c2-c9a4a4b6bbc0",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "40e86eed-f416-493a-8f75-95db2d9d6f30",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "863fd4b9-e792-4f0c-81b9-d427376e4ad6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ae3b2b26-5268-4b8b-a044-fcf974fa3745",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialstatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "27d50473-9256-45f6-b134-1322e22f76e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27b021c0-70ba-40a8-b692-82df6c9465c3",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b0a213a-1522-47ba-b1a1-8fd9bebc4e13",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "319c0866-3461-49c1-bd9c-5af59842e9d8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a5d5f680-7ec7-4551-b60b-54d066df034b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialstatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "01e2cfb8-2770-4399-bc4c-ca1da6081512"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4be20d1-aaec-4a96-9525-b57a02699626",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8723be25-fdec-4f54-a41e-6c7b4b945b49",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b0f9bef9-8029-4706-b803-ed1bd68f7e6a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8522ac15-31f7-4b81-917b-35f9981f94f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialstatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "19b8a4fa-e1aa-44bf-b826-7402288553d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7122103f-968c-46d3-b23a-6381e9767a11",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "280cc0fc-ddf4-4859-bdc4-e8efd60d251d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38d1a50a-198f-4c07-9e4e-77b40eec5307"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3755ba89-b845-4ae3-9b98-05ee809b61b2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialstatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "513eeed1-4093-4192-ae22-e581b8d3e772"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b9ee22a0-fad5-4b7c-8657-b079918ff061",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a202e3c-6adc-4335-9960-e680da7d6631",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e221899-9eff-497d-81c5-eb66ea9e1715"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3f2cbf5-3e59-48c7-8490-7748596fe7a6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialstatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "d0b4c1ba-0fc3-4bb5-959b-a13fabe7018f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "800eec25-8a4f-4237-89c3-f6010d37e45e",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e39294b7-7b4f-42fc-8997-16f77f2288f7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7139388c-764c-4cef-8c79-6594c69498de"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abc8ace5-ca92-4064-abbf-73d146f3c663",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialstatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f12753e-cabe-4f37-a11d-f2e4a7d19fab"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15b2e102-d58d-498c-b58b-f1ea211a407a",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3d9bd4a-e680-4d8e-9128-172aec52f706",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "32f7f9d3-7444-46c3-ab60-5f88f6b7a28b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b194072d-25b5-42e2-8d5f-68cfd5a9682d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialstatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "7a3b47f9-efeb-42e2-9f44-15a60b827efb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "96c26b2d-48b0-422c-8673-3bff56fe053d",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b4514c-89a8-4f66-81b6-d09fa18b976b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "140f02e4-d831-455b-9233-58d2906ca703"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9dd5c6-e185-4770-a0f4-f2c9d25c7d7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialstatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "7b3e235c-2873-4f68-938c-e52845ae1587"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f02a3be-741e-476d-86f2-cbc8967a3d0b",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7c6b7800-8174-49be-a787-8b6538269fda",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18a4af10-354d-43e3-8ad8-25ac0e5c74cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50fc1ac2-5416-4acf-ae51-f43c703f295e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialstatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "1693cf57-3657-425a-a808-d1859f168393"
                        }
                      }
                    ]
                  },
                  {
                    "id": "57f03d87-14d4-440b-99e5-58a25dc446be",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fd868dbd-2937-4be2-9ca7-124cf345df06",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fdbb2ca8-23a2-420d-8d68-2372667a5ff7"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bdcf73f-6482-410b-a056-f9dab8e8d2e6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialstatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "e28618e6-932f-4ec2-8b76-9c8677f9398e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4fd29b-97e3-4c51-a400-c3ed27397276",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b654c408-64a5-4893-acc2-412b94f1d239",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84ee4b68-0839-42cc-a2a3-24412816e3a4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4f9333b9-5a87-43ba-a131-9e023994ee67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialstatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "acf33904-555a-4002-ba94-b4a80d6f4430"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c37e661d-0bb3-4856-9f39-00a27ceeff57",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea30191b-df4f-4a8d-8f89-22f30b6e52a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb9871cb-524e-42c4-a4f2-f94a463d0670"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8e27585f-d6d4-4e0d-ba1a-9cdc550435fa",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ecfda352-6177-4b31-9d74-28bd7e48f2f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5b3574a4-d3a4-478c-ae23-ae2ee6c61862",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d84b1dd0-6216-48bc-a2b1-6f287ee6b48d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7410e259-080b-4d5f-bb57-3ebef44d0a3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "004c445d-1679-4818-a344-e8d89702c3b6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd162926-09e2-494d-b228-60c9832f2b40"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d2dd93d0-1008-4ac8-8f63-c629ef5df7c0",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2b8795fb-d364-4ed9-bd43-70b9d0a8aa37",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f99fe89-09aa-4f20-a364-56dd988d2af8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e54964ca-bb42-445f-9a1c-3431c3983d6b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "985b45ab-b2ac-4715-840f-187fde9cad5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ad04a29-58b8-49fb-836f-b29267f926b2",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "54eac814-4581-4fa8-935b-0109753b2811",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "873b09b1-f2d0-451a-9ca3-ae2b3ff67934"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4701b52b-7cd3-467a-82ce-5995b50a6ae8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e716f36d-9d76-4b4f-bec8-bdbf2725e6f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "be2dafe1-e755-40ef-a509-5a9cfd439b3a",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c227499a-a833-45bb-bb82-f01966ad248a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9235c86f-20b3-4e59-8258-93b4ddf48843"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "66d30a99-8b90-424a-a205-5dfc1112b9ce",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "38d56065-6e9b-4f77-8942-f3fa173e17a4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb8f0724-8f52-45e7-82b4-e26f9748fa17",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d5b09298-7328-4940-8cc4-63c5d77c8fdd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bb446627-f652-4627-8a76-e68451c2333a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "30edc3a6-8167-46f2-b6cd-65b90127110a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "4f6ef2db-a978-4eae-b63e-0f32a2dccf10"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50e90c2b-5a6e-403b-bcee-31c359952043",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "facef3b6-0a4a-4d1d-861e-f404d6a69af8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4ae40344-92a0-4ffb-ac0e-09fc36fa80f5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7a4ada3a-045b-4633-aa18-b8eabee0fc85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "b1e1db7e-abc0-4707-b6cf-c1667ce06a99"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a98a473e-b602-4e90-8071-698175bb7f6c",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c392a2ab-d351-4115-9e14-97839819c34c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "896eb26c-d42a-411c-b0cf-3b147e3f989b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c8586ace-6660-48d4-af7c-6af4ab891988",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "75084f84-711f-431c-9119-880ac78d1725"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2a7cbb4a-01fe-4444-9fc5-1229165cb6e2",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4a811982-bea0-4b6e-9156-0bd7e91d9137",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0d5241b9-b318-4add-b354-083be5751ef8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5f8601c-eb08-46d2-bb2b-990156955c5f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "1dc703b3-6684-443e-92b8-5d65f29fd506"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9548bedc-5ca0-4d8b-b47b-a93c44eb0b50",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33910384-6e75-4dd7-ae50-457ffa2bb95e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0addd19d-6a36-47be-a57c-9b0046af281d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0148b1a4-ed54-4d74-9045-b47ebd8481a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f5059b56-76eb-445e-bb78-5d5af669320b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "760f32aa-5817-4567-9cb4-b5fd0ba12731",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "df103790-4037-4ed5-90c1-7654dad6c966",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d950e06d-37d2-45e7-8df3-c8655e703568"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a84a2ce6-6fdb-47ab-af75-35a8476c43d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "0f524bba-1b3b-4329-9f5d-8bd12bd81b26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "159a15a8-32bd-467f-9acc-dfb199f825f8",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82567ca-1861-4cbd-a1fa-fe7f5ef3b2c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eee5c421-315b-4da7-9947-60df3febfc32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "195d20a9-9dfd-4949-bb50-0e30649f53b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "07c6d5a5-9cc7-425b-adf0-13525f38e3f2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ed4b1100-912a-4a0a-9a7b-1534d2d695e9",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "efe92e8f-daf1-4774-bb86-5a8236f599bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "82aed2ee-b5d8-449b-9028-b03fa6c2631c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cae67825-c6f6-413a-ab8d-27680b808ba9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "a96eb99c-c778-4cf2-8477-4e231ebbd466"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5a51bce-ab15-4fe7-a8ac-41b0be42eb3f",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4fbfd40a-c92f-4407-94d9-406c7d8f1932",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "21ffad5f-48fc-4a51-8383-4aabbb8011c2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13175e9a-7b4f-4680-9a85-e760b5c9fd3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "cd9d992a-3a53-49a5-a9fd-fd904c9d57b2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d32a574a-86be-477f-81b8-0fa946667521",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e78d1ddd-50dc-4e10-b467-5bc46dc7424a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2fc433ef-ddb0-4281-88b9-0c586366ef10"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ce7f839-7cbb-459e-bc56-77e32813584e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "f56369be-126b-4bfc-b136-d1cb4c133c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19bce4a-84e2-49fc-a9e0-11f742035dbe",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c57d7d0b-2f0b-410d-93fe-ccc250e801d8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fb976c1b-f867-4b29-a0bb-46604c5e3c91"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cd5c13ac-cd5c-4f03-acba-555de1abb612",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "49411d30-4462-43a9-b606-707c516e2641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f5fe9310-062a-4e6b-829a-8504c95a31e3",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "03b99f9c-5c29-4669-899a-0922c3a0b8a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a922bb08-15aa-4f73-98f0-938c7fe34264"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9227405d-b96d-4e86-b462-d325bceaad77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b41f8f1-8f97-4167-8fd8-99f9f3219dfe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2775829e-592e-496b-8901-2a98a0f48881",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9314eac6-6541-4a42-b117-f901d24f0629",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9e00e02b-6e0f-408d-94e9-b9799722f27a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0f75504f-2231-4a0c-bd48-f11cef51abe3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialstatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e96b8fc3-d608-4bc9-b41c-653919a80b39"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "157af3ba-9a6e-4fa6-aefb-df5616842c84",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "60f4ea4e-f2f5-47f5-8d6d-fad7d1a585ec",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be68e8d9-7943-4946-930a-0094585ea356",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "3f1b86b4-d0e8-496e-b384-c5036f5b40a6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6d373cb6-27d9-499a-886b-52cb295a112c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8c67b56a-9843-400d-a8f9-b6e06cc00e1e"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "6cc49950-3fd7-414e-9f6b-b89699ec752b",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "fc35549d-824d-4e19-852c-d08ab5e2f215"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "f5e4a755-f868-4c18-879f-bfdce1a5339c",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ddd2af37-2a26-492e-ad48-2e2c185deced"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "fc8b26f9-a92e-4976-abc6-a965d6dc939e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "dd62c7f1-417a-41c6-9288-fd6e0b53b8b7"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "378001fa-63e3-4387-bddf-a63fc46067a5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "729c70ca-96e4-48d5-b2a6-0f78ed5e7b5d"
            }
          }
        ]
      },
      {
        "id": "e20264d3-0291-4621-a3ee-acaabb9bea96",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "b2d1ebfa-6aa4-46d1-a3ea-9b997a840c7c",
            "name": "Negative Testing",
            "item": [
              {
                "id": "b5af421b-d9de-4dfe-b402-00aabe244d1c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "456eda76-f518-4dd8-add8-42103b69a8f1",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "41a86f02-9667-416a-a28e-c505ec8223e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "31f96e60-cb28-4ec1-90bb-649d074093a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6cbbe46b-9a3d-46ed-97a0-17ea7fad7119",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "838e9e90-58dd-4200-8af8-d3622bea5135",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23dc1c68-f75c-45c1-b67a-5f50c6044f9e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83e3866b-0a98-4a0a-9ab3-612d46b17820",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "090911e1-cc77-4d48-9cbe-3ce3e8061117",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e553f34a-e633-4d1b-acc4-36e0651d24c6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ff8ca51e-83e1-4d0a-bab3-ee7918d7165c",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "33484a9a-40f6-474a-8000-fb841b561670",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfdb0693-b129-44e6-9757-886dc2778147"
                        }
                      }
                    ]
                  },
                  {
                    "id": "73b2af15-0dbc-46d3-993e-ae1b07437d75",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "979ee6b5-4d90-4047-be3a-77ec8e8007c0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9a6ec389-7828-4d1a-93be-283a0d87d446"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d470f019-c2d4-499e-99a4-14de6eb68cea",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e30ddf1f-d99c-4085-9c25-80cdf04c6998",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1da8ebff-0e61-4c8d-a98d-4e674d1c2d54"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a4e41c2-1779-45b4-9adf-a3b3e1ca128d",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b83b038f-4464-4c57-89b6-e9583ec63aba",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b7ce3b70-4fb1-4dae-8990-28d9efed32f1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1cb9ca34-c768-45d0-b722-1324ac331cc1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c26d252-d060-4a7a-8109-6e8ed944e766"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f28f94b4-0845-4dfd-9687-284479878907",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5bd3d996-e42f-407b-abcd-97d1082ce82a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "871053ab-6943-46b6-befe-d4cdd7b4f932"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db743972-0095-4fb2-adc8-e3f8e8bc54b5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "23cb5cef-4a2a-481b-b67d-34493b075456"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e119f2c0-24bd-4781-8c59-4df23859150d",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "88e9039b-5b5c-49a4-ae2d-0d41481c0fb6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5da8df4-8552-44ac-977c-5085fb31a38b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d471240-e3ff-4776-98b1-b9fab3008dac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "37ea822e-1c83-4c1e-b3e4-ef298dc9f304"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bcc98a32-8249-479d-b486-8889f0511f0f",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "42a95fcf-927d-4a2e-b06c-61a515bbf323",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "82edee34-8597-4bf0-9ec3-d700635de217"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e474925f-b436-4c3b-8795-bc985f8bf83b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6211e535-39a8-4813-9a29-f8a24bb9484d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bbdf9ca6-e43b-4394-889a-fd01e8d7aae5",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7c9b1086-1219-4559-aee7-171a9c0aee38",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "94db6793-3c99-4c96-8921-afedc5c60867"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35471447-9ccc-4c82-a412-e9181750973b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d3ebd151-a5f4-4470-a9f6-5eb0bf6f26c3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "196a176f-4bff-4c10-8cc4-0630590ec9d5",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8cbc2509-3882-494b-acc8-ca59295445f6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "763a957f-f6a0-43aa-bcd7-5ec526b95376"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54091bf4-2d2a-430a-947f-25dc9b6ac846",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "862b613c-6c06-41b8-9dd3-c019aec10623"
                        }
                      }
                    ]
                  },
                  {
                    "id": "908ef427-2748-41f5-80c5-9f7551da29f7",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fe61baca-a2f6-47c1-a5ed-091cae826eeb",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "cdbe7e66-01a2-4d38-b16c-9ec164932658"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "54780c1e-dad5-4257-80ff-1152261f527c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7062e44a-cd4b-483d-9181-d0816ecef6d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "14e2aa06-1a16-4c85-8250-35fdd6ae927c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a6a04e4-6298-4ff7-9170-abbd4f6529d3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c14d4b34-8967-439f-b03a-628d7d641356"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f4d2d0e-6133-4972-8ddb-bce6e32956fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91ea4feb-8918-4f57-b3cb-6ff693cfdbe0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1602f0d3-0bab-4fd8-9843-e6db09826c2a",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04397c9b-4066-412a-8ab4-7dfc9a12c3e6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d7967389-1215-4720-99ae-5e9b3a01d63d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86d8c93-5c2e-40e6-8594-f92a23118078",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "89802f32-bc6a-4f7f-b780-61384e3b3848"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8f7d6dc6-ff32-46f6-aa99-946628677e20",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "371e9e35-2a3e-4cb8-ac4a-e56aefac67e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "fdf632dc-ad50-45b2-a411-27ea21527684"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b2485d2-2ea9-4a1f-8852-c406eac79818",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "089f6390-00d1-4d75-a435-1b13400918a0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e276de3c-ec9d-43c5-963f-bbc81bc72c2a",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ea9500fd-cb53-4e85-b57d-9a1a2b62ee79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ce33d730-ef77-4d41-a441-7272c5ed284c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b69225f4-6001-4c81-a7c8-91b4281ea72d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2a9637d6-6813-4ee9-8af1-af515daae689"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9adb1134-8b88-424f-b484-9cdb63ee372b",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ccb090a-2ebe-48f8-bc51-37770c3abf95",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "148176bb-6e1f-4712-b550-f5712cb48883"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0ffabb90-0b89-471a-b3b5-9770e48285e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c1664a07-04b7-439a-b748-7fada97f9cef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "284aa8c8-15db-4212-9142-235d8dd7f80c",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e5cff208-d5aa-40ae-aa8a-65363eb52ee4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1b97fa4-ed94-4087-83e4-163d45bb41ab"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5e249763-1346-4da1-95e6-95232d0b27d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ec29be44-98ed-4884-8bc7-88fc7d330c3b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8527b69b-5431-44e5-b88e-115c8b454def",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "daaa24c6-0d8a-45f3-868e-d1af6a9e4c1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a667d28e-28a5-40d7-9267-bd0ea7a81d31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9efd8ca4-1bc7-4598-9d6e-0855f1ffa39a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6ea6ced2-d4ae-4626-98e6-872ad902b613"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180b5921-fac8-4d74-bae1-070da5462d1a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db6f5ec0-929d-4434-be4c-e99a5ebdee23",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "306124cf-8a3a-4cb0-9a68-8606889ef57f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6808c96d-afbe-4338-b242-f0b611502bfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0acefc48-0f0b-48dd-b111-9988a45cc60d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38e1552b-48ca-4cbc-a29c-c4377f303d98",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e92d18e0-e4e0-4be5-82f3-eb92275a4196",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7009bf83-a2d0-42c0-9191-a1cd30932a79"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "03d5d4ab-655f-4672-8b1e-1f821ca26f5e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bed61d25-17c1-45f7-b9d9-980a81eb83c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec05f4ae-e077-4564-8ee9-940b1e7397bf",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a42e80d2-958d-4208-92ba-f45d786a30ec",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b3c4ab84-d443-47d1-8c65-0f9d64df912e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a86d3056-cea4-4d73-87ea-5e50672c4401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a5abab5d-f7bd-4c3a-abba-3257c3e39872"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d4688179-69c3-48bf-92a9-d19d31556b51",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "53f3d5fa-2e38-450e-ba1f-66f52126ad07",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3497cf9a-eb40-493e-91a8-0acc3c051f47"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8dc6553-e5cd-420c-a66d-56b1726fa25b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d902e373-a172-4ab3-925a-346536bc060a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dc97156-308b-4fbb-8f36-13a0eea44c44",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "95ac6f10-1389-4bf6-9004-4788fcd71551",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "510705b6-3a03-4ee7-9036-63261a0e0b3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e99b5873-0746-42e3-8e6a-7c134dfb6ed7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "960a77b1-0d17-4781-a394-6119e28b16cd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "52c0a5a2-9957-4633-8a72-a375afbd62d4",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5bd7210-ac81-4174-bf8a-5bf8e9d12245",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d57c6073-db7a-483c-a9a8-f9f667946207"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d953cfca-ddab-4110-9abd-06fd154e656a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9b015b70-ba60-47cf-8558-cfdef2d247e1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4e870ecc-1d2d-4c2d-bba9-aaffbcdc2762",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f58457d-5ec1-4437-a34b-1f0455236de2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bfcae21b-9e8f-41a5-8b42-d9b686fe1766"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "709b286b-71d9-4452-a320-6f28ccfb29f1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c72f3f87-dd8d-4c73-9f37-7ee2574c49c2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49bf9c1a-5fab-49b5-ad32-f8da122dcabd",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed2f5e2c-4ea2-417a-93f2-006410573d44",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "48581eef-2b2e-49df-a858-e0a836d8e4fb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37b9a1b5-2b9c-4052-89dc-07a3fe1abc01",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ced7df3d-518f-4894-ad57-593108ebaedc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ea1fd358-7f19-412f-a5a6-c31746dee317",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5b54e9a4-28da-408c-8eae-094a4968bb57",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c0ee414-d8bc-4fb9-82fe-2e8be1ebc6c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "187c4f00-9084-449f-b809-e98b9d2fbd6b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d653d130-17c8-4681-b378-caa5e3d779b8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1e0e1a34-b441-44ec-ab47-45a7ad9a3bcb",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0916c80-3c27-4b49-8dde-74cb5f27dc47",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "abfb2c76-6a60-4c68-b58d-42a9397f8b20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ba5b1be9-804a-4bbd-a435-6417d16e25d5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7f1f1e97-6f03-4dbe-80e0-94bd46401220"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bcc1141-d1f7-4f25-9297-3bda516b1947",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "63771d00-679e-4b6a-aa9b-c02d953f1833",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5cbaebd3-bdeb-430d-9573-38239c84676f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ae44d11c-1630-4e6a-bbd0-2047ecb40d41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d5d46e42-9fe1-4b4d-97df-b73d78c345a8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "88508376-d4dc-4b51-aa46-8e72df14c98f",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87588384-0ab7-4d17-a66f-45a8af7ebb69",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2242a3f-c348-44b3-af60-c7239715e322"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "832de961-a8b0-4a40-9287-dabfbb3b53be",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5edcb4e-35a7-4297-bd7a-c8e8a09e0ad4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f646ddfa-2813-4785-a8bd-0b2e4b951350",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a2106310-ee7a-4ac0-a73d-07ff4b6d22a7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8529ae13-f015-4f9f-bbf4-8da9df8beb68"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2a7ab693-bc2d-4164-be27-a5c509b03e41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "00d78452-bc7d-4bb9-8494-910711d3bb2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e174dd6e-628a-4a37-98b7-166216cd3129",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60361668-d54d-4602-b2a5-efd808376611",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d42cabc0-63f6-4db4-a663-da2da9cf7d31"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "98772ad2-6dae-48a3-80b5-5d3258591d97",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "93ad793c-9063-4cd1-9698-b0fb16f00336"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2f7d26fb-b045-4a97-a65b-afa21368ecd1",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "503915a1-fa01-4d94-8632-8a9f0f483eee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "434dfe06-2e94-4c74-b816-428c609d9ae2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b0e6872-2d0b-47bf-8939-2f77ab7c33ed",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4c16bb4-efb3-4bc7-b151-055b983a7819"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18b44b0d-01d4-48c5-8b5c-1ae899762704",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6b2ab9e-f20a-4604-b146-2d4620cb1a8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b6d3e9d6-8fe3-4957-a32a-b8f18fedbcea"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ccdef7c1-3c06-4161-bf84-e6973192913a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "65938c17-a038-4a37-8ab9-90768e8c3e4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1629cfdf-1161-45e0-a440-ac19b38cdfb8",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd8857ad-e46a-445b-a6d3-16a3442e73c8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "12d54edf-e8a4-4e3d-b4e2-471e9880da57"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5361fbd6-62d7-4c8b-b864-a6bba6570e08",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d52d841d-f56c-4d8a-93b3-98a4f9b135d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e9f079b-64ea-4f61-9f79-d740bdc470d7",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b343843-8410-4c7e-a2b1-789694262955",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b20d55ae-df56-4051-ad03-53ffff6994e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "37a09f7d-cd28-4cca-a244-136e43656183",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1745013e-428d-43fb-855b-cde4f94ab95d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fb7cad83-f920-49a2-8b71-580541866fec",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e87c39c3-b39c-4113-98a7-fb4928699ccb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bfde4166-c15c-4930-9f13-daf970a38b2d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9f8e339d-d31f-4c82-9103-e43ef2ed2bf0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "16339ff4-304f-4d60-8a5f-56b20d2a385b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "224281a9-4c67-491f-8411-ab4c394f2f2d",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ccb3894e-7229-4559-902d-b3c4bb825738",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "01d22c79-7646-4371-bff2-69d797f92795"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d046cb99-c19c-4945-8e3c-8d06857ab270",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "edfbac3a-531b-4c8d-9b8c-f8dabd92249d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1aecf66a-21f1-4e8f-9a11-7dedb553331c",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3f3631f-d932-43c4-96c1-e6854bbad36e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ce06469-0d5d-486c-830e-913b0141d2b4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b146d5c-c4a7-4ae2-a8b6-7ea0a2ba161f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0ca8727-5255-43d8-b698-c0bbfae06ce4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53749b63-c671-4ab7-8f30-4ad637da08b1",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cbfb0744-f88a-4276-a465-3fc5138acea3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "095d770f-7c66-4c7f-8339-b4c4fcde7e5b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b122edac-ce41-45a1-b62d-b3e949cf190b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8acae610-edb5-42a6-968e-f4c0b3a611e5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "399041c5-cf0f-4ec9-88fc-2186220537ae",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ae70bd4-c23b-4b56-982a-293891bf3b2a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cc51a50c-8ed5-42a7-937b-0003b3182ae1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f0e8550-6dbb-48b1-8226-00f8a4c6c2d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51de5fd9-4f3e-4736-97cb-91138db10412"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c49b733-a3d1-4836-b56a-8028d54db011",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d3d4dc0-1fad-4d37-8cf9-6d647edac099",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c11021bd-ba61-46b0-978b-6fb5c09e85e8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ee91b8a3-9cc5-42b5-a193-fa6af6dc79f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ba46302d-0c7c-4d82-9a4a-2d44e107977d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b8f37d98-9498-42bd-b85a-4ace8900bd77",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "50dfef06-e26e-4c3b-be99-21b0c4ecac6e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c4aab7d-8cf2-49ef-a51e-e395ddc3bfa7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1f4fc643-9ce7-4541-a6b2-df2558755a9f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ffdb2fad-3288-4b9e-9415-57e50c136308"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aada4c25-09b7-4236-bbc3-30ddae089175",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2b6d71a6-273d-4085-8501-4e5e9615d37e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "937f7e1a-2b6b-4436-b4b3-a0938fdf09fa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f674e4dd-986d-483e-b7de-4bf3fe6b2372",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e26cefb-c325-40f8-90aa-066aba816009"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f12c2a24-4c46-4388-81c4-07723ad2b554",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ed29cbd-ea3c-4965-b6e4-7caaf662dfdb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c34269bb-5af5-4393-a228-f82f43908c3d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd60d26a-5aac-4b84-85b5-edbcdf97e0f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6a6d8afd-5e42-41a3-8ce2-6377b63c1d20"
                        }
                      }
                    ]
                  },
                  {
                    "id": "76d4ca91-adb9-4037-9389-5988fb5cbd35",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7fa76f1d-a083-499f-998f-e51d84b0baea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "46631cbf-0cc8-4384-a5e0-0f2434bdf3dd"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "75c62287-d223-4ee6-9796-f74c2dca6cfb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ef444e3-26c5-4557-9e13-00e4a4f01bbd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f99b9633-172b-48d2-9bc2-f8f4fa312975",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dff934ee-d604-42da-92cc-4b8307463901",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d4bf82-100d-4c1f-a254-811ac246dbac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "20103fa2-19c2-48d1-9f1f-8b164cf9a075",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a3a3e5e5-c856-4f71-a1a6-4f8abfe4122b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "739c7711-f221-4635-9a4d-ae8bc2e2f473",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "339b1bc8-14d4-43a4-8b09-4ebaca8bfd41",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7df29f9-e258-4a5b-8560-e4fe805c9240"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "55dfd1ef-b1e9-4127-8452-4f49af84ea82",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "849e9c51-ed51-4e30-a802-bf4fc7029795"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2ce270d4-f859-47a7-a383-56b8da8d07ba",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586a12df-e70b-4b5f-a1d4-b426a6fe95a3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ae20912-991b-496b-97ef-89f63deb57b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d73d107b-e82f-471b-8d6d-685fbdbf5c7d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3c78332b-7f0f-46bf-91da-5af14161c578"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf16613e-2515-4883-9510-a97d2438a26b",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4e985a3-08f9-4612-90ff-307567134827",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e5cd8ef6-c064-4a0a-8e53-ebbf230a0927"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cb8b719c-b4f0-46d6-90de-51c969480668",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0c3b0ad-841e-4328-851e-7ef72f0a70ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fce286b9-28d9-44fe-8ae2-e05d8f538c1d",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3054c507-3c01-4e7d-a8d2-7998e55c32ff",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f0b39fe-1a66-465e-9fb2-4e88e56cd00f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6ea0cc5-5e52-47cb-942f-df5bf5fc72d8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a88c29db-f6d5-447e-98a2-90d639633a08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dba2e899-1f23-40fe-b4af-502f3faeda38",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a477c23-b025-4232-9d65-806435a6f9c3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2bc21b6-1dbe-470b-bda9-fc470dcf0b3b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e15300f7-cc6c-404c-a1dd-5caf5ddc080f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4766f3f5-9b8e-4a8e-9d57-797d35055988"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f91c660-03bc-49f5-b705-dcfec5961657",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b4a64864-e76a-4713-b2bd-17e50adeebc2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "efdd0683-467b-4bc8-b3c9-b1e5cb2c1b50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f979aa37-8f9e-4952-9065-38d6e0ec5a3a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "41c5be25-5d68-4630-b3d6-031010dc4fa4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f4b38f1e-bef7-415e-9a48-1fbf920d06c8",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9cfe7eea-e10b-4daa-850f-26708872c551",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98b080c2-0138-4ba2-bdc2-78199386f956"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9b3f446-de1d-4b11-84d4-b969995e90d7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3fc5c357-70ff-4186-aafc-e5486303ca2c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d99086bd-39e9-42d5-b42e-03fdeb7c2a55",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31e5caae-cfd3-44dc-ba46-d67602e65492",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d864e87-4d33-4308-9f7c-3ae406fc13b8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c759c4-8ca4-401a-9386-524d1c867baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5c07b7e6-9965-4c75-98c1-dbd919b50016"
                        }
                      }
                    ]
                  },
                  {
                    "id": "deacdffb-1578-4200-8583-2efafad05b65",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "afcd04e3-1f02-4f3d-a093-614a01c214ea",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2dc5631a-b9ba-4be5-8691-c86e669ef7a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b55cda2f-5fdf-4a22-ba71-0f6d3b085ad0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "53d8e912-c4f8-4eb3-b4b5-b5635286990b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3acba98-512a-46e1-9733-f6c4a4c8315e",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "105fc48a-1daa-4567-9e72-0d5dbface167",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "146327f8-616e-4cfa-8168-0c2de39d1630"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3f123ac8-bf97-4f4c-81cf-9d807d7a7d8c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5b66147d-2b4d-4a1d-b1c2-b72740639b33"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a86ea121-01f6-4490-a88d-0a41f479aa3a",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "98eeea1f-4106-46f9-b057-90993b1e8cd3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c9c01e4-5dac-4e34-a597-a5d2efc45663"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bcca1821-4d31-4aa7-a684-ed87c77e38fc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1186a63a-72f9-4f39-b01d-ed33353ee3fc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8c355892-5a26-4cd0-a9e2-3c89d395bf58",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3abf6d23-5c93-438e-a1cf-7dbab1ed3d81",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7a7af0c3-7e07-4949-8140-996c9aaf50b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db7b5caa-8620-47fd-9517-bc6e79cca46a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "57d37a01-a5a7-42fb-b25f-12b0a865975d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "07000f18-fa03-423d-a847-0170ae3b0287",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b76cd3a8-6ba9-4e40-9a27-1fba01c07731",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a7b34af2-b41e-48b3-b28b-080e7d50b61e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e8903b9-2f43-490c-bb9b-aa60ca134fbb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a4fafd65-95a6-4a41-aeb3-dfbf96b8d314"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4fd835d-3292-4b85-8e82-7437e3ffdc33",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "92b408e6-34a7-48bf-b8a1-715f9b1cccb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "352f12fa-0778-4d55-958f-4d458c37e95f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dacb6600-6945-412a-ba31-956ea8823cf6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a929cef-70d1-4a03-9d8b-85ffbe878003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6117f6ff-631b-4c24-adf3-a0c100323710",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d126c543-4ba7-4e55-ad52-3d7ef657450d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bdb06aea-aac4-4864-aca3-f6dd11b78939"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "765b9b90-1f7a-465d-9966-872f76e5a193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f42cef5-73e5-429a-aa9a-456dc82d7c5f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7d0ec2bc-1104-4500-854c-61be09ae1808",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d0f867df-715f-4a5e-aaaa-c8d30e39a2f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d41c8d5a-0a2e-4782-8353-34b5daa5fae0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd48ac3b-ad26-441a-879f-a36c3f77a1c9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "55e21354-1939-464e-a073-82571249b537"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43392a52-9788-4f19-ba23-7e1975bdcd88",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b256bd1f-10b5-4d4d-b45f-b0ef606f295c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f0b77a7-60a9-4f93-a0c3-b8d8f1f902a1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "72c1f94b-4260-4471-baa6-08f0edc0f194",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "90216b1f-2be2-4d7e-a7df-627f93784a8e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "051d3b31-9d86-4cc0-a1b7-6affe46eaebf",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7b227711-de63-43e5-a8ab-3020e12a1c0a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8e7f527f-a94e-4b3b-b559-f3feb8805456"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5cac21ad-acf3-4345-86fb-633859688f29",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2408f18f-47a8-49a5-9292-ef51e5865919"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8a7ec02c-df9a-4d5a-856c-3faa3411f506",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7efe2d0-7988-4181-bdd1-aa952fe4fac3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "91506799-6625-4a64-b054-1dcfc56c8cfa"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22efac7a-bd45-4973-bfb6-abcc04e10fe7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c27a3f00-6be6-4363-875b-a7b049cb548b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "45ceceec-937d-4df6-9b6d-da56c9d5b4ce",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c42be63a-3937-4f6b-a682-a7c0e66e3698",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d21900ee-db7b-4428-9c55-94668e605298"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ea86959b-c848-4d29-9f40-02d6fa773902",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "776e99f4-390f-4c72-b1ec-ddaecc1b0e35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "97ae0674-b416-403b-ab8a-5b74bce54521",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99f48160-7cef-4e2c-8c95-515c9ed9c42d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "740d77d5-f4e8-453f-93a2-63eb25c41c22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e3662a7-31ac-4b53-bbfd-13810c63e721",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88c5d3d2-4883-418c-9c53-9518de870750"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4648b53f-bcaa-465a-a538-878cfc8a6e27",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16a57886-8441-485c-be56-0eefb365a69d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6c3100f6-b034-4980-aeee-e6bbbc5e3e26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b15e3d78-385c-4e77-8a17-650e2d16af15",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6df0c4b3-a872-4f7f-acaf-55039bb7211e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b2673e86-2d36-49fc-aea0-da56a5574704",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2b95759-0bbd-451e-9c12-98d23d567f2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "efe1c6e0-8435-4da1-a07f-75df421664e7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a191ef2d-0375-4b2d-aea9-34ac060da688",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e8bda3cf-5709-4bb8-b5a5-b42349fc707a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf9cb81d-543f-48a1-bfae-41374dd984dc",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "540ef166-957c-4ff4-af0e-eb41477212f4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "38ae49f0-4a10-4985-9c04-8de8857ced50"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f31a7e56-e450-4985-be4f-18b4771eae39",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b1079d6b-2bb8-4841-b7b1-7c51bd199a21"
                        }
                      }
                    ]
                  },
                  {
                    "id": "12d1c85d-b50d-4fea-a426-31dfbf6ea38f",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e198b2-edaf-420b-bfb1-794c94a85ec6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f378c77e-fcb4-4195-a2e0-88c1ad456d26"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5b64638f-4128-49e4-9a56-024b589c7f1c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bccec04f-a70d-444f-b9b3-b95d7e8b8cb9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8626afc0-5b84-4984-b268-2a396220d6b4",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f5886350-66a7-45b1-a1bc-d4fdf7e7d306",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a293f4bf-75df-4da4-9163-0e8288ad2109"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1841d237-c30c-4673-951e-f1f6ca27fcb7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05b8b7f9-ae87-454d-9c7c-a0fe74c6422f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d93366d0-86fa-46dc-9bd7-c35a21005860",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed14c556-4082-4579-8007-a8581d0774a3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "441f1a3f-56e5-449f-afd0-afb8ff842d7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4306c5ae-0f2e-43b7-9b9d-04696e8d2c18",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "83dd5f33-c8a4-4c5c-bccb-8b970ca6637a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e3ad9e1f-97a6-4202-8731-0c1737c6b0c1",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c696e2d-7351-4d0a-b338-f5b547de312e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2d22c25c-3589-4b45-b07f-a29db95fb788"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9df53fec-56c7-4627-a10e-6a0eb5c9c01e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33f3ed75-0592-4cd2-b949-5d32d32ac347"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c501e5d2-493b-4a26-9ebe-f708d52f18b2",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2d5f6dc1-5985-468a-8de8-0a80330dfc66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "be7c79cf-8ebe-4d20-af62-956fedc12659"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e223de2-0f65-4379-8f27-14dd8337f62e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b0648938-9a98-41b5-882f-2d03162a473e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "13442cd4-0aec-4577-90ed-357ce37a3f6f",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ac84ca2a-ba0b-40ec-b3ba-ab50a9dcec7d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f0ec1964-1cb3-4c63-9925-18f4e6306f67"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7c129c4-ac89-4c88-8b4d-a3452dea2a37",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c677abdb-55f2-43e8-be17-f47af901849d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00f17fa5-9cab-434b-933a-46e32210b210",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14910ae1-45cf-4334-bb3f-7593d764d615",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ab818812-1597-4f96-869c-3f20b8f2eaa6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7336cd9e-a149-4e71-b26c-dd7be48e9cc6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27c84206-bbc8-4833-b4f7-7d84318ee08d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b5f727f-0cce-4dfe-bf9e-a9a328dbf327",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "48675e3a-88d9-4d4f-856d-bf17a2dd8e87",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b4e4bba2-a87a-46d1-ad6b-a96f222fec9a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2c52b4c4-77bd-4bad-90e7-424a01c2d2b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "09a632fa-c491-4b64-8518-da3b84a23a8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc276196-3a3a-4e9a-939b-f0d70dc79df0",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "07151943-791a-4ea5-9743-969137767c52",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d751d560-4e57-43e7-872f-c1ccd1b3d53b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3725f2ac-6d7d-4ff6-8875-6a45f08d36f8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6052551c-a714-49f9-bda9-575de881a8fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "efc5cca3-a24f-4224-b42e-7045c9c7d22b",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d216fccd-e318-4e59-b977-c564b40c85cf",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "68cba226-9930-46fa-b567-53fd4d5fb2ac"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fecfd061-61db-4d36-8958-c1211ec6a85d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae624b71-4fc1-4613-9b9d-36dd79c8ecbc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c5b92f58-91c2-4e77-b3e5-5fd9c45bd99a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a047a8ba-d0f8-4d3b-a7b7-6d51e0616829",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1ef511fe-3f6b-4d3d-95f0-8e2dbf55414e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "25f4b952-4f7b-4c36-a016-7b2c5c762baf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a9a78dff-6bd7-4f97-883b-c00c38505ac8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "64965c0a-37f1-402b-9eef-14289c4f746c",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "47fde1f2-6d50-4f6b-9531-87199ed95abd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "25dec927-857f-4ee0-b0b8-cec7a33a54f7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "613fee4f-ae88-46a2-ab13-a1b69268d2de",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f6cc518f-8210-466f-8d9e-5acca4d64c67"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8596f90-e28a-4049-93c5-6f8fe608833f",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "468d8c64-3e9e-431f-a53f-2c1ea7353307",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3eca10fd-8909-4811-b567-e7b1cb229793"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "05f540fa-e326-49f6-801b-c19db7da02a5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b35ec5ba-e1e1-487b-bfa5-4a3971dde682"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb6d3208-5eb6-46bc-a753-8fbd89d29cb4",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0a2440b1-d738-4bce-862c-c618932e57ae",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "f12652c5-dd3a-4f33-b0d8-a1b046e2f2c1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8547562-3172-4a61-8515-c3fc22a235cb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f4413247-87f6-4115-9723-106fb4cc6c29"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2feacd4e-b004-4ab3-9f9c-0cb6291851ec",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21ce8b75-4b1e-481a-80ae-bd73f6e4bf1d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "49e809a2-d790-48fe-9145-b934ecdfcc87"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "38955a3f-4778-4b99-8aab-0060929d9d9b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "92495951-21f2-4015-bc66-3a5cff8099f7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "518cf4e7-d450-49c2-af61-12052c22fb3b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06bff560-c56f-49bf-a0db-6ed10ee5d62c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5b53fed8-3162-421f-9541-d03cfed94a12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a636a295-0673-490e-9b0c-d9a3e95867b3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4e1273ed-a5c6-4860-9cb9-6425f70108c9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fc2b9685-8273-47fd-a0bb-83b6ea37cfc9",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c2fc5643-806a-4123-9f9a-30eec14d8b2d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ec70a1e8-d750-4521-92de-3d75b7a79185"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3c56f6e7-0e48-46eb-975c-fe036e121c87",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7d026c76-9e0f-4943-bdea-70a615b874bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "762516d0-3f2e-4f7d-9a2f-740c3259fb76",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "74a35b92-cd19-49af-a6eb-473f8bc71ac2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "92ad1107-99d8-4b1e-a352-103db715e55d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9131d40d-d402-4f14-af8e-bc8404d77110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6bdc7709-091a-4de8-b911-d92586e4ac87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c4e2aad2-d246-4695-a51b-77a4acc5105a",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ecfa3716-b3d7-49d0-bf4e-1a5f57287427",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1a88eeb-0292-4b57-9f0d-1bd58c1b5471"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fa8f858b-37d8-4c6f-8164-5a90b4063f0b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5df2f694-9a7b-4011-b3b9-e68f3d4af094"
                        }
                      }
                    ]
                  },
                  {
                    "id": "53978d4a-71b5-41ce-9d9b-ffc40e9989ca",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27398d57-d06b-4d37-8071-6874622e431c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "1b478d17-38d6-47ee-b9c3-9d225a24791e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a8508b68-1fa8-4c43-a459-0a408ac5d33a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dd11602c-675f-45b1-a42c-61d755856f1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15f51f74-3fa9-4f24-8f41-62bd0e6a8367",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09ca2b1b-8403-4df0-a0a6-1f3ba9674b3a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "28f7d339-3ec1-4e45-9a52-d70b17cce3eb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d539b4d3-ae8c-4cbc-a789-7f1e1cfb2128",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "251108ab-f03a-4338-9f46-7309a1705e6d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "896f5736-74dd-47fc-aa29-abf9540bfb98",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8ebd6c7-204a-4679-9f32-35d5f48433da",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "854ad441-bc1d-4d7d-adec-e680e7c78602"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "89f3c506-2150-4abd-b5f5-db27100d28db",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "df1b020b-a285-4859-ab9c-17951f00e29b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "004f192d-1f60-4beb-b12d-1f19fa0aa801",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a1e930f3-603e-44af-bc2f-a670ab36e373",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3eebc5f8-4eb6-45b0-ad77-80fec5ad0ad3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bcb1bd1-39ca-41cb-8299-ccac42bf7c8a",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f63e16c6-c72e-4821-9a9f-c109187c3649"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83f33baa-867e-45f7-856b-9d73c74dfd5c",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8932859d-a751-4dd5-be29-3f95898619ab",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5028dac-c2d4-4bae-b1f1-7b50fe1f9073"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "67a75f53-2b07-48e9-9865-8083af3062a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a89a85d0-7710-4b23-9888-9dc5a6eda3f4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f2e5f4f9-7220-4d72-86cd-446be72ec7ae",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03611cf5-f658-4b54-809c-f9201a9c2224"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "2248f429-df16-45d1-88de-55dadae2eff8",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "81474740-4793-4a32-acb4-30dd68ba24ec"
                    }
                  }
                ]
              },
              {
                "id": "2fa7c5eb-b8d2-4980-aeb6-f2e6b9e67fd1",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "d9e88775-e3e4-45e2-b3dc-a1e0ddc8bb77",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb244a23-47fb-4e25-b53c-1b21e8204945",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "7e79d016-91ca-4d7b-91d2-2c38622db6b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5720e792-80e0-435a-a9ce-455d6e98cbef",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "0e6fa018-21a4-43eb-bcc4-eea1fc890ae6"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d6fff71c-addf-4c2d-831b-7c23b1ce457a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6ab8d195-933f-4317-a918-3135b747b8e9"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "eda200d7-da9d-4969-a7cf-fe7229f2cc83",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b5b33bc-a4a6-4da1-9ffc-a8b8a3c8af1e"
                    }
                  }
                ]
              },
              {
                "id": "622224dd-f101-40cf-ba75-8c53dd4e6632",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "1549dff0-768e-4845-bcb5-1eafaf14d8ed",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f7a4b269-aff9-4c76-be80-854b886005b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "7fc58117-5043-47a9-a604-fbf439e54760"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02dbde82-abb2-441a-859f-3024eca90193",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2eb66dc1-dc9a-4bc0-b4dc-ae2aaa3be061"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "7257b58f-99f4-4c01-a880-b7c9d42b7be1",
            "name": "Positive Testing",
            "item": [
              {
                "id": "f6b052eb-3357-42f5-8ae1-220fcf55ea2b",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "67aa0063-c2bc-480a-b003-9264a33c1d3c",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "6ced3e26-265e-43df-8626-2d8e74403209"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f7a83411-a639-46a4-bfff-ade5962a8a82",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "518d4ca0-c05e-47e3-a27f-01d817fad216"
                    }
                  }
                ]
              },
              {
                "id": "28d6d5c0-06ac-4475-9516-20c644017450",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "0dcc773f-bbaa-4d4e-ad78-ea90d094d9c7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "f3d23b67-a9a5-4ad6-847c-ef47be9f1b68"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "48d6e96f-0355-4be7-99a3-8d3b50048f9d",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f0633db-fbaa-4bf4-9d25-55c9ead466c9"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ccf1de8c-ec2b-4667-8e7d-784d6f8411fc",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "52191f22-9603-4e1b-929b-df8fa9975695"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "6409696a-c9fb-482b-b1b6-8bb350403540",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "ca811b92-a672-4102-946a-42dc1deb12aa"
            }
          }
        ]
      },
      {
        "id": "772a0c54-3e37-46da-928c-f3055ef83d0c",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "a5d7f9a7-9ca8-46bf-839f-05c3ad93dd89",
            "name": "Negative Testing",
            "item": [
              {
                "id": "044d9bf9-846b-4d07-80e7-9926f2a26b61",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "738f47dc-369e-44f5-b871-3dc4fa2a3e59",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c22d118f-ea70-4a0c-bd55-fbee37e18579",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "d1a73362-f3bf-4828-823f-eebabf1100b7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "85b9e020-10e8-4faf-89e7-7ba15f142f8f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "79a1d884-b89c-4d50-a878-009fae3e5f78"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f4b2d296-53a4-45f6-aa97-c05b314dcefd",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "63ea5a29-e3e9-4120-90a9-646a4f9f90a3"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "94555ad1-ad25-4675-bb62-00d109e85e78",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "7540c0d9-c575-405a-8051-b29f865e0ecd"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "2348007c-b3b9-43e7-a941-69e72c50804f",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "2b8cd7cb-18ef-4ab8-b2ba-5cf26be4751a"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "250a35b6-0f3b-46dd-8f9b-0ef71249502c",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "874cae30-7ef2-4cd4-9268-774479cf6344"
            }
          }
        ]
      },
      {
        "id": "0a2dce29-0076-4bc5-aa7a-744fab88814e",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "fdeabe55-c2e6-43f2-82b2-24721b8d0e28",
            "name": "Negative Testing",
            "item": [
              {
                "id": "a75ef66c-84bf-42c4-b288-4070e2071d9c",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "a32d43bf-9fc3-4cb7-a2fb-9cf17d0ef6a1",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6d63b423-e462-4b72-8aa3-6b5e0a38962a",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "95d4d701-fceb-4fb7-81af-74ca8ed638a8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a4ca851e-0832-4c0b-bdcc-8df0f0b21d33",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "8e60a347-b969-4810-9921-5c4e67d05a71"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "8b470d8f-e518-434e-918e-78be7e8a1b0a",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "76248ee2-c441-48f0-94df-c0ee92d0f230"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "5012e410-548a-4431-9b37-7048b60aba69",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "a3d14a73-8c30-4b9f-9c3f-017a354e7545"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "72680d2e-b867-4fe3-a024-8435e3b2a9f8",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "69a600cc-57f1-4069-8cd1-14a2055d1752"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "a71f818f-43e0-4bab-aa94-ee295dac38d6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "37952cc4-3764-4676-b691-0c63830ce505"
            }
          }
        ]
      },
      {
        "id": "a8fc627d-1dbd-49c4-8c68-cab1d5c921d5",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "d03ed8cd-e689-4f91-916c-0777e14cc9f4",
            "name": "Negative Testing",
            "item": [
              {
                "id": "5c2fbd29-51d7-47a1-8c80-0ef203236a26",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "7d634da7-23a0-4cd6-b717-3d1b9a7f6084",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60a02b5b-82a8-48f4-8170-e72dc5df19e4",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "73936c67-b8ec-4810-b198-78f8200f3f7a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "afc83f44-5bdc-41cb-91dc-6d860b9f2e84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "aa078454-c392-4caf-825c-2dea32ba4100"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "01758fb9-9a62-4060-ac1a-ce3324836bfa",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "6254dfd1-cd0d-444a-a905-d87c5ee19999"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "24fa4da5-dae7-4777-8309-fbbe602448e2",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "3b47dca5-cf5f-438e-bdfe-9cbfb29bcc81"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "5921fd95-6584-40d3-9400-7b6b6a147d9e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "6ef45b04-c170-40de-a783-7a48d0aa7e39"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "4ab5a881-7ec0-43b8-95b0-b64c12a9f29f",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "af041108-2adb-4824-9bf2-f272e7a876ad"
            }
          }
        ]
      },
      {
        "id": "7039ca1d-5609-40d8-8512-1e169f1c363f",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "f0b71658-31f9-4549-a94a-e4fe0b6f3a6a",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "42932d15-2a42-4d96-a55d-a7b2b6937e30",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "9854286e-cdf6-4fc9-a0a7-45869d85ecbc",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "e12b8778-57cb-47fc-9e19-094e718adda2",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "338d66d3-9b1c-41b2-a786-d385619aacd7",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 2083,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 284,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 282,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 571,
        "pending": 0,
        "failed": 87
      },
      "testScripts": {
        "total": 1046,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 1037,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 179.75352112676055,
      "responseMin": 7,
      "responseMax": 1951,
      "responseSd": 273.3105257276368,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1691109626768,
      "completed": 1691109693422
    },
    "executions": [
      {
        "id": "da114064-d0ab-4b48-b83b-887299289f17",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 282,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "381c8437-c0a3-47c9-8cc9-58a5b7ad584a",
          "httpRequestId": "537a59ed-fdb7-4811-92f4-33055c360aa4"
        },
        "item": {
          "id": "da114064-d0ab-4b48-b83b-887299289f17",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "19e86e8b-330e-43b1-8d88-fed03c4a22a9",
          "status": "OK",
          "code": 200,
          "responseTime": 81,
          "responseSize": 0
        }
      },
      {
        "id": "9e5a9777-e1fb-440a-8ffc-e5f6d746d800",
        "cursor": {
          "ref": "16991de1-3642-4fd1-a130-88565d1412aa",
          "length": 282,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "e710e96f-5abd-427c-a583-7b869d85d0f3"
        },
        "item": {
          "id": "9e5a9777-e1fb-440a-8ffc-e5f6d746d800",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "b1c84218-54e8-42c2-93de-2a8164e58f2d",
          "status": "OK",
          "code": 200,
          "responseTime": 7,
          "responseSize": 0
        }
      },
      {
        "id": "51352694-445b-4c0c-abe4-63f7c94cfdc9",
        "cursor": {
          "ref": "2d4a8afa-68dc-44ef-9703-51e7f0bfee33",
          "length": 282,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "9d670e1c-6d13-4da9-b8a4-93a1dbb512c2"
        },
        "item": {
          "id": "51352694-445b-4c0c-abe4-63f7c94cfdc9",
          "name": "did_json"
        },
        "response": {
          "id": "80194b5e-1453-4cd1-a83d-bcbbff8176b8",
          "status": "OK",
          "code": 200,
          "responseTime": 261,
          "responseSize": 1102
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078f4fe0-6f79-4d7f-b2b4-81c7c4fdd931",
        "cursor": {
          "ref": "ad7a8ef4-7c2b-49f4-919e-ec80aeb83b3e",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c291bdff-133a-470a-951d-eef9b4f979e5"
        },
        "item": {
          "id": "078f4fe0-6f79-4d7f-b2b4-81c7c4fdd931",
          "name": "did:invalid"
        },
        "response": {
          "id": "5e5d8bfd-3b2e-4045-bd4a-b8f39a7622d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "078f4fe0-6f79-4d7f-b2b4-81c7c4fdd931",
        "cursor": {
          "ref": "ad7a8ef4-7c2b-49f4-919e-ec80aeb83b3e",
          "length": 282,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "c291bdff-133a-470a-951d-eef9b4f979e5"
        },
        "item": {
          "id": "078f4fe0-6f79-4d7f-b2b4-81c7c4fdd931",
          "name": "did:invalid"
        },
        "response": {
          "id": "5e5d8bfd-3b2e-4045-bd4a-b8f39a7622d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 177,
          "responseSize": 81
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5788c9f-e035-40de-8cd4-de79c7f3630a",
        "cursor": {
          "ref": "500a70ac-92fc-4029-ab5c-cd750168bb0b",
          "length": 282,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "53f3989d-490a-446c-92f0-7be842f54e69"
        },
        "item": {
          "id": "f5788c9f-e035-40de-8cd4-de79c7f3630a",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "70d8a953-acb3-4467-8a6d-1e30524fd22b",
          "status": "Not Found",
          "code": 404,
          "responseTime": 160,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8ad507dd-e566-43b1-a290-8f3a6204e1ef",
        "cursor": {
          "ref": "140a6847-ca63-4fa7-afb1-04b8d1525e59",
          "length": 282,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "8ceb5514-c11c-4554-9565-7acdc414d199"
        },
        "item": {
          "id": "8ad507dd-e566-43b1-a290-8f3a6204e1ef",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "cb9064f4-22de-49ad-be60-5f7f3a69e9e2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 105,
          "responseSize": 86
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "623ef4c9-e693-46a7-926f-77678a022906",
        "cursor": {
          "ref": "d911e879-f774-4a92-a78d-4c8f98bfffb0",
          "length": 282,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "460c0241-713d-41a1-b192-7b490b8b71a8"
        },
        "item": {
          "id": "623ef4c9-e693-46a7-926f-77678a022906",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "b8707969-1e93-4381-b19d-809b8d818959",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 79,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eeb9746f-7583-43ec-9772-3edf147a8d07",
        "cursor": {
          "ref": "5294c7aa-bd89-419c-aced-027a7ba0cce8",
          "length": 282,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "1344c94d-37a7-4835-95b9-8be87856446f"
        },
        "item": {
          "id": "eeb9746f-7583-43ec-9772-3edf147a8d07",
          "name": "identifiers"
        },
        "response": {
          "id": "a04138df-8ebd-485a-a692-0d63295b9778",
          "status": "OK",
          "code": 200,
          "responseTime": 139,
          "responseSize": 1118
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86e70135-0db1-4f9c-990d-cc17a3ad41e0",
        "cursor": {
          "ref": "2cf9868f-55b6-4a62-a0a9-14eef5f1502b",
          "length": 282,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "ee0be493-bf40-487b-b99d-018a949fa7a5"
        },
        "item": {
          "id": "86e70135-0db1-4f9c-990d-cc17a3ad41e0",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "fd50c62b-6478-4474-ae79-258a7d8904d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 206,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f1420ca3-12c4-490d-b1c6-bbc716cfe7c0",
        "cursor": {
          "ref": "2ccd9fc4-802d-4dd0-b652-6705659accc6",
          "length": 282,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "0e866ed7-ae8f-4e91-be07-f445cdf88fc1"
        },
        "item": {
          "id": "f1420ca3-12c4-490d-b1c6-bbc716cfe7c0",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "e95db78a-5876-4e55-8030-0c47edce9a32",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "922e2e5a-09d5-421b-a0bf-652eec37894e",
        "cursor": {
          "ref": "60756cf7-a7a5-48e4-8477-4847a4a3f94c",
          "length": 282,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "e17903e2-efa6-4a43-a7df-a8862e0c63cd"
        },
        "item": {
          "id": "922e2e5a-09d5-421b-a0bf-652eec37894e",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "9b961fb5-f03a-42fc-a50b-e56312328e00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c1044c0-0e33-43be-ac26-e68c6ff900a5",
        "cursor": {
          "ref": "965869b3-7819-4e2d-a9ad-5573f1fca7f4",
          "length": 282,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "e35bf011-a262-4d18-85ee-6f161a89533f"
        },
        "item": {
          "id": "9c1044c0-0e33-43be-ac26-e68c6ff900a5",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "150950ce-8e46-43c8-a112-8c6b750a7d09",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "426760f0-9c39-456d-acc8-36524295ba22",
        "cursor": {
          "ref": "e612b0c2-0edc-4de5-9fce-2ca148a2241b",
          "length": 282,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "72795fc7-b17f-418a-b7ab-a69e79424284"
        },
        "item": {
          "id": "426760f0-9c39-456d-acc8-36524295ba22",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "37393cbd-641d-440a-84d6-3d5a26118790",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b085bd5-1b11-46b3-86c7-7e9014ce835f",
        "cursor": {
          "ref": "ecb6bebc-74fc-4e46-aac9-d780e606888c",
          "length": 282,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "89618f96-0bdb-43ad-97e0-13bc8e880807"
        },
        "item": {
          "id": "3b085bd5-1b11-46b3-86c7-7e9014ce835f",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "7156f5b9-c090-4d54-9158-3fc471bb4a9a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 212
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e2034426-dad5-4da7-a55b-dcda829f017d",
        "cursor": {
          "ref": "36cab8f1-7474-4abc-bad3-958770a57da7",
          "length": 282,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "728c8821-fed8-4279-8faa-cf6d24ee3e62"
        },
        "item": {
          "id": "e2034426-dad5-4da7-a55b-dcda829f017d",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "932e7042-d49c-4ad4-aa0b-d267aa2bebbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f800a10-7a90-4d4c-8ca8-7e6c095894bc",
        "cursor": {
          "ref": "d444dd6d-2ffa-4c73-ae43-bb11a8a30458",
          "length": 282,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "2eb3db14-e8ef-42ad-b08d-8957d2ee5ccd"
        },
        "item": {
          "id": "2f800a10-7a90-4d4c-8ca8-7e6c095894bc",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "85f05eef-7d29-4a65-9549-98fe38296c23",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d26b761-9192-4303-b866-3374d95c0abd",
        "cursor": {
          "ref": "a9b530fb-0104-4883-976b-90c4c4bf5c90",
          "length": 282,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "25625183-d42b-4035-8523-a8c22cf7c8ef"
        },
        "item": {
          "id": "8d26b761-9192-4303-b866-3374d95c0abd",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "b5bafd18-d12e-4671-b9b8-6bd4382d1da4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f7e0b292-4ef1-4597-8604-d6cc9775c693",
        "cursor": {
          "ref": "c2ab2d0a-384e-4222-86ba-4127ca85122e",
          "length": 282,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "4c444619-a5a1-4727-906c-5caf5fed3b98"
        },
        "item": {
          "id": "f7e0b292-4ef1-4597-8604-d6cc9775c693",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "84fe3c58-f5e7-4b97-8061-f9eb3c77474b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed992298-9909-43b4-bf92-552d36275c2f",
        "cursor": {
          "ref": "ee7faf34-a616-4f18-ad2f-90933b66faf7",
          "length": 282,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "283a515d-e507-4165-9166-10eb27f1f8af"
        },
        "item": {
          "id": "ed992298-9909-43b4-bf92-552d36275c2f",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "74458055-a30b-489c-88c6-2571cc69fc67",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bdec3487-3130-4468-abb5-e49d51b0990a",
        "cursor": {
          "ref": "aaf00df9-a27c-4f87-add6-1c59ae897cca",
          "length": 282,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "7e80c10c-46a6-4c96-a164-e1147db48638"
        },
        "item": {
          "id": "bdec3487-3130-4468-abb5-e49d51b0990a",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "6d27ddee-3903-45e9-b81a-3a26e722cbe4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 114
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6fa2eb26-ace8-4600-b21c-e0d5a9fee016",
        "cursor": {
          "ref": "9a7d9d98-9e33-4e20-9340-49aad7ff45b1",
          "length": 282,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "3f336553-0ebd-424c-af96-5d14289b7dd5"
        },
        "item": {
          "id": "6fa2eb26-ace8-4600-b21c-e0d5a9fee016",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "709259a0-305b-44b5-aa9f-53e8b3617d95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d791bc54-b054-4e25-bc1c-430bb5a3841a",
        "cursor": {
          "ref": "72945b5d-89ef-42e4-bc26-934e1bd7ff07",
          "length": 282,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "2e320f8a-1e05-4954-9f6a-e8c270435759"
        },
        "item": {
          "id": "d791bc54-b054-4e25-bc1c-430bb5a3841a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "5f151e19-5788-430b-a5e4-8b65ee6cb550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9250e447-eb3f-4bd8-95b4-c28a57e8ac97",
        "cursor": {
          "ref": "e3add7bc-b8a0-4c2b-b6c5-aca9e5ed5eaf",
          "length": 282,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "59d633ee-ed42-4cae-8557-65f7599ebfb6"
        },
        "item": {
          "id": "9250e447-eb3f-4bd8-95b4-c28a57e8ac97",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "bbae62ea-08da-4f4d-8d8d-ef9ddcb3c1af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0d36e50e-5309-4ce1-9a2f-0a6f37196cea",
        "cursor": {
          "ref": "4733f9c1-dd57-4c7d-91ca-48ae25f71065",
          "length": 282,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "3e888c93-c5e6-421e-8ab9-4958de4e2831"
        },
        "item": {
          "id": "0d36e50e-5309-4ce1-9a2f-0a6f37196cea",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "de74d681-769a-47ab-8ba6-c9233899a23e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3e9c34fe-b59c-42b9-afe4-4c5795482616",
        "cursor": {
          "ref": "768c1b9b-ca8d-4274-be03-2ae18989b6dd",
          "length": 282,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "4f70c302-bdca-44fb-afa8-d4b2dc60c68f"
        },
        "item": {
          "id": "3e9c34fe-b59c-42b9-afe4-4c5795482616",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "4349aa97-c731-481c-9685-403c919b9dfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 89
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cc68eb1b-f2e5-4340-8aa6-ff8b7a729f21",
        "cursor": {
          "ref": "ad2efdf8-8883-4be2-bc66-9f75e4f9f0e7",
          "length": 282,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "fb9129ab-aca0-40c7-97de-403a019e39fd"
        },
        "item": {
          "id": "cc68eb1b-f2e5-4340-8aa6-ff8b7a729f21",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "2aabdbf1-ee1c-4d23-8af5-350c4680b02c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2fadd5b1-42ec-48f6-b649-1f1eecac6c5f",
        "cursor": {
          "ref": "f7e25ce0-577f-4949-a148-9ef3e408dc84",
          "length": 282,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "97e79962-aeda-47d9-bed6-b23212f5f407"
        },
        "item": {
          "id": "2fadd5b1-42ec-48f6-b649-1f1eecac6c5f",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "a92d48c0-4979-4dae-8680-7a03df7254a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff37612e-955d-485d-8732-cfb441eed6e8",
        "cursor": {
          "ref": "1abac5f5-382c-4987-b92a-cebf74285419",
          "length": 282,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "4e98139d-db95-44a4-9ae8-9c0565e8765f"
        },
        "item": {
          "id": "ff37612e-955d-485d-8732-cfb441eed6e8",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "79851982-58a7-4dbd-9efd-0563b0b37dfd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e99fa53-e98f-4a36-8136-b8d28611eb43",
        "cursor": {
          "ref": "ede24165-4c3e-497b-bc49-e8eb54a7fe46",
          "length": 282,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "e2e960c6-bc63-4748-b251-930626c6468a"
        },
        "item": {
          "id": "4e99fa53-e98f-4a36-8136-b8d28611eb43",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "05621ae1-1743-48a8-9998-386487482866",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a1ad3aa4-cc8e-4d6c-bd2b-aa7316466abd",
        "cursor": {
          "ref": "d011c83d-e3c5-43b3-935a-91f4b3f87fea",
          "length": 282,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "64deeb2a-3274-4ac3-bb51-5a1ebadf2394"
        },
        "item": {
          "id": "a1ad3aa4-cc8e-4d6c-bd2b-aa7316466abd",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "60d12203-7339-4679-b897-1ba3db21864d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "58bc5261-9251-42eb-8867-f4813bf1d54e",
        "cursor": {
          "ref": "ee824bce-8452-480b-96d6-ab241397d316",
          "length": 282,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4942b396-caa2-4c64-af2b-8498cab646fc"
        },
        "item": {
          "id": "58bc5261-9251-42eb-8867-f4813bf1d54e",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "4a18dbd4-6f73-4a2a-90af-68b489acb6d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bffe4831-eebf-45b1-80ee-354268e35a4d",
        "cursor": {
          "ref": "c315c77a-ff17-451a-9fa3-310312176a62",
          "length": 282,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "f9eb848a-26aa-4653-9784-c5c0aca27d8a"
        },
        "item": {
          "id": "bffe4831-eebf-45b1-80ee-354268e35a4d",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "02e257d5-1fc8-4598-945e-9c288591d888",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8808bd42-e1b5-443f-aeec-707a36b183ed",
        "cursor": {
          "ref": "dbc48dde-7a64-4bbf-941d-e5599303433c",
          "length": 282,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "80d478d2-6d35-4d64-a0e0-f46f561110e7"
        },
        "item": {
          "id": "8808bd42-e1b5-443f-aeec-707a36b183ed",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "6ab32e78-502b-476a-9418-b8ef8cd42107",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d241b63d-ea08-4eb9-9304-78fc8969618b",
        "cursor": {
          "ref": "c2f0e795-fe58-4c83-9fb4-256507fa85cb",
          "length": 282,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "b64255d0-aaf3-4993-ae89-aa573107da71"
        },
        "item": {
          "id": "d241b63d-ea08-4eb9-9304-78fc8969618b",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "e1372ecd-6427-428a-911c-9771d60bf983",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7080fd32-fac3-428d-bcdf-b7d3e54f53a7",
        "cursor": {
          "ref": "5b60b300-fc12-4026-b774-9ae9dcb2703a",
          "length": 282,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "07ac1453-275b-4220-8948-6effa6f76f11"
        },
        "item": {
          "id": "7080fd32-fac3-428d-bcdf-b7d3e54f53a7",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "7e15f123-d695-4606-bb2d-96ee317150e6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0f055db1-2d16-4336-a529-0b566de912cc",
        "cursor": {
          "ref": "ab417b9b-fe70-4fb4-8a54-2c99513a7229",
          "length": 282,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "c6d227db-3677-4314-936c-73c2630f0330"
        },
        "item": {
          "id": "0f055db1-2d16-4336-a529-0b566de912cc",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "516fcba4-04f5-4e96-bf12-2abd6b6ecef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b814bfa0-3d03-4878-9491-3329beba169b",
        "cursor": {
          "ref": "5776f870-5185-44dd-9c05-943c674b2641",
          "length": 282,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "e59d773b-813a-4f61-b2f2-8e89a92f1c3f"
        },
        "item": {
          "id": "b814bfa0-3d03-4878-9491-3329beba169b",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "ae6ca634-6879-4a51-adfc-3be3882d57ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ab1947ec-273a-456b-8a5e-3c515189de42",
        "cursor": {
          "ref": "6f1ede6b-998a-44a9-b3a0-14134166c0ea",
          "length": 282,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "75a21d0a-21e9-4b14-8530-095a345c5b81"
        },
        "item": {
          "id": "ab1947ec-273a-456b-8a5e-3c515189de42",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "665a84e9-35b2-4f43-b73a-cab7d622b86b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 113,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4f9b91ba-649e-4086-bf2d-3cada99a8251",
        "cursor": {
          "ref": "c50a9d60-2e86-485f-b069-287b660a34fa",
          "length": 282,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "1bf32623-57e7-48d4-ac96-60084ee2f15f"
        },
        "item": {
          "id": "4f9b91ba-649e-4086-bf2d-3cada99a8251",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "495e95c6-8f95-43f9-9267-46c819185fbb",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 150,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "2cdf3895-2abe-4d82-b48e-5234b63f8485",
        "cursor": {
          "ref": "7416ead3-043b-4c33-b384-6113d954c5f4",
          "length": 282,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "16f98de8-b115-4a14-a9d5-d73a999ce319"
        },
        "item": {
          "id": "2cdf3895-2abe-4d82-b48e-5234b63f8485",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "54a14e8d-c87e-43fa-bef0-71778237a6a0",
          "status": "Created",
          "code": 201,
          "responseTime": 1951,
          "responseSize": 763
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "1231c526-5def-40be-9401-1177d86c545f",
        "cursor": {
          "ref": "069d9d4a-324f-46bd-9660-404a6af3baca",
          "length": 282,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "a1176b37-073d-46b8-adbb-0b7742e71c5f"
        },
        "item": {
          "id": "1231c526-5def-40be-9401-1177d86c545f",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "4af8171b-178e-4ba9-b4ab-d7e02f92ca7c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 94,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "838ac75c-ba43-40b5-bfeb-4203fb083d0e",
        "cursor": {
          "ref": "86bb1c5b-78e8-4c4a-9b27-57a5098af7a5",
          "length": 282,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "d1a5e110-13c8-41da-b849-6f5d115722fa"
        },
        "item": {
          "id": "838ac75c-ba43-40b5-bfeb-4203fb083d0e",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "1ec765d0-485a-4b10-a69e-bbc740277667",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 96
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67fe281a-2b3d-4a53-b307-5b961590e91c",
        "cursor": {
          "ref": "3cf3d798-ca1d-4a0c-b247-cc94dcd60285",
          "length": 282,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "5c0231ca-2223-4bd1-b98c-b067da5d447d"
        },
        "item": {
          "id": "67fe281a-2b3d-4a53-b307-5b961590e91c",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "46ceea6b-da27-48e0-9bec-9bf206c5cc31",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 102,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "7e9a2a00-f748-46f3-80d6-dc37208fe2a8",
        "cursor": {
          "ref": "2de99ac3-3918-4fe4-a692-4a0baa4a2bd8",
          "length": 282,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "9dda15c1-fdf2-4c68-89c4-8c6970c7e6a5"
        },
        "item": {
          "id": "7e9a2a00-f748-46f3-80d6-dc37208fe2a8",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "7313b631-a58c-494c-bed1-0f967c3ef6ea",
          "status": "Created",
          "code": 201,
          "responseTime": 1223,
          "responseSize": 752
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "4079c9b6-ec96-4076-8d08-4a2ee8760168",
        "cursor": {
          "ref": "2d388959-298b-42d8-9fc8-93f02013ef77",
          "length": 282,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "83a0566d-7b3c-42f3-968d-a416a282e115"
        },
        "item": {
          "id": "4079c9b6-ec96-4076-8d08-4a2ee8760168",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "cb047bb4-6b48-4e5d-8c28-a67c18f61950",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 98,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "e640512d-d7d9-4dac-87ab-6d95de10b6b1",
        "cursor": {
          "ref": "0736bc82-f52a-4d90-baf7-b8a68f338a8d",
          "length": 282,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "01d3b8b4-ec32-4e72-aef6-eee17e326a70"
        },
        "item": {
          "id": "e640512d-d7d9-4dac-87ab-6d95de10b6b1",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "e2768c30-4a0e-45f2-a555-63a2b54d0403",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 851,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "759755e3-772f-44cb-9a40-a35f471fafaf",
        "cursor": {
          "ref": "cdd531e6-2287-4e06-9b4c-ff1ec2f6a54e",
          "length": 282,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "b40a0ce5-d38c-4193-8f6c-405c98ebda56"
        },
        "item": {
          "id": "759755e3-772f-44cb-9a40-a35f471fafaf",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "bfc15ac8-edf1-4073-bc41-ccaf357e92cc",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 93,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "307ec2a5-1a2a-474e-be6d-5a1b1cd64ea3",
        "cursor": {
          "ref": "b49a7097-57a0-4858-a187-45da34bdb22d",
          "length": 282,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "c2e76642-e7d3-4aa1-a801-a9e250023014"
        },
        "item": {
          "id": "307ec2a5-1a2a-474e-be6d-5a1b1cd64ea3",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "6e154a51-19db-49f2-a572-f622c8495558",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 103,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "adc5dedf-02a7-4a7c-bcb9-86a028361f6f",
        "cursor": {
          "ref": "7c54338d-afab-490f-8592-dc2d29a5e32c",
          "length": 282,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "73ce24ee-4894-4154-9e2c-3db06926b9e9"
        },
        "item": {
          "id": "adc5dedf-02a7-4a7c-bcb9-86a028361f6f",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "1cfb5d2e-ddf8-4e13-a8c9-92a9af774f57",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "e5f2f557-9a89-40d0-960c-52282341f619",
        "cursor": {
          "ref": "685d8674-55b5-4dc1-9024-45939a98aa33",
          "length": 282,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "207cc889-58cc-4971-b45e-6f9fd3fb6f72"
        },
        "item": {
          "id": "e5f2f557-9a89-40d0-960c-52282341f619",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "826d38bf-ce32-42e6-b1b8-80c6fb901321",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 97,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "03596bb0-00c4-45c1-9929-ba548e5638ac",
        "cursor": {
          "ref": "cf79b6aa-793a-410e-b597-71dbb0700863",
          "length": 282,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "81bb78c8-a661-4980-87a6-490a045793c6"
        },
        "item": {
          "id": "03596bb0-00c4-45c1-9929-ba548e5638ac",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "c59507e3-199c-4fac-b167-2f3e9a9b44c7",
          "status": "Created",
          "code": 201,
          "responseTime": 1082,
          "responseSize": 759
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "402b5c06-811b-40a7-ae5d-574ebeb5e4d8",
        "cursor": {
          "ref": "a055440a-8d86-4416-afc9-e7317f37ee8e",
          "length": 282,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "5b0c6c7f-1129-4362-858e-5daebd5379f1"
        },
        "item": {
          "id": "402b5c06-811b-40a7-ae5d-574ebeb5e4d8",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "3fc6b3e3-badb-432d-a17c-5274bd9bd026",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "210429ab-0770-4e8a-a7d9-19bfce6fbac3",
        "cursor": {
          "ref": "19251608-2b3a-4875-90f3-3700b7d40424",
          "length": 282,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "ec94fe38-4af8-4a8b-bd50-351a74a1fbd6"
        },
        "item": {
          "id": "210429ab-0770-4e8a-a7d9-19bfce6fbac3",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "546ac5dd-1964-49f1-9aa9-15c7037c6fe3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aaee1797-2916-4d4b-b48a-80a3e01c94fa",
        "cursor": {
          "ref": "4f5b5486-4213-4adf-bd11-5447d6620861",
          "length": 282,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "e0f9806b-8224-424b-b578-597537a9c95f"
        },
        "item": {
          "id": "aaee1797-2916-4d4b-b48a-80a3e01c94fa",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "73c7abe0-3bec-4929-b63c-616982ec7bdc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b798f2e4-a7fa-4dbe-a53b-6a6765eb4846",
        "cursor": {
          "ref": "345e8ea5-c15f-4d5d-9b34-ab44860c1e69",
          "length": 282,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "236609fb-a244-48b7-9258-0defdaf71ea5"
        },
        "item": {
          "id": "b798f2e4-a7fa-4dbe-a53b-6a6765eb4846",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "685bb493-704b-4c65-a3c1-f90b6b2ee0a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a8089d14-8d10-496c-a1ff-e97209f11567",
        "cursor": {
          "ref": "824750fe-7a1f-4f91-a242-825350d3065b",
          "length": 282,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "3136abd9-47bb-486e-9317-17106a8d7299"
        },
        "item": {
          "id": "a8089d14-8d10-496c-a1ff-e97209f11567",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "93d775a7-3198-43c2-9976-e3f3e43841a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b4d17c08-8717-423b-bf56-5f6746952b2f",
        "cursor": {
          "ref": "9a6f1058-89f7-482c-acc9-c76f6ae3f364",
          "length": 282,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "ede1351e-1485-42af-8db4-482688982ea2"
        },
        "item": {
          "id": "b4d17c08-8717-423b-bf56-5f6746952b2f",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "bd9bb1ec-e2c3-4341-a32d-b8ca47519b59",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bed75eb9-b6a7-443e-a2e3-4dd2d0c09846",
        "cursor": {
          "ref": "c7f65fbf-a3d7-4234-9574-ea4ab1c79881",
          "length": 282,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "0de7b592-211e-471a-adaa-182ad7bbbfb3"
        },
        "item": {
          "id": "bed75eb9-b6a7-443e-a2e3-4dd2d0c09846",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "b3981d55-666b-41cd-a70b-6350b83cb426",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 119
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d5c5aaec-3aa2-4c2b-851d-efd4022ff52a",
        "cursor": {
          "ref": "5ff251e1-c559-4f77-8a60-0e5612e54203",
          "length": 282,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "8d8d2d0d-2e2e-4bba-ac83-a0dcbe87d0b8"
        },
        "item": {
          "id": "d5c5aaec-3aa2-4c2b-851d-efd4022ff52a",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "d76e85e1-88dd-4791-88c9-73881ff94742",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 158
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b78f66eb-0015-4643-b73f-90f7f300b016",
        "cursor": {
          "ref": "6a1f636f-6c33-4303-963f-eb2005dbec64",
          "length": 282,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "43f4f330-32fb-40aa-b3ca-5842b9721269"
        },
        "item": {
          "id": "b78f66eb-0015-4643-b73f-90f7f300b016",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "7ac0adbd-cddf-4aed-86b7-142519c672cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9b50bba7-a1db-407c-8986-e3669834c11e",
        "cursor": {
          "ref": "52ef83fc-6869-4d1e-af61-e1f1b4f74dd5",
          "length": 282,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "c6a8cc16-7694-4fb5-bbc7-a20ef1f66038"
        },
        "item": {
          "id": "9b50bba7-a1db-407c-8986-e3669834c11e",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "058d637a-b9f4-441a-a598-45c699342f47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "af1dd541-7f84-406c-8877-52af15808774",
        "cursor": {
          "ref": "15bb7bde-b9aa-4f07-a589-f1f3a08b65aa",
          "length": 282,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "0eee2fdd-483f-438e-93ac-cc4b1edf615d"
        },
        "item": {
          "id": "af1dd541-7f84-406c-8877-52af15808774",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "bbdecde7-456d-4a80-9e75-70417410cc2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b412b930-1c26-42d2-9522-99ed4d59e11a",
        "cursor": {
          "ref": "75fda98a-45c2-45ee-97ec-6f4567c0d732",
          "length": 282,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "e622cd58-eece-4b95-b45e-bdff6b39bf9e"
        },
        "item": {
          "id": "b412b930-1c26-42d2-9522-99ed4d59e11a",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "5ed1da45-6d1f-41f1-a2a5-b1c8a38e61b7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 238
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6764d254-127c-4a3a-9fc4-04f931f55d6a",
        "cursor": {
          "ref": "60d0e346-49bd-4a9a-bd96-0d82b11e94d6",
          "length": 282,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "768c5a2a-9ee6-4115-92d6-2614816dd382"
        },
        "item": {
          "id": "6764d254-127c-4a3a-9fc4-04f931f55d6a",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "1636eb1f-b1d2-4142-8ddb-36ea32cdc0c5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 185
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1c0eb20b-52ae-421c-93f2-75e73fce73f5",
        "cursor": {
          "ref": "d0108dc4-d5a5-4c9a-9e5d-706fe8e4312d",
          "length": 282,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "0291425e-0010-47b0-b1a6-8f73741e0427"
        },
        "item": {
          "id": "1c0eb20b-52ae-421c-93f2-75e73fce73f5",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "23c4b183-81af-40d8-b03d-5b4cf1f45268",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 852,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "507a09e9-8d49-4b49-8935-f6d1c83f6801",
        "cursor": {
          "ref": "f689c442-3ec4-4b8c-bf1b-3e7d4ccbfcbe",
          "length": 282,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "e5e0e464-17aa-4419-9aad-6cc6a3440dab"
        },
        "item": {
          "id": "507a09e9-8d49-4b49-8935-f6d1c83f6801",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "401724dd-3bc9-4faa-bfcc-31d4a86562fd",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 827,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "f0dc12e7-c954-4eea-9a19-8dafa17b606b",
        "cursor": {
          "ref": "4ddcec8b-dd3d-4188-8aac-f5e0dd42639e",
          "length": 282,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "e9441ac7-a7d4-4afd-a19e-7ab309b66435"
        },
        "item": {
          "id": "f0dc12e7-c954-4eea-9a19-8dafa17b606b",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "d6062d5e-d77e-492b-91b7-b0b1bdd9a69b",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 96,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "45046943-c4b0-4a43-86ff-999edead6d01",
        "cursor": {
          "ref": "bd8a39ef-b1c8-4933-86b4-86f71d2ae338",
          "length": 282,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "f92f8192-640e-42bb-8bdd-0062f6594ea3"
        },
        "item": {
          "id": "45046943-c4b0-4a43-86ff-999edead6d01",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "ef6ae32a-04f3-4d8e-ac9d-2fc6da0248be",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 1274,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "8653d669-50b8-4c33-985e-2a9febcbaf79",
        "cursor": {
          "ref": "ff06b900-11b4-4e08-845e-1adca87a7046",
          "length": 282,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "a9f9bf33-0744-4a2d-bc4a-58b97cd414d1"
        },
        "item": {
          "id": "8653d669-50b8-4c33-985e-2a9febcbaf79",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "b34169de-5877-4b19-a494-b2bcfa3dcd72",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 100,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "913ba34a-6896-4ea8-a835-1aa0cf64a6c4",
        "cursor": {
          "ref": "0c53f0ea-e028-4171-83a2-4953d0e895d2",
          "length": 282,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "3072cc6e-5374-4636-ab12-b9e6dff05d49"
        },
        "item": {
          "id": "913ba34a-6896-4ea8-a835-1aa0cf64a6c4",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "3a66712c-fae2-4fd2-be00-9eb4e7415467",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 116
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deb1253d-0c25-4c03-8dea-9b54127929b2",
        "cursor": {
          "ref": "c914d616-298c-4538-b413-3f05d49e6cf3",
          "length": 282,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "7db0777f-6f58-470c-bdaa-ab0dadc9a52f"
        },
        "item": {
          "id": "deb1253d-0c25-4c03-8dea-9b54127929b2",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d542c8e9-6b77-45a9-abf2-28e11b05aa5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 84
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77e28241-3c32-4526-8a04-475ec5fa971a",
        "cursor": {
          "ref": "152d7b7a-a021-4e28-bfac-b9071c90b292",
          "length": 282,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "dc27b992-3c87-4604-afa8-ecc3bfce06e8"
        },
        "item": {
          "id": "77e28241-3c32-4526-8a04-475ec5fa971a",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "8f3e33ed-df09-4083-9e3c-50afc72d1c66",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "66e35092-5c2a-4eb9-b9cc-e3561f507676",
        "cursor": {
          "ref": "44395d2b-70f8-4dd5-a5c8-0fa76388c68a",
          "length": 282,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "7c28519d-c738-4400-90ca-3f4ad5c4e7ef"
        },
        "item": {
          "id": "66e35092-5c2a-4eb9-b9cc-e3561f507676",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "dbb030da-bfb8-4aec-aead-5bcd0e559a76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 157
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "84730113-0ad7-4946-8be3-8e317dc15195",
        "cursor": {
          "ref": "bf8bd83c-2b20-40f2-bc38-dfbcd06310f3",
          "length": 282,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "bccea98a-8f06-47c6-844e-32a144f78fe5"
        },
        "item": {
          "id": "84730113-0ad7-4946-8be3-8e317dc15195",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "41ef914f-9933-42b8-bb27-f5efd9d4e852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e61f1b72-9426-4664-a244-25dca04ef56b",
        "cursor": {
          "ref": "6b05234a-bcf0-4554-978f-47c6c7bf9f50",
          "length": 282,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "7ec678b2-61a1-4e64-8468-376e773cce11"
        },
        "item": {
          "id": "e61f1b72-9426-4664-a244-25dca04ef56b",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "b30e1547-8976-4dc5-b86f-a7fed839040e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4fe4c434-3404-4616-96f7-e6be98acf4eb",
        "cursor": {
          "ref": "e2c74b2a-d4a0-4674-826d-68ed62e8713b",
          "length": 282,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "10e2432a-31ad-46ee-91e4-445f56f63af8"
        },
        "item": {
          "id": "4fe4c434-3404-4616-96f7-e6be98acf4eb",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "f6535128-f370-4679-8414-0741a8877e93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2944709b-111c-47d7-9d0b-40e27ad14653",
        "cursor": {
          "ref": "83b2b7a0-5429-43a5-991f-08c691cd5681",
          "length": 282,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "d8b6128a-0473-4261-a2f0-9ecd325157cc"
        },
        "item": {
          "id": "2944709b-111c-47d7-9d0b-40e27ad14653",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "747bca7e-5c84-4ca8-b3f2-b4dea5c4ff33",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5d9c0ab2-2400-40ff-9da8-f37d63047c11",
        "cursor": {
          "ref": "54c8e5bf-cdd0-4f7b-92ae-b66a5f0536f5",
          "length": 282,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "7750e61b-8e3f-4f9f-90d4-d884b38b5d83"
        },
        "item": {
          "id": "5d9c0ab2-2400-40ff-9da8-f37d63047c11",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "8db6ede9-246b-4cd2-8cea-d57fafbb8f7f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4591641e-74ec-4129-b297-86e05fac191f",
        "cursor": {
          "ref": "b707d7a4-1938-47e2-a9db-2698f9aae48a",
          "length": 282,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "5faed34c-aee1-42f5-a106-9d807ab86f05"
        },
        "item": {
          "id": "4591641e-74ec-4129-b297-86e05fac191f",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "01a90feb-e7d2-4007-b363-3618b87ccfed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2e389898-acfa-40ed-8a1c-dc82536c5ed9",
        "cursor": {
          "ref": "fae1d00a-a79c-4512-9f56-63a20da69751",
          "length": 282,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "8e715162-883d-4aca-93e1-d5cb935a1663"
        },
        "item": {
          "id": "2e389898-acfa-40ed-8a1c-dc82536c5ed9",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "ade8f72b-6cb2-46cc-93a0-c75f21abc6b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 278
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64190dc1-21aa-49ff-872f-fadd4caca2ba",
        "cursor": {
          "ref": "7b135173-0f83-45ab-bfac-3231bce5ca2a",
          "length": 282,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "72275916-9d03-451b-b924-03e4fcd1c99b"
        },
        "item": {
          "id": "64190dc1-21aa-49ff-872f-fadd4caca2ba",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "b0c08cc1-87d3-4cc7-978d-2d869075fda9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 241
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "80408580-d8b8-4baa-b74c-7f009ec46533",
        "cursor": {
          "ref": "dd7356e5-7667-4e7f-ad19-d2b5b57033c3",
          "length": 282,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "49d3dbbc-e13c-4be3-82aa-2ebcc0bb8c46"
        },
        "item": {
          "id": "80408580-d8b8-4baa-b74c-7f009ec46533",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "ac7cad65-a7c6-4131-99da-f60414cf0d15",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 207
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79ad6f6d-6351-4eae-b995-f796f3f6c255",
        "cursor": {
          "ref": "2b17a6f8-e7d2-4cf1-adcb-9dd921b5a218",
          "length": 282,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "18a44b12-6f09-4b10-a494-7f609b9472a5"
        },
        "item": {
          "id": "79ad6f6d-6351-4eae-b995-f796f3f6c255",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "2ed1d5f2-2f71-4e32-a223-7f49710ba83e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "93484e5d-bc93-4b49-9581-36fb9018ee9f",
        "cursor": {
          "ref": "6dc40340-3532-49e8-b54d-1daf268baa4a",
          "length": 282,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "e2179de5-7727-4033-9de6-156e732152f2"
        },
        "item": {
          "id": "93484e5d-bc93-4b49-9581-36fb9018ee9f",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "96934603-5d35-432e-ab7c-c2e1376a0ee8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c3104b7-ba59-4b88-bcbd-533c766edbfc",
        "cursor": {
          "ref": "2d4606f8-0190-45bb-880b-56dcf72544d0",
          "length": 282,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "ac48642c-dd69-4f2f-8e93-f218039ef6f6"
        },
        "item": {
          "id": "8c3104b7-ba59-4b88-bcbd-533c766edbfc",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "7fe98790-f1e3-46ed-9aa4-f1d7e85b8f70",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e7af57ba-f1a6-47cc-b2dd-c7fa0c6e5da3",
        "cursor": {
          "ref": "5e37d663-6106-41e4-994c-1e3e5165eb98",
          "length": 282,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "dd1b76d1-c3c2-41fb-87da-6acf1bd7880d"
        },
        "item": {
          "id": "e7af57ba-f1a6-47cc-b2dd-c7fa0c6e5da3",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "2097b39b-a372-4654-9b39-29d210210cfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4f87770-0af1-4995-ad58-6c5dd5bbce15",
        "cursor": {
          "ref": "2f6d0601-62d5-43f6-ab39-0a756b5c165d",
          "length": 282,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "a76137e6-419c-47c8-bf01-215f1a90c1f0"
        },
        "item": {
          "id": "d4f87770-0af1-4995-ad58-6c5dd5bbce15",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "4c20a90d-e0e6-4500-8bc4-b5e71eaadba7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ba88433c-0aa6-4475-bfad-23faa2eabfad",
        "cursor": {
          "ref": "c00e1208-e736-4260-94a8-59dc74f2c057",
          "length": 282,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "e2754430-512b-438c-a318-ab12d2f6ac61"
        },
        "item": {
          "id": "ba88433c-0aa6-4475-bfad-23faa2eabfad",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "8bd61187-9004-45c2-8630-eb379bdbac0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d1ff8684-8c97-441a-b043-c869ce785d6e",
        "cursor": {
          "ref": "a9daab94-2497-430e-a9da-8946264b5e9f",
          "length": 282,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "c130ecfc-defc-4f0c-952d-012376302165"
        },
        "item": {
          "id": "d1ff8684-8c97-441a-b043-c869ce785d6e",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "e3a7701f-14f8-42d4-a628-73a684a2ca65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "85921394-c957-41a1-8f90-8ab4fe938f73",
        "cursor": {
          "ref": "11cc7d43-3454-4da9-9076-24dc7397b3a4",
          "length": 282,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "bd50f423-3010-4573-95da-5877115056a0"
        },
        "item": {
          "id": "85921394-c957-41a1-8f90-8ab4fe938f73",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "3d2e51ab-e759-4e8e-ae58-41f4fb7c7e87",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2c531391-7b7e-4429-92c3-183982207a63",
        "cursor": {
          "ref": "3af94e7c-6320-479f-aa26-80127a272ffc",
          "length": 282,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "18d55750-9cb7-4eea-8f43-000d36ca82be"
        },
        "item": {
          "id": "2c531391-7b7e-4429-92c3-183982207a63",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "c77ed222-52a7-4f10-9ab8-15cf6cf2d501",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "308037f8-6f05-4969-94ba-560d5eba41b5",
        "cursor": {
          "ref": "b19673d8-1104-41b9-837b-d6faac4c12bf",
          "length": 282,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "598d72fb-fd73-4da7-bc9d-8daaf951d516"
        },
        "item": {
          "id": "308037f8-6f05-4969-94ba-560d5eba41b5",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "4bd14732-262d-473f-8253-8b0fb70233ba",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "20cec6e8-137c-48be-9cc7-1c997188577e",
        "cursor": {
          "ref": "e958c623-9cce-4296-8cb4-bdb1367e10eb",
          "length": 282,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "aae9df73-d159-4307-9a13-2618b4ce55d2"
        },
        "item": {
          "id": "20cec6e8-137c-48be-9cc7-1c997188577e",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "20e48f45-5fd7-4006-aba9-c95dda73bd00",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e4d4534-8e07-416d-8408-9299f717ae46",
        "cursor": {
          "ref": "6ab76781-d53d-4951-91d1-7fc9f6408d38",
          "length": 282,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "6cdbb26b-679e-4b8b-b60e-8110e3f58935"
        },
        "item": {
          "id": "6e4d4534-8e07-416d-8408-9299f717ae46",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "f5235684-1491-4640-9795-f416d88ae72c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5f4e1b4a-b56d-4827-89fb-bcc98bc0ca2c",
        "cursor": {
          "ref": "ad47939f-e5e0-4cb6-844d-e32d0e83afb0",
          "length": 282,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "aab23ecc-f4fc-4ff4-97d7-80401545e5d7"
        },
        "item": {
          "id": "5f4e1b4a-b56d-4827-89fb-bcc98bc0ca2c",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "63b35515-90ea-4762-b439-f4cddd2e1d93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "47929636-8142-43f6-9dca-23194bb9d089",
        "cursor": {
          "ref": "e85d4f3c-6140-463f-8bdb-0227bf82e7a3",
          "length": 282,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "87730764-7b51-41b1-8714-9f1be8a6bcdf"
        },
        "item": {
          "id": "47929636-8142-43f6-9dca-23194bb9d089",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "60efe34a-7eef-4476-b365-eacd7aa9533a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e282dd54-6e2d-4b49-96ab-bcd5de67fd6a",
        "cursor": {
          "ref": "cb498e84-ebaa-48d0-b378-a920c5c628d8",
          "length": 282,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "c16fc604-1337-4cea-8353-5271d7ed6c07"
        },
        "item": {
          "id": "e282dd54-6e2d-4b49-96ab-bcd5de67fd6a",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "8eb064cb-43da-47d0-ba70-26b076ef3e71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "30df9187-666f-45ad-93e8-f90d58f12b0b",
        "cursor": {
          "ref": "d576edb9-8628-4938-960d-52851c355364",
          "length": 282,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "380f4a57-78a1-41e2-86b5-63e1f4d1b168"
        },
        "item": {
          "id": "30df9187-666f-45ad-93e8-f90d58f12b0b",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "31fd57f0-1506-4256-96d5-214ad79815ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2611a98-30a3-454f-b602-34dae8145cfd",
        "cursor": {
          "ref": "75ba66aa-16d0-4f35-bcbf-eaafc4e510f7",
          "length": 282,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "47157d76-58ba-4fdb-b3d7-7399d518563d"
        },
        "item": {
          "id": "f2611a98-30a3-454f-b602-34dae8145cfd",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "2107569d-224a-49f4-9143-6a14c0926ba0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "04aa0162-e5cd-468b-8d81-84969bf6c3a0",
        "cursor": {
          "ref": "d97fa344-cfd4-48fa-b348-752cd6128bf5",
          "length": 282,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "8e14ee3c-1226-4977-b5b4-f514e1c6ad42"
        },
        "item": {
          "id": "04aa0162-e5cd-468b-8d81-84969bf6c3a0",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "3ebceaf4-84bf-4686-94bd-606d9dfe51ed",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 521
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2d29961-0e4c-4739-b7e2-8fdb14c0b0a4",
        "cursor": {
          "ref": "63104b47-65ed-4857-9d1b-e489d1e44674",
          "length": 282,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "d4e47228-6433-4d4c-9fab-435cf6e24e46"
        },
        "item": {
          "id": "d2d29961-0e4c-4739-b7e2-8fdb14c0b0a4",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "5bc0138e-403d-45ec-b64a-54d01752c42f",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 78,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3af176ba-5a18-4788-b779-f16914af6550",
        "cursor": {
          "ref": "af044c09-598d-476f-84a3-9fcaac4ea95d",
          "length": 282,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "4c370162-eccf-46f8-9311-6816f87ae63a"
        },
        "item": {
          "id": "3af176ba-5a18-4788-b779-f16914af6550",
          "name": "credentials_issue"
        },
        "response": {
          "id": "484878a9-c972-44cd-8aa1-7da48bc23d48",
          "status": "Created",
          "code": 201,
          "responseTime": 1072,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject matches request credential.credentialSubject",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "d0ca8797-8678-4908-a672-8a8d3429bb1a",
        "cursor": {
          "ref": "5974abe4-3b54-481d-9e92-24218c5d92af",
          "length": 282,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "d1eae5a8-ee8e-4319-9ced-93b356a9cf1a"
        },
        "item": {
          "id": "d0ca8797-8678-4908-a672-8a8d3429bb1a",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "86661a5f-709d-4fde-9d99-cdeefb2ac702",
          "status": "Created",
          "code": 201,
          "responseTime": 1073,
          "responseSize": 703
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "e46e8b18-c806-4086-9458-1f5395f5c7ce",
        "cursor": {
          "ref": "6d5c0795-4ce1-4f32-931c-d785e635933e",
          "length": 282,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "ae830c62-c689-463a-a54f-520449b6b270"
        },
        "item": {
          "id": "e46e8b18-c806-4086-9458-1f5395f5c7ce",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "d065ef1b-b3ef-4598-90ff-d594e799d540",
          "status": "Created",
          "code": 201,
          "responseTime": 1019,
          "responseSize": 756
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "020a4ffa-7e93-4520-addf-7dc64a3a7587",
        "cursor": {
          "ref": "017eb5a3-809d-4500-9e65-66cbf4f17bb0",
          "length": 282,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "859afd28-8247-4db5-b61c-5c22c39b3460"
        },
        "item": {
          "id": "020a4ffa-7e93-4520-addf-7dc64a3a7587",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "24a0db18-0715-4bfa-8071-cb52360a1b32",
          "status": "Created",
          "code": 201,
          "responseTime": 981,
          "responseSize": 771
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d985711-ec3c-41f6-b224-926710be0211",
        "cursor": {
          "ref": "2abd4c6d-b959-4983-925b-a9bf79ba944e",
          "length": 282,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "30713523-5f16-4ddd-b298-0848b9a69c81"
        },
        "item": {
          "id": "8d985711-ec3c-41f6-b224-926710be0211",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "d381b333-0012-48ac-bf13-b6648fd4fe9a",
          "status": "Created",
          "code": 201,
          "responseTime": 987,
          "responseSize": 749
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false
          }
        ]
      },
      {
        "id": "7fc216e6-0740-45ef-a4bf-45830d1b19c1",
        "cursor": {
          "ref": "66653b4f-b7e8-4c33-bf44-92bc79c6a395",
          "length": 282,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "59b16bad-9832-4b88-a4f8-38a56a6ca913"
        },
        "item": {
          "id": "7fc216e6-0740-45ef-a4bf-45830d1b19c1",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "423ca60a-8b06-4750-a873-7984b9daf179",
          "status": "Created",
          "code": 201,
          "responseTime": 1496,
          "responseSize": 1082
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "55df6977-6532-4f13-bfc3-51c38b25108a",
        "cursor": {
          "ref": "caa15594-d4c8-4fe7-87af-154f1b34defd",
          "length": 282,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "139a90fd-f3a7-42d7-8e34-42903278dac5"
        },
        "item": {
          "id": "55df6977-6532-4f13-bfc3-51c38b25108a",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "1e3f3b3e-9a3d-411f-95bf-1bb563de6d39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b3690b97-76a6-4d6d-b9d8-d26e2c17b0d6",
        "cursor": {
          "ref": "d90e6c28-8d93-4fc2-8085-d93c4cf15703",
          "length": 282,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "ad550d50-f5bd-45bf-a419-4a3bf93c050a"
        },
        "item": {
          "id": "b3690b97-76a6-4d6d-b9d8-d26e2c17b0d6",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "d7ca2deb-3f19-44aa-9251-7a63779a4523",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c6f013ad-7658-42f3-8511-e4d02180dc9b",
        "cursor": {
          "ref": "f6728e12-6802-48a6-8c2a-9a8606d18a53",
          "length": 282,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "4c8cec09-3075-4182-93c0-0b87a7d94301"
        },
        "item": {
          "id": "c6f013ad-7658-42f3-8511-e4d02180dc9b",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f22b49e8-7514-47d1-b2b9-2afe4ffd5099",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 104,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d3050f11-4c88-44f3-aa5f-7e2a5c64a61a",
        "cursor": {
          "ref": "eee6a9ef-a625-437c-80ef-d38c7d73dd4d",
          "length": 282,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "381fe30d-1d8a-4da0-abf4-d13f6187dfdd"
        },
        "item": {
          "id": "d3050f11-4c88-44f3-aa5f-7e2a5c64a61a",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "dd63aa5f-5119-4aa0-b596-3111da6f4421",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0b04926a-a2f6-4905-891b-fe4a1e15da2b",
        "cursor": {
          "ref": "cab3e362-b847-4fbb-82c7-1616632df631",
          "length": 282,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "4f3a40af-3575-403a-aa50-591245970b83"
        },
        "item": {
          "id": "0b04926a-a2f6-4905-891b-fe4a1e15da2b",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "00532a09-5522-4d2a-af91-ebacbb5fd835",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "92f84f63-cd15-4056-a0ed-3f9b2b5e2667",
        "cursor": {
          "ref": "5183c7a5-a844-498a-8462-f5fde8cee868",
          "length": 282,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ff6d0383-fb3b-4899-920f-ea3e86801297"
        },
        "item": {
          "id": "92f84f63-cd15-4056-a0ed-3f9b2b5e2667",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "2cc62889-b1ca-4c2b-84ab-fb72e803068c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9df7af68-0908-46a3-b076-1b3f04978c63",
        "cursor": {
          "ref": "8cf70155-4637-426c-b594-9e8d4f26c8a5",
          "length": 282,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "602708f3-ab2c-4ed1-9ffe-7f1bf7d09677"
        },
        "item": {
          "id": "9df7af68-0908-46a3-b076-1b3f04978c63",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "b4f1f209-64b5-4d02-8ec5-07daf87d1cfe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "37e21999-2ffd-4086-ab19-83c919ea396d",
        "cursor": {
          "ref": "c6d73e56-a799-4e5f-beb2-f8da28688bca",
          "length": 282,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "3bb1419c-9531-4153-ab66-a595fe62f8e4"
        },
        "item": {
          "id": "37e21999-2ffd-4086-ab19-83c919ea396d",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "a0a5b102-f5ce-4955-8db6-ad130b62734d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "befee93a-2c2e-434c-80eb-7bee35b754fc",
        "cursor": {
          "ref": "5efca7b3-8174-4f69-8d43-dbfd342b4642",
          "length": 282,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "4db576d6-41c0-4dad-bc9b-d2ae81dae0d9"
        },
        "item": {
          "id": "befee93a-2c2e-434c-80eb-7bee35b754fc",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "1a02bcfc-a532-4c35-9d8f-edf52322f34b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "494b90e6-84f2-4d59-8388-1f3b5e543c51",
        "cursor": {
          "ref": "4ab0a7c1-7dde-4519-8b68-51d418691e30",
          "length": 282,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "8f23f70b-faa5-4e4d-ae35-328ad36ba151"
        },
        "item": {
          "id": "494b90e6-84f2-4d59-8388-1f3b5e543c51",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "c97523c7-578e-4bb4-9b89-02a65c43e481",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7e0dcf66-9b76-4ee6-adac-866e87fca0e8",
        "cursor": {
          "ref": "7ce5fce2-c8b8-4b36-94c1-3d08d1235b64",
          "length": 282,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "c783d74a-ffcb-419e-a55f-3d6507e2b6ec"
        },
        "item": {
          "id": "7e0dcf66-9b76-4ee6-adac-866e87fca0e8",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "ce8fbfcd-aeb6-455b-9258-bfc871a886f3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "68071a66-242a-4b20-af42-eddcfc50bdbc",
        "cursor": {
          "ref": "38631031-6be3-4f44-9974-f108c68d084a",
          "length": 282,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "e3a89574-7fd6-470e-a84d-5a32f1f1eaa1"
        },
        "item": {
          "id": "68071a66-242a-4b20-af42-eddcfc50bdbc",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "60e3c1c8-ad3f-4d74-b25e-b7d1654b9703",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b139a521-d460-4a13-a5fa-b300a568a224",
        "cursor": {
          "ref": "fa94f116-588b-42c1-aecb-a31c7fb0c85d",
          "length": 282,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "b1df14c8-ef8c-4ee0-927d-aa3eef7c79af"
        },
        "item": {
          "id": "b139a521-d460-4a13-a5fa-b300a568a224",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "8713507b-8be3-4edc-99c7-e958f79865ac",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3de5d93f-1e45-4e66-80a5-5d43135bb970",
        "cursor": {
          "ref": "dcf21ec3-2225-482a-a2b3-2ffc3b182deb",
          "length": 282,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "352f0737-4998-422f-844f-d786900515bf"
        },
        "item": {
          "id": "3de5d93f-1e45-4e66-80a5-5d43135bb970",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "15b329e5-4033-4d79-983a-4b70790b8409",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "79f5dca2-9629-428e-8a5c-53bf6fe31bde",
        "cursor": {
          "ref": "4532e272-0b38-4667-b27f-04801cf5682c",
          "length": 282,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "2cd65fa5-bc47-43d1-8886-8675f740d28a"
        },
        "item": {
          "id": "79f5dca2-9629-428e-8a5c-53bf6fe31bde",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "1e56980b-ceff-4313-8961-2d523f580eb4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f21ec983-ddd5-406f-becd-008d8ac7f5d4",
        "cursor": {
          "ref": "d30da8e9-be68-442d-83ab-5f754186ddab",
          "length": 282,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "4f123b55-178e-4c67-b16b-e4726289a7d4"
        },
        "item": {
          "id": "f21ec983-ddd5-406f-becd-008d8ac7f5d4",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "e0896585-f860-4173-80bc-068c5cf14a52",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b1dbb7f4-4b7e-44ac-b4a3-56911d11ee45",
        "cursor": {
          "ref": "d4bfd0da-5129-400e-92d3-74fe4e12ac26",
          "length": 282,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "6967b478-805a-4d8c-a2bc-77283cd243e3"
        },
        "item": {
          "id": "b1dbb7f4-4b7e-44ac-b4a3-56911d11ee45",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "1187de26-fe4f-4238-a1ba-fb64f83f072c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e9b3937a-f05d-4d95-9181-e97bb1e7c22e",
        "cursor": {
          "ref": "c8be9814-f49c-495e-99ce-2851e6d9fe31",
          "length": 282,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "c3809d4a-5dc5-451b-b3f7-14c2b751ee7d"
        },
        "item": {
          "id": "e9b3937a-f05d-4d95-9181-e97bb1e7c22e",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "d1f465d7-893e-4057-9226-f7167a2c37b6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7b5943b0-edd2-4693-882e-7b687bf692c9",
        "cursor": {
          "ref": "973fc49a-2ccc-4a10-be89-1676da9bbf17",
          "length": 282,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "27d044ff-2c8e-4d45-b2f0-7fcf58ca64e8"
        },
        "item": {
          "id": "7b5943b0-edd2-4693-882e-7b687bf692c9",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "c340aab7-ea8b-4e1f-853c-3c73bb5e038d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f992b0eb-469f-4dbd-b6ea-576dde6f9d30",
        "cursor": {
          "ref": "3057b9d1-36b8-44bc-87b2-7c92f19f3755",
          "length": 282,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "6180df58-2b6b-4df0-ab3d-459ce0c8a063"
        },
        "item": {
          "id": "f992b0eb-469f-4dbd-b6ea-576dde6f9d30",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "66ecc2ec-6dd4-4c45-8135-c3aff8278568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "82c33c82-5ee3-41bf-8b5c-de588e468b2a",
        "cursor": {
          "ref": "946022b4-7848-4a71-abd3-b09c273e9d83",
          "length": 282,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "33a1f89c-aab8-4051-95a8-a9ef0fc6d30f"
        },
        "item": {
          "id": "82c33c82-5ee3-41bf-8b5c-de588e468b2a",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "050123b5-fd59-4152-8051-60ab490dacd2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f34c96de-05e0-4a6e-bd8b-a87ac50921e6",
        "cursor": {
          "ref": "fa8230ad-368f-4610-900a-35264aa44589",
          "length": 282,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "ae7d8aa3-569b-4e3a-a8ad-4b3d564660c5"
        },
        "item": {
          "id": "f34c96de-05e0-4a6e-bd8b-a87ac50921e6",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "d902a6c6-0bb4-4621-9ae3-a6e275b497ec",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "33f29628-a0b8-4356-aa39-ebba6fd5bc25",
        "cursor": {
          "ref": "eb4d289b-8e26-4c91-a6ae-ef191c76a565",
          "length": 282,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "a1742f77-ea24-4504-96c8-dd6134fbbaa8"
        },
        "item": {
          "id": "33f29628-a0b8-4356-aa39-ebba6fd5bc25",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "babb703d-7282-4695-a37d-da8e18de4ff3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 108,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cd74c398-c291-4848-b2be-5595e50665cd",
        "cursor": {
          "ref": "f832caaf-d8d6-46a7-a101-c0119c6f303c",
          "length": 282,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "11591e8a-77a9-43e9-b149-3bf3b7dd588e"
        },
        "item": {
          "id": "cd74c398-c291-4848-b2be-5595e50665cd",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "d2a3d249-aaad-4d77-b3e5-62f6e5491ef2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6586324b-469f-4943-a170-f953cad73d94",
        "cursor": {
          "ref": "a95d170f-a80f-40e9-97fb-a3bb9b9f24bf",
          "length": 282,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "3bf8530a-0593-4d75-b3af-0f200f6dec2f"
        },
        "item": {
          "id": "6586324b-469f-4943-a170-f953cad73d94",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "5150d212-7e7c-4899-adc0-89d93511bb4d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0cd51ea8-00b6-4744-a7d3-39aeca55c927",
        "cursor": {
          "ref": "d762412b-3def-4983-87a8-374fd3f9771b",
          "length": 282,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "fde12c80-4163-48ee-a84c-e3c80cc42aed"
        },
        "item": {
          "id": "0cd51ea8-00b6-4744-a7d3-39aeca55c927",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "a96b21b7-7136-4ac6-af7d-99a6263a55e1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc8cfdd5-180e-451d-b225-87f6920a8e05",
        "cursor": {
          "ref": "f175f0e9-dbc1-4a08-9805-2e51875e2007",
          "length": 282,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "6c6e1978-52b7-425b-b5ef-b1a26e32e044"
        },
        "item": {
          "id": "fc8cfdd5-180e-451d-b225-87f6920a8e05",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "2c8e3ce1-2b3f-4860-b64c-19fc222a52bb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "77ed2956-f483-4534-a261-4b37ffc2b6a3",
        "cursor": {
          "ref": "05610bac-2b28-45cb-bf4e-e11cdbdd5442",
          "length": 282,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "7912341b-a547-488e-aef3-3760cf40845b"
        },
        "item": {
          "id": "77ed2956-f483-4534-a261-4b37ffc2b6a3",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "4748af6a-8043-486e-9f09-0207cbd4e765",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a677798b-d6a3-4433-a937-18d0386339c7",
        "cursor": {
          "ref": "3264bc69-fb38-4703-8bd5-c9e3e8e72b1a",
          "length": 282,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "0fbf8551-31f6-4d3d-ab85-1dacac6525d7"
        },
        "item": {
          "id": "a677798b-d6a3-4433-a937-18d0386339c7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "320bdf67-d205-43ca-a60c-edb82562642c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "56a534e3-96d7-4c5d-a94e-027f26a70eaa",
        "cursor": {
          "ref": "e48c8ddd-7cef-4109-bc97-a5be7ad60be5",
          "length": 282,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "99970a35-9161-415d-8d44-47cb4c55aec2"
        },
        "item": {
          "id": "56a534e3-96d7-4c5d-a94e-027f26a70eaa",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "c23fbaf7-1a7b-46c8-91c0-3e9dd847d014",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "35af716f-025b-4e34-bfce-73f667f5edff",
        "cursor": {
          "ref": "15243040-220f-4c56-9c70-ccbd1eea30e7",
          "length": 282,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "a0fdb794-c0a9-4d71-ae7c-c0821343a7ab"
        },
        "item": {
          "id": "35af716f-025b-4e34-bfce-73f667f5edff",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "48a2b9c5-5caf-42ca-81a2-e9606d44d4e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "11ed3a45-ee4d-4f7a-a2be-1bf75fd82096",
        "cursor": {
          "ref": "e7d7548c-d521-4fcc-b01e-76e6a2091c1f",
          "length": 282,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "6ed0499d-f413-463b-9e37-ada170486955"
        },
        "item": {
          "id": "11ed3a45-ee4d-4f7a-a2be-1bf75fd82096",
          "name": "credentials_status:credentialStatus:item:status:invalid"
        },
        "response": {
          "id": "7d208b7c-6bad-425e-973e-a4cece59919c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3047f661-bdb8-4909-96c5-8558e2fa302d",
        "cursor": {
          "ref": "b6871efe-d783-4457-bb46-643e830cdf60",
          "length": 282,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "2559e918-a10d-4837-b478-99ef01715be6"
        },
        "item": {
          "id": "3047f661-bdb8-4909-96c5-8558e2fa302d",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "a5e8b970-a05d-4bd8-be6b-c211fab9f338",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c14f8bfa-2c42-49e7-9787-010d6abfa8fc",
        "cursor": {
          "ref": "a65859fe-c2dd-4694-96fb-c9a062e484e3",
          "length": 282,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "c632b79e-bbff-4c78-b036-34f7a1633912"
        },
        "item": {
          "id": "c14f8bfa-2c42-49e7-9787-010d6abfa8fc",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "9451a2f2-606f-4380-a69a-60a64c165839",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9bc50fed-3dc9-4252-a8cc-342a20f2dfdc",
        "cursor": {
          "ref": "182adbc7-01b2-4a34-8863-1c7b33dde3d3",
          "length": 282,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "89ec2da6-4aad-4fdd-8152-1b5b821822d3"
        },
        "item": {
          "id": "9bc50fed-3dc9-4252-a8cc-342a20f2dfdc",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "43d72522-edfd-4b6a-b1e8-aba064f94ce3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "db9cdecd-9cbd-4c24-befb-a5c613060e42",
        "cursor": {
          "ref": "49be2fb9-b569-459d-a13c-f5945ef60410",
          "length": 282,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "0df52b90-c380-4b5d-b129-7ded5fa04aa8"
        },
        "item": {
          "id": "db9cdecd-9cbd-4c24-befb-a5c613060e42",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "f46520b3-6bb6-4fd6-b27f-e66de24d3858",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ae982e-490b-437f-b525-a330e8639882",
        "cursor": {
          "ref": "ca1ef26f-7ea4-4c7c-87e3-a511335f0643",
          "length": 282,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "3032acc5-f74b-4847-b3cd-4c8380e9765e"
        },
        "item": {
          "id": "97ae982e-490b-437f-b525-a330e8639882",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "b1beaaec-9bd9-4e5c-a1fa-caca6c175d4b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3b235716-b445-481e-929d-5f844c82c168",
        "cursor": {
          "ref": "7f5e7eeb-3d5f-4a1b-952c-cf9e719bb65c",
          "length": 282,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "03892464-75ad-4711-b2ab-df228bb1e225"
        },
        "item": {
          "id": "3b235716-b445-481e-929d-5f844c82c168",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "41522f5a-4278-4525-9866-54f4c188b54f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a50c373-6012-47f7-b32e-5e7a99c3bcc6",
        "cursor": {
          "ref": "564a8685-8bfa-4585-a3e5-e1530ae54fae",
          "length": 282,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "dc8fe4e7-8f83-4d85-bdf4-1abbb42f5f6a"
        },
        "item": {
          "id": "8a50c373-6012-47f7-b32e-5e7a99c3bcc6",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "6d00f68e-2169-4f6c-b85a-daf39bc37af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 142
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "613f574a-f4a4-49fc-a0f7-4cc2f16ec056",
        "cursor": {
          "ref": "b715ee70-8621-4f61-9fb8-fa81124216f9",
          "length": 282,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "d67e3711-0bc4-43ee-8fbb-2e46db927d75"
        },
        "item": {
          "id": "613f574a-f4a4-49fc-a0f7-4cc2f16ec056",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "fe34b236-04ad-4ca3-a628-ea8051b14382",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6514b175-6fab-4622-a74e-07e8a9fbb95b",
        "cursor": {
          "ref": "84efa8f5-2e49-4a27-b3fd-5257f9444cf2",
          "length": 282,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d98c4b5f-9a63-4186-8c5d-bce14f520b2d"
        },
        "item": {
          "id": "6514b175-6fab-4622-a74e-07e8a9fbb95b",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "6b7f3d44-2404-425f-8f4d-ba383a2baee1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8b2708b1-def2-4979-96c2-c9a4a4b6bbc0",
        "cursor": {
          "ref": "6a308a88-0fc4-4dbd-9817-660fb0ccb956",
          "length": 282,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "35fc1070-a1a0-432e-b0c8-6620f5abf2be"
        },
        "item": {
          "id": "8b2708b1-def2-4979-96c2-c9a4a4b6bbc0",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "18995b02-ea3b-43a5-b70e-14b1a38cf361",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "27b021c0-70ba-40a8-b692-82df6c9465c3",
        "cursor": {
          "ref": "cb7d1bd8-ea61-4dcd-95aa-835a61c477e0",
          "length": 282,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "b3efb6d8-df10-42a2-8e00-b0de1494bd9f"
        },
        "item": {
          "id": "27b021c0-70ba-40a8-b692-82df6c9465c3",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "b714a079-66f8-4a41-8093-381088cb0425",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4be20d1-aaec-4a96-9525-b57a02699626",
        "cursor": {
          "ref": "38bd2c68-51da-4959-884e-acece90308bd",
          "length": 282,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "757d4838-0624-499b-b086-3e94e28a168b"
        },
        "item": {
          "id": "d4be20d1-aaec-4a96-9525-b57a02699626",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "4276f435-5cd8-4076-80a9-90acf4d1162b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7122103f-968c-46d3-b23a-6381e9767a11",
        "cursor": {
          "ref": "6e105ccb-44a4-4d5f-a457-19e36bdc5ad8",
          "length": 282,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "6378e31d-0c9a-4de2-8579-f116b14e58c7"
        },
        "item": {
          "id": "7122103f-968c-46d3-b23a-6381e9767a11",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "fce3fc04-9a36-41e1-a2ac-bce9172833f0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b9ee22a0-fad5-4b7c-8657-b079918ff061",
        "cursor": {
          "ref": "e50a9e9e-634c-4aa5-84eb-7a0890949d57",
          "length": 282,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "94ee1a80-3f26-425a-90ab-cc52efa08f72"
        },
        "item": {
          "id": "b9ee22a0-fad5-4b7c-8657-b079918ff061",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "448eaa93-4006-40d0-af75-cd41e09d8e2d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "800eec25-8a4f-4237-89c3-f6010d37e45e",
        "cursor": {
          "ref": "53dc8926-822b-4c43-b528-df15b28a9e13",
          "length": 282,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "07950dfb-74d6-49aa-8f18-70389d2d219d"
        },
        "item": {
          "id": "800eec25-8a4f-4237-89c3-f6010d37e45e",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "7b7acd9b-9813-4731-b02e-088d2f05fd5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15b2e102-d58d-498c-b58b-f1ea211a407a",
        "cursor": {
          "ref": "c781ae87-0e5a-43f3-8fd1-1a3a4b8f52e7",
          "length": 282,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "a3fb369c-b3b7-451a-bcd5-b99e021dd123"
        },
        "item": {
          "id": "15b2e102-d58d-498c-b58b-f1ea211a407a",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "cda8d449-7c22-4e7e-8fd5-acd9ff03df97",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "96c26b2d-48b0-422c-8673-3bff56fe053d",
        "cursor": {
          "ref": "575f392e-9afb-4de4-9d63-7488916fdcde",
          "length": 282,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "675b82b7-6db7-4f7b-ba1d-5d991d609a65"
        },
        "item": {
          "id": "96c26b2d-48b0-422c-8673-3bff56fe053d",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "91f49783-9031-46c5-bcbc-fedec6cd76d0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f02a3be-741e-476d-86f2-cbc8967a3d0b",
        "cursor": {
          "ref": "17639f13-8ddb-43ae-ba2c-b4d5d0aa4632",
          "length": 282,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "545b4fd4-5029-468e-b5cc-497cbbaa8439"
        },
        "item": {
          "id": "2f02a3be-741e-476d-86f2-cbc8967a3d0b",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "120e45c6-751a-4a73-9112-5d379e4a88a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "57f03d87-14d4-440b-99e5-58a25dc446be",
        "cursor": {
          "ref": "bbc82a61-1978-4154-9400-bb85ed555c66",
          "length": 282,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "ee62ea25-dd35-4aa5-acf9-ccbf89f8ab82"
        },
        "item": {
          "id": "57f03d87-14d4-440b-99e5-58a25dc446be",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "e5265500-96ef-4d95-89cb-20ebc132d949",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed4fd29b-97e3-4c51-a400-c3ed27397276",
        "cursor": {
          "ref": "c17b3760-e65b-4e10-ba26-17982ccaa70f",
          "length": 282,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "53fb3059-5f69-4b3f-9d24-26e7efe841b8"
        },
        "item": {
          "id": "ed4fd29b-97e3-4c51-a400-c3ed27397276",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "58c23738-090b-4c3f-906d-c54208133711",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c37e661d-0bb3-4856-9f39-00a27ceeff57",
        "cursor": {
          "ref": "cb246427-7100-4cb8-98aa-41c8ceeeed39",
          "length": 282,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "cacb742b-de8a-4750-8acc-d305f53280d2"
        },
        "item": {
          "id": "c37e661d-0bb3-4856-9f39-00a27ceeff57",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "ba969f5e-89f2-4f89-a8e9-a182c89f9b4a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "5b3574a4-d3a4-478c-ae23-ae2ee6c61862",
        "cursor": {
          "ref": "2de9660d-d7ad-4b86-a840-897a7a731836",
          "length": 282,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "9f804a4d-824f-4794-84db-abc18e04e1be"
        },
        "item": {
          "id": "5b3574a4-d3a4-478c-ae23-ae2ee6c61862",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "69a0dfa8-e3a9-4eb1-a8a8-f2af9c23c333",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d2dd93d0-1008-4ac8-8f63-c629ef5df7c0",
        "cursor": {
          "ref": "dc35f1e0-4704-445e-b757-941ae9add94e",
          "length": 282,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "1927d5ce-9c88-4b66-b565-e78a8cc63a8c"
        },
        "item": {
          "id": "d2dd93d0-1008-4ac8-8f63-c629ef5df7c0",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "4f7a1c2d-6180-46c0-8d8e-f413f934db47",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9ad04a29-58b8-49fb-836f-b29267f926b2",
        "cursor": {
          "ref": "7c527b6d-efe5-4689-9588-026ded242a1b",
          "length": 282,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "9317eaa8-bcf5-4bca-b705-6a69be086d1a"
        },
        "item": {
          "id": "9ad04a29-58b8-49fb-836f-b29267f926b2",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "76930640-3d5c-44b5-8912-51d5c6984183",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "be2dafe1-e755-40ef-a509-5a9cfd439b3a",
        "cursor": {
          "ref": "db709385-7e69-496e-a81f-8cd5318bd4d8",
          "length": 282,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "206c4581-152a-4d44-8d3b-87ba3c2f4af8"
        },
        "item": {
          "id": "be2dafe1-e755-40ef-a509-5a9cfd439b3a",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "1651c6f5-bf8f-4bf8-9e6a-cf3b94575a85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cb8f0724-8f52-45e7-82b4-e26f9748fa17",
        "cursor": {
          "ref": "aac2cc05-fde5-4d30-8e49-4e2d9fe00aac",
          "length": 282,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "b362bb42-d4a3-4127-882d-26989d965f9a"
        },
        "item": {
          "id": "cb8f0724-8f52-45e7-82b4-e26f9748fa17",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "c497e229-1c70-4fc7-93e2-7a723b381b8b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "50e90c2b-5a6e-403b-bcee-31c359952043",
        "cursor": {
          "ref": "3d97b5f4-1826-4cf8-964f-6a18b6c6902b",
          "length": 282,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "a27db9d8-7343-4f04-bbde-c9d513230398"
        },
        "item": {
          "id": "50e90c2b-5a6e-403b-bcee-31c359952043",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "7d0f1a83-c25b-476c-9b09-3a6365220a2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a98a473e-b602-4e90-8071-698175bb7f6c",
        "cursor": {
          "ref": "690bc09c-95c0-47d3-b54c-d070b9fcd350",
          "length": 282,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5f7c13ce-c8c4-472f-abfb-84b3a5445845"
        },
        "item": {
          "id": "a98a473e-b602-4e90-8071-698175bb7f6c",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "4990c121-1de4-4581-87ca-b40376ce081d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2a7cbb4a-01fe-4444-9fc5-1229165cb6e2",
        "cursor": {
          "ref": "3ec0647c-a264-48dc-a1ce-1374675b2685",
          "length": 282,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "1fcf4254-9fc5-4821-9936-405ba840e10c"
        },
        "item": {
          "id": "2a7cbb4a-01fe-4444-9fc5-1229165cb6e2",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "15910b8a-7d25-4e8d-a43d-86bb88a265d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9548bedc-5ca0-4d8b-b47b-a93c44eb0b50",
        "cursor": {
          "ref": "414d74c8-8c21-4a6f-af8f-fc5a1fcef89a",
          "length": 282,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "7a30ce9c-ed4b-4348-8f89-a66dd9892b25"
        },
        "item": {
          "id": "9548bedc-5ca0-4d8b-b47b-a93c44eb0b50",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "fb5fed93-e726-4437-895d-fe99172722af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "760f32aa-5817-4567-9cb4-b5fd0ba12731",
        "cursor": {
          "ref": "78633296-4582-4af4-bc04-9f7b590de91e",
          "length": 282,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "f2024eac-a272-4a3d-b775-afc811dbc628"
        },
        "item": {
          "id": "760f32aa-5817-4567-9cb4-b5fd0ba12731",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "65e59a6d-d05d-420e-a94d-bdddcb7a3c65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "159a15a8-32bd-467f-9acc-dfb199f825f8",
        "cursor": {
          "ref": "08c75509-8367-4e3f-8194-2eb6747ae1f7",
          "length": 282,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "e8321a95-7018-42d0-b1a3-6778bf1b17ea"
        },
        "item": {
          "id": "159a15a8-32bd-467f-9acc-dfb199f825f8",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "7541b9b1-aa78-47d9-b358-8d5fbd19ea31",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ed4b1100-912a-4a0a-9a7b-1534d2d695e9",
        "cursor": {
          "ref": "119d06aa-e2f9-4102-a9c4-6b7cf225ff48",
          "length": 282,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "59ef4428-cb10-4963-a44e-5338c87e210c"
        },
        "item": {
          "id": "ed4b1100-912a-4a0a-9a7b-1534d2d695e9",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "76ec87e2-3139-4ed4-9503-2fec22e27edb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5a51bce-ab15-4fe7-a8ac-41b0be42eb3f",
        "cursor": {
          "ref": "c0f4d06d-b068-485a-bc39-cd4a72410d66",
          "length": 282,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c2b233a8-88fb-4233-93ba-e78a9c2ef599"
        },
        "item": {
          "id": "f5a51bce-ab15-4fe7-a8ac-41b0be42eb3f",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "b5291b11-895d-42fb-9371-6024c90bafdb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d32a574a-86be-477f-81b8-0fa946667521",
        "cursor": {
          "ref": "7da21ca2-62c3-4f22-929d-eb8bfcbf1da8",
          "length": 282,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "520bd64c-8794-417d-9f1c-bb008aa440a1"
        },
        "item": {
          "id": "d32a574a-86be-477f-81b8-0fa946667521",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "8074577d-44ab-4193-b0e1-9250835dbf29",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b19bce4a-84e2-49fc-a9e0-11f742035dbe",
        "cursor": {
          "ref": "04e72e9d-addc-44e0-93c8-76fddaa67a16",
          "length": 282,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "de85531d-8091-4293-bab5-065e64a693e4"
        },
        "item": {
          "id": "b19bce4a-84e2-49fc-a9e0-11f742035dbe",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "16d303e6-db66-4dfb-a468-6066b989d853",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f5fe9310-062a-4e6b-829a-8504c95a31e3",
        "cursor": {
          "ref": "0cb6f22a-dc8b-4caf-b27b-5633fa4542da",
          "length": 282,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "c448d8fa-04de-4b11-bf83-81922165b85a"
        },
        "item": {
          "id": "f5fe9310-062a-4e6b-829a-8504c95a31e3",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "473a4ac8-5a90-4c3d-b221-c1e020ad0c3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2775829e-592e-496b-8901-2a98a0f48881",
        "cursor": {
          "ref": "bd9d3160-cca4-4eb8-a279-254d80d35f6a",
          "length": 282,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "875f3bbc-ea20-4da0-8728-c790bc0e26ff"
        },
        "item": {
          "id": "2775829e-592e-496b-8901-2a98a0f48881",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "18acb3cf-6f53-42e1-ae11-a437045fe07a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 108
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60f4ea4e-f2f5-47f5-8d6d-fad7d1a585ec",
        "cursor": {
          "ref": "a0b65da2-0160-448b-a9dd-3c8e1b638843",
          "length": 282,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "3685ef33-10d3-45bd-8fc4-aee6527a4f60"
        },
        "item": {
          "id": "60f4ea4e-f2f5-47f5-8d6d-fad7d1a585ec",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "d00e0780-0622-4001-850b-39d4898c0147",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "456eda76-f518-4dd8-add8-42103b69a8f1",
        "cursor": {
          "ref": "94fc90c3-d10a-45f2-8ffc-0f63a2320915",
          "length": 282,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "20c328f9-51cd-4881-bb1d-3500fb172cee"
        },
        "item": {
          "id": "456eda76-f518-4dd8-add8-42103b69a8f1",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "47d71839-3122-43a6-867f-597e4d5f0e13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 99
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6cbbe46b-9a3d-46ed-97a0-17ea7fad7119",
        "cursor": {
          "ref": "9b8ffbfe-add1-443d-8b36-b182c36aefe4",
          "length": 282,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "aef2c4fd-aaaf-41c7-8b57-04e63e116edf"
        },
        "item": {
          "id": "6cbbe46b-9a3d-46ed-97a0-17ea7fad7119",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "5a54a1f0-2cf3-4f19-b4b1-a462ec41ff51",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83e3866b-0a98-4a0a-9ab3-612d46b17820",
        "cursor": {
          "ref": "86621ccb-80aa-48ad-a1b9-aa6ac56c10e2",
          "length": 282,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "bf310ccb-9ce8-48ea-88c6-d74910536a0e"
        },
        "item": {
          "id": "83e3866b-0a98-4a0a-9ab3-612d46b17820",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "35961d79-645e-4e01-96d0-8475ab6abf86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "ff8ca51e-83e1-4d0a-bab3-ee7918d7165c",
        "cursor": {
          "ref": "c877efef-aeea-491f-a369-4e500b81c308",
          "length": 282,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "dfbd9db3-e1b1-4bef-a2a8-2ab259b03a15"
        },
        "item": {
          "id": "ff8ca51e-83e1-4d0a-bab3-ee7918d7165c",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "7ffb6c90-f5ca-4625-a61e-0e2dd329b15d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "73b2af15-0dbc-46d3-993e-ae1b07437d75",
        "cursor": {
          "ref": "24977935-6998-4c1f-9728-98bab3825ff6",
          "length": 282,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "454140ee-959b-487c-8f9e-115fc0866779"
        },
        "item": {
          "id": "73b2af15-0dbc-46d3-993e-ae1b07437d75",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "b1a9ec04-9866-41af-9f08-372b68eece3e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d470f019-c2d4-499e-99a4-14de6eb68cea",
        "cursor": {
          "ref": "30c39bfa-d8b8-4e9b-81f1-50f257247002",
          "length": 282,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "eac0f39f-e27c-4fcf-9d68-7912c59951bc"
        },
        "item": {
          "id": "d470f019-c2d4-499e-99a4-14de6eb68cea",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "f07aa9b4-3a4f-4f51-a38e-cf5464433d4c",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 102,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "6a4e41c2-1779-45b4-9adf-a3b3e1ca128d",
        "cursor": {
          "ref": "dbba5113-fd00-4889-ae16-7cd50e9f7358",
          "length": 282,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "cff45edb-6339-4a22-98cd-43677ee52644"
        },
        "item": {
          "id": "6a4e41c2-1779-45b4-9adf-a3b3e1ca128d",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "bf22fa69-de51-4542-81d1-db64e3b37885",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f28f94b4-0845-4dfd-9687-284479878907",
        "cursor": {
          "ref": "d482ffd8-615d-44fe-bc86-7649b3c2750c",
          "length": 282,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "2115e07b-d062-414c-8934-ce871218f767"
        },
        "item": {
          "id": "f28f94b4-0845-4dfd-9687-284479878907",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "63b11e90-ffb6-4d5a-acf7-3dbf742b847d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e119f2c0-24bd-4781-8c59-4df23859150d",
        "cursor": {
          "ref": "a7c10239-acc2-413e-a520-82b3a74020db",
          "length": 282,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "03070c7e-7371-4c23-8338-ab5d617391ae"
        },
        "item": {
          "id": "e119f2c0-24bd-4781-8c59-4df23859150d",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "cd485588-d0ad-4b62-ae95-6daf2ba3c86f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bcc98a32-8249-479d-b486-8889f0511f0f",
        "cursor": {
          "ref": "60083839-79a4-4a13-8128-2dfdc544f7a8",
          "length": 282,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "848e3533-0dd7-4414-98ea-e21c5b164760"
        },
        "item": {
          "id": "bcc98a32-8249-479d-b486-8889f0511f0f",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "694efa17-dffd-43de-a776-c61a01b8dbc1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "bbdf9ca6-e43b-4394-889a-fd01e8d7aae5",
        "cursor": {
          "ref": "5b55095b-7d81-4650-94c6-5382dbd6a38a",
          "length": 282,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "88cba0cc-0919-4f9c-a697-5615ff98a838"
        },
        "item": {
          "id": "bbdf9ca6-e43b-4394-889a-fd01e8d7aae5",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "cb71dc3f-2875-4802-a96d-1faab9731d04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 242
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "196a176f-4bff-4c10-8cc4-0630590ec9d5",
        "cursor": {
          "ref": "dac44559-1346-4b81-a2c3-51e1469191d4",
          "length": 282,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "d2d0d1e4-b55d-41fd-a1fe-0a5c892e29da"
        },
        "item": {
          "id": "196a176f-4bff-4c10-8cc4-0630590ec9d5",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "5de138e0-c4d9-4d52-b36b-fbf04cde57b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "908ef427-2748-41f5-80c5-9f7551da29f7",
        "cursor": {
          "ref": "ad038fe0-e50a-4483-b3bb-3062bba3a23f",
          "length": 282,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "bae74911-dc73-491a-ae9b-1dacd06fecfe"
        },
        "item": {
          "id": "908ef427-2748-41f5-80c5-9f7551da29f7",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "49ef69a6-c59f-4123-9723-28afc83857a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "14e2aa06-1a16-4c85-8250-35fdd6ae927c",
        "cursor": {
          "ref": "ca8ce5f0-26bb-429a-a29e-d4ec020c9d73",
          "length": 282,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "9f2343fa-fab5-4e0c-9a79-5e9cfe562b3f"
        },
        "item": {
          "id": "14e2aa06-1a16-4c85-8250-35fdd6ae927c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "89c5aa98-0969-403e-b296-5be1cd0e6db6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1602f0d3-0bab-4fd8-9843-e6db09826c2a",
        "cursor": {
          "ref": "c719da15-7bbb-4e27-b7b8-eb0e62d817e9",
          "length": 282,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "58586e54-e291-44a1-a5b2-dd0ea4e4021e"
        },
        "item": {
          "id": "1602f0d3-0bab-4fd8-9843-e6db09826c2a",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "eb83492e-e339-4c64-87e2-6176bfba57ea",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8f7d6dc6-ff32-46f6-aa99-946628677e20",
        "cursor": {
          "ref": "2ff1f6b6-fdd4-466d-914a-f5d36ce37724",
          "length": 282,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "743894b6-dc45-46ef-b64d-d55182fffdf2"
        },
        "item": {
          "id": "8f7d6dc6-ff32-46f6-aa99-946628677e20",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "1eaa41db-98f6-415e-923d-6b05789ec821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e276de3c-ec9d-43c5-963f-bbc81bc72c2a",
        "cursor": {
          "ref": "09efc363-324e-402d-838a-2a91c05687d3",
          "length": 282,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "ca0f46e4-0f5f-4311-835b-4b7a93c44b01"
        },
        "item": {
          "id": "e276de3c-ec9d-43c5-963f-bbc81bc72c2a",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "5c1de12a-fb0b-45af-81b4-f7a37b89b99a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 124
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9adb1134-8b88-424f-b484-9cdb63ee372b",
        "cursor": {
          "ref": "0f60c6f7-ca28-40ee-9384-0c23a908da2b",
          "length": 282,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "7650da77-afe0-4472-86fb-dc5196995448"
        },
        "item": {
          "id": "9adb1134-8b88-424f-b484-9cdb63ee372b",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "05a9fe88-d09b-42d3-93a5-25fb89029aa4",
          "status": "OK",
          "code": 200,
          "responseTime": 971,
          "responseSize": 177
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:196)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "284aa8c8-15db-4212-9142-235d8dd7f80c",
        "cursor": {
          "ref": "99d15aac-f660-48f5-add9-1e7dfa07fa9d",
          "length": 282,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "ad3d8aa8-cd7a-410c-ad26-0dc08afc6bf2"
        },
        "item": {
          "id": "284aa8c8-15db-4212-9142-235d8dd7f80c",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "1d580073-64d2-46c8-bc21-26c272bcdcaa",
          "status": "OK",
          "code": 200,
          "responseTime": 832,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:197)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "8527b69b-5431-44e5-b88e-115c8b454def",
        "cursor": {
          "ref": "5b109e11-916b-4863-9807-c85c5238e46b",
          "length": 282,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "19a26e25-aa7f-490a-8759-c7fa099903c6"
        },
        "item": {
          "id": "8527b69b-5431-44e5-b88e-115c8b454def",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "9ff631d9-9e4d-40a8-a88b-2613bfa3ee03",
          "status": "OK",
          "code": 200,
          "responseTime": 845,
          "responseSize": 131
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:198)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "180b5921-fac8-4d74-bae1-070da5462d1a",
        "cursor": {
          "ref": "4734a469-02b9-42f4-af49-4e0358ef7435",
          "length": 282,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "77b8a1ff-57e4-4d36-a63c-fc31710d53dd"
        },
        "item": {
          "id": "180b5921-fac8-4d74-bae1-070da5462d1a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "51386b7a-08f6-4e9e-8292-1e777b29ebb9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "38e1552b-48ca-4cbc-a29c-c4377f303d98",
        "cursor": {
          "ref": "00dffe48-a306-48f5-860c-020d40fd4847",
          "length": 282,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "c4825e0e-45ef-4d7b-8ac2-797e593f6906"
        },
        "item": {
          "id": "38e1552b-48ca-4cbc-a29c-c4377f303d98",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "49799a30-73f0-4d4b-bca5-7cb74f0ba852",
          "status": "OK",
          "code": 200,
          "responseTime": 805,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:200)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "ec05f4ae-e077-4564-8ee9-940b1e7397bf",
        "cursor": {
          "ref": "4615f443-a9eb-4137-80f5-f08ca755706a",
          "length": 282,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "30f6bb35-1e64-47ac-a1f4-2c5586885d35"
        },
        "item": {
          "id": "ec05f4ae-e077-4564-8ee9-940b1e7397bf",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "5f8b989a-7d24-46fc-a8e5-41c149481977",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d4688179-69c3-48bf-92a9-d19d31556b51",
        "cursor": {
          "ref": "aeaed3a9-f917-4dc2-a2a4-adbe7fce97b6",
          "length": 282,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "4c50890a-83f6-4ef8-b3ca-f8bb61467ce3"
        },
        "item": {
          "id": "d4688179-69c3-48bf-92a9-d19d31556b51",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "cc7926b0-db36-437a-9e8b-e46522867508",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9dc97156-308b-4fbb-8f36-13a0eea44c44",
        "cursor": {
          "ref": "ceb8eb44-d48c-4699-81ce-6af2fe3d08a9",
          "length": 282,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "78c1fc8e-1813-4401-9ddf-51a256395881"
        },
        "item": {
          "id": "9dc97156-308b-4fbb-8f36-13a0eea44c44",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "84069513-cfaa-464f-88e4-8053d25b8b1b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52c0a5a2-9957-4633-8a72-a375afbd62d4",
        "cursor": {
          "ref": "c8eefb56-4b41-4319-9922-89c7f107a805",
          "length": 282,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "cc44f7cd-6546-458f-981c-422690bb635a"
        },
        "item": {
          "id": "52c0a5a2-9957-4633-8a72-a375afbd62d4",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "68eb82f3-04d0-4431-8c9b-8efb1dd557a9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4e870ecc-1d2d-4c2d-bba9-aaffbcdc2762",
        "cursor": {
          "ref": "cce14da8-4f96-4828-9905-e4347629a5c5",
          "length": 282,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "d26112ac-8af9-448e-a03a-bc87bb7cfe1e"
        },
        "item": {
          "id": "4e870ecc-1d2d-4c2d-bba9-aaffbcdc2762",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "d1a38d02-ba90-47d2-a766-a0fd7926da91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "49bf9c1a-5fab-49b5-ad32-f8da122dcabd",
        "cursor": {
          "ref": "343e303f-62d6-484e-bd02-1c581877c7ce",
          "length": 282,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "4aa0b961-beea-4f5c-b576-e801c9b0213b"
        },
        "item": {
          "id": "49bf9c1a-5fab-49b5-ad32-f8da122dcabd",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "205f722e-9f9f-4b2c-a47f-a3b3b140c522",
          "status": "OK",
          "code": 200,
          "responseTime": 1206,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "ea1fd358-7f19-412f-a5a6-c31746dee317",
        "cursor": {
          "ref": "2553d955-314a-417f-8460-f4cf595f6177",
          "length": 282,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "80461112-5747-4a66-aec0-c639f7fc18aa"
        },
        "item": {
          "id": "ea1fd358-7f19-412f-a5a6-c31746dee317",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "ed7d98fa-abbc-4add-802a-7308f3aa7ac0",
          "status": "OK",
          "code": 200,
          "responseTime": 95,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "1e0e1a34-b441-44ec-ab47-45a7ad9a3bcb",
        "cursor": {
          "ref": "af51db67-3d1e-4ee2-a901-affe7c84280e",
          "length": 282,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "04ebe9c1-8bde-4279-a132-13234d30be53"
        },
        "item": {
          "id": "1e0e1a34-b441-44ec-ab47-45a7ad9a3bcb",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "d7ad6776-283f-4c31-9380-172f73b11d8f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0bcc1141-d1f7-4f25-9297-3bda516b1947",
        "cursor": {
          "ref": "b6e1431b-4a20-469e-bb6e-546cfe63eba3",
          "length": 282,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "1c82759c-8d0e-4f33-81c8-7d6c1e51aebe"
        },
        "item": {
          "id": "0bcc1141-d1f7-4f25-9297-3bda516b1947",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "f39a81f3-4947-40f3-8422-532b48f91e77",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "88508376-d4dc-4b51-aa46-8e72df14c98f",
        "cursor": {
          "ref": "f8df2dfb-6c41-4537-8c1d-73db57f716ed",
          "length": 282,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "6f41bc0a-ebfc-4af0-9246-a83c2abd4d72"
        },
        "item": {
          "id": "88508376-d4dc-4b51-aa46-8e72df14c98f",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "de2eaf99-202b-463d-a54e-c95dacced3ab",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f646ddfa-2813-4785-a8bd-0b2e4b951350",
        "cursor": {
          "ref": "98f7e24d-f8be-4ec3-9265-767d864c82e8",
          "length": 282,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "14af95d4-b217-4bbf-8a8d-52d62d074ec3"
        },
        "item": {
          "id": "f646ddfa-2813-4785-a8bd-0b2e4b951350",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "eaf6f1dc-26a4-41a5-acbd-a52400934084",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e174dd6e-628a-4a37-98b7-166216cd3129",
        "cursor": {
          "ref": "5f0b1041-83ea-4cb5-ad83-9f1cee30a44c",
          "length": 282,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "bf94ccc5-2d20-4a83-bb82-24698b01db81"
        },
        "item": {
          "id": "e174dd6e-628a-4a37-98b7-166216cd3129",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "320928fc-514e-4b07-80f8-a5a58610e019",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "2f7d26fb-b045-4a97-a65b-afa21368ecd1",
        "cursor": {
          "ref": "16c67f60-d610-4850-834c-c9b1d9ec8b3f",
          "length": 282,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "750b298a-c987-4350-a329-b76bc50bcc75"
        },
        "item": {
          "id": "2f7d26fb-b045-4a97-a65b-afa21368ecd1",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "d9c831fd-6691-430f-b9fa-25567819c6e7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "18b44b0d-01d4-48c5-8b5c-1ae899762704",
        "cursor": {
          "ref": "5c4d11fa-00b3-4afe-9128-af0d56abe690",
          "length": 282,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "26350517-bf84-480d-b201-497d10f8ddd0"
        },
        "item": {
          "id": "18b44b0d-01d4-48c5-8b5c-1ae899762704",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "f97f583a-4d2c-4c82-8944-4550550e6f22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1629cfdf-1161-45e0-a440-ac19b38cdfb8",
        "cursor": {
          "ref": "8297688f-44a9-482a-bbaa-c7a16632ec96",
          "length": 282,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "9fea9920-92e7-4871-b205-a9eb454f2c25"
        },
        "item": {
          "id": "1629cfdf-1161-45e0-a440-ac19b38cdfb8",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "b18d484c-9e65-457c-9d78-6b1b6dc5a84e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e9f079b-64ea-4f61-9f79-d740bdc470d7",
        "cursor": {
          "ref": "3f2d1bed-2e56-43b8-af27-0272edd4a1fe",
          "length": 282,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "c9010e4c-db37-4feb-bc87-3195c0f2bdeb"
        },
        "item": {
          "id": "6e9f079b-64ea-4f61-9f79-d740bdc470d7",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "b9511f93-0a8b-4da8-bcae-24735087685a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fb7cad83-f920-49a2-8b71-580541866fec",
        "cursor": {
          "ref": "02c04390-87f7-46c5-bb26-1ec6291f4b92",
          "length": 282,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "ecedb83a-a7f9-4063-ad12-9f6725059065"
        },
        "item": {
          "id": "fb7cad83-f920-49a2-8b71-580541866fec",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "f21f3e0b-af31-4f83-94cb-40d429208392",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 155
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "224281a9-4c67-491f-8411-ab4c394f2f2d",
        "cursor": {
          "ref": "c4d9f6a5-56e0-4907-90f3-027c17c0a058",
          "length": 282,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "88ed8600-b35f-4eda-be07-8afebbd6de3d"
        },
        "item": {
          "id": "224281a9-4c67-491f-8411-ab4c394f2f2d",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "92f70d6e-bf75-4753-a0ef-a46868412fbc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1aecf66a-21f1-4e8f-9a11-7dedb553331c",
        "cursor": {
          "ref": "b1ace64a-df40-490c-92d6-6560105667ec",
          "length": 282,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "6588bc45-3e01-482f-a05d-305e00f1b3a4"
        },
        "item": {
          "id": "1aecf66a-21f1-4e8f-9a11-7dedb553331c",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "13ca9b6f-400b-4c94-82af-571f30d4831c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 114,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53749b63-c671-4ab7-8f30-4ad637da08b1",
        "cursor": {
          "ref": "fd670901-0ec7-4cee-8824-f52ea1bfd3c1",
          "length": 282,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "8180f58f-2389-4ec6-a913-e8668a4e288a"
        },
        "item": {
          "id": "53749b63-c671-4ab7-8f30-4ad637da08b1",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "77f17902-af2f-48cc-aa12-c27aba06e63b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "399041c5-cf0f-4ec9-88fc-2186220537ae",
        "cursor": {
          "ref": "02eb630f-9abb-4236-a866-8923ea93d2e9",
          "length": 282,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "c16c69d8-dbb3-4033-8bae-6c2401a57917"
        },
        "item": {
          "id": "399041c5-cf0f-4ec9-88fc-2186220537ae",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "7fc052f6-46aa-4ccb-8994-7285fbe5cd42",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8c49b733-a3d1-4836-b56a-8028d54db011",
        "cursor": {
          "ref": "cfaafda6-3f28-435a-9f3e-126190cb5ab0",
          "length": 282,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "8b59b78f-d030-4a17-b10e-6ace4ee2ba65"
        },
        "item": {
          "id": "8c49b733-a3d1-4836-b56a-8028d54db011",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "2fc60e8d-9f57-4c4f-9b2c-b79306c94690",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b8f37d98-9498-42bd-b85a-4ace8900bd77",
        "cursor": {
          "ref": "cc9d3825-e635-4e09-8e9a-f9ddeb320566",
          "length": 282,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "74c6612c-a92f-47c8-91e3-9dd2b98dc618"
        },
        "item": {
          "id": "b8f37d98-9498-42bd-b85a-4ace8900bd77",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "49a7d499-6ce5-405b-b878-340861661a99",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "aada4c25-09b7-4236-bbc3-30ddae089175",
        "cursor": {
          "ref": "db9405ef-d6a5-430b-8e7e-cc827bf0e7a4",
          "length": 282,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "7cfa2387-1d7c-463a-be29-07dfad8d0ac2"
        },
        "item": {
          "id": "aada4c25-09b7-4236-bbc3-30ddae089175",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "0846dc92-6274-4935-994f-487e0ec42e8b",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:224)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "f12c2a24-4c46-4388-81c4-07723ad2b554",
        "cursor": {
          "ref": "e17c121e-d233-4331-8ebb-ac61f23494c0",
          "length": 282,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "cbaad962-8dd2-4d35-8e17-d56e099a7901"
        },
        "item": {
          "id": "f12c2a24-4c46-4388-81c4-07723ad2b554",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "c25f4f55-d641-466a-9c16-2f5dd32184ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 99,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "76d4ca91-adb9-4037-9389-5988fb5cbd35",
        "cursor": {
          "ref": "192c2ac3-a25d-4382-9e0d-9308ee2b0e0b",
          "length": 282,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "d6415834-bad3-41a2-8b34-c01d3c9f6a40"
        },
        "item": {
          "id": "76d4ca91-adb9-4037-9389-5988fb5cbd35",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "e485c1c3-47e9-4027-9b83-d4f0a74bb3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "f99b9633-172b-48d2-9bc2-f8f4fa312975",
        "cursor": {
          "ref": "dc07381b-fe7c-411e-b2cc-68e85d34b45f",
          "length": 282,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "a87dc679-f697-4e90-8713-6be6cf56c2d1"
        },
        "item": {
          "id": "f99b9633-172b-48d2-9bc2-f8f4fa312975",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "6b746c02-dbd0-4358-9e52-73ade5a23512",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "739c7711-f221-4635-9a4d-ae8bc2e2f473",
        "cursor": {
          "ref": "b6d644d5-b260-46ec-a6f1-23274f61fc84",
          "length": 282,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "70a1d971-4a5d-4928-bd2c-b095babb87b9"
        },
        "item": {
          "id": "739c7711-f221-4635-9a4d-ae8bc2e2f473",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "05cecf23-04df-4b54-b1fd-580a2f317177",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:228)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "2ce270d4-f859-47a7-a383-56b8da8d07ba",
        "cursor": {
          "ref": "286459b5-9187-43d5-aa3b-1fae01b0b855",
          "length": 282,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "146ba5f1-5930-4f87-87b8-6b653b293b16"
        },
        "item": {
          "id": "2ce270d4-f859-47a7-a383-56b8da8d07ba",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "4fcbd866-204e-45a3-abd2-deb24dbfb98a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf16613e-2515-4883-9510-a97d2438a26b",
        "cursor": {
          "ref": "58f8eff2-7fcd-42b4-b10e-3fc2b8413431",
          "length": 282,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "98eff50c-c318-46cb-89b5-2592baefa347"
        },
        "item": {
          "id": "cf16613e-2515-4883-9510-a97d2438a26b",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "19ae6bd1-4621-4a9a-86ff-b7dce1e645d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 129
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fce286b9-28d9-44fe-8ae2-e05d8f538c1d",
        "cursor": {
          "ref": "559990a2-62a8-4bf9-97ea-09cd20bd0927",
          "length": 282,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "f19c38bc-f726-4db6-a7db-d30af3d0d254"
        },
        "item": {
          "id": "fce286b9-28d9-44fe-8ae2-e05d8f538c1d",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "02907e54-70bc-48a6-a119-5eccbb4c8345",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "dba2e899-1f23-40fe-b4af-502f3faeda38",
        "cursor": {
          "ref": "398836e5-d68c-4532-9946-7af99ab4ef2d",
          "length": 282,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "1050a7df-ae65-48e3-acb8-7ace5d4b8545"
        },
        "item": {
          "id": "dba2e899-1f23-40fe-b4af-502f3faeda38",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "f0cadcb0-8623-443f-9b24-890ad993f455",
          "status": "OK",
          "code": 200,
          "responseTime": 842,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:232)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "1f91c660-03bc-49f5-b705-dcfec5961657",
        "cursor": {
          "ref": "8edf96a5-0819-4952-ada2-6e00f12ba673",
          "length": 282,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "db1e3583-92e6-4952-b188-91c024b6a15a"
        },
        "item": {
          "id": "1f91c660-03bc-49f5-b705-dcfec5961657",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "41ce4f7e-710a-4dfb-ada2-d57a9c07cf73",
          "status": "OK",
          "code": 200,
          "responseTime": 105,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:233)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "f4b38f1e-bef7-415e-9a48-1fbf920d06c8",
        "cursor": {
          "ref": "263074d3-991a-4a2d-b172-e70f70ccb073",
          "length": 282,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "4f12ed5b-6d1e-49cb-8c97-35f03c179e43"
        },
        "item": {
          "id": "f4b38f1e-bef7-415e-9a48-1fbf920d06c8",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "f65e9c9d-2962-4066-98cb-fbf4483bd17b",
          "status": "OK",
          "code": 200,
          "responseTime": 840,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:234)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "d99086bd-39e9-42d5-b42e-03fdeb7c2a55",
        "cursor": {
          "ref": "1768631c-bf77-498a-8944-d65b55eb3268",
          "length": 282,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "783fd0c5-75c8-4b53-b8d2-2ffe40eac2e3"
        },
        "item": {
          "id": "d99086bd-39e9-42d5-b42e-03fdeb7c2a55",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "da67fc8f-8385-4253-9603-90d0e9e1eaa1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 117
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "deacdffb-1578-4200-8583-2efafad05b65",
        "cursor": {
          "ref": "30f512c9-cded-4a6b-9291-0f007b3f9fe7",
          "length": 282,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "d4b76332-a51a-4c2c-a6b7-676e4726800c"
        },
        "item": {
          "id": "deacdffb-1578-4200-8583-2efafad05b65",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "532c507b-a7ba-4e34-ae93-76781d3f6add",
          "status": "OK",
          "code": 200,
          "responseTime": 831,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:236)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "e3acba98-512a-46e1-9733-f6c4a4c8315e",
        "cursor": {
          "ref": "ed94af5f-6c28-4f6d-b07d-a6859fee71ed",
          "length": 282,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "983d52b6-2b88-4e4f-ba8e-49d14077a8c7"
        },
        "item": {
          "id": "e3acba98-512a-46e1-9733-f6c4a4c8315e",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "e0ce2422-f508-4e70-aea5-b36cd87812be",
          "status": "OK",
          "code": 200,
          "responseTime": 909,
          "responseSize": 147
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:237)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "a86ea121-01f6-4490-a88d-0a41f479aa3a",
        "cursor": {
          "ref": "642e6d5b-5a36-4835-9f5e-aec1644626c9",
          "length": 282,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "37da083a-f2b5-4b65-b771-8354da7a1ad5"
        },
        "item": {
          "id": "a86ea121-01f6-4490-a88d-0a41f479aa3a",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "33f6cec3-ab6a-48ca-8e75-a9a28c2ad640",
          "status": "OK",
          "code": 200,
          "responseTime": 1062,
          "responseSize": 133
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:238)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "8c355892-5a26-4cd0-a9e2-3c89d395bf58",
        "cursor": {
          "ref": "35f9d1f5-e7f0-4d94-b645-ab2233c9317d",
          "length": 282,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "a21409b5-123b-4536-8f64-710ec7d2691f"
        },
        "item": {
          "id": "8c355892-5a26-4cd0-a9e2-3c89d395bf58",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "36727f0e-6c47-407f-ae74-be39a8f36c4d",
          "status": "OK",
          "code": 200,
          "responseTime": 93,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:239)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "07000f18-fa03-423d-a847-0170ae3b0287",
        "cursor": {
          "ref": "3220ce0c-c876-4398-91f6-c16ad03cf142",
          "length": 282,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "de7bd00b-dd47-4e5f-931f-17118352d28a"
        },
        "item": {
          "id": "07000f18-fa03-423d-a847-0170ae3b0287",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "a055ca03-64d3-49ec-8d2b-b6f3346fef74",
          "status": "OK",
          "code": 200,
          "responseTime": 809,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:240)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "c4fd835d-3292-4b85-8e82-7437e3ffdc33",
        "cursor": {
          "ref": "99cf342d-2d5e-4206-be59-303758c8c5da",
          "length": 282,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "b813824c-e7f3-4b73-aec3-de40c174ad63"
        },
        "item": {
          "id": "c4fd835d-3292-4b85-8e82-7437e3ffdc33",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "acb0a7b3-3120-4f25-a308-09b0e9162cfa",
          "status": "OK",
          "code": 200,
          "responseTime": 114,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:241)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "6117f6ff-631b-4c24-adf3-a0c100323710",
        "cursor": {
          "ref": "80c2d181-620a-4035-af3c-6749589fc085",
          "length": 282,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "1138e319-0e2c-4e51-8569-36199041c7a0"
        },
        "item": {
          "id": "6117f6ff-631b-4c24-adf3-a0c100323710",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "c1c39e8d-0406-429e-8ea2-81349bb20dd1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 105
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d0ec2bc-1104-4500-854c-61be09ae1808",
        "cursor": {
          "ref": "d146d76b-160c-4bc7-857a-a915ab0d4d49",
          "length": 282,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "2730ceb0-baa5-4700-80a0-072b0a6e4b49"
        },
        "item": {
          "id": "7d0ec2bc-1104-4500-854c-61be09ae1808",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "3158ab70-d156-4a91-908c-410a0d1be13d",
          "status": "OK",
          "code": 200,
          "responseTime": 98,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:243)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "43392a52-9788-4f19-ba23-7e1975bdcd88",
        "cursor": {
          "ref": "2287d1b0-3dc9-401e-887e-653bf42af360",
          "length": 282,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "660dc17a-6634-45b8-b982-40fa4beabd7e"
        },
        "item": {
          "id": "43392a52-9788-4f19-ba23-7e1975bdcd88",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "eb991aee-36ec-4f4e-abf1-349e8a1b2c8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "051d3b31-9d86-4cc0-a1b7-6affe46eaebf",
        "cursor": {
          "ref": "1107a2e7-85ab-4316-98e1-8664fc7b2fdb",
          "length": 282,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "8a495776-bdd4-4e0c-b849-e6bf4e4fc9f5"
        },
        "item": {
          "id": "051d3b31-9d86-4cc0-a1b7-6affe46eaebf",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "e9c16592-9ad7-4ce2-8a76-a12a65fd5e6b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8a7ec02c-df9a-4d5a-856c-3faa3411f506",
        "cursor": {
          "ref": "098c4dbb-520f-4235-ba4d-8ecd8414c6ce",
          "length": 282,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "e84d381c-18c9-4eb2-a589-409877245d45"
        },
        "item": {
          "id": "8a7ec02c-df9a-4d5a-856c-3faa3411f506",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "ed1710d6-768c-4a61-bee3-3c983baa7cc3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 183
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "45ceceec-937d-4df6-9b6d-da56c9d5b4ce",
        "cursor": {
          "ref": "65652fd5-35c5-40a2-b309-3b9c1ee01c51",
          "length": 282,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "da7ac7bb-2d08-4537-8521-06e1d931f75c"
        },
        "item": {
          "id": "45ceceec-937d-4df6-9b6d-da56c9d5b4ce",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "51b46405-1897-4373-8523-cbef15577496",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 132
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "97ae0674-b416-403b-ab8a-5b74bce54521",
        "cursor": {
          "ref": "abf7a17a-cfe1-4017-8145-ebbb6b31b868",
          "length": 282,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "645532ef-e573-498e-83d0-4f1f2ea9c43e"
        },
        "item": {
          "id": "97ae0674-b416-403b-ab8a-5b74bce54521",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "9e5b4784-5869-4071-a737-559e09b6b7ca",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4648b53f-bcaa-465a-a538-878cfc8a6e27",
        "cursor": {
          "ref": "5af147eb-eabe-4a4c-a227-eb569614aea7",
          "length": 282,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "effb018b-bf97-405b-ae32-584ad579d1fa"
        },
        "item": {
          "id": "4648b53f-bcaa-465a-a538-878cfc8a6e27",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "bc3c55d8-03a4-4e4f-b936-737769a92a83",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2673e86-2d36-49fc-aea0-da56a5574704",
        "cursor": {
          "ref": "6b7a32f9-e122-45b1-9568-f6dcb02c5759",
          "length": 282,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "080a77da-d96e-4cf8-8683-de5149903904"
        },
        "item": {
          "id": "b2673e86-2d36-49fc-aea0-da56a5574704",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "af0440ba-0bc9-4b22-aa2a-12b23d4a81b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "cf9cb81d-543f-48a1-bfae-41374dd984dc",
        "cursor": {
          "ref": "31ad7507-dffd-4305-86b2-dc40d72d8c8e",
          "length": 282,
          "cycles": 1,
          "position": 250,
          "iteration": 0,
          "httpRequestId": "5d2b4f28-4122-45a0-8a02-7909ebc5615d"
        },
        "item": {
          "id": "cf9cb81d-543f-48a1-bfae-41374dd984dc",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "fcfcfcf7-7764-4e86-b4c7-d3940d26ec82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "12d1c85d-b50d-4fea-a426-31dfbf6ea38f",
        "cursor": {
          "ref": "5af61265-6449-4890-9ee6-794f32c17b17",
          "length": 282,
          "cycles": 1,
          "position": 251,
          "iteration": 0,
          "httpRequestId": "dae29134-5c85-4cf6-acff-22b85a8fc8fe"
        },
        "item": {
          "id": "12d1c85d-b50d-4fea-a426-31dfbf6ea38f",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "833bb1f8-67d7-4d28-b79c-092f32b770c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 579
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "8626afc0-5b84-4984-b268-2a396220d6b4",
        "cursor": {
          "ref": "218e4dc1-c4cd-4eef-a01d-36deacf889b1",
          "length": 282,
          "cycles": 1,
          "position": 252,
          "iteration": 0,
          "httpRequestId": "87ea0ca7-5837-43d1-8ad1-77e0092f5e4f"
        },
        "item": {
          "id": "8626afc0-5b84-4984-b268-2a396220d6b4",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "8c567a40-c70b-4e65-a0da-801a08b4b6c2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 106,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d93366d0-86fa-46dc-9bd7-c35a21005860",
        "cursor": {
          "ref": "ac7ac73a-b252-44fd-9742-c6908a97d656",
          "length": 282,
          "cycles": 1,
          "position": 253,
          "iteration": 0,
          "httpRequestId": "253e21b8-a000-49f5-b18e-79799fb40fbb"
        },
        "item": {
          "id": "d93366d0-86fa-46dc-9bd7-c35a21005860",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "15719654-a0c0-469a-9f3a-7d6900c1d733",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 101,
          "responseSize": 523
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "e3ad9e1f-97a6-4202-8731-0c1737c6b0c1",
        "cursor": {
          "ref": "d27ddf5a-5b31-4af7-89be-cc89a3f503cb",
          "length": 282,
          "cycles": 1,
          "position": 254,
          "iteration": 0,
          "httpRequestId": "f4680926-eeef-4ccf-9e93-800655cca0d8"
        },
        "item": {
          "id": "e3ad9e1f-97a6-4202-8731-0c1737c6b0c1",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "964cdede-10d5-4f5e-b9b4-1f476c815ec4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c501e5d2-493b-4a26-9ebe-f708d52f18b2",
        "cursor": {
          "ref": "4eacb922-f5bc-4d11-a0d6-ce22750bfb57",
          "length": 282,
          "cycles": 1,
          "position": 255,
          "iteration": 0,
          "httpRequestId": "895fc3ee-14f4-4841-8305-22d5f2784182"
        },
        "item": {
          "id": "c501e5d2-493b-4a26-9ebe-f708d52f18b2",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "1f663f61-0a78-44fb-8075-673a7b00686b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "13442cd4-0aec-4577-90ed-357ce37a3f6f",
        "cursor": {
          "ref": "6b08a615-13c1-4cab-b7a6-602f921f6867",
          "length": 282,
          "cycles": 1,
          "position": 256,
          "iteration": 0,
          "httpRequestId": "4060622f-48c7-4455-90d0-26de8dd8708a"
        },
        "item": {
          "id": "13442cd4-0aec-4577-90ed-357ce37a3f6f",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "036ff5c6-83f0-40ce-b5fb-978f4bb15bfa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "00f17fa5-9cab-434b-933a-46e32210b210",
        "cursor": {
          "ref": "fcd716e7-d595-4eee-8b97-88aae5e97c3a",
          "length": 282,
          "cycles": 1,
          "position": 257,
          "iteration": 0,
          "httpRequestId": "ed04ad99-14e1-4db1-8a3d-2bda69e69c6a"
        },
        "item": {
          "id": "00f17fa5-9cab-434b-933a-46e32210b210",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "187d6349-6e74-4abc-a2c1-fdac14ed67c4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 110,
          "responseSize": 189
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "4b5f727f-0cce-4dfe-bf9e-a9a328dbf327",
        "cursor": {
          "ref": "19401ab2-c575-48a5-96c5-bd6f82784057",
          "length": 282,
          "cycles": 1,
          "position": 258,
          "iteration": 0,
          "httpRequestId": "59c5f685-5d59-4f88-94e4-226dda9a0c22"
        },
        "item": {
          "id": "4b5f727f-0cce-4dfe-bf9e-a9a328dbf327",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "6cf92644-b513-42db-82f6-2114d99f3f80",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 103,
          "responseSize": 130
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fc276196-3a3a-4e9a-939b-f0d70dc79df0",
        "cursor": {
          "ref": "e05435b1-ffb7-4ac4-929e-4cfd2b6b3afd",
          "length": 282,
          "cycles": 1,
          "position": 259,
          "iteration": 0,
          "httpRequestId": "ddf574de-8e65-4469-a942-341383a54be0"
        },
        "item": {
          "id": "fc276196-3a3a-4e9a-939b-f0d70dc79df0",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "c90dd2c7-50c4-49e5-b16a-2ac2fa390b8a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "efc5cca3-a24f-4224-b42e-7045c9c7d22b",
        "cursor": {
          "ref": "26d4af39-abd9-49f7-8f8d-018d817faeba",
          "length": 282,
          "cycles": 1,
          "position": 260,
          "iteration": 0,
          "httpRequestId": "fa33e3f4-4fd0-4d85-a550-1d36a04adb45"
        },
        "item": {
          "id": "efc5cca3-a24f-4224-b42e-7045c9c7d22b",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "5b84ea12-70f7-4909-b06e-9fc3eac8e5b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "c5b92f58-91c2-4e77-b3e5-5fd9c45bd99a",
        "cursor": {
          "ref": "c5c931af-2e9d-48b2-9230-adcb5157755f",
          "length": 282,
          "cycles": 1,
          "position": 261,
          "iteration": 0,
          "httpRequestId": "ec7e35f4-0672-4147-bf51-9adee3286fd9"
        },
        "item": {
          "id": "c5b92f58-91c2-4e77-b3e5-5fd9c45bd99a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "8f47d4bb-9232-45b4-8d10-f7c857674971",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "64965c0a-37f1-402b-9eef-14289c4f746c",
        "cursor": {
          "ref": "4ac0ff10-c9c9-4d9e-8b9c-fcd525aa45b3",
          "length": 282,
          "cycles": 1,
          "position": 262,
          "iteration": 0,
          "httpRequestId": "a39c9774-950c-4b81-9233-3e1a02283891"
        },
        "item": {
          "id": "64965c0a-37f1-402b-9eef-14289c4f746c",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ea5ab3ec-dde3-4e19-b7b3-f062ea10ee19",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:263)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:263)"
            }
          }
        ]
      },
      {
        "id": "f8596f90-e28a-4049-93c5-6f8fe608833f",
        "cursor": {
          "ref": "edb4bf2d-09c1-4600-9e31-7a34fa3d8dc6",
          "length": 282,
          "cycles": 1,
          "position": 263,
          "iteration": 0,
          "httpRequestId": "78a3b11b-38d7-4b61-bb69-6bd7a0427076"
        },
        "item": {
          "id": "f8596f90-e28a-4049-93c5-6f8fe608833f",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "5c619bf8-7c17-4688-8c40-cf915f4b2eb3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 121
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "eb6d3208-5eb6-46bc-a753-8fbd89d29cb4",
        "cursor": {
          "ref": "72796804-3f08-47dd-a871-8815b3e8b16c",
          "length": 282,
          "cycles": 1,
          "position": 264,
          "iteration": 0,
          "httpRequestId": "c365a4d3-ee71-4222-a286-3d88fccd7e56"
        },
        "item": {
          "id": "eb6d3208-5eb6-46bc-a753-8fbd89d29cb4",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "10ebc6b6-e4c6-484c-972d-3da71303e93c",
          "status": "OK",
          "code": 200,
          "responseTime": 99,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:265)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:265)"
            }
          }
        ]
      },
      {
        "id": "2feacd4e-b004-4ab3-9f9c-0cb6291851ec",
        "cursor": {
          "ref": "b2d4b25d-c90f-43fb-a7d4-fb271cd3d1e7",
          "length": 282,
          "cycles": 1,
          "position": 265,
          "iteration": 0,
          "httpRequestId": "282960f8-8c6d-4d3b-98cb-47f1dbda1202"
        },
        "item": {
          "id": "2feacd4e-b004-4ab3-9f9c-0cb6291851ec",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "6b92ae43-1e4e-4973-bbed-a42c6c82311f",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:266)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:266)"
            }
          }
        ]
      },
      {
        "id": "518cf4e7-d450-49c2-af61-12052c22fb3b",
        "cursor": {
          "ref": "1be1b8c3-39fc-4249-8d76-7fbc30dc8c6f",
          "length": 282,
          "cycles": 1,
          "position": 266,
          "iteration": 0,
          "httpRequestId": "3a4b68c8-9f0a-48fe-9f1c-4e2f83ee4d8d"
        },
        "item": {
          "id": "518cf4e7-d450-49c2-af61-12052c22fb3b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "e58bc5f9-9057-4112-8b0d-fd7148cef011",
          "status": "OK",
          "code": 200,
          "responseTime": 101,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:267)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:267)"
            }
          }
        ]
      },
      {
        "id": "fc2b9685-8273-47fd-a0bb-83b6ea37cfc9",
        "cursor": {
          "ref": "1b3b234a-efbf-41c0-91eb-823851c71f0e",
          "length": 282,
          "cycles": 1,
          "position": 267,
          "iteration": 0,
          "httpRequestId": "47a597c2-bad7-48bf-bdd4-514a22bff10a"
        },
        "item": {
          "id": "fc2b9685-8273-47fd-a0bb-83b6ea37cfc9",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "1637b1b0-8dde-439f-b8f6-75c523269406",
          "status": "OK",
          "code": 200,
          "responseTime": 97,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:268)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:268)"
            }
          }
        ]
      },
      {
        "id": "762516d0-3f2e-4f7d-9a2f-740c3259fb76",
        "cursor": {
          "ref": "eb2e6cc8-9357-4f82-b0dc-f34b8230c60f",
          "length": 282,
          "cycles": 1,
          "position": 268,
          "iteration": 0,
          "httpRequestId": "ddd599e2-9deb-4d6d-87e3-985b5515286f"
        },
        "item": {
          "id": "762516d0-3f2e-4f7d-9a2f-740c3259fb76",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "a2683c03-311d-41fb-aae6-9a3f4f46bf62",
          "status": "OK",
          "code": 200,
          "responseTime": 96,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:269)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:269)"
            }
          }
        ]
      },
      {
        "id": "c4e2aad2-d246-4695-a51b-77a4acc5105a",
        "cursor": {
          "ref": "06d8d242-35ad-42fa-80e2-7a3f5ae9f636",
          "length": 282,
          "cycles": 1,
          "position": 269,
          "iteration": 0,
          "httpRequestId": "d0109e8d-70f1-456a-a3c8-c5fac90570d0"
        },
        "item": {
          "id": "c4e2aad2-d246-4695-a51b-77a4acc5105a",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "c5f1db8d-1ff1-4836-8e20-4463bada674b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 97,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "53978d4a-71b5-41ce-9d9b-ffc40e9989ca",
        "cursor": {
          "ref": "0b148790-000a-4d62-866c-2ae267a1575d",
          "length": 282,
          "cycles": 1,
          "position": 270,
          "iteration": 0,
          "httpRequestId": "73524c9e-8d76-45a8-b528-5fe626158768"
        },
        "item": {
          "id": "53978d4a-71b5-41ce-9d9b-ffc40e9989ca",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "79bea352-0949-45a9-b2ca-c4f6e685356f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "15f51f74-3fa9-4f24-8f41-62bd0e6a8367",
        "cursor": {
          "ref": "194c403f-21f8-4250-8966-48053c2e23a2",
          "length": 282,
          "cycles": 1,
          "position": 271,
          "iteration": 0,
          "httpRequestId": "9527549c-c6fd-4f3a-a15e-9488f7798324"
        },
        "item": {
          "id": "15f51f74-3fa9-4f24-8f41-62bd0e6a8367",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "b539379b-a407-4208-b9c0-a0fb4ed1347b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "896f5736-74dd-47fc-aa29-abf9540bfb98",
        "cursor": {
          "ref": "ce351f63-f171-4803-a2fe-b3fffe68659d",
          "length": 282,
          "cycles": 1,
          "position": 272,
          "iteration": 0,
          "httpRequestId": "fea9e834-38a6-40df-a686-d2cf05c775de"
        },
        "item": {
          "id": "896f5736-74dd-47fc-aa29-abf9540bfb98",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "cc7a2a64-5096-4165-a1f9-93c2ab3fc4a0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 95,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "004f192d-1f60-4beb-b12d-1f19fa0aa801",
        "cursor": {
          "ref": "04cd2911-1abc-408f-8de7-4e4beb7ef09e",
          "length": 282,
          "cycles": 1,
          "position": 273,
          "iteration": 0,
          "httpRequestId": "83d4962c-a5de-43c8-9c67-abc9e6f7dce4"
        },
        "item": {
          "id": "004f192d-1f60-4beb-b12d-1f19fa0aa801",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "5c6a4fce-9e9a-4670-872e-70e6747b071e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 105,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "83f33baa-867e-45f7-856b-9d73c74dfd5c",
        "cursor": {
          "ref": "422b5f3b-843a-4882-8e2f-4eb621d0017e",
          "length": 282,
          "cycles": 1,
          "position": 274,
          "iteration": 0,
          "httpRequestId": "5d322699-ee4d-4f9e-8b7d-c94911296d18"
        },
        "item": {
          "id": "83f33baa-867e-45f7-856b-9d73c74dfd5c",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "a7356388-6fbe-4fbb-a46e-eddcf3b77950",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 102,
          "responseSize": 167
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "d9e88775-e3e4-45e2-b3dc-a1e0ddc8bb77",
        "cursor": {
          "ref": "cde56cee-40b9-4dd4-8e53-e11b26d6d958",
          "length": 282,
          "cycles": 1,
          "position": 275,
          "iteration": 0,
          "httpRequestId": "06619a67-2a12-436f-92cc-6777cade1741"
        },
        "item": {
          "id": "d9e88775-e3e4-45e2-b3dc-a1e0ddc8bb77",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "6fdc5974-5eef-4f1f-8981-214059467395",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1549dff0-768e-4845-bcb5-1eafaf14d8ed",
        "cursor": {
          "ref": "285ecc03-627f-4210-b894-326109c53718",
          "length": 282,
          "cycles": 1,
          "position": 276,
          "iteration": 0,
          "httpRequestId": "895a30c9-0706-4030-b7ea-c6e822fef60b"
        },
        "item": {
          "id": "1549dff0-768e-4845-bcb5-1eafaf14d8ed",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "448a7f3e-5948-4f64-988e-283f0d38037f",
          "status": "OK",
          "code": 200,
          "responseTime": 111,
          "responseSize": 53
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false
          }
        ]
      },
      {
        "id": "f6b052eb-3357-42f5-8ae1-220fcf55ea2b",
        "cursor": {
          "ref": "8a9bda63-118f-4d6b-ba4c-01e2c67f7d64",
          "length": 282,
          "cycles": 1,
          "position": 277,
          "iteration": 0,
          "httpRequestId": "d34e6442-b2ce-4b9a-8a46-fd2275fb0f16"
        },
        "item": {
          "id": "f6b052eb-3357-42f5-8ae1-220fcf55ea2b",
          "name": "credentials_verify"
        },
        "response": {
          "id": "a01c5d8b-9dd0-4b4c-8a19-6affdb68278e",
          "status": "OK",
          "code": 200,
          "responseTime": 929,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "28d6d5c0-06ac-4475-9516-20c644017450",
        "cursor": {
          "ref": "1a09c289-80d5-48d4-8a02-ba3e34b13821",
          "length": 282,
          "cycles": 1,
          "position": 278,
          "iteration": 0,
          "httpRequestId": "0b555cea-e314-49d9-9f30-248f89ebfae7"
        },
        "item": {
          "id": "28d6d5c0-06ac-4475-9516-20c644017450",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "db81f4a2-b9ae-45ad-a131-741d6993724a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 200",
              "message": "expected response to have status code 200 but got 400",
              "stack": "AssertionError: expected response to have status code 200 but got 400\n   at Object.eval sandbox-script.js:1:279)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verified'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verified'\n   at Object.eval sandbox-script.js:2:279)"
            }
          },
          {
            "assertion": "response verified is true",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is true",
              "message": "expected undefined to be true",
              "stack": "AssertionError: expected undefined to be true\n   at Object.eval sandbox-script.js:3:279)"
            }
          }
        ]
      },
      {
        "id": "738f47dc-369e-44f5-b871-3dc4fa2a3e59",
        "cursor": {
          "ref": "caec089b-d046-4311-93e9-51393d78994b",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "046b023d-cf35-4241-a8e5-85bd520868c6"
        },
        "item": {
          "id": "738f47dc-369e-44f5-b871-3dc4fa2a3e59",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6f3d1451-751b-412b-b090-f20f94056a23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "738f47dc-369e-44f5-b871-3dc4fa2a3e59",
        "cursor": {
          "ref": "caec089b-d046-4311-93e9-51393d78994b",
          "length": 282,
          "cycles": 1,
          "position": 279,
          "iteration": 0,
          "httpRequestId": "046b023d-cf35-4241-a8e5-85bd520868c6"
        },
        "item": {
          "id": "738f47dc-369e-44f5-b871-3dc4fa2a3e59",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "6f3d1451-751b-412b-b090-f20f94056a23",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "a32d43bf-9fc3-4cb7-a2fb-9cf17d0ef6a1",
        "cursor": {
          "ref": "fa798101-0b92-42c4-b749-de7b29d6db73",
          "length": 282,
          "cycles": 1,
          "position": 280,
          "iteration": 0,
          "httpRequestId": "2d363e9a-b4b1-4772-b8ab-6200a0fc3352"
        },
        "item": {
          "id": "a32d43bf-9fc3-4cb7-a2fb-9cf17d0ef6a1",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "eaca5e8e-cbf1-4117-91a4-8dd7655d3e43",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 77,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7d634da7-23a0-4cd6-b717-3d1b9a7f6084",
        "cursor": {
          "ref": "4975f088-4286-4682-a402-fcdc7cc6ca4a",
          "length": 282,
          "cycles": 1,
          "position": 281,
          "iteration": 0,
          "httpRequestId": "f5aa4d94-364c-4084-bf22-26ecb42bb1b1"
        },
        "item": {
          "id": "7d634da7-23a0-4cd6-b717-3d1b9a7f6084",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "0ecee501-ed2a-42e3-92b2-f77f18302974",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 76,
          "responseSize": 47
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}