{
  "collection": {
    "info": {
      "_postman_id": "0b8a4a7f-f952-4403-a9a4-909b37b8fa24",
      "name": "Conformance Suite",
      "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
    },
    "item": [
      {
        "id": "77e75426-d535-41a7-88ce-750a1aae5abc",
        "name": "Clear Cache",
        "item": [
          {
            "id": "b7d67984-6a73-4bb7-99ca-7c95a37d1b0e",
            "name": "Clear Token Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "1fb96c35-c4e1-4de1-84cc-08f3d4d8a41a",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"tokenCache\");",
                    ""
                  ],
                  "_lastExecutionId": "9a85b039-98a3-45ae-81a9-389fc81a11d6"
                }
              }
            ]
          },
          {
            "id": "18012a41-623b-4041-aed2-190940b31dfa",
            "name": "Clear DID Web Cache",
            "request": {
              "url": {
                "host": [
                  "www",
                  "example",
                  "com"
                ],
                "query": [],
                "variable": []
              },
              "method": "HEAD"
            },
            "response": [],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "84941346-e27f-4371-976b-6e282efaea9d",
                  "type": "text/javascript",
                  "exec": [
                    "pm.globals.unset(\"didWebCache\");",
                    ""
                  ],
                  "_lastExecutionId": "047d4037-275e-45bb-8656-3b2179792518"
                }
              }
            ]
          }
        ],
        "event": []
      },
      {
        "id": "b2adafb3-4abc-47b0-8039-a55a787e0ca4",
        "name": "Discovery - API Configuration",
        "item": [
          {
            "id": "5a7c6004-b672-4a72-ae05-06ef575d530b",
            "name": "Positive Testing",
            "item": [
              {
                "id": "5873d8b6-888b-4dc3-aa81-1bf9a80b18ed",
                "name": "did_json",
                "request": {
                  "url": {
                    "host": [
                      "{{did_web_endpoint}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "2118d479-bc70-4bb1-b76c-c901769dc4fb",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200ApiConfiguration\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "1ce1a98b-ed63-477d-81d5-0367f75b3b01"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "73072170-d786-4370-a122-ac46d9d7faa0",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "93128459-e431-4b88-b133-0439494aae90"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "ae2c6469-2e47-47cc-9414-4441a1c1592a",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "3764415d-055f-434b-99ee-6681ccbac3a8"
                }
              }
            ]
          }
        ],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "61fcd1a8-c40a-4711-9943-af1e0ecc751c",
              "type": "text/javascript",
              "exec": [
                "// Discovery requires a multi-tenant aware did web endpoint",
                "const did_web = pm.environment.get(\"ORGANIZATION_DID_WEB\");",
                "const did_web_endpoint = utils(pm).convertDidWebToEndpoint(did_web);",
                "pm.variables.set('did_web_endpoint', did_web_endpoint);",
                ""
              ],
              "_lastExecutionId": "c8bd41b1-ec93-4ff2-bcb5-626dc6c6ad7b"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "bf0108b3-959f-48b0-9a8f-8c69a0f6f3c6",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "3fd9127e-e2f2-4cb8-b3e5-f7661f070cdf"
            }
          }
        ]
      },
      {
        "id": "34333721-7672-4dc5-8d6f-9521a18f9854",
        "name": "Identifiers - Resolve",
        "item": [
          {
            "id": "700560e5-ccfa-4e2e-8afa-e52a93a383ef",
            "name": "Negative Testing",
            "item": [
              {
                "id": "ea9fb8f2-a425-4002-97c7-b9b04c7dc57f",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "23b51dec-ef2b-4bef-8a86-d7a9389d7adf",
                    "name": "did:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "invalid_did"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6ebb0fff-420a-4d56-a2e0-2125e81d38c0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400Identifiers\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a480814d-e950-40e8-91f0-1b38a8f763e7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1bbeb0ac-c7d3-4839-947d-132d1d6c1111",
                    "name": "did:not_found:did_web",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "did:web:example.com"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ce75e2c-bffc-4f22-8d1f-e7ad8603bfa1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "5dd94997-1066-48df-a1cc-eea01880c22a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86919c62-89c2-4dc6-95f0-5323815a261b",
                    "name": "did:not_found:urn",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "urn:uuid:{{$randomUUID}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "GET"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "52a77e47-cac2-4c2f-b04a-df102a538335",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 404\", function () {",
                            " pm.response.to.have.status(404);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema404\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c0bf4d91-95d9-4fa6-839f-e86ccb76ca9e"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "faad6f8d-0951-45e7-a08d-8c458005d156",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "569820c9-8f53-4cf7-8f1d-50e42e0187fa",
                    "name": "identifiers:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "identifiers",
                          "{{ORGANIZATION_DID_WEB}}"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "GET",
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b4021692-fd08-4041-83a6-202095c0c312",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "529f9b58-fab8-4002-92d5-656d7c6ed5eb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "99e358f5-9c82-486b-946d-8bb508d67273",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2669cb9f-fd48-4b55-b7d4-c4f5e0f60b00"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "61ece9a9-1a45-43ed-ab92-820e8a33049a",
            "name": "Positive Testing",
            "item": [
              {
                "id": "67cd68fa-0bb1-4e55-87b7-f9c6434b63c0",
                "name": "identifiers",
                "request": {
                  "url": {
                    "path": [
                      "identifiers",
                      "{{ORGANIZATION_DID_WEB}}"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "method": "GET"
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9ca74030-d80a-4c49-a5a5-9a7a70b895f5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200Identifiers\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString), {",
                        "     strict: true,",
                        "     strictSchema: true,",
                        " });",
                        "});"
                      ],
                      "_lastExecutionId": "15e0f894-3b37-47b7-9526-6ab40d8e25e0"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "9eff54a7-2d7b-46b5-b48f-d0683063905e",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                ""
              ],
              "_lastExecutionId": "01b3e8f5-eab4-4659-b9a4-45641f578c48"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "1ff219af-007c-4f4c-a174-c7b739de2960",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "c9712cb8-7f75-4658-b025-b0e12ba4cad2"
            }
          }
        ]
      },
      {
        "id": "9827f94c-647d-4c42-a745-d9fa264336ed",
        "name": "Credentials - Create",
        "item": [
          {
            "id": "289d1f20-fe6d-41af-8c75-df3d43f8c375",
            "name": "Negative Testing",
            "item": [
              {
                "id": "21c77685-5e06-434e-899a-d178fd690875",
                "name": "Bad Request",
                "description": {
                  "content": "This folder contains requests which mutate a valid request body in a way that should provoke a \"400 Bad Request\" response from the server.",
                  "type": "text/plain"
                },
                "item": [
                  {
                    "id": "0aaccdaa-ac06-4dcd-820f-4c7921102083",
                    "name": "credentials_issue:credential:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e9378e4d-818c-49d8-a51a-37444a00446f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "61586b29-fbd6-4056-9025-93be1aabe6c4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21d97c4f-34b1-42b0-953e-8420507598cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential\" is a required field",
                            "    delete req.credential;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "baedcc54-5d7e-4264-93dd-b93cb19d6379"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4badf816-1d13-49a1-86cd-cb6712d82ffe",
                    "name": "credentials_issue:credential.@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7e6c074-960b-4c77-b83e-3d37e6ad8173",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "362ed997-4230-4407-8e36-eb540060f856"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eef482b3-c9e5-4989-9076-6af9a585f39d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" is a required field",
                            "    delete req.credential[\"@context\"];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "31ec0ae9-d685-425c-b9a7-65bd8c1a8397"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f941ad08-18b5-4141-b1ed-24a78eefd6b9",
                    "name": "credentials_issue:credential.@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "55195cb3-5622-4577-a3b6-2ee9390b7480",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "24b626b2-9efb-4c28-9cfd-7a55ef428238"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca562336-5291-4aa1-8c50-b6cf560405c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a boolean",
                            "    req.credential[\"@context\"] = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "92fda00c-8c70-4259-9f5c-a950b0092db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b3eb673-5be9-4d27-a425-87d15c864386",
                    "name": "credentials_issue:credential.@context:integer Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9dd6fc39-1c1f-49f8-acce-38f1d5d0616b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d01649ba-0580-419a-8874-55e7d5d9bb3b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a14dc87d-c25c-48a9-ae51-d68fd57c9232",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an integer",
                            "    req.credential[\"@context\"] = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "4661ac01-8432-47ef-a093-02f4ae117273"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60f93bdb-3463-406c-867b-a3fb6904162f",
                    "name": "credentials_issue:credential.@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0aa3f98a-cfec-44dd-8cdf-0c9d85284ded",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "582b4863-efdf-4d36-912c-c333f445b94a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "db57be5e-4b97-4925-ad68-c2f4846f8272",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not null",
                            "    req.credential[\"@context\"] = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "76306e01-116f-4094-ba39-2210ca312227"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a8a5291-feea-4baa-ab22-8b9b4a97f4b9",
                    "name": "credentials_issue:credential.@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "22be7def-639e-4ada-a17f-6a36e5abe524",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "df0c7864-d264-4861-abd7-58c159a5cf6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2bd52ea5-a2cf-42bd-8ad0-4e5c97987a85",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not an object",
                            "    req.credential[\"@context\"] = {\"@vocab\": \"https://www.w3.org/2018/credentials/v1\"};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b03e686-2266-4587-9753-3366b4127c04"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cea3bf4c-3e9b-4675-8937-d95bfadd05b7",
                    "name": "credentials_issue:credential.@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "152455ec-f550-4f75-af9a-e9e7b4bf43c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8cd352c5-d1d4-46a2-b2e5-7b0a1e41db65"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ca054d45-db75-44ad-aeb7-ccaea9a866e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // \"credential.@context\" must be an array, not a string",
                            "    req.credential[\"@context\"] = \"https://www.w3.org/2018/credentials/v1\";",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a9fef561-5ac7-4af1-8380-b7cdea337814"
                        }
                      }
                    ]
                  },
                  {
                    "id": "15d3876c-d312-4a59-bc5c-c0d8c1bb332d",
                    "name": "credentials_issue:credential.@context.item.array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d9943121-bae6-45fa-a38b-c259b8c2e9c8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "76052971-e82a-4fb9-a8bc-ca77a31604cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "501f717e-83ad-4a3d-ac77-faa9fe99c650",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not array",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        [\"https://w3id.org/traceability/v1\"],",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ed223da2-4a27-4d8c-91e0-4172ad2a7e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "088f224e-c701-453e-bf20-20a178bea18f",
                    "name": "credentials_issue:credential.@context.item.boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ed417c73-ed53-4461-bf1a-abcf4b857299",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e2bb572b-04e6-4093-b67e-2de12cc1bdbe"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9107f0dd-dfd3-411e-9a8a-b7c7af9c9e77",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not boolean",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        false,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "3d6006d5-600c-4c5e-a954-e65586a7d954"
                        }
                      }
                    ]
                  },
                  {
                    "id": "24c971ce-f6a1-4157-97da-b148f935bad1",
                    "name": "credentials_issue:credential.@context.item.integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a2779ab2-7064-438e-bef5-876b637f2dea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "15881ff4-088a-44ab-a7a9-70cf4f1611cb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a0dc2d0-89fa-4adf-bd9f-6c17218df011",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        42,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "64f9e6d9-c5a1-4fe8-8870-664eaaf7b29c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4cfef2c7-be18-44ab-80c2-de2a9b463906",
                    "name": "credentials_issue:credential.@context.item.null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "21c44d03-ba9d-4d65-ad05-63aba0d9d87a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "757a11c0-6120-4266-bdbb-91d06ad94f5b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "050a1a1b-1a2a-40e2-86bf-48263e8d9c83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not integer",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        null,",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "a00bff0d-10e4-4217-b8c6-26e9677db5e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad81b402-4fe2-4ea0-b441-2ad130466886",
                    "name": "credentials_issue:credential.@context.item.object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "15761bb4-0622-4ed2-a1e3-a9534fb91f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0af3cefb-ac4f-452c-837b-c47085d66747"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c1588fc-959e-401f-be3c-3aa53d4c9781",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Elements of credential.@context array must be string, not object",
                            "    req.credential[\"@context\"] = [",
                            "        \"https://www.w3.org/2018/credentials/v1\",",
                            "        {\"@vocab\": \"https://w3id.org/traceability/v1\"},",
                            "    ];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1086a36f-21b7-4ff9-9717-6f2565a58c26"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e815fb8b-49e7-40d7-a94b-01389e3e35e6",
                    "name": "credentials_issue:credential.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4ff7da15-4bf7-401c-abec-a690a29f22ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8ccf0c5f-ef5e-4388-9cb1-78d9ea72e66a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cc116859-914f-40de-9b44-9bfd51d0e8f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not array",
                            "    req.credential.id = [pm.variables.get(\"credentialId\")];",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "1b711151-b812-4c24-8156-c114b79b94f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "47eb4d97-4bce-4e8e-bf18-8010c970383a",
                    "name": "credentials_issue:credential.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d0017ff-b9f4-4ecd-be63-ec0453424858",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85beb562-7dec-4af4-95ac-407f0d603d12"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "868f1af7-7a45-40c1-92ea-7868d3b79d08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not boolean",
                            "    req.credential.id = false;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "e875fcb6-45dc-4799-beed-ba92291e4316"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1f6194aa-7afd-41af-a26c-038d0fcc3ca4",
                    "name": "credentials_issue:credential.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f937e12a-73cb-4b62-841a-9644a3e6b34c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ea2158c9-d524-4c6f-9f7f-ad2da230be19"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5686fe6d-b849-412b-b910-17634b9731a9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not integer",
                            "    req.credential.id = 42;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "552d5856-2df8-454e-a59d-b3076d087bf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5cf6e9b3-a41c-43a2-a3dc-2132e25d4363",
                    "name": "credentials_issue:credential.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cf4dde71-ce12-4e27-9553-32e5f35a901f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "969a6f30-6263-43cf-8588-53ca630d1dec"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "18406f30-62e5-4618-a094-5f85529cca08",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not null",
                            "    req.credential.id = null;",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "faa2d37d-76a1-4f75-97e9-1e0b02613a03"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c51f9dbe-74d3-45bd-802e-df76ca4bb15f",
                    "name": "credentials_issue:credential.id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f9da28-10d8-4690-8e38-8695475eaee0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8afd0dac-d96f-4dd3-85d0-97dfe697f533"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bf25e8c9-7698-474b-bb3b-ba8fdd4a522c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // Optional credential.id must be string, not object",
                            "    req.credential.id = {\"id\": pm.variables.get(\"credentialId\")};",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "fd7e96d0-01f9-44e5-b368-6a9eddb3eecd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6968b016-8818-4780-a4cf-cb1293011a49",
                    "name": "credentials_issue:credential.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "50b6781f-9b86-48ba-9734-c5e3a48c92af",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "52e01767-a572-4542-b02c-627cd90e27cf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6f83d7ec-a42e-466f-8130-2d97d008b6f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type is a required property",
                            "    delete req.credential.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "3b203c7c-1d00-4f2a-991a-8507deb3e483"
                        }
                      }
                    ]
                  },
                  {
                    "id": "052454be-0ae0-4c71-be8c-94c13980f004",
                    "name": "credentials_issue:credential.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e5153385-cc05-4468-8ab6-aaf900c555ac",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f1874fa0-4fad-4dcd-8278-3a4efa935811"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f4806347-5271-4039-85d7-ab7dda731462",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not boolean",
                            "    req.credential.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "effebdad-8e87-443d-9dc7-536b33bd3070"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6d81609b-8b60-428d-b6df-a7383cbbadf3",
                    "name": "credentials_issue:credential.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de542c63-fe16-4fc5-900a-4a64179f7b1f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f369aa5-07fd-4d1d-8ccb-095d4804fd4d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c553a1c-f6cc-498b-8cb9-5cde8ad943cb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not integer",
                            "    req.credential.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "fa654ee2-f027-4161-96c8-9045f722efa0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b1438060-62f4-479b-b55a-c233437de9e4",
                    "name": "credentials_issue:credential.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0c04bd28-58cc-4837-b4c8-d4b6476e9b40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "48efd282-f42b-4f28-8204-d5b6cd58c7f8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "915007df-07c0-47e7-a6e2-99462f6c7469",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not null",
                            "    req.credential.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "9182855a-09b2-4c91-b14d-4235f6add7d7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3822d343-20f6-44c4-ae7c-c982a23e9d11",
                    "name": "credentials_issue:credential.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2ba66ab6-c84b-4881-b822-0ede130ac585",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "29938a94-73b8-40e1-9135-0c488d5f3a6d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6374f3a-e093-429e-bf15-4dd534d178f8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not object",
                            "    req.credential.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "bb444efe-5b6a-4b8b-8798-a994917b9550"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c015ef9c-276d-44d0-a8a3-92b4b86cf95b",
                    "name": "credentials_issue:credential.type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b8995f68-7cfa-4c7a-ba35-7d17adfd812f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "744f3369-7f9c-45cc-8acc-d1226f2430aa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ac0d171-0de0-4246-aefb-8c1801830db2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must be array, not string",
                            "    req.credential.type = \"VerifiableCredential\";",
                            "}));"
                          ],
                          "_lastExecutionId": "32139242-d3e6-4241-a0ce-a65a8075187d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0bdfadf0-76df-40e1-86ad-2d75c2544f1b",
                    "name": "credentials_issue:credential.type.item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3409db19-2752-4461-9fc7-363cdef29c40",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "08dca45f-f753-42c4-b1a4-59798d908b0c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5ae47de9-11be-49af-96f0-3c5521b79a26",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type must have at least one element",
                            "    req.credential.type = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb8b25b3-0296-4b10-b19e-5284bd439b86"
                        }
                      }
                    ]
                  },
                  {
                    "id": "de97b466-83d7-4428-a30e-9641d65c2503",
                    "name": "credentials_issue:credential.type.item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d139f298-ade7-461a-ad67-7f95d6361765",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "663c2587-4738-4e4e-81d2-48ce48758854"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ddf64bdc-e04b-41db-b799-669ed00b85e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not array",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        [\"AnotherType\"],",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "5717dca0-9f68-486d-a317-ad96d69c8434"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ba9b2e04-fce3-4d84-958c-f7cd0fda3267",
                    "name": "credentials_issue:credential.type.item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10765c45-6795-4b9f-9e91-d9657a5bc762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5d1c29fc-1b73-4d3a-addb-8c9efdf582e4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "68e830f2-10a7-4473-a603-1b2b10525705",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not boolean",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        false,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "a0d6f56e-a48e-48f7-ae92-35cf6134d4ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "009402b5-3989-43b7-8986-9881e77c6112",
                    "name": "credentials_issue:credential.type.item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c95b89aa-c9f0-4cc3-af93-e15dbff940e5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "36c2e10e-04f0-4205-8004-df0f04133dc1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b7d6c80b-c26b-428e-9f2f-1baed103f9d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not integer",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        42,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "6903f949-4279-4883-861d-d67db6ba6415"
                        }
                      }
                    ]
                  },
                  {
                    "id": "89d9be10-8cae-4c34-aaea-5800fc25ae77",
                    "name": "credentials_issue:credential.type.item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d822ac30-bcda-438d-867a-0d47a0ed0d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6f500360-01cd-4c17-a1f5-79e05f84d742"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6e221708-c173-4d0a-90a5-ffb10bbb59b9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not null",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        null,",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "4796d773-04fb-47ab-811d-f270b5ff8647"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f6a7a5fe-4596-4e67-92f2-86c30100d908",
                    "name": "credentials_issue:credential.type.item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7cd5395c-1944-41ec-9828-6ee44b77b3b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5c0271f3-2e29-4ecc-86c9-4a8d74ccab0d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fbd052d6-64c3-429f-827c-9be925a59545",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.type elements must be string, not object",
                            "    req.credential.type = [",
                            "        \"VerifiableCredential\",",
                            "        {},",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "3383c9b2-8ff1-4695-8c46-fd1a21b67199"
                        }
                      }
                    ]
                  },
                  {
                    "id": "696971cd-aee9-452e-8ab2-680fca3ed172",
                    "name": "credentials_issue:credential.issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98ec83d2-f472-4c59-b5e0-d763bdffd725",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "49e1378b-4000-41d3-ab46-82f0fd958654"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "921c3fae-2e69-40df-ab74-8a7ede4be243",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer is a required property",
                            "    delete req.credential.issuer;",
                            "}));"
                          ],
                          "_lastExecutionId": "64ad5fa2-f533-4db8-91dc-7948c57b1704"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ae86a4c5-914f-47c8-b75d-e6636fa978e1",
                    "name": "credentials_issue:credential.issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f62efbbc-df41-43b2-8bf6-89781d24b0cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "361712dd-757a-4e6d-986e-55c6f72c5e85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6c377e3-4930-4efb-bea3-7e8803bff788",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not array",
                            "    req.credential.issuer = [pm.variables.get(\"issuer\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "484298e6-77fb-464c-bc4e-689d92209e11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b847d88b-6515-4754-9c42-44781f7ba2cf",
                    "name": "credentials_issue:credential.issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7aeeb285-d77f-4312-abda-132f5c9b9b2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "dc2e9415-aeeb-469c-bfc9-95af2cf8fd93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "262d73d4-e976-4932-b1d9-46de1993d973",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not boolean",
                            "    req.credential.issuer = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "1c0f35fe-c0a8-4e4a-a83d-09651da640e0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "334fc269-142c-435d-8f5f-0eb275370994",
                    "name": "credentials_issue:credential.issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "28852b36-6098-4852-b946-33eb6628d282",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6a564f5c-395c-42e4-9dcd-51a284d91c80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "90c564fb-3d11-4d2b-9536-9f17538ff762",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not integer",
                            "    req.credential.issuer = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "591652bf-0b71-445b-901e-ccb7081007ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bc024761-e18b-46e4-91f5-bdd838751786",
                    "name": "credentials_issue:credential.issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4c2c5a4-4618-4db7-8fe5-155617651501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3984786f-7b89-4f01-a1b8-af9133c91084"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b1733f3c-6450-4189-826f-d4e281d5bd29",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be string or object with id, not null",
                            "    req.credential.issuer = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "659a865d-fa95-4405-be73-d7fca0561310"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3d5372ff-cb0e-4770-b5df-7fd1a5293e22",
                    "name": "credentials_issue.credential.issuer:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "835fb3f7-7938-41ba-963e-0b2c39cc3fcb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "013f69b3-08ab-4b53-8d71-5be54592845c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "238157fd-08b9-4eb5-b95b-d43025b462e8",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be a valid URI",
                            "    req.credential.issuer = \"not.a.uri\"",
                            "}));"
                          ],
                          "_lastExecutionId": "6345a3a6-45e2-44db-b1b4-d6caa643ff4c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8a6a142-1d88-4c07-af12-897a6f3358e5",
                    "name": "credentials_issue.credential.issuer:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7ac9d24b-c779-407b-982a-ca57548b56bb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "614962ba-ed60-47ba-a262-9dbefc1c3c9f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e8967cb0-0fc7-47ab-957d-b7a55f105c9c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer must be known to the endpoint.",
                            "    req.credential.issuer = \"urn:uuid:{{$randomUUID}}\";",
                            "}));"
                          ],
                          "_lastExecutionId": "bc1cad3b-5b9f-4e0b-a618-ef80aa6721ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d3b00f-da1c-46e0-b9ad-9e3cddde0898",
                    "name": "credentials_issue:credential.issuer.id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9b38510d-146c-4501-8843-d176976a1aea",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c44e41d6-bd92-4303-94eb-8fbb3a2bd286"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f174db91-a656-4f2e-bb9e-9f961136b63e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id is required when issuer is in object format",
                            "    req.credential.issuer = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "7266b6c9-c23a-4fca-94a9-159ec198d9f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81741cf0-12ff-46bc-9cf2-eee24472fd91",
                    "name": "credentials_issue:credential.issuer.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b0088a7a-e5bf-4cd2-90e7-1e15c1a4ae8a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "23e536f1-4376-4d7d-9bb1-d0b950195401"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c81c8e6a-d1ae-4069-b796-21480bee5fe4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not array",
                            "    req.credential.issuer = {\"id\": [pm.variables.get(\"issuer\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "88dd9bab-fb73-4d66-97fe-a5c766abbd1c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6ba4c391-d0e4-425e-a2d5-af5110f78a3d",
                    "name": "credentials_issue:credential.issuer.id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b96a5828-c114-4990-92d3-38ddd8d15c67",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8f597878-1895-4c47-8f41-89e699d9bd32"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "405600e1-c480-4bc8-b5f5-c72f595a3843",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not boolean",
                            "    req.credential.issuer = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "7de3a140-3f1c-44ca-b2ab-5d028ca13f80"
                        }
                      }
                    ]
                  },
                  {
                    "id": "49c87e82-fefc-461d-a27d-31cd5d6be451",
                    "name": "credentials_issue:credential.issuer.id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1b854ce5-c47f-4e73-95bb-54022c3050a0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6e349c42-5685-40fb-ab9e-8b743fe5877e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d766996b-8919-43e6-b691-5d30d0af7431",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not integer",
                            "    req.credential.issuer = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "01d04fbe-d06e-463a-b271-b77c4d7173ed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "997ceac6-03ca-4ca1-85ca-502167c2be1e",
                    "name": "credentials_issue:credential.issuer.id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1bdd6efb-5306-4f42-b831-60d573771260",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "81150200-f877-4e64-86d7-f6a59587267b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc74efea-8687-48fa-bea9-b80e7556f86c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be string, not null",
                            "    req.credential.issuer = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "c7d5bc72-f20f-4c4e-9f29-97494c3d028c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "879081fd-321a-4e0a-a1f5-532497593dca",
                    "name": "credentials_issue.credential.issuer.id:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09caae0d-d3b5-48e0-9c22-fa0be2f81701",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "10365a5d-cb40-4340-a579-854c03e80dc6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2956f3f5-b296-40f1-ad82-73d3dcbf6153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be a valid URI",
                            "    req.credential.issuer = {\"id\": \"not.a.uri\"}",
                            "}));"
                          ],
                          "_lastExecutionId": "5252a259-5502-4c09-87cd-82e0e7f3f44b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dd70dba5-15ad-4c7f-8828-81c94ff4fe74",
                    "name": "credentials_issue.credential.issuer.id:unknown",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8b5260f8-0b7f-4f29-9cad-b2e9a66a6d02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 422\", function () {",
                            " pm.response.to.have.status(422);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema422CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "768b61d4-eb62-4181-9e09-d0a8bcd573fb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aaf99657-5955-4478-aa0c-97658c211787",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuer.id must be known to the endpoint.",
                            "    req.credential.issuer = {\"id\": \"urn:uuid:{{$randomUUID}}\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "7e51d388-7428-4752-ace7-a3cd88fe59bc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d240a967-230c-4280-b7dc-7fd9361ccfe2",
                    "name": "credentials_issue:credential.issuanceDate.missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59a35c05-3e57-4de9-93a1-cae85fcd1e2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c117597-42af-4d48-a645-6c33535b6d96"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32c0f647-591e-4686-83cc-76faf286e0bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate is a required property",
                            "    delete req.credential.issuanceDate;",
                            "}));"
                          ],
                          "_lastExecutionId": "308fba57-3069-4f9a-9f3b-1eaede5c529f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16f85634-034e-420f-9db4-73f3fea9ff41",
                    "name": "credentials_issue:credential.issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "500ac65e-6a8f-462c-b33e-59f79c1ae890",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce16d6ac-37bb-47b8-aeaf-f3ab31fd36b3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bdb9880d-549f-4c6c-8faf-4565da4ea084",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not array",
                            "    req.credential.issuanceDate = [pm.variables.get(\"issuanceDate\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "f7c46596-6b99-4c1c-a343-e6f946bac6c5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16b338b5-2af5-4562-8361-c5a8fddad5c2",
                    "name": "credentials_issue:credential.issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "95656196-018e-45a4-ad4e-b369689558f3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f15e8dd-52ba-4de7-b313-28a3d966e312"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3f9ecfb1-4f8f-4827-9247-8e039c580eaf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not boolean",
                            "    req.credential.issuanceDate = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c276ab40-03dd-412b-aed3-2d67330f9096"
                        }
                      }
                    ]
                  },
                  {
                    "id": "43f0f36e-2f2c-4852-a3bb-dcc196a3de80",
                    "name": "credentials_issue:credential.issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "047c3fc5-6921-42ab-aa53-7653401d70ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "58511a15-678e-4527-ad88-3df066d7793a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb054a4c-0248-4209-889a-ed201977b817",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not integer",
                            "    req.credential.issuanceDate = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "02c99701-d9c2-47e5-ae8f-14a77e756b72"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60849b54-e7f2-43df-b1db-a894169e1eda",
                    "name": "credentials_issue:credential.issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "991ee78e-62d0-40be-8d39-7178672d76f1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e5d38ba0-b116-4119-a71e-9f6f4ca1dcb1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c524a150-4ee9-4bda-be87-a05e00128b66",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not null",
                            "    req.credential.issuanceDate = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "5ccfc9e1-baa5-4528-bb47-a6a07b83bb87"
                        }
                      }
                    ]
                  },
                  {
                    "id": "81929b14-db4f-4380-b1f9-899b7067af50",
                    "name": "credentials_issue:credential.issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "2d33d421-0b4a-467b-801d-c4f192b0f501",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f6ade27f-5d41-422b-a857-906380757589"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "89e4f7f0-0fc5-416c-8f1f-d90b451145a7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be string, not object",
                            "    req.credential.issuanceDate = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "89c0444b-370f-4f49-a860-92aeb0336574"
                        }
                      }
                    ]
                  },
                  {
                    "id": "473f5bf3-2a7a-4f08-8387-b9dc2ded39a9",
                    "name": "credentials_issue:credential.issuanceDate:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "82280d96-cbdc-4ed6-bf8b-7d1321f29a4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e49d0895-db0a-4d10-9322-717fba506df1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfb73381-bd9e-47a9-846a-2bcc93b65b09",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.issuanceDate must be a valid XML date time string",
                            "    req.credential.issuanceDate = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "fa1f6120-7813-4726-ad80-5451a4e78c35"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d5e5f6cc-c4f3-40c5-9678-42973a12e8a5",
                    "name": "credentials_issue:credential.credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "48542ce0-a231-48a4-8270-27cc0f1a3d68",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "de8aad70-51cb-4657-a5bc-fcabb3279d0e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1f0ed555-6ce7-4b12-9cfb-117b7c2de9bf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject is a required property",
                            "    delete req.credential.credentialSubject;",
                            "}));"
                          ],
                          "_lastExecutionId": "7fa0ae42-1d52-4a94-8a77-52fd6d5aef19"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38625b6a-9c9d-4f55-ad5c-7bee1d9a2d02",
                    "name": "credentials_issue:credential.credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cd14a0eb-8584-4af6-bc1f-0cbbf1f65c2e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "70bc8704-dfed-4f1d-ba15-aa101ec59b27"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dd1d9039-48e9-4a1a-8d4b-975b3e19b2d2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not array",
                            "    req.credential.credentialSubject = [pm.variables.get(\"credentialSubject\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "8f2614a6-b5ed-49d2-ac33-2bb3e0a495c8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab04f059-9283-46b3-9066-6f90d26e558c",
                    "name": "credentials_issue:credential.credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "14844a05-4666-4248-a44b-d5b8c3be140a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4e2f2d22-c088-4851-af87-f84b34cfab24"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4314ce52-79b6-49f1-86b2-1d633a670ecd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not boolean",
                            "    req.credential.credentialSubject = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "afdd442f-698b-4784-a281-9680e47547d8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "30b6816b-c11b-46e9-836a-004af0e628db",
                    "name": "credentials_issue:credential.credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "324ed614-d679-44af-b69c-9527a5abe69c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c36dd4a3-70f9-48a8-bb0c-fd5751074bdf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be05908c-4d40-40d9-a3f8-6aedc008a0d1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not integer",
                            "    req.credential.credentialSubject = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "3fd54de4-dea5-4cf8-be83-386d452ff76b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e724444-fbce-49d1-aa4c-c94f8630c375",
                    "name": "credentials_issue:credential.credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f14bef42-753d-4e6e-b740-e63b39444171",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "37981b26-4e5f-4342-8716-79bc7b03b826"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9c9d5191-9fb6-458a-89da-3ecc60af4986",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not null",
                            "    req.credential.credentialSubject = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "18ea82e6-6823-4555-ad5f-70f000d158d2"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a037ebb1-a487-4567-b48a-2080716d7bd8",
                    "name": "credentials_issue:credential.credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4e39c544-5d11-4f49-a21e-498c3164d5ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b4a4520d-53ca-4aaa-89d1-d4f1eb02f400"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9b5e69d1-bd75-41f0-8711-a1f4f1c20b47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject must be object, not string.",
                            "    req.credential.credentialSubject = pm.variables.get(\"credentialSubject\");",
                            "}));"
                          ],
                          "_lastExecutionId": "be818acd-0ca5-4f60-b71f-8d25f33d139b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68f292a8-1859-4251-a36e-5f3bbf8d3b4d",
                    "name": "credentials_issue:credential.credentialSubject.id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fe1fa461-11e4-453d-8f87-c11e7c0739cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c18a851f-39d6-456a-8f49-787a22b80e83"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8fedab1-1816-45ab-8b5f-c862b65ab85d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not array",
                            "    req.credential.credentialSubject = {\"id\": [pm.variables.get(\"credentialSubject\")]};",
                            "}));"
                          ],
                          "_lastExecutionId": "9af8c0a5-63c5-4b29-aaf0-ce15fa3a286a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "20872c24-d823-44e6-abb8-ec101abb2725",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "fdfedbf1-4bd0-4126-88fe-0e610e22d76a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d2c0fa7f-0ce2-453d-8998-406f2816d051"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "586c31bc-b348-4ef0-ae65-45107de207e1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not boolean",
                            "    req.credential.credentialSubject = {\"id\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "28ee0a34-e913-4236-aee2-55feed8dcd34"
                        }
                      }
                    ]
                  },
                  {
                    "id": "38445425-90d2-4da9-b794-5652bb246a2f",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 2",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "db9017d0-42e7-4493-a33f-1ae05363d9f2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "87d72809-3893-488d-9186-4ee7fd4427d2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9459511-4f2b-4624-9d3a-418459436df6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not integer",
                            "    req.credential.credentialSubject = {\"id\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "da10f787-5df2-4420-a49a-79410b74801f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fc425d3-0b4c-4882-a5ee-7f14b7f49706",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 3",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "36f4a450-8c43-4674-bbd7-7147a206172f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56177fce-2244-44c5-b159-a5969f73540c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "06f32634-5aa6-4d9e-9e92-2822eb618809",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not null",
                            "    req.credential.credentialSubject = {\"id\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "653f8754-8c5b-46b9-9c33-68d722bd51fa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4df8d2d2-3ab9-456f-b2ce-ddd2036b1fee",
                    "name": "credentials_issue:credential.credentialSubject.id:array Copy 4",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "10f6221f-b16a-4231-b5a4-1fb77b217d98",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5111542c-2d9d-4fbf-821a-6a6d00a53454"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "362b69fe-7988-406f-a6fe-2222066cffed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credential.credentialSubject.id must be string, not object",
                            "    req.credential.credentialSubject = {\"id\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "fdd2a860-bb02-4ee4-ba3f-19f57a14d6bb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7f7bd3f2-5604-462a-bb7d-94c9d2c3b64d",
                    "name": "credentials_issue:options:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "aadf19af-fbf8-4858-b27e-e0c0984c0e04",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ee0c614d-dd4a-4bae-9912-bde581e2d1c5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14c29dc1-11f6-405f-8b48-4ef620e79f65",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options is a required property",
                            "    delete req.options;",
                            "}));"
                          ],
                          "_lastExecutionId": "a547f469-cf71-4e4e-83e2-b881037e4e17"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e965cd4d-ee99-40ed-af28-2fd3e44e80f0",
                    "name": "credentials_issue:options:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d3c2184-1866-4979-a800-f426044a16e3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c6f13793-132f-4ca1-8608-c9394530b1cc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6a06d07e-c8a2-4de1-8e7d-c4ef7f05ed64",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not array",
                            "    req.options = [];",
                            "}));"
                          ],
                          "_lastExecutionId": "6a5b1b94-fc49-471e-9837-337255bcbcc0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a9f2df5-5123-47aa-bbce-8e59eb2029eb",
                    "name": "credentials_issue:options:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cac490dd-3fc2-4b21-a717-9dd3f3358055",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3c5e34fa-0f0e-47f8-9a76-3d308225ed4e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2799861c-5fea-46df-af95-a3ffd44f76a4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not boolean",
                            "    req.options = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9d90c4f8-9a63-4d14-bb6d-84859bd53f81"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d1398dfa-1d04-4958-9328-e9185f0387fd",
                    "name": "credentials_issue:options:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f8adc076-24de-4e2e-841d-1b53539fc8df",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "56083a56-0217-4ebc-9316-6a1b7bc024f2"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a96add5-9496-4a7b-bbd9-c18118469dd3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not integer",
                            "    req.options = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7e5f0f7-ce02-42e1-af6f-b2b328429351"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf5c5ce2-4744-4df1-b69e-2248371adfe9",
                    "name": "credentials_issue:options:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "9d0ec9be-62b5-46ba-995f-8d9f6bc66b0b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aec143f4-e77a-48db-a530-1c75619d1eb6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ca1959e-d940-4a37-82de-aa1eff32f2d5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not null",
                            "    req.options = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "3d77bcf7-db93-4605-ac60-4d895cf29274"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6df6673f-f686-4e77-b903-3726c0df703e",
                    "name": "credentials_issue:options:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b5c2d53c-6757-4728-8647-eb1a60fac15c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b75f8069-6633-465d-8623-27cf6bbda618"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "39b46bca-29cd-4810-ad7f-2bc5a807961f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options must be object, not string",
                            "    req.options = \"\";",
                            "}));"
                          ],
                          "_lastExecutionId": "3e9f4a79-f10b-48dc-b5d8-434e0efb2aed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6162acda-b8f3-4941-9f42-f6eb24be4b81",
                    "name": "credentials_issue:options.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ce7162ed-9d4f-43a1-bd1f-d8960386001d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "84bef0b4-30f9-4d4b-bb54-beb5d49bd165"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ccdb79f-2bfb-4b0b-940e-5b9d27bc0bba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type is a required property",
                            "    delete req.options.type;",
                            "}));"
                          ],
                          "_lastExecutionId": "ea01b198-344e-42a9-a927-21740ffabfed"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b62fed2a-4267-4d0c-b37b-59cf5c04b568",
                    "name": "credentials_issue:options.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09710d0c-2d6a-4c31-98f0-f2c2207a8166",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7ffb13c1-51c1-4df8-bca0-fa302475f792"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0c19e022-19dc-4354-918f-23d8bb9bb0f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not array",
                            "    req.options.type = [\"Ed25519Signature2018\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "07b66dd4-52ca-4e9b-8ebb-0d04e41d9261"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2a21d1e-251c-47b6-8b68-e12a89078e6c",
                    "name": "credentials_issue:options.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7135d12-d61d-418b-8868-99c8dc96a328",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "30071978-c07f-4933-b873-5642877c4644"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "119531b3-96ba-48b6-8955-dabc944753cf",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not boolean",
                            "    req.options.type = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "9e196aab-ba99-44b4-9623-43347738c12e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "774b1c52-f741-4803-81ae-7abbb6d1e793",
                    "name": "credentials_issue:options.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "abc22a79-2288-47bf-90d2-a8dcbd8e467d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7007e42e-5d34-49a3-8e14-79da1e6d8dbf"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ec197b2a-ef8d-41a1-a062-fee63d5527cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not integer",
                            "    req.options.type = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "e3997ee1-af11-484c-90f5-4e812a0ee6a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "058b84cf-1505-46ff-ae90-07cc482ec40b",
                    "name": "credentials_issue:options.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "26418ba8-f849-4650-a4be-6377d13022c3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "239084f0-3a32-4561-ba87-e9b37e27a493"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "23ea19fc-74c3-4bcd-bd91-bafbc27ed059",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not null",
                            "    req.options.type = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8069d310-bf72-4a79-b825-8532e098f70a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "395d95f7-7b15-4b6d-9173-d11134ef9b31",
                    "name": "credentials_issue:options.type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "b608138c-564c-43f8-a5e5-20a3dcf8031c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "2d3b5dd1-1419-4413-9554-433507c9189b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "701d8170-ea9a-4fbc-ba8c-f89b24519a91",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be string, not object",
                            "    req.options.type = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "9ce8b004-3449-4ec8-82b9-676856eb609d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a3038477-c25b-4cb1-84cd-7565a5fc339c",
                    "name": "credentials_issue:options.type:invalid_value",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f3e8ddf9-6948-482e-bb25-fdbe0a1a9659",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "71865a49-cb54-4096-a00d-6f6c6ee21cfd"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a49a57ef-2a09-4004-aa0d-66fa53596a8e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.type must be one of the valid values",
                            "    req.options.type = \"invalid value\";",
                            "}));"
                          ],
                          "_lastExecutionId": "da529bf6-8f4c-49ad-9b1f-7339f27ab4a9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "48098487-90b9-412f-9355-c3bbbe4c51d3",
                    "name": "credentials_issue:options.created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "deb95105-034f-4205-b357-d6d365a55ddc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf93d7ac-7ab2-4dcb-a467-c037391b7829"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0cde31a2-2505-47e6-9618-d9f42eb996ad",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not array",
                            "    req.options.created = [pm.variables.get(\"created\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "028097d8-cf60-4005-a560-6beeed3ea634"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8ed96dda-6535-4d0b-8cc8-70cd065e4b51",
                    "name": "credentials_issue:options.created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ca1a1fe8-2567-4bac-9825-aa2c54e3d8b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e8f580f2-b7b2-4c47-beb3-dd5ae165c69e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "308fcd31-3fc3-4a37-b591-18655b0b8bb6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not boolean",
                            "    req.options.created = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "7bae7ea1-e393-4214-9f6d-f860ea294e97"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db8f77d1-c9b6-46af-a653-8f904b391cb7",
                    "name": "credentials_issue:options.created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e60fa770-616f-4f8e-b5cf-6278613277c5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ed255a17-5200-4607-93aa-6313ecbe7ce0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "aeb6fa38-b6a5-4243-ae26-b12a7c630f14",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not integer",
                            "    req.options.created = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "8ab9e52d-73ba-456d-8f63-5df40b8d90c4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f8f6d89b-4cda-4aac-8bbc-cec0415230fc",
                    "name": "credentials_issue:options.created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c130996e-cbb2-4009-93e5-4407d5a046ff",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "fe76a084-fe20-4f90-81b3-e0c8c422d1fc"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7684843e-673c-4293-9139-5a4d2937ffb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not null",
                            "    req.options.created = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "8b767f7e-c388-457b-8a67-b678c3bbc9a6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6e695fe2-3251-48f1-b0bc-c96ea8158ffa",
                    "name": "credentials_issue:options.created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c1442eb7-564d-44c6-a04e-3e2ff3a529f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "16b00aaa-6fe2-48b6-af52-c423c984e958"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "13b9e8e3-7dc5-4c8e-a98f-ecf0d29581f6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be string, not object",
                            "    req.options.created = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "c10b0bdd-98e3-4849-9034-7e19312784a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a73d78e4-19bb-487b-9e1a-1ed419dbe7ad",
                    "name": "credentials_issue:options.created:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "98919436-4621-4b52-9237-878b7332e05b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b9ec884f-a3f4-4e9a-8c77-f26b8d47a0ce"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6c6fc909-5fbd-48a0-82a6-d0444c1ec1d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.created must be a valid XML date time string",
                            "    req.options.created = \"not an xml date time string\";",
                            "}));"
                          ],
                          "_lastExecutionId": "38c9aafc-53ef-45ae-8492-e18612e59e64"
                        }
                      }
                    ]
                  },
                  {
                    "id": "965e342e-ec45-487b-8ad3-fe5dd87366f8",
                    "name": "credentials_issue:options.credentialStatus:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32fee008-2f44-475a-aaac-84a374a32e58",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "09db5365-be60-47a3-b5bf-3a5d32b72756"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1205ed1e-e978-4a5e-b668-6fc55ec720d3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not array",
                            "    req.options.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "4ffb45ce-b3b5-4675-86c4-75f826231b39"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf9ef49-bd33-4225-a8ad-1b254dc45a5b",
                    "name": "credentials_issue:options.credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e6f856d7-a06f-4b82-9ceb-6224127e21b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "bf14ca79-97d6-4094-a569-e32ab0038e73"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9ae12053-bf36-4877-8277-a905431b661b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not boolean",
                            "    req.options.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "69d641c1-6401-4d11-a2bf-c998d5b5c68b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "496d069b-c4ac-49ac-be93-a040fe3732a6",
                    "name": "credentials_issue:options.credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4da54a65-81f7-4814-9ca1-6e071a008a1b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7f4f1717-95cb-424e-96e4-f2f571dc4be4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "870e1b69-0aa7-4c66-acce-b5fed98088dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not integer",
                            "    req.options.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "c4d0f2d7-6da0-49e2-bc77-8e693cbe9ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "36dfe840-47bc-40c0-b711-403a8089da38",
                    "name": "credentials_issue:options.credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d4555fa0-d18f-4754-9f64-b09b08ebad47",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "eedb3534-86e0-446d-9dcf-3bcbf85a85b4"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3e999203-4a77-4c8b-ad62-8949e291e592",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not null",
                            "    req.options.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "74297997-51e4-414c-9877-6813cc8e1641"
                        }
                      }
                    ]
                  },
                  {
                    "id": "16890ef0-8b98-4bf7-9e65-3659a9b58a27",
                    "name": "credentials_issue:options.credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1cf350a-c71a-49c2-a950-5b8a9e6eefb0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "714adbc4-6129-4f60-93e5-c3610234a00d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f702477a-111a-415b-819b-192cdf0657d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must be object, not string",
                            "    req.options.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "11fee9ea-d107-4747-bf36-0283a8af3db8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "113d3efc-1d6f-4ba0-be0b-3238bde0a04d",
                    "name": "credentials_issue:options.credentialStatus.type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "c808b557-b4c5-4be7-a099-ba73c235199c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d0da040b-f25a-4935-ba8e-f4ddde30e165"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cb0f05e2-a7f1-4232-814f-55ba2d0534b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus must contain \"type\" when present    ",
                            "    req.options.credentialStatus = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "b446ace8-ea6b-4a1c-b379-1ce600e1ad28"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0b963584-78da-43b5-a4d6-45f7b072218f",
                    "name": "credentials_issue:options.credentialStatus.type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "073e64f9-4819-4079-999d-06a489fd28dd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4a50aded-6cfe-473e-a7b2-9d1d8f4849b0"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e22d63d4-925d-44cf-a2c0-0db77f63fd2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not array",
                            "    req.options.credentialStatus = {\"type\": [\"StatusList2021Entry\"]};",
                            "}));"
                          ],
                          "_lastExecutionId": "7ab4c215-2dfb-48b6-aca9-d64978da8804"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf3b8fe0-a4c0-4a2e-afae-75efd42935a7",
                    "name": "credentials_issue:options.credentialStatus.type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbcae997-1554-4da2-b97f-d781b209364f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "62e4a2be-08a7-4152-aeae-7d950363c3b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6014ecf0-174c-46bf-a32a-cc5a17061072",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not boolean",
                            "    req.options.credentialStatus = {\"type\": false};",
                            "}));"
                          ],
                          "_lastExecutionId": "0dee3e18-d510-45da-9783-8820e97232e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e715dbe-ec3c-4bc9-85d7-046f8b0ba126",
                    "name": "credentials_issue:options.credentialStatus.type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "da0de43a-14dc-4dd1-983e-3cfa34ace16b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "38c98cb7-e519-4080-b8f4-3cc05375211e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e6bd82f1-1b49-4eb5-bcd0-99c417661f56",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not integer",
                            "    req.options.credentialStatus = {\"type\": 42};",
                            "}));"
                          ],
                          "_lastExecutionId": "f7700bd9-e46b-4557-b9ae-5872f4b5b2dd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55d85956-608e-4c0f-90c7-92407a5c259f",
                    "name": "credentials_issue:options.credentialStatus.type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0f7e50d5-246a-4224-8fcc-dc868ec88511",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "aad84804-396f-42b2-aaff-3efdd1ffab85"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a3d4e69b-deed-4257-87e3-5f772c41d1ed",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not null",
                            "    req.options.credentialStatus = {\"type\": null};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d6b39aa-31de-4c6f-997a-11a5ade84dea"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1254f699-2708-463c-b5df-fcd7670e4fc6",
                    "name": "credentials_issue:options.credentialStatus.type:null Copy",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "09860572-affd-4c6b-8def-8a9a235b08d0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "8752b512-96e3-4f56-8c4c-e36c3118ab2c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8c9a2fbc-4101-41f9-a5a4-4a71612b5d84",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be string, not object",
                            "    req.options.credentialStatus = {\"type\": {}};",
                            "}));"
                          ],
                          "_lastExecutionId": "5d620cf4-b035-4fc7-a263-5073cb7b11e9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "68c167fd-e07f-4d49-9ff3-f03cc06ab2e6",
                    "name": "credentials_issue:options.credentialStatus.type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "ffae0ed0-c505-4313-a575-859fa1e507a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "32d07f16-ac9e-4968-8866-f9d81aaf2002"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b0abfdf8-b237-4537-a004-f0b8b896da73",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // options.credentialStatus.type must be a valid value",
                            "    req.options.credentialStatus = {\"type\": \"invalid value\"};",
                            "}));"
                          ],
                          "_lastExecutionId": "486b3793-3f5e-4632-b3ab-b02705177640"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "97f2b4a8-d634-45fd-b02e-46b028f75b3e",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "e384e316-f366-4d29-8efb-d1d2fdbf8e81",
                    "name": "credentials_issue:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/vc+ld+json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      },
                      "auth": {
                        "type": "noauth",
                        "noauth": []
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8c05c9fe-95a0-4489-9624-d1a266c0efde",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "dbd0745e-2f93-4d28-b527-1ed0381d8a84"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78a60988-e0cc-4bdd-b1e0-39275d16ad09",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "ac8cf107-0f42-4d5f-bef1-187ce9ed2cdd"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "5bf9fd51-ac8e-4a32-83ea-fce7fe3fca67",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8600d0f1-1d38-492e-8aa3-70ec17fc87c4"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a6e1171a-ecf8-4aa4-bb0e-57fee6dfbaf7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "734de2ca-1bf1-4737-95ff-985da44a1f65"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "a6d3b46a-33e3-41db-9598-8ef8f950738d",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "df5f3266-fd1f-47da-8c1e-b1139141b1da"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "94c41913-1133-4608-803a-5aa14b3204bd",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "1c5c50f9-6216-4baa-be90-35c6ebdf5bcf"
                }
              }
            ]
          },
          {
            "id": "a3de3c13-4557-41ae-bc82-e08f3159bbe6",
            "name": "Positive Testing",
            "item": [
              {
                "id": "847349f0-7cc1-4875-a747-d5a65a915909",
                "name": "Duplicate Keys",
                "item": [
                  {
                    "id": "b2cfbb70-14a2-4571-919c-90731c3b840d",
                    "name": "credentials_issue.credential.issuer:dup",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "issue"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"credential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"issuer\": \"{{issuer}}-ignored\",\n        \"issuer\": \"{{issuer}}\",\n        \"issuanceDate\": \"{{issuanceDate}}\",\n        \"credentialSubject\": {\"foo\": \"bar\"}\n    },\n    \"options\": {\n        \"type\": \"Ed25519Signature2018\"\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "text"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "077156fa-a1d1-44f1-93c2-018ab34e6c78",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 201\", function () {",
                            " pm.response.to.have.status(201);",
                            "});",
                            "",
                            "pm.test(\"response issuer matches request credential.issuer\", function() {",
                            " const { issuer } = pm.response.json().verifiableCredential;",
                            " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});"
                          ],
                          "_lastExecutionId": "57bf0025-70e7-45ec-a8f7-f62a3d6835b1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5abd5ca1-8182-4cff-bc06-62c471babb84",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "047093bb-1692-49d6-825c-df36bd54d67a"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "476395d5-bffc-41ba-914b-aa563bcf4507",
                "name": "credentials_issue",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "8e9a69af-d760-46b4-9a83-e0391394f8a0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        "});",
                        "",
                        "pm.test(\"response issuanceDate matches request credential.issuanceDate\", function() {",
                        " const { issuanceDate } = pm.response.json().verifiableCredential;",
                        " pm.expect(issuanceDate).to.equal(pm.variables.get(\"issuanceDate\"))",
                        "});",
                        "",
                        "pm.test(\"response proof.created is close to 'now'\", function() {",
                        " const { proof } = pm.response.json().verifiableCredential;",
                        " const delta = Math.abs(Date.parse(proof.created) - Date.now());",
                        " const tenSecondsInMs = 10000;",
                        " pm.expect(delta).to.be.lessThan(tenSecondsInMs);",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "88c1f9a1-1bc3-424b-8690-c3b1373ed975"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "bfa4beea-7d1f-4d07-9652-c80c9c8a6059",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // noop",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "c1687f6d-b916-4c94-8aae-1b0e3fff9a71"
                    }
                  }
                ]
              },
              {
                "id": "1f7f75e0-1425-47b2-9a63-3407a6efb077",
                "name": "credentials_issue:credential.opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "7a5ffca0-2cf5-49e1-8ea5-a6f6949397e7",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verifiableCredential.id matches request credential.id\", function() {",
                        " const { id } = pm.response.json().verifiableCredential.id;",
                        " pm.expect(id).to.equal(pm.variables.get(\"id\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "f127b733-052d-4888-835f-3e03d66044ef"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "a9942fd8-1ef7-44b2-a546-73690323c41d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.credential.id = pm.variables.get(\"credentialId\");",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "29fe3d55-518e-4f55-b9a5-ea556e3c512d"
                    }
                  }
                ]
              },
              {
                "id": "8d883132-d2b4-4bca-9215-d3fc7048bbc7",
                "name": "credentials_issue:credential:alt.issuer.object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "94461af1-c367-46d4-975a-a2b8f2ba3b6e",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response issuer matches request credential.issuer.id\", function() {",
                        " const { issuer } = pm.response.json().verifiableCredential;",
                        " // Implementations may reduce object with just \"id\" property to a bare string",
                        " if (typeof issuer === 'string') {",
                        "  pm.expect(issuer).to.equal(pm.variables.get(\"issuer\"))",
                        " } else {",
                        "  pm.expect(issuer.id).to.equal(pm.variables.get(\"issuer\"))",
                        " }",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "6249029a-2e54-4caf-ae0d-4cf7a259a985"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "91eeff92-48f1-4efe-bf37-bab60d15c7a5",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.issuer can be an object with required 'id' element",
                        "    req.credential.issuer = {\"id\": pm.variables.get(\"issuer\") };",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "e14133d2-5ce4-44a5-8486-c07056cfdcce"
                    }
                  }
                ]
              },
              {
                "id": "9c15d3d1-9379-4541-8d37-1becf1e1e737",
                "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "9c545db8-8a96-4bcd-aaf5-f6f740e70eed",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response credentialSubject.id matches request credential.credentialSubject.id\", function() {",
                        " const { credentialSubject } = pm.response.json().verifiableCredential;",
                        " pm.expect(credentialSubject.id).to.equal(pm.variables.get(\"credentialSubject\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "9f93d899-3b0b-4ae5-b6ac-887ae84a74bd"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "d0e4a03c-a78b-4545-bc25-cc799af9f391",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // credential.credentialSubject can be an object with optional 'id' element",
                        "    req.credential.credentialSubject = {\"id\": pm.variables.get(\"credentialSubject\") };",
                        "}));"
                      ],
                      "_lastExecutionId": "1e6fa987-0911-4aaf-962a-f55254d68906"
                    }
                  }
                ]
              },
              {
                "id": "f2440992-c861-410e-8be3-0034b194cef6",
                "name": "credentials_issue:options:opt.created",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "b04b3adb-7e41-4115-9694-f0f13fc8811f",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response proof.created matches request options.created\", function() {",
                        " const { created } = pm.response.json().verifiableCredential.proof;",
                        " pm.expect(created).to.equal(pm.variables.get(\"created\"))",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "b86d6e37-42d9-44f5-aa94-dd2b70e0ba0f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "0190b176-7cc4-45e6-b7f2-49489e8b0f97",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    req.options.created = pm.variables.get(\"created\");",
                        "}));"
                      ],
                      "_lastExecutionId": "87d4f63d-74a0-4712-be59-64c9b4474e33"
                    }
                  }
                ]
              },
              {
                "id": "eaa86453-7e47-4b0f-9109-f916fd1ba986",
                "name": "credentials_issue:options:opt.credentialStatus",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "issue"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/vc+ld+json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{{requestBody}}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "61358839-1a6b-4563-a09d-5e8321046dbd",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 201\", function () {",
                        " pm.response.to.have.status(201);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema201CredentialsIssue\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "fb3e0cd3-db32-4887-b40b-07087a046e4f"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "c44e8c69-76a3-40b9-b6a2-3d1996091a5d",
                      "type": "text/javascript",
                      "exec": [
                        "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                        "    // options.credentialStatus can be an optional object",
                        "    req.options.credentialStatus = {\"type\": \"StatusList2021Entry\"};",
                        "}));",
                        ""
                      ],
                      "_lastExecutionId": "3f3d83b0-0090-4158-ac1e-861d90a0322d"
                    }
                  }
                ]
              }
            ],
            "event": [
              {
                "listen": "prerequest",
                "script": {
                  "id": "826829df-aaa0-43a0-8231-18da669c3020",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "ed9bca8a-b9ee-4996-9abe-e458523a5cec"
                }
              },
              {
                "listen": "test",
                "script": {
                  "id": "2f5ea3a4-2f64-4de0-a2ff-7486b1b8efac",
                  "type": "text/javascript",
                  "exec": [
                    ""
                  ],
                  "_lastExecutionId": "01e04f11-a94f-48df-ad3a-fcea182678ce"
                }
              }
            ]
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "ddbdc2d7-46fa-46c3-b807-e68036e125ab",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "pm.variables.set(\"credentialSubject\", \"did:example:123\")",
                "pm.variables.set(\"issuanceDate\", \"2006-01-02T15:04:05Z\");",
                "pm.variables.set(\"issuer\", pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "pm.variables.set(\"created\", \"2006-01-02T15:04:05Z\");",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credential\": {",
                "        \"@context\": [",
                "            \"https://www.w3.org/2018/credentials/v1\",",
                "            \"https://w3id.org/traceability/v1\"",
                "        ],",
                "        \"type\": [",
                "            \"VerifiableCredential\"",
                "        ],",
                "        \"issuer\": pm.variables.get(\"issuer\"),",
                "        \"issuanceDate\": pm.variables.get(\"issuanceDate\"),",
                "        \"credentialSubject\": {\"foo\": \"bar\"}",
                "    },",
                "    \"options\": {",
                "        \"type\": \"Ed25519Signature2018\"",
                "    }",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};",
                ""
              ],
              "_lastExecutionId": "0e219af7-84a7-4594-8225-092a64b09798"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "92784a82-80b6-48e0-842e-c22ea4596fb8",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "72ca6e01-8d28-42cc-82f1-42706f51f641"
            }
          }
        ]
      },
      {
        "id": "bdb1294e-d828-4340-903e-9047e9ba1cc6",
        "name": "Credentials - Update Status",
        "item": [
          {
            "id": "d8bea651-01a0-4d53-83eb-6197f89baca8",
            "name": "Negative Testing",
            "item": [
              {
                "id": "1dd91c0d-013d-4b2f-956b-55975206447c",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "60a8cb63-25c5-444b-a1ed-5e6eb71fc612",
                    "name": "credentials_status:credentialId:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "69a8c0d0-fce6-4c99-a844-0d1bc17a41c9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c3eab400-29ea-45df-a372-0d4f8edf8266"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bfacaf2d-31b0-4957-9644-9ec43d5461b4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId is a required property",
                            "    delete req.credentialId;",
                            "}));"
                          ],
                          "_lastExecutionId": "ed840f3d-9dc8-4e09-921e-9c83174c6907"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6418e19e-25f0-419c-be8d-efc5df27af93",
                    "name": "credentials_status:credentialId:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0afe5081-f6ce-4ea6-aa54-50f2ae23e987",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "b226aa0a-a728-4a55-ac2d-3a8a828900fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "94caf827-0183-46e2-9211-e9ef5de3d702",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not array",
                            "    req.credentialId = [pm.variables.get(\"credentialId\")];",
                            "}));"
                          ],
                          "_lastExecutionId": "29e2bff4-3e2a-4201-b20b-000d09257afb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bf742f4f-d779-4e3d-a795-bf9759ca9a7a",
                    "name": "credentials_status:credentialId:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d5c362e-b19a-44c8-9217-14de74ab3eba",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "44581759-fceb-49d6-918a-00ef75766eb5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fc6d33fe-01e4-4992-90d7-ec25c6991ca0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not boolean",
                            "    req.credentialId = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "6a30381c-f2b8-4a3c-90b8-08d8e5beefd1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9dfcc2e3-c1c4-435b-a5f9-6a49f83c8d2c",
                    "name": "credentials_status:credentialId:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "e29bc577-5705-4920-9f70-f7aa11f38513",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f7facb1-79df-4a63-bbe0-cdbde35b15e6"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1484ac9d-fd91-4d98-8226-e0d07f70e3d9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not integer",
                            "    req.credentialId = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "14ab3ced-12fb-4662-8064-310500c465b9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "60eceefd-0761-4eba-9802-4ec43d2cfe86",
                    "name": "credentials_status:credentialId:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "468a779a-c775-4b8f-8f86-fb3355084043",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "6bd7c1be-2e1e-4ad0-8831-bc0ed8956eb8"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f1bf018-84ad-4f58-a37b-a4d9f86a9b3a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not null",
                            "    req.credentialId = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "6993ad6f-a704-4695-9c8f-f4511ce2fcf9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a437e75-6015-460a-9fae-aa0f40b122d2",
                    "name": "credentials_status:credentialId:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78cb305f-9144-4470-9bef-43fc20abbd53",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "f18d1aa3-574d-4fc2-b326-605876d9cd36"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c785e626-d83d-4b83-b519-3992576a9a41",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialId must be string, not object",
                            "    req.credentialId = {};",
                            "}));"
                          ],
                          "_lastExecutionId": "5ffbb571-7232-4873-a0c9-14c3937657a7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5132f55e-97ae-463c-961d-305f1d5a5df9",
                    "name": "credentials_status:credentialStatus:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5d70e4b-3004-4c76-b971-6fa2489d7f42",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "93b2a82a-6668-453f-a07a-507473612461"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f1746590-e5e8-4428-b5e2-76c690f27153",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus is a required property",
                            "    delete req.credentialStatus;",
                            "}));"
                          ],
                          "_lastExecutionId": "5d95fd7b-47a2-40a1-b13e-d8c9c1a519df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "357a49a9-7672-451c-ab59-70b53728d253",
                    "name": "credentials_status:credentialStatus:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "75ba686a-a53d-4001-83a2-856d7a637d2b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "72cdd74a-5cfb-4461-af2b-5a93dea62a7c"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2eda0865-be61-4f60-85fa-16e7b8470cee",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not boolean",
                            "    req.credentialStatus = false;",
                            "}));"
                          ],
                          "_lastExecutionId": "c46d9f4e-de7f-4d04-bbce-0bcaeb2c3494"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2cf7356-4af6-433a-9a61-4b8ce7b9ac49",
                    "name": "credentials_status:credentialStatus:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "32c5b640-96a6-4b69-90b2-a706971beacc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ff4c3523-7e0b-4101-a9aa-f38654914780"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7bcfaea7-9c0f-4fcb-bbb4-210268e2584a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not integer",
                            "    req.credentialStatus = 42;",
                            "}));"
                          ],
                          "_lastExecutionId": "4c7f7ba1-d776-4761-9841-e9909ba60361"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27dd9131-c56b-4193-9087-b603fc88f368",
                    "name": "credentials_status:credentialStatus:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "de9a83b7-5435-42b8-8537-614856e7cd1a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3a4069fe-ed3a-44f4-93be-c0e219adc30a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "992b5af0-ac45-4f97-b24d-bf580ae1ebeb",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not null",
                            "    req.credentialStatus = null;",
                            "}));"
                          ],
                          "_lastExecutionId": "a7142acc-b422-4a0d-816b-3d2e4224ce88"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4c234e-fe22-43a5-b3fd-d142a60554a8",
                    "name": "credentials_status:credentialStatus:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "59931b9a-8586-4b18-b8cf-53e6873ee1b3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0584cfc3-872e-462f-974b-ac3576645213"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "182c5f08-9e1e-4b15-9438-2dadf5508582",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not object",
                            "    req.credentialStatus = {",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\"",
                            "    };",
                            "}));"
                          ],
                          "_lastExecutionId": "ed54cc41-d49f-4c68-83d6-ab790230deaa"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e8313808-bbae-4b72-bc54-8124087d26ea",
                    "name": "credentials_status:credentialStatus:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "39fb2592-517d-4f6b-9852-bb2d81294952",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5b8f931a-8fa6-453c-a049-85592769f9b5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2ba0a926-6194-4911-88a8-247b0daa62e2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus must be array, not string",
                            "    req.credentialStatus = \"StatusList2021Entry\";",
                            "}));"
                          ],
                          "_lastExecutionId": "235414dd-bbb7-4ac8-997d-b4ddd3231165"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdaf3ec4-8df9-4325-9183-5c09abd8a627",
                    "name": "credentials_status:credentialStatus:too_long",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8a8388cf-f0ef-40c4-9340-8da59dcd5e3e",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "cc7c82cb-dfb7-4688-9d00-035c092525a3"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3576dd5d-d027-4d64-80f8-df9751ec465f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus can only have zero or one elements.",
                            "    req.credentialStatus = [",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"0\",",
                            "        },",
                            "        {",
                            "            \"type\": \"StatusList2021Entry\",",
                            "            \"statusPurpose\": \"revocation\",",
                            "            \"status\": \"1\",",
                            "        }",
                            "    ];",
                            "}));"
                          ],
                          "_lastExecutionId": "f724f1c3-9d02-4560-93f2-c9d9e58c7964"
                        }
                      }
                    ]
                  },
                  {
                    "id": "22e4d701-1d48-45c1-86a0-24c44e24d5ed",
                    "name": "credentials_status:credentialStatus:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "3a695c15-cf6b-4886-8cce-4acb8142cbd6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1fc68fe3-5ad8-41e9-9bed-dd9d050fdf1f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2615e1c2-61df-482c-a45e-c12e31fd1bc7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not array",
                            "    req.credentialStatus = [[]];",
                            "}));"
                          ],
                          "_lastExecutionId": "fb46277c-ad5a-4c9a-bef0-7a2b35e30eeb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9ec0a31b-0260-4d8a-9e86-3a9eec1d3325",
                    "name": "credentials_status:credentialStatus:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "4aa3ee83-57e2-408c-ab23-ba5f04358b4a",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "d6ea7938-7d19-4e9f-9c1d-0e0ecaf40335"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4406fc39-2c56-4651-8991-88fb444fe314",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not boolean",
                            "    req.credentialStatus = [false];",
                            "}));"
                          ],
                          "_lastExecutionId": "19f205c4-23de-4cd3-b5fd-30835e6da9ec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bdf3c36d-fb12-4596-a47e-34e4a25b5fba",
                    "name": "credentials_status:credentialStatus:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "51b2eb38-1dc4-4093-a68a-c7ba7b458fd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "3e92e29c-87d0-47b8-ae03-7045a575174e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "43523f1c-be5c-4568-8a30-3ffe22ef5c7b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not integer",
                            "    req.credentialStatus = [42];",
                            "}));"
                          ],
                          "_lastExecutionId": "28faf50a-c996-4dde-accc-fdb4f82774ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "851b3941-49b1-47ce-b142-20505123c6ab",
                    "name": "credentials_status:credentialStatus:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "84b8691d-e9f6-49ad-a8f1-bbdfbafc0ed6",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5613b2b0-3230-470f-9fb5-b339a4cd8dbb"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c08b78f6-800c-4a4a-9972-ca1126a5d049",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not null",
                            "    req.credentialStatus = [null];",
                            "}));"
                          ],
                          "_lastExecutionId": "7913246b-5b52-4fd8-9214-a157ee72e28c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61beff4c-f2e3-4abf-933a-d10f10086c9b",
                    "name": "credentials_status:credentialStatus:item:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "78f39e1e-1999-4857-889c-b3449832a8c4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4393ee2e-6a21-4720-89a6-2a802f050d93"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3876df6-94b1-4e5e-8cca-be1543100b51",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus elements must be object, not string",
                            "    req.credentialStatus = [\"StatusList2021Entry\"];",
                            "}));"
                          ],
                          "_lastExecutionId": "8010dc06-8698-4b9b-937e-0274656f43bd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2c47dad3-df94-4b3f-9428-95fcca9fcaa1",
                    "name": "credentials_status:credentialStatus:item:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6482cd93-9f16-4f02-bf55-dcf6f33bf47d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "e7be2445-ceff-43be-9e27-d694ac0c3ae5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "adb8255d-c665-4ca4-8c83-3e356f303bbc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type is a required property",
                            "    req.credentialStatus = [{",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3491a296-b9d2-420d-ac6a-9c7d1bba96f5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9964bbb9-9f1b-4e2e-9ee8-fa3060f053fc",
                    "name": "credentials_status:credentialStatus:item:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "a7554306-ef06-416e-beaa-8213741d21a1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "1e039425-41fc-4b2a-83ff-0aefbccdc70a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "09556af1-0bf1-48d9-a10e-ec53bde2f949",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": [\"StatusList2021Entry\"],",
                            "        \"statusPurpose\": \"revocation\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "3b355cc9-981f-41db-b2e4-994a8d6487fe"
                        }
                      }
                    ]
                  },
                  {
                    "id": "29d5f2e9-b59c-4412-867d-c5c558546c05",
                    "name": "credentials_status:credentialStatus:item:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7dba32b8-7405-4087-b8dc-9fd8e575b77d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "4c451e57-bef0-4ff9-8ca4-5da555fb6562"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "21d3c63f-5a9c-44f6-89aa-c49d6aee0fa2",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": false,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "5157642f-1fcd-44ee-b6e7-e0a274d3772c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ad5d44cd-568d-47dd-a9b7-22885bd677ee",
                    "name": "credentials_status:credentialStatus:item:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42bffe04-861d-488b-8d2a-ad61c69c3dc3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "9854e074-6890-4402-af9c-bcd3da4e4e80"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "87fe0f2f-14d2-4d0c-aaee-12af2e458552",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": 42,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "ffe1d21c-6ee9-428e-8886-e863bebce9f6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1d1a7c72-7bc9-4ceb-8c93-c89202e81cfd",
                    "name": "credentials_status:credentialStatus:item:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "843e4617-3820-4d32-801b-ad5c5d29a43c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "18ef89ee-dcb6-4cc0-afcc-8064fa375714"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad336346-94d5-4dcc-a0c2-d44a4adc1cc1",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": null,",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "7dd4be9c-76bf-485b-a2d7-65fdd52a4e6a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b7bebb90-eacf-4b08-b640-3c2c8e208763",
                    "name": "credentials_status:credentialStatus:item:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d5b6bfc-2dc8-42c3-825c-85f5b11d9df5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "a9d72cb6-5619-4fc8-864d-eef88802d60e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5016dd7a-5a74-49e6-a321-088b0a3cffcd",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": {},",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "301100ed-1f9c-4913-b86b-ec4db2eb0036"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b3acaa02-8001-4b14-a407-7b102485ef33",
                    "name": "credentials_status:credentialStatus:item:type:invalid",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "18d68989-32ba-451b-a1ce-138f540b51e4",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0e9d05d8-0d7a-4c0f-9314-cd5d5f4e545b"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e2885acf-3647-4f00-8c40-005eb4521378",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item type must be a valid value",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"invalid value\",",
                            "        \"status\": \"0\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "39e480ea-6746-45d8-81ab-5e0889ae2667"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ec243268-d0d6-4d4b-aa48-fbac0a5a4b2d",
                    "name": "credentials_status:credentialStatus:item:status:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "eacf82b9-b577-4f67-9318-8eb93542662d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "abe3b3ce-6a88-4fe9-af8f-2ea3c682ec4a"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7128e3b6-c0a4-4d2f-9b1d-0b7ef1bfc662",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "6b6391f3-b169-449e-bee9-1e281756e8ac"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7c371dfc-1747-4813-b778-e1fb3bdbe397",
                    "name": "credentials_status:credentialStatus:item:status:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "66e6fc7d-64c7-4c93-a250-373ee0d194cc",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "55cafbf2-6d23-4063-889a-5c6ab21f29d9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f8490133-07d3-4c2c-a658-b3647ab446a3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": [\"0\"],",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "abfaf0b0-f067-442e-84ff-2b0e6c92a0ee"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1576077b-7c84-4d93-b966-7c2bda40bdc8",
                    "name": "credentials_status:credentialStatus:item:status:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "7b58f704-b964-4f95-a420-a75d8787467d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "7bf7dde1-28d8-4264-a4e9-bb97a95ba81e"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fdb49a24-2b9a-499b-ae49-0ab734de165c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": false,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "2a3389ba-3d8d-4e8c-b193-bc8476e86eca"
                        }
                      }
                    ]
                  },
                  {
                    "id": "5c7bb09d-3590-4c45-a424-e229f620a7c7",
                    "name": "credentials_status:credentialStatus:item:status:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0debfe08-a20c-4607-94e0-391c7937cd89",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "0724c1bb-c375-4344-8e77-7d64ffb9860d"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0b0c7dfd-9965-4847-aab7-23a849e3cc83",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": 1,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c4b0ca70-6393-47b1-bd3e-ef3658e6c603"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2fe7e442-d7b5-40d0-9ca5-3c69bb8b1ee8",
                    "name": "credentials_status:credentialStatus:item:status:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "42765784-1bf9-4bc3-8310-fda5f7da20f5",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "85794e15-4211-4369-8260-92e602e7e1fa"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cf624bcd-103e-4edc-8adb-7175a619b929",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": null,",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d2347706-80e9-46f3-989d-90bdb1907d85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9cc99b6-a1f4-4dca-85d3-215c9067f8c0",
                    "name": "credentials_status:credentialStatus:item:status:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "563899cb-71c9-4f93-b68b-082af5f17824",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c186e2d8-e3b8-45c1-ae05-bcc89fd56e50"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0432116a-1415-4d6e-bb73-f26baa9f64b0",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": \"revocation\",",
                            "        \"status\": {},",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "bab88c1d-c64f-4dfb-af50-f15d98a1efec"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6a6ed082-c371-437c-ad01-a31fa4170aa0",
                    "name": "credentials_status:credentialStatus:item:purpose:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5a0f0d7a-64c4-4791-80f0-4ce15c36f49c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ce57c69c-3609-4f1a-a680-1795a9fbdbc5"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c561e9c7-91b9-47af-8939-37e543ee0842",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status is a required property",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "8b09a975-552d-4b5b-ba47-9525bcea9c42"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3e967359-aa0b-4405-aa63-0cc7ae37f593",
                    "name": "credentials_status:credentialStatus:item:purpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "6c4a3e8c-18e5-485e-b819-754500179e02",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "c60e9577-fef8-44fc-9c28-0493c454940f"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "14f4ba82-1ff8-49cd-b150-fa050e7765b7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not array",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": [\"revocation\"],",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "c52e4947-f3ef-4ffb-aa59-d8bdbfd372b0"
                        }
                      }
                    ]
                  },
                  {
                    "id": "99104a6b-0493-4051-8937-c6e177c89550",
                    "name": "credentials_status:credentialStatus:item:purpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "5460f6d7-daf2-4dc5-9a97-4dd897111da3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "ab6d1435-3db6-4fa2-a818-464154da7e20"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4cecb257-5ede-4fa8-8e68-2a3a11e73710",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not boolean",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": false,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "d47ea1f5-8040-4028-b031-967ce93f71a1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ff390e5-1a37-4502-a3e2-7560c135901b",
                    "name": "credentials_status:credentialStatus:item:purpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b137d00-ce37-4bb3-a8c1-d3c2f60f7192",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5cef4fef-fbd0-4465-8c70-8a59c1cffca1"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "cfa1b446-a1ee-4149-bb98-dc835ea779db",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not integer",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": 42,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e95b8b92-cbd2-4378-a343-865130e68003"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a6287039-c41a-40be-9b1d-0592a8b23bf1",
                    "name": "credentials_status:credentialStatus:item:purpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "530f7aa8-ae45-43aa-8b1f-89c225fcadb7",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "64501687-1a4e-41de-8410-8c96a17154b9"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c55ba76-0789-4e9f-af15-31928d2ffc99",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not null",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": null,",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "e90cc1f9-f79d-4c7c-904f-d9a1bd602e55"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3b958dc2-aaa9-4fa7-abfe-48114bef5357",
                    "name": "credentials_status:credentialStatus:item:purpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "0b4be377-277d-4d32-939b-031ddc38133d",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 400\", function () {",
                            " pm.response.to.have.status(400);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            ""
                          ],
                          "_lastExecutionId": "592e2313-91da-4124-8436-1d57f87e3a42"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "51b331e0-d43b-492e-997c-d641a114532b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // credentialStatus item status must be string, not object",
                            "    req.credentialStatus = [{",
                            "        \"type\": \"StatusList2021Entry\",",
                            "        \"purpose\": {},",
                            "        \"status\": \"1\",",
                            "    }];",
                            "}));"
                          ],
                          "_lastExecutionId": "73c30fe3-49fa-45d9-8d04-8a0d606f1b05"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              },
              {
                "id": "b4ffc9ae-10c3-4b3e-a54e-3da89b7d59cf",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "199000b7-0323-4c18-a530-3dd0e004c1c0",
                    "name": "credentials_status:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "status"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "56ea3ded-7548-4f42-ac2e-9612e07a6919",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));"
                          ],
                          "_lastExecutionId": "7fc07bcc-bb3e-418c-9bb0-a562d44ce5b0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "57baac18-5572-4dbb-93c3-1c1520211db3",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "32d694cd-b6e5-4c3f-ab1e-c10f966e37d3"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "26be6be0-c2d4-4828-bc11-485e0af68013",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "bb24d1f9-78c6-43c1-84fb-382adb856373"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "8568a0bc-434d-4e09-919f-2928e42a67c3",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "62d605eb-6f5a-4491-8d31-644fc13d363a"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "c189cfed-f4e1-45d5-aeb4-cb473382d493",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Some values are stored in variables so that they can be substituted",
                "// into the request body and so that the response body can be tested to",
                "// ensure it contains the same value.",
                "",
                "pm.variables.set(\"credentialId\", \"urn:uuid:{{$randomUUID}}\")",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// to issue a valid credential. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "    \"credentialId\": pm.variables.get(\"credentialId\"),",
                "    \"credentialStatus\": [],",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "62e5b54f-8786-42a9-84c3-f513ed02023e"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e723d990-8601-47be-96ed-1bd000bd57de",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "9487a7de-b621-461a-b55c-038a4e7ce5bd"
            }
          }
        ]
      },
      {
        "id": "99eddbfb-857f-4bbb-a5be-bebbe089e558",
        "name": "Credentials - Verify",
        "item": [
          {
            "id": "38a5b86f-ae1e-4fb6-8a07-c821fe28cdd3",
            "name": "Negative Testing",
            "item": [
              {
                "id": "d492f1a4-bc8a-4bb8-9326-c60de06cb740",
                "name": "Bad Request",
                "item": [
                  {
                    "id": "52e81e3a-e264-4811-a999-2fe308b17de9",
                    "name": "credentials_verify:vc:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "189e109b-7b76-4c56-bafe-4d5dc3632b27",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "61c51ca8-2f76-4a28-b7e2-178a0dfe90be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26ef61a7-c4c4-4718-a7a6-1b0bb0f9f0dc",
                    "name": "credentials_verify:vc:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": \"string\"\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "d0cd6cd5-797e-4e4f-b2bd-05b3a910acb5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ef90f7a0-3505-40e4-8f9a-ccad939a2392"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e78504c7-891a-4531-9950-dc4c07b51d84",
                    "name": "credentials_verify:vc:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": null\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "13fa6161-7d1e-4320-b549-76fd391834e4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "244dfad8-3095-4f7f-9b74-010aedd96a15"
                        }
                      }
                    ]
                  },
                  {
                    "id": "63abb8c0-ff6e-4f6c-9116-ad3a064198b0",
                    "name": "credentials_verify:vc:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": 123\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "57280363-9afa-490f-b526-671893a7bd86",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b62b84ff-f539-4eb7-857e-b88ae591de71"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e08ccc01-d21c-4136-a291-5833f473275a",
                    "name": "credentials_verify:vc:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": true\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "f18b33be-385a-4e3b-a421-6a885b6ae7ad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c845fe0-d70a-4aa9-92eb-a1769f19553f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "397e8873-9947-449a-9e2f-4f1b666e6df3",
                    "name": "credentials_verify:vc:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": []\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "11690a32-eac1-4c09-9437-ee2672662d9a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b5d448b8-aebb-4306-a5f4-7ead8fd6e477"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a8103021-099e-43d8-b2ee-be4376293150",
                    "name": "credentials_verify:vc:@context:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..V5PnQzCWxrPiCYT-WAyKAnypebgwYeD7lX_hyIjFa_lbJje23pZAfFdgnlqBnXLd19Ksa8fZpCE9TN7kAjzxDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2280fb02-4b93-407c-8f8d-9fc596136453",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "76038baa-c1a2-4926-baf0-3f264fa7eee8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1fa60ddf-2817-444d-9c5d-69d641c8d59d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3ac766ca-1ade-4f80-a15e-96db23d25c0f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "609ac65d-d7de-4046-bcaa-8e8b89cacc6e",
                    "name": "credentials_verify:vc:@context:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d42b1e07-473f-43bd-9c0e-5eb6a38925f0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b68da9b6-016a-496c-bb24-65e6db5711c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "2132c1b6-a3db-45e3-bce1-6f0e934f9a48",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1d47cdc7-6d5d-447a-9fd7-74e29e7b88ba"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4b623501-a49e-4b2e-99f4-2d981a571a35",
                    "name": "credentials_verify:vc:@context:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a212c359-21e1-40c6-9bcc-4f69a6c30003",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3ea85eaf-2e41-483a-b1dc-a92f3e381a48"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "dd245126-3b3e-443c-8c83-5548ad3042e6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "fac930e7-0da5-474b-8b96-2b89fe4e16be"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c4c43e0-d003-4050-b1a9-66b98479cdd2",
                    "name": "credentials_verify:vc:@context:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "84f9e028-2cea-4852-91ec-8265d95a6ee9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2e159297-4670-41bc-ae3b-353ec776288f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d21c3d31-901e-4fa1-b258-2cfa7699d5ee",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d0ad3645-5db9-4773-9ce9-ea57dcb07a1e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d4f8feb-c74a-40bd-a6fc-d46734647c4b",
                    "name": "credentials_verify:vc:@context:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": {\n            \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n        },\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..w4xJhf2l_4JzwE4kp8pD8dNJdWSaws5HiBgal8zFzB6i9p05tmPITdsrUttpUwopW5UAq9M_EZVqlz-kRfSFBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d1ba223f-0d70-4157-a443-7aa265b39f79",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a026b15-7d75-4e42-b0c9-9792fc7e18b2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d60be8ee-33c3-4d4c-beb2-a91377653f60",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6e9b25ca-f01c-47d4-87b8-d316a202cf3e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7000070b-0164-488f-967e-f43963f6de5a",
                    "name": "credentials_verify:vc:@context:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": \"https://www.w3.org/2018/credentials/v1\",\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "007208a3-6639-430c-a389-a27b40b2838e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "42fa14d9-3e02-4a49-9edf-cdb6ee74d6d9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "50c02b11-96dc-4017-88c4-f4c274b1a895",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b054433d-f6ac-43ed-b15e-3add936be655"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3eea2b1a-57ea-4ad5-b4a9-69b3be5cd59f",
                    "name": "credentials_verify:vc:@context:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6958a81e-6ee9-43dc-ae43-decc30bae5d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "258fcf58-d750-486b-befe-9c86aef5be71"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6522935b-7144-4822-aa21-ed511bfcd03c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a379571c-0a21-47f5-a657-b2cf4bfcfda9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4c4b931e-13cc-4297-a23e-cc4eac59156c",
                    "name": "credentials_verify:vc:@context:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "546ca9e1-91a0-4a18-8d0d-1a901ede9f30",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5f624d68-54bf-4fe9-bf05-55e06d9b49c8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "abca90c2-2012-4083-99d2-e5043e5b33d3",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1c8698a4-53b1-465f-beae-d0f8baf3671c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb5c6b9f-4a9f-4f69-89d8-f73a5f18ebde",
                    "name": "credentials_verify:vc:@context:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "27f06e36-6f55-4cbf-938f-a805890cc8c7",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4fe2f859-fdf2-41e1-9f65-ccb9872698b6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "caaa8637-dc09-4994-8278-18a94a43a2bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8f90d16c-c20e-48b7-b567-683baa6e572a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b12e0a3-8843-42f1-bcfc-229ef0f7e878",
                    "name": "credentials_verify:vc:@context:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5e76174b-2314-4fb4-81c8-96b8cc7a82e9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.@context must be an array of strings",
                            "rawBody[\"@context\"] = [\"https://www.w3.org/2018/credentials/v1\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "0f8f09ee-1b6d-4e8d-82f1-434922386456"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6f4e76f9-706d-460c-9efb-36fdb22f4cce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "626efb59-2d0f-4cf3-ae05-aba9f01c5000"
                        }
                      }
                    ]
                  },
                  {
                    "id": "db01aefb-3627-462c-a929-ee15bbb0e517",
                    "name": "credentials_verify:vc:@context:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            {\n                \"@vocab\": \"https://www.w3.org/2018/credentials/v1/#\"\n            }\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ed232b3b-9798-46d5-9ac3-c6a466ae4e7c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c04fd6a2-4af7-4935-8b18-d9ad76526070"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "81b2e3cb-8797-46c9-a5d3-735533791981",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f859c6ae-51e7-423c-9a51-2af46bad7203"
                        }
                      }
                    ]
                  },
                  {
                    "id": "056b66ed-5f90-447b-b664-9048007db961",
                    "name": "credentials_verify:vc:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": [\n            \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        ],\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..iom-sOLAz9-9FhadLRpqOYXXBhx4Rgwa3I3w1oh087xFQqIMhVTzcSpHCGdGWu2QT1KwrrgVAXPeTT2EthmxBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dfde4b60-709b-4fe6-87de-98eddf7043a1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4b58aba7-7641-4bd6-9679-64ec6f546f42"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c000f80a-10ce-49bf-a850-a272c824a864",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1410f086-384e-466e-81d3-4dfaf12077cb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6de4e8f0-5eb6-435f-bd23-7cf151f7d7e9",
                    "name": "credentials_verify:vc:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": false,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..xftqB9cBFsSe226cWEZ4wr5sfxlAOJYYo6yjwPCVeHDdk6OoWGjZQGO7xXpSidrrr6e1imP18LiFK34xtRWADQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "25a797f8-8498-4b5f-80b4-502713e52638",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4a7928b3-203e-493d-b3c9-996e63eccf54"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fbe4ffa5-ae06-4fe8-87ae-5797cd28ac8a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1857814f-4aed-4082-aa7b-8dc084f9038c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "2b7916ce-fa5a-45e6-921a-5ac724db89c0",
                    "name": "credentials_verify:vc:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": 123,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ZqV-qqLOh_Kb4vAdXKBfmFdNyv3FzXJAIYV9JltcYGDAefU3OUOnoaAU2WSEufkuYkvczxfRLhrMKgkoVoIRAA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "114f3af9-636c-4a74-8e66-928d850fa55c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f8c5ad23-57f8-4233-853e-bda38389b11d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "fca60b2a-37e4-4d7f-819a-11b8af8195ce",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d1cf91b1-8c43-4733-95ea-a00f62e809ae"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a27229ac-545b-4e19-8f91-a2580e787c9a",
                    "name": "credentials_verify:vc:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": null,\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Csadnd3P2WqJLxAeXMkyx4nkvXvSEssOQriVuwYK0_6zyssqkkuAcKpkUFh8rf4J5JVpng9yvb_2263dLMLZCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0d938d96-df2f-4927-a913-f5ed7a8b06a0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e901942c-f126-44ef-a006-c6f81dd04fb8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0e65d412-7890-4527-8242-d867b3bef34d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f62bafe3-7438-47df-8105-c9e3c8e8357b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a49022a1-f964-40f5-83f5-1ad586ae2f52",
                    "name": "credentials_verify:vc:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": {\n            \"key\": \"urn:uuid:07aa969e-b40d-4c1b-ab46-ded252003ded\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..0Nrj_srTLYyA-9ZVA_dkVGjUcKx6xELHjbbdppEMFPGEN5c2gPXgstNRjnrr8hhMMegSAbvGASKWseBXGR9uAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3cbd67c1-80b5-4dfb-9da8-8bfb6bfbe6bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f37ac45-f7f7-4c43-9fbc-223e70eb8996"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8d39311a-63d2-4f40-a936-ab34b2c9a6c7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6f3490d4-1d8d-49dc-9974-b107998bfa49"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f2f7d869-f991-4b08-a37c-bd17c985bcdb",
                    "name": "credentials_verify:vc:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Bx6sv21fSmT7fCCxU3fDaLhEOhfRK8llXSiFTgApd4PHot00nVjhaKQyhBW9FfFmJljstlOV_Zff164cxOKiCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3a714f9e-ef75-47eb-824d-ea83e569f96f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "13a402e9-01fa-4a51-9a50-91136c9ef8cc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6771fb04-3d32-4626-9836-5ce4a3bfefe4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e19f926-393d-4ad1-9b88-eddc9f8e21ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d041ec5-c723-4a20-a494-b69da88fcb3e",
                    "name": "credentials_verify:vc:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "9a2d740b-322d-45ec-9bbf-24b734bc44f9",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9aab245d-487f-4bdc-b98b-78871e8bf256"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e37d37d8-497c-4f72-bd6a-824c690116fd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8d2e13d2-8c1f-4495-aa68-9e4749c2b0ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "8dc85994-903c-49f5-bf47-62c838836a48",
                    "name": "credentials_verify:vc:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5a9a62b5-9558-402c-ac97-130ee8491431",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "861d0721-bb08-4b2e-82f9-aa45740c249a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e1afdf8e-8247-4718-93f0-791e6ffe2650",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d649b509-44bc-4e05-be4d-11e132b0215a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "160da2da-268e-4ffc-8157-7df60a1a08b3",
                    "name": "credentials_verify:vc:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2692f7cf-bf72-49fc-9d59-f386271cbff2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ba271343-2f28-40bb-8b63-b304b5a6952c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31964e82-bcf8-42d7-a222-4de96267c5a9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a069b8eb-1e79-45fe-8b20-bc4601e1f36e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dc7a09f2-7f3a-4c18-98e4-6a608734a872",
                    "name": "credentials_verify:vc:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "60b0ba2a-65a6-4ca6-bf4f-62713ffaeb7c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody[\"type\"] = {\"key\": \"VerifiableCredential\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "bd64fc94-9be5-4dc7-8fe6-dfb748aff4c3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "90d49735-2076-4e5f-9070-965d12604e87",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "63324a06-ac23-4221-8f71-662b3271fa07"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fab6b170-b6ff-4ca2-b299-b6d82d1fb24f",
                    "name": "credentials_verify:vc:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": \"VerifiableCredential\",\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c4c2f259-907d-4b55-bfac-35e98cd1852e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b4ea414d-9b50-42eb-85dd-ef74d5e7298f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9a3aad13-1153-4761-950d-b4f86aef560b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "27e34713-bb48-4662-a38b-a729844810f3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a0088de9-99ef-470b-beb4-bf769df0809c",
                    "name": "credentials_verify:vc:type:item:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "01dde274-d6de-4b5f-bd53-a2c622d0d6df",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must have at least one element",
                            "rawBody.type = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ebb7e7e5-ab9d-4657-bfef-0e338bfa1d15"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e506f0d-8b76-41f2-b6c5-25b165b72be5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "de1e0ac4-b649-4d44-bd3c-838454d9db11"
                        }
                      }
                    ]
                  },
                  {
                    "id": "167058eb-d5f6-4ca0-8de4-b84fc858caba",
                    "name": "credentials_verify:vc:type:item:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c32dd07-6cf0-496f-bb07-5b6d8e82caa3",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", [\"array item\"]];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6768548-df4f-48c1-9796-6c92a264a92b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "6677ef85-56c8-49cb-9d45-bc6ac7f3f22a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "aa1d0101-b25f-4eda-bd57-95a76b60fca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "50b8f1bc-a273-4905-aa0c-bdbc66582d16",
                    "name": "credentials_verify:vc:type:item:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "dc4c1f03-1204-4a41-b239-9d6bc0e817d0",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", true];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d2a4dc69-ef99-41a2-a77b-221d5a35025c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "60303825-73d0-4c4d-bd94-1b086aae5381",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "04b3d3a1-c17d-4742-9d83-2f4fe2a4a81a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9030dfa4-b085-45b9-8c3f-bacd96f60f27",
                    "name": "credentials_verify:vc:type:item:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4c5545f4-4c0d-469e-9f3f-19c7285dc190",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", 123];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b664125-bce8-4733-a413-beedfad8f59e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd5a0bac-8e39-4af4-8dd6-dba07036c17d",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cfbdc11b-e6a5-4e35-8925-531888c42115"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cf4d1a5d-734d-45c3-9441-00598e720c31",
                    "name": "credentials_verify:vc:type:item:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d6799ff6-f4d8-45d6-af06-077083d8cad8",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", null];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "df809237-1e54-45d9-bf58-65e0ef5e373a"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8285ca0c-b714-42fe-9702-c27520a33636",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8cd5b870-4d4f-4fab-b3f3-dc0bcb1f1ddc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "568096ca-f6e6-4d41-88f6-c534381c9951",
                    "name": "credentials_verify:vc:type:item:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "97d7199b-2246-40a8-a5c7-1f2e98c6c8ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.type must be an array of strings",
                            "rawBody.type = [\"VerifiableCredential\", {\"key\": \"VerifiableCredential\"}];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "9b7621a7-a412-4409-82bd-5fab5aa6a0c6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "34a1a4e4-6ebc-4e68-9069-8bf02733a39f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7c243ae3-b199-4feb-8cf0-50ede3a2657a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6fec845c-83d5-4ef9-aaff-cf1e6f7ce9c7",
                    "name": "credentials_verify:vc:issuer:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d8b5a7aa-096f-4b61-ba97-db84ef01b647",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "33b54759-6d68-40e8-b01e-8c28b580589b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e2cf68b6-dca4-47f9-b51c-f2fe8f2b5ca2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1e7637f1-d9e6-4a32-8967-dd51a0c00cf8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fbd10729-78af-4f27-87cb-a33e848fcd2b",
                    "name": "credentials_verify:vc:issuer:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": [\n            \"did:example:123\"\n        ],\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Mdpb0nbZLuHLqh6IBr6ouahKZNFB-cIKJXn-b-O6Pt6HyJaECfc399qgMTWovf-l04XYEpuYDmfZeYVThBeMDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "118e6ea4-c6bb-40f5-afa5-d6a66140e960",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e0734da-9ff2-4a57-b0a3-c6659274debc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4820f46c-5712-4df3-bb4a-8c09838a55d0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "72bdf276-04e7-4672-8457-86c9746bd488"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1ec61bf8-e2be-4195-81cc-cb06a202236a",
                    "name": "credentials_verify:vc:issuer:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": false,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ryGzH1cVI0oyA0eBPKjIBDGJ8FYapvVnUEcovWWepoAASL3SzOOUvcQ9XOnQlclFU8dYhkEN2L8TQAj2OHlcBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "78717644-905b-4cfc-b3ff-9c712071cefe",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1ba61d28-b30b-4e8d-a9e2-9230f282c4c4"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d1fcaa7c-b841-4ab3-89b2-02751caae46f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f15a4f20-533a-4e8e-b1d2-9cfa7f15a99d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "00822a78-9838-44d2-b4e3-d6e89b39427e",
                    "name": "credentials_verify:vc:issuer:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": 123,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..kEE8wQKYgVQlcBvJeVeV151aR_iD6vPrlW2bgXPW8NvJx9AOuW5eGtL3j_I3xIGR_JWDA5jGy6KDVkqJNEDHAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "872153c4-fcec-40bf-9413-c6b180c99ccf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dc8d5378-52e6-49ad-b017-3ea757b86c22"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9e26b471-d112-425b-a63c-797871b05ffb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "6acab8f1-71ef-4e1e-b1a8-b0700b05d91e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "83aa7d82-9cdb-4e24-86cc-e17f71f34ab4",
                    "name": "credentials_verify:vc:issuer:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": null,\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JtG57INFa8ZuLTnouU9zbgh8jUf_red-a-75XviPrr3HsCFPhrMo6HltNwwb8d4-lftLfws1Bj0NVTYaTKpjBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef4140b2-4dce-4e9f-82d9-f3e3b9b5575c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2628d1b2-543b-4e28-a8a7-7b6f26c815c7"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b878a35c-8ae4-4d51-8594-a22a8919d1f2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "75dba79a-b36f-4b1e-ba3b-e937db016616"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f53f7ba-acd2-485f-b9d0-da8ec9ea51df",
                    "name": "credentials_verify:vc:issuer:id:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {},\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f6e72bcc-cf93-4509-b9dc-3bc7a9ce296b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "50233dc8-a5bb-4051-9671-953b7fd5c853"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "bd0baf87-53e9-434c-a993-d1b875672baa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "435a37bd-0d21-4f02-b80c-39588ebf5279"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b582def7-e747-4e9c-a8b9-da9e8387af4b",
                    "name": "credentials_verify:vc:issuer:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TsN_31UJYzTTx1xh5CB9PjhnehJza3N5gAEFoNO55HLtQvoqGiEd-SI_4Xy7cpuYMbHdYf5CKHwP0eooyzjrAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fb48885d-cb00-48ff-87b5-c16579d3936e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae572eaf-7f16-4dc5-89b7-727f8c092c76"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5ec41b0a-c854-49f1-9983-3a29cddde65c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e02fcdb6-1b78-4acb-a35a-29c83747b479"
                        }
                      }
                    ]
                  },
                  {
                    "id": "23d643c1-05e1-49fd-bc7c-f56333ba1b97",
                    "name": "credentials_verify:vc:issuer:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": false\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..JOl3FF8mG94K8DDAtSYeirCtE5GRVHXYZcIbf3JRCquZ7obaBm1wh3rEzbG-t8kjdWMn7Zwy8q4zw7pMC2-gAw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "0e0c6619-f537-4f49-947b-6dbc123000b1",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "287f3afd-1599-497b-a61b-b7c0905d55ae"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9834b674-e81d-416e-a50c-55034149e2fa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9e877782-6dda-45ac-90dc-2f9c8992ded5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b06f8d56-cd1a-45d4-9ef9-fab5d607f8a2",
                    "name": "credentials_verify:vc:issuer:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": 123\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Ibp_FWO5FwzfTfd_PeTgedqAEcbS7dtCOoREanyZP0yAg63ZGay4hjjd-NwZfmWG8LRbMSqtjX2_Cu5BbBEoAQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "3c0cbade-9926-41c6-8a00-c36e39524913",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c96fc8be-219a-4cb3-964b-34d67c26cebc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0d47949d-0b91-4042-bdc2-566222e5159e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "5e2820ed-ab01-4c98-9c2e-1bc96c5fdb85"
                        }
                      }
                    ]
                  },
                  {
                    "id": "55b0910f-db31-4da3-987c-918ff72b6ba8",
                    "name": "credentials_verify:vc:issuer:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": null\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..3mHg7Xr443P-rcakew2CdGzjKXncUa4j2zY8A_W7U9tqPMFAiWuNqK5CTKV8yM_P3p5VZC8HMlc7SiaJYp-iBQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "91948a9f-74c2-4ae1-a598-e48a6995b479",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1a4cf95a-29c8-45a5-9403-54ae52590489"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1c05984c-779a-473e-9fe2-887ea496b671",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f7b37296-3557-46b2-947f-35da0190b15c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7e6639c2-2570-4c78-a3bf-a18523a8db17",
                    "name": "credentials_verify:vc:issuer:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..n3pFfPx4jY7EjlOpLNJT4CAJYI1roVE6LoUgLQhJ1bMgS5xUKbsIhynp7xDW-vSGzIcu58w-Z8_d9--99NCDBw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "589317d4-4e69-4c5b-889e-b63a51ba9401",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bd06745-b607-4d83-9c3e-d7953fe2a7bf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "00198463-82e5-4d97-b301-9f8bd0c57573",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74a97b20-2005-4afc-b4cc-ecf48fe69dfb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "6887722e-dfba-4c80-950c-7f138795f814",
                    "name": "credentials_verify:vc:issuanceDate:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4711d7b3-8ca8-440d-b619-4f8c3c77e12e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8958a400-e5be-4ad0-bfd8-98504c6742df"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1ae6ac88-6367-42da-9ef4-9bc651d404e8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "3a0c7fb7-7b11-4766-bff3-a3ac45925153"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c2df59ab-a665-459f-ad4f-98653e0e3513",
                    "name": "credentials_verify:vc:issuanceDate:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": [\n            \"2010-01-01T19:23:24Z\"\n        ],\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..eJGt2anEVhR3qXrd8726C2a8PNJ-S4SnhIUB2YpAUiLJhTQ4FcY_nONpl-U0MbpWgwlpJ7xa1_uk4EMrGmOUBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e4d9c22b-f0d9-4284-99f1-5298a8cc2caf",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e4fbb9c-f2ac-4c79-b92d-c095312cf0d3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d99577cc-b360-4d18-b403-15f04e94e64e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ab8d00f7-6afb-4461-919f-7d603cb41ee9"
                        }
                      }
                    ]
                  },
                  {
                    "id": "acfd7d8d-dfab-4d0b-b336-86ce6d973c82",
                    "name": "credentials_verify:vc:issuanceDate:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": false,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8Ax_d8Yp8MIszSaGQa1WkiT4xktUk0Ltg7EF3QQ-GGY8JaV_jR6-zRUlEF2iW0HcK6C8ZoAt0KrllUUDdJkdDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a8d57ed6-59da-49a2-bb8e-2ed84bf61926",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "98f148b9-1560-4008-b378-842b8481a0e1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "998b49bd-7ec1-49a4-921f-df055a636c53",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "be0b58c3-bd5f-4c16-8da9-e9d9eccfc3ef"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ab03072d-ebf6-4735-8e60-e8801fdf0532",
                    "name": "credentials_verify:vc:issuanceDate:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": 123,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..x-sSX9vqc6977YPFhNbzjKdisDv4qD2mx-yBSH_EG-UQCpyH_ErCzoFWnpJzRJKIKbOLEvvZ5SO_fWbNWyNdCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1539b62a-4e8f-45a8-9eec-35888fe358f4",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f20cb1b-e9ff-4bf6-af67-3576c3166e97"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "832327bd-d18d-4383-a548-7ed37bcb285e",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "26d6c29d-ae45-4e03-ac76-079ddf14ff9c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "7efaa996-40cf-4eb9-a51f-8aaf29706eab",
                    "name": "credentials_verify:vc:issuanceDate:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": null,\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..TM8P7mgJHcCjS_-L0AM_0QC1NSxVBcrUmv8bgZNoU-XF9F69wiOhogacbQFbewG5g7kf6mUvNA2Rv2SOHnjyCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eb4e6422-46ee-451b-bccb-ef0f83d96798",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d8d0c904-27d0-4d8e-b315-97a73bf327b3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "696616ab-e44c-4389-929c-aa145a36404b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39893a2f-303f-49b1-b27e-edb17a2dd037"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9154c005-8874-4be7-9758-ec42266bb9bd",
                    "name": "credentials_verify:vc:issuanceDate:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": {\n            \"key\": \"2010-01-01T19:23:24Z\"\n        },\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..Z1GVMKiJuJeJMpR_Ag4Wpv6940N3WUreYSxEsPaZgU_J1C_EDUj8ycRJitlJNEBBuGhibJ0GWyK-WW9RO2WCDA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8fa58c9d-143a-4c02-a7af-12df378e416a",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9ae6916f-3e40-40e4-808d-b51cf7e6ec9c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b7adab79-46b0-4959-827f-0ddd0911dd9c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9c491ace-9c91-4f12-ab17-d575fdad1d4e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "665d80cf-dfaa-4136-8d3a-393a77a72ea3",
                    "name": "credentials_verify:vc:issuanceDate:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"not a valid XML Date Time string\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..ebrsCszvH6TQHw1QhA8laajPRWL_zGvQ96Up8A4TiJrY7ueFm3V-Suk-KNd6JKckpOxLoF-Cb24KG_g73AqHAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8922ca94-f372-46da-b476-e6c33464ef77",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "74cecd78-b1f0-4855-bdaa-fc23050ed859"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "557f3987-45a4-4361-8407-d7f9faea54ac",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f0cb05a9-8546-4ce7-b62c-a4bc3e12ac8c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d200595a-185b-4660-83da-4e725e9050e0",
                    "name": "credentials_verify:vc:credentialSubject:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "eaec0a69-4f0c-489e-90a8-51efb332056f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1790c808-40a6-4b70-8140-ce7cca1d2fed"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ab25cbb0-ab80-40e9-a890-1c2270c3beeb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "311cdec7-d946-4d5e-a0a5-bd26e3c00072"
                        }
                      }
                    ]
                  },
                  {
                    "id": "fe5d094f-9298-4bca-a769-e433673c2cc8",
                    "name": "credentials_verify:vc:credentialSubject:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": [\n            \"did:example:123\"\n        ],\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "911c555e-42ab-43bb-90d2-0bc5f3244b28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ad4782be-e549-4964-881c-39dfef8a4d02"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e82c0dd0-01c5-4770-abf3-168fcffc1b21",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dc018e8-bc38-4def-b21c-32110e342ff7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "764c209d-8462-453c-bd16-e022e8192ce2",
                    "name": "credentials_verify:vc:credentialSubject:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": false,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..VK75R0RpQX9g4E_vGExhb_aDUNycy1UlQYvhCL1Ydl9bWiT1oUPeHEUgJMRGzmRRvyByyj13oHI2yB3cOLWXCA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1d4ce057-5210-4f52-90e2-c1d21abf543b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "14c3cc7d-c55b-48cc-9cef-a25e2a21dca8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a70611b9-c131-4af7-9b11-a198b83ed3eb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "929bf36e-7440-4f0c-8181-a47b87359d01"
                        }
                      }
                    ]
                  },
                  {
                    "id": "86ab2151-6e66-4148-b96f-219006f5ec35",
                    "name": "credentials_verify:vc:credentialSubject:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": 123,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..dQnu8mT7YMECvDQPODQ1YUudQIO9Yx7WsZ07UWpHRqw0iV3ZvJOebbBoY0gFvsF9t6foFFEaaWcKi4vNgIdfCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82399844-a8bb-4c3c-891d-511313acb9b8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e20d9bad-9dd5-4f31-81eb-bbb976a4b7f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c6ad3060-71ba-4665-ac7e-11aa7b0bcf30",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "082072ad-5534-43ac-a748-866356f7501a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "943669cc-acb0-4493-a1bb-dd130e07095a",
                    "name": "credentials_verify:vc:credentialSubject:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": null,\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..bHp5pm-9GUkKetjC75DopheXPgXztK_ruNFKStI2vt2pBbXHRJWZlO1PsXInyqfre9BcqmIUcwD4TbbjfiUYCw\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "31c38a80-2039-4e25-95ba-5a194817dc69",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "1f135395-86b7-47f0-bf87-f9e17739953f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "31455e1f-e35c-412d-830a-406447211f36",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "e2dbe21c-5062-45e8-bc78-df0887e6637e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b35482ce-42da-4992-b634-b6f07392c78f",
                    "name": "credentials_verify:vc:credentialSubject:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": \"did:example:123\",\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e521536e-5a82-4b08-9a01-a18657e330bb",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9935c6e3-8e9c-4d56-9c88-ff4153d681e3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "7f8ac877-059d-44d6-b513-829f4acc04cd",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "c8acc523-db29-4f96-95dc-eadaaff2d84d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "280f199d-c12d-4624-a680-69cfb0461668",
                    "name": "credentials_verify:vc:credentialSubject:id:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": [\n                \"did:example:123\"\n            ]\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..8KJ136ciaI5X01UO8dPG0KMcsxmd7qzxvrahflTNqsrjjd-vF8bBKpjVDLOOj7bUolO277JWFCPX1xvvAVAvAg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5607c696-e53c-41ef-a3c6-4fd23580bb28",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "898c225b-01bc-4428-b50c-1650644a373b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "21534ac8-85de-43b9-a73a-f270bcb0797f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4bbd55dc-02d8-4f13-a17a-53571d858e93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "0a3a2251-540e-42b0-9196-06b3a6f3f3d0",
                    "name": "credentials_verify:vc:credentialSubject:id:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": false\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..1Tatn2a45JYHHvhGvCLNbO1VUDV_lkvRVosGzDXDF-DseqRorDTFmY7XSyYqrl5yc6B200ET0RBvgK2vyEC6BA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d03d7808-a05d-4345-a864-a2c8cf9127f0",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2918feb2-8005-484f-8c09-3dd99d8394c9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "36ee04a1-6733-4a53-8656-69f54c689110",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "cd8de931-7c7b-40b7-a4f5-e78099190828"
                        }
                      }
                    ]
                  },
                  {
                    "id": "27af2bc6-be25-401e-97f1-d32598f02a7c",
                    "name": "credentials_verify:vc:credentialSubject:id:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": 123\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..qPc7PrMuniibwI74A9ELPRd1YyUjNyeccnUFc4GCfj7I3oREDl0RT6PEt1pEY81mq7vlIsNG1myE86igC__qBA\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "b3c7e8a4-28fc-459a-8a4b-0907a6f3b364",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "435dc7bd-08cf-4b87-8e64-ebd2976b8594"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f70266c0-92a3-489c-8b9a-21e274158b00",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4d1cceca-98a7-4cd9-8ced-56f1fb691fb5"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e9db42ae-82fc-47c8-936c-a48619d4efd4",
                    "name": "credentials_verify:vc:credentialSubject:id:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": null\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..10vzNYPpxv6gZwVR-V23lgvIgseVOwxT6Tc1Zbn5T6pWGmUhrkur_O-OexNVjkVSf7Qu_6NDnIL1m0KcNKGBCg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e3948b57-a820-48b7-8289-654cc0af0e32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "593275ac-afa3-4d2a-9849-b6f1a76c60a3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "30665977-73b4-4dc8-9f91-3cb2afe9daf5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "05a7c30d-33b8-4981-8b79-26af674ad809"
                        }
                      }
                    ]
                  },
                  {
                    "id": "bef9cf46-ca4a-4e25-ae6e-c2ccacacda78",
                    "name": "credentials_verify:vc:credentialSubject:id:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": {\n                \"key\": \"did:example:123\"\n            }\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..tQJMGZTsqt1RhpxKkq647EHc3pjQ183zd4KchfvD3dXWVfL9X1fUedMbj33l8eev6YWua2-6_4_sUTDr2MLEDg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5c40331d-1803-4c14-bf3f-21ae5893ffaa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2e859a18-81b8-46b7-975b-f50828a28b20"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3abdda82-6cce-4b83-92ae-97880ce9ea70",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "544036cf-b74d-48b8-aa5f-8a61f196bca6"
                        }
                      }
                    ]
                  },
                  {
                    "id": "26fb0d02-3aa2-4ec6-937f-bdda86394aeb",
                    "name": "credentials_verify:proof:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ad090d98-8c4c-420c-ab90-447fe07d0e9e",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required for embedded proof VCs",
                            "delete rawBody.proof",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "c8d397c8-fe01-4b5c-9d56-e3f790064a1e"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b6918b3d-4088-40ad-8827-3d7db1dfcdad",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "975a17b3-40df-4892-9a5c-0d7e7f6ca743"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4ce5cf61-8a9b-4849-a574-f7440301b5c9",
                    "name": "credentials_verify:proof:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d7e907d1-a495-4b19-a1c6-0f819f1675c6",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = [];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a65a2f92-3be1-494e-a9f7-f7f4f9879133"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db0a4b23-6ff7-4e19-ae2b-090a12618607",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d2b0039e-aed3-4b21-8d4f-060e276aa56b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "423f59ce-94ba-48c3-a533-3b24779d1393",
                    "name": "credentials_verify:proof:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "1b4e6bd2-7315-4659-90b1-2479bbccf2d4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "32d46fb2-e17d-4d5e-a292-0ec85b2706cf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0963d525-28ee-4c00-bc2f-927138a22642",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "ae5ccf0b-3ac8-45c7-ae12-85145be22604"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a0a8b55-6b08-4127-b294-f671d510cf8b",
                    "name": "credentials_verify:proof:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "825395b4-ce3b-446e-ac23-10f237df9b2a",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = 10;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d4fa7131-e15f-42d4-a9e9-d9f92e91c416"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "22aedf62-c16d-4ee8-b29d-1dc262195143",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "88989bee-367d-4e47-af51-83dce76bf4d4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "a94f45c2-b3aa-495d-8e54-1027104dab84",
                    "name": "credentials_verify:proof:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "04a0e72c-f84f-4a21-80e4-8ea126fee03b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "8f176da3-4ffd-4758-9cc5-9cf8ed7078d6"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "c7ebbb9c-cd0d-4a6a-87b1-68a4417874e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "9dbce27f-d4b5-4cbb-ac09-7e0ed079960d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "b19c9201-a64d-4f39-bb1c-693fac9005bd",
                    "name": "credentials_verify:proof:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "32697e06-9531-4673-a38a-061093ab397b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof is required to be an object for embedded proof VCs",
                            "rawBody.proof = \"string\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5a3feb25-277b-4199-a70c-922426b3ffc3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "1d2b1550-0b65-47e0-b4b7-3d018234af32",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "51984eec-5090-4277-8683-e1513595ef93"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9d14ee2f-f351-40ae-b1b3-46596900ea02",
                    "name": "credentials_verify:proof:type:missing",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "65c44104-f564-4c90-9e99-c1d068605ca2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required for embedded proof VCs",
                            "delete rawBody.proof.type",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e7357234-3368-4f23-a85c-fff3083fae73"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "232928d1-f624-4353-a89f-641c927b5a96",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "806462f6-c534-41cd-b591-dd8e704fae08"
                        }
                      }
                    ]
                  },
                  {
                    "id": "c9620507-3b2a-4b8b-84cf-b03ff8c3b459",
                    "name": "credentials_verify:proof:type:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ce8ae412-dbcd-4f25-85d7-6bc709e728f5",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = [\"Ed25519Signature2018\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b3a81177-af3b-4f4b-9ab9-752fc954a48d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "ebf02ed6-fdf8-434d-9a1b-e12ffe952a65",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "2f16ff9b-96cf-4322-ba84-7ac8f640a4e3"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18189712-e29e-4263-880c-2e063c4b280e",
                    "name": "credentials_verify:proof:type:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8a3a6031-a9a9-4e02-82f6-865ddba38862",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b54dd7c9-09a5-4e5f-a376-34c6de80bc7d"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8e274cb4-acb0-4b8f-9eb9-2ec2a7690242",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "91c7ceae-8680-4277-b752-3dc2be779349"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ffc45015-c574-4116-98ab-b10c7379827a",
                    "name": "credentials_verify:proof:type:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e9a90c09-2a39-44f7-991f-46173393f4ec",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "2f595a9f-4328-4a13-8556-8312e09627f9"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "19ccd2c5-921c-4ac1-88a0-98e135f56e0f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "39f78b55-efde-4836-8d66-16714fa4e50e"
                        }
                      }
                    ]
                  },
                  {
                    "id": "71df10cf-1e36-47d1-bebe-7ba2369207b5",
                    "name": "credentials_verify:proof:type:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7455c687-f001-42bf-b5fa-c2cb3a8f103d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e4d94640-1c50-4c85-8b65-9a8f1248e007"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "5d6bf7df-487c-4151-a08e-f4e2b748723f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0972cc05-dff1-4fd0-898e-af0882f500f1"
                        }
                      }
                    ]
                  },
                  {
                    "id": "244c3fe4-3432-406b-8a41-47ec492017b5",
                    "name": "credentials_verify:proof:type:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a6e59b1c-7e1f-4dab-8054-5f80b09d8d9b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = {\"key\": \"Ed25519Signature2018\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "999a4129-206d-4d29-99e2-3e1939549b60"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "850a07f9-06ab-4d34-b509-9f383845c5e7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d635c12b-b6f3-43c5-bc0f-b4d3a141b17f"
                        }
                      }
                    ]
                  },
                  {
                    "id": "ce29a412-45c1-4453-8489-80b1d1695c60",
                    "name": "credentials_verify:proof:type:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "02e39b7c-bd93-43e8-b738-05667d4eb01d",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.type is required to be a specific string",
                            "rawBody.proof.type = \"not one of the valid values\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "6a4ad62b-8158-42ae-b2e5-094e6bfffabc"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "73f8a4ed-9df3-4b69-a2df-888a97ad06f5",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "06709075-d883-40a6-92ee-546b4736179a"
                        }
                      }
                    ]
                  },
                  {
                    "id": "18ba6b1e-3905-401c-be32-b17d336b4789",
                    "name": "credentials_verify:proof:created:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c369a524-99ca-4d64-9e15-cc51dea89e66",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = [\"2020-04-02T18:28:08Z\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "592f2ee5-2607-4fd2-a086-ac9a20e53584"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "0bb76d0c-f3d4-48a6-b7d6-f030b50997e9",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "7ff11e4b-6c21-4b3e-9fa9-24d626b208fb"
                        }
                      }
                    ]
                  },
                  {
                    "id": "aa3b3e10-403f-4c78-8966-f5ffaec2e4e0",
                    "name": "credentials_verify:proof:created:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "e05e4ed7-d7c9-41fd-8592-646642f2038b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "07cec8de-6180-4174-9dc3-a2e0c6344082"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "8612fbde-da8b-4f7e-bf1c-0d98f9298283",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "66520b0a-1c7d-4645-8c65-da7fac0d5dd7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "11453422-852c-48ce-ae53-c428e36c55a9",
                    "name": "credentials_verify:proof:created:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "85e9af7f-31b1-485e-a4b0-a19dd971a60c",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "a6b56d3b-ff92-408f-b32e-dbe5192bd383"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a29368a1-4057-4e34-ba5e-6ff70f8579a6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "24758654-9657-493a-b925-60ec43029722"
                        }
                      }
                    ]
                  },
                  {
                    "id": "066ddcbe-b641-4328-add8-f226f07e4ba9",
                    "name": "credentials_verify:proof:created:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "6ce93968-4508-4b76-b9a2-80b05a3bac50",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "3594ed38-4fc2-43bc-a060-8b67163aad0c"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d00732de-b55c-48f2-8250-6856af65dd46",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "f64c393e-5360-40d7-8f6a-0569e55fcabc"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9cee84d6-e0b8-4dcf-8294-4c7d0d3ce08c",
                    "name": "credentials_verify:proof:created:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "902e2671-697c-4804-bf8f-c0976a1621a4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.created is required to be a string",
                            "rawBody.proof.created = {\"key\": \"2020-04-02T18:28:08Z\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "710aeb6f-b0a5-4d6e-a4b6-c0742a00c613"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f5bbf2ce-f417-427f-9da7-6f336bee52a2",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d7a1e4cf-b1a3-47dd-ab33-9334cbee4ebd"
                        }
                      }
                    ]
                  },
                  {
                    "id": "da8c5727-1b62-428e-880d-a4edf1530002",
                    "name": "credentials_verify:proof:verificationMethod:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "595e4066-605c-4a67-97e3-f6e90ea23f82",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = [\"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d5107d29-b4e7-4e2c-a296-244a12f24bbf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e38d204d-89f2-4581-a655-4e325c759ac8",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "b68d64f4-b325-49ac-80d5-40822d2dbc82"
                        }
                      }
                    ]
                  },
                  {
                    "id": "d0a0347e-f753-4b4b-b959-952fcf5d6058",
                    "name": "credentials_verify:proof:verificationMethod:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "a61ae055-a2f4-46e7-b576-b65eade62264",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "662b3b85-9d71-42a0-a6f5-954fb73f7f66"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d153ada9-4b18-407d-96b8-5a8214516b4c",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0e0f96c5-a794-4765-93f8-0690acc55be7"
                        }
                      }
                    ]
                  },
                  {
                    "id": "1a60ca18-d386-416e-babb-0b7474abf82a",
                    "name": "credentials_verify:proof:verificationMethod:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "be3d77dc-edc7-4bb3-8ccc-e938f04f87be",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ef313f9e-a696-4bdb-9bf0-d8b7ad0347db"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "a57fe4bd-6da7-46c2-9d1c-7fe8cd9a8f3f",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "acab73d6-f855-41d3-be3b-145b583f11df"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f93a02bb-6588-4a6a-8999-fd15c6e9ce76",
                    "name": "credentials_verify:proof:verificationMethod:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "c6381480-d026-4f1e-86ac-235bb0672a99",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "4eb392ec-f242-4fb8-9b16-2f6f1ec816c0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "364aa9db-4730-474c-83bf-25959f9a7611",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "8ea8a7a1-5b08-4c0a-b33e-7c135c6d2943"
                        }
                      }
                    ]
                  },
                  {
                    "id": "61677c09-e1d2-48c2-b9ce-08ebef69c0eb",
                    "name": "credentials_verify:proof:verificationMethod:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d15856bc-31ed-403d-9508-e8d9ba1ce36f",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.verificationMethod is required to be a string",
                            "rawBody.proof.verificationMethod = {\"key\": \"did:example:123#z6MksHh7qHWvybLg5QTPPdG2DgEjjduBDArV9EF9mRiRzMBN\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "99c04632-1f38-42d4-be35-90c2765a302b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "35fb16f9-0dfc-47cd-a196-d50db9d92218",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "80479b9a-4e13-4689-8aff-4425cdf1a369"
                        }
                      }
                    ]
                  },
                  {
                    "id": "404d4ec8-ae1a-47ca-8e87-6e2494c50574",
                    "name": "credentials_verify:proof:jws:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f426e555-686e-4be3-8ac7-0d0bd8585040",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = [\"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "7f3086d7-e243-44b5-bcea-c587a3cab8da"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "26c3747a-9758-4219-a1ce-44c149ba7579",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "0c7157db-4e81-4dfc-89c4-872f879d957b"
                        }
                      }
                    ]
                  },
                  {
                    "id": "9e997a18-6b73-4432-9df4-74718b47355f",
                    "name": "credentials_verify:proof:jws:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "7f3865e4-b976-4572-9b21-83a0b10607dc",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "238cf66e-a3db-4669-a1e3-a36ef3acc581"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f4ee71a7-8da9-412a-83d2-395104c096c6",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "399e78f6-f039-47b8-a845-5bccdae4caa8"
                        }
                      }
                    ]
                  },
                  {
                    "id": "93f78bde-5309-4844-8ae4-3510668bed9b",
                    "name": "credentials_verify:proof:jws:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "abd3020f-2917-4f40-acf7-cbbd01cae9e4",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "e0fbbd8f-d68c-420d-b073-abc59893b95f"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "f43724b3-403e-42cb-a5dd-0f0a70c07d5b",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "d68ed5cb-8a9a-4c14-a7db-4830b53a5019"
                        }
                      }
                    ]
                  },
                  {
                    "id": "4f5f02a1-9e39-468a-bdc6-bd933f020c6e",
                    "name": "credentials_verify:proof:jws:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "4e747011-3c15-486e-8c26-539ab17106cd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "ed2450d5-9580-4de9-98de-43217f08ccb2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e648c27b-21c1-49d6-b05d-2a69d309fb2d",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "702a2428-f712-4be0-880b-e5571e11ed5d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "f609e20a-96f1-4815-b9df-8f270643f58c",
                    "name": "credentials_verify:proof:jws:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ef00cb32-1a96-47df-b263-01b333bf422b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.jws is required to be a string",
                            "rawBody.proof.jws = {\"key\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..YtqjEYnFENT7fNW-COD0HAACxeuQxPKAmp4nIl8jYAu__6IH2FpSxv81w-l5PvE1og50tS9tH8WyXMlXyo45CA\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "656fd632-2de3-4903-a516-dd86f2fca7ee"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "e58ab0aa-85d4-4c7a-a1de-704238255946",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "226e25ec-f6f5-4052-93df-1339999f2288"
                        }
                      }
                    ]
                  },
                  {
                    "id": "e4698622-8b8d-40dc-a577-8570ea4799eb",
                    "name": "credentials_verify:proof:proofPurpose:array",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "fced42da-f0e9-41c4-9012-c2c47611eed2",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = [\"assertionMethod\"];",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "834c44ea-cd41-44a4-9d6b-44e01516accb"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b766cc16-0f8b-402c-a405-d466c44773aa",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "bd5d3ced-a54e-4492-bf5a-33e5e1f75c2d"
                        }
                      }
                    ]
                  },
                  {
                    "id": "3abd0222-26b4-48bf-a1f7-d34bbc1f1a49",
                    "name": "credentials_verify:proof:proofPurpose:boolean",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "2da1acaa-d45c-4020-a326-c2823f4f4d26",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = true;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "d1f56171-8405-49d1-87d4-508691e59679"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "cbaed10b-47a8-495c-a3a5-f2fadc2d6357",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "dea8a759-f658-40f2-99b6-70ffbd0e22ff"
                        }
                      }
                    ]
                  },
                  {
                    "id": "cb35ea95-4d58-4596-8c5c-f5c12a919140",
                    "name": "credentials_verify:proof:proofPurpose:integer",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "d14c22d3-552d-4e73-a6e0-f4dce46b8d0b",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = 123;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "b7d84905-f661-4522-870e-549bcaeb0a12"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "d7db1b2d-c387-4cb9-a88d-dbabc76fbfbc",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4ea9ffe1-4060-4d4b-aa92-8fa8d62eaa59"
                        }
                      }
                    ]
                  },
                  {
                    "id": "180f6a46-c467-459a-870e-b1f428e936e8",
                    "name": "credentials_verify:proof:proofPurpose:null",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "16daf239-60f5-4615-a305-871dbb79e6ea",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = null;",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "41279122-f7c1-464b-ab8c-56502e699ef8"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "9aad7d78-25ff-4ad4-9a4f-f7047ad68822",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "a58ec109-0d78-469e-a0dc-52211e0d9ba4"
                        }
                      }
                    ]
                  },
                  {
                    "id": "eb28649e-0746-4c72-b161-4f0a5bed2188",
                    "name": "credentials_verify:proof:proofPurpose:object",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "f9aad2ed-148b-4210-8058-734c29a908fd",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = {\"key\": \"assertionMethod\"};",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "85738b63-45fa-4d0b-9d08-e6dccd92bef3"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "4b2cdc40-daf4-4675-b2aa-dae680042ca0",
                          "type": "text/javascript",
                          "exec": [
                            "",
                            ""
                          ],
                          "_lastExecutionId": "5f63f42b-bb10-450e-b91e-3ca8dcfe0a7c"
                        }
                      }
                    ]
                  },
                  {
                    "id": "dfc4eb45-add5-4880-98c9-481013e89f39",
                    "name": "credentials_verify:proof:proofPurpose:string",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5d75cb2b-27dc-466c-9b4e-903c3f923182",
                          "type": "text/javascript",
                          "exec": [
                            "let rawBody = pm.variables.get(\"valid_vc\");",
                            "",
                            "// credential.proof.proofPurpose is required to be the string \"assertionMethod\".",
                            "rawBody.proof.proofPurpose = \"not a valid value\";",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(rawBody));"
                          ],
                          "_lastExecutionId": "5bed8db4-7684-435a-9e17-d5fb602c728b"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "b45504a1-7905-47a9-aba3-89d55c470bc7",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "4f66a6ab-c27f-4e0b-97fa-cbedfce45af4"
                        }
                      }
                    ]
                  }
                ],
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "f60e1526-e2b8-4cef-a037-c5a398b25bd4",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "c4f76652-0ff7-4bdb-a390-85232f762610"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "22bf0629-0544-4fdb-8640-abe5e5876d43",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 400\", function () {",
                        " pm.response.to.have.status(400);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema400\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        ""
                      ],
                      "_lastExecutionId": "939a2e9a-ede5-46af-add3-7f79f882ca65"
                    }
                  }
                ]
              },
              {
                "id": "933cad2a-bbd2-49de-bb03-3ee814437b41",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "f64f7808-2c9b-4f0d-a679-ffeeea177b71",
                    "name": "credentials_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {{requestBody}}\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "82e4fa4e-7639-4d30-a124-72c9d24507a2",
                          "type": "text/javascript",
                          "exec": [
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", JSON.stringify(pm.variables.get(\"valid_vc\")));"
                          ],
                          "_lastExecutionId": "3cdc3fa6-4525-46e3-a5bd-277384c4d2f2"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "db5e7f06-2a64-43bf-9c75-96de6551bcd9",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "b29750d6-5d64-481a-9911-e623de8ed0af"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "81a07c81-0085-432f-a9d9-d22ddc4db5c6",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "5d5b6b09-67e4-42eb-bee0-79457d3b6834"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "647e950d-1370-4b41-9281-2d7fbb334ad9",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1575f57c-51f4-4e1d-9f05-d22d30496caf"
                    }
                  }
                ]
              },
              {
                "id": "053a7150-730b-4957-aa8b-23e75990c5d8",
                "name": "Bad Signature",
                "item": [
                  {
                    "id": "7ab0bdc3-11e5-4006-9351-8f4c1aba073e",
                    "name": "credentials_verify:bad_signature",
                    "request": {
                      "url": {
                        "path": [
                          "credentials",
                          "verify"
                        ],
                        "host": [
                          "{{API_BASE_URL}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "header": [
                        {
                          "key": "Accept",
                          "value": "application/json"
                        }
                      ],
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{\n    \"verifiableCredential\": {\n        \"id\": \"urn:uuid:e22ccc92-2c81-411f-a80f-e7f8334000a7\",\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..mvbcalofPOi7o7nxByyxXCuSOKXuGFM7_W9a8N62-EERarrH4p4T_0c2ZfGnGLiHOvY6Q-dyy38t9HPvXy-MBg\"\n        }\n    }\n}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "test",
                        "script": {
                          "id": "1497576b-12a2-48cc-af39-5d62608f6a52",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 200\", function () {",
                            " pm.response.to.have.status(200);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            "",
                            "pm.test(\"response verified is false\", function() {",
                            " const { verified } = pm.response.json();",
                            " pm.expect(verified).to.be.false;",
                            "});"
                          ],
                          "_lastExecutionId": "ddd0410d-8b1a-40a4-b288-89ee0126ecef"
                        }
                      },
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "bd713edc-b9b1-44fb-bcbe-69a48e4574ef",
                          "type": "text/javascript",
                          "exec": [
                            ""
                          ],
                          "_lastExecutionId": "abd072ae-652c-41f9-9ddd-18afcead50f8"
                        }
                      }
                    ]
                  }
                ],
                "event": []
              }
            ],
            "event": []
          },
          {
            "id": "0a43a6cd-73e6-4ef3-85e5-f5474cde21e2",
            "name": "Positive Testing",
            "item": [
              {
                "id": "2cb951e5-350e-4c34-90bd-99f61214d65a",
                "name": "credentials_verify",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "ec37ef1e-e81e-4dca-9486-cc9c57cf2028",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "63cc7575-bf4b-4d4a-aa03-86f9e02822ce"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "9b76f884-c8db-42d2-8324-6e8f0070ffe1",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "9ea1a507-bf17-4f37-b6fa-07fe5847369e"
                    }
                  }
                ]
              },
              {
                "id": "6e4f6b9b-d630-42a3-8728-0aa5fd73caff",
                "name": "credentials_verify:issuer:object",
                "request": {
                  "url": {
                    "path": [
                      "credentials",
                      "verify"
                    ],
                    "host": [
                      "{{API_BASE_URL}}"
                    ],
                    "query": [],
                    "variable": []
                  },
                  "header": [
                    {
                      "key": "Accept",
                      "value": "application/json"
                    }
                  ],
                  "method": "POST",
                  "body": {
                    "mode": "raw",
                    "raw": "{\n    \"verifiableCredential\": {\n        \"@context\": [\n            \"https://www.w3.org/2018/credentials/v1\",\n            \"https://w3id.org/traceability/v1\"\n        ],\n        \"credentialSubject\": {\n            \"id\": \"did:example:123\"\n        },\n        \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",\n        \"issuanceDate\": \"2006-01-02T15:04:05Z\",\n        \"issuer\": {\n            \"id\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\"\n        },\n        \"type\": [\n            \"VerifiableCredential\"\n        ],\n        \"proof\": {\n            \"created\": \"2006-01-02T15:04:05Z\",\n            \"verificationMethod\": \"did:key:z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn#z6MkgVHZNqLBqoQAoGxRiSJP5gLgVEDCJJzT5ZsGEabKtfyn\",\n            \"proofPurpose\": \"assertionMethod\",\n            \"type\": \"Ed25519Signature2018\",\n            \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..z7SC-b7i7GCi9S_RgHGIkqzgeSxV5XUT_77JuHgqzQP-5KB5n_PrOW6ITnAlmgWyaVPSOD1IHVjb--avWDrbCQ\"\n        }\n    }\n}",
                    "options": {
                      "raw": {
                        "language": "json"
                      }
                    }
                  }
                },
                "response": [],
                "event": [
                  {
                    "listen": "test",
                    "script": {
                      "id": "c363465f-c502-4ffa-b56b-1ccf32decdc0",
                      "type": "text/javascript",
                      "exec": [
                        "pm.test(\"status code is 200\", function () {",
                        " pm.response.to.have.status(200);",
                        "});",
                        "",
                        "pm.test(\"response validates against schema\", function() {",
                        " const schemaString = pm.collectionVariables.get(\"responseSchema200CredentialsVerify\");",
                        " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                        "});",
                        "",
                        "pm.test(\"response verified is true\", function() {",
                        " const { verified } = pm.response.json();",
                        " pm.expect(verified).to.be.true;",
                        "});"
                      ],
                      "_lastExecutionId": "633161c5-977a-43eb-b9b9-2ef33a180b7a"
                    }
                  },
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "502b843c-0659-442e-b19b-f35c63929b68",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "ee45ccfc-0691-48ec-a242-aca77da2ff8b"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "85e19611-a866-4115-bdad-bd1fd8fc4b0d",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Dummy VC issued for testing",
                "pm.variables.set(\"valid_vc\", {",
                "    \"@context\": [",
                "        \"https://www.w3.org/2018/credentials/v1\"",
                "    ],",
                "    \"credentialSubject\": {",
                "        \"id\": \"did:example:123\"",
                "    },",
                "    \"id\": \"urn:uuid:57016a7f-0e4c-4be9-beec-cf39c4dd459a\",",
                "    \"issuanceDate\": \"2006-01-02T15:04:05Z\",",
                "    \"issuer\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\",",
                "    \"proof\": {",
                "        \"created\": \"2020-04-02T18:48:36Z\",",
                "        \"jws\": \"eyJhbGciOiJFZERTQSIsImI2NCI6ZmFsc2UsImNyaXQiOlsiYjY0Il19..R618vVfGIF2jTe5dVkzMqQYIFKoIkyK_3_35z15tp_aFzew_4ruQt2DcaxdtkwsRff7bFsrVfigTl_XeE3tPDA\",",
                "        \"proofPurpose\": \"assertionMethod\",",
                "        \"type\": \"Ed25519Signature2018\",",
                "        \"verificationMethod\": \"did:key:z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV#z6Mkf5p6p73kd57TRr2zWC1NuMUt3SjtYNANn9qjYXZPAYJV\"",
                "    },",
                "    \"type\": \"VerifiableCredential\"",
                "});",
                ""
              ],
              "_lastExecutionId": "73ebbb50-5c52-4c3f-a267-0e55b101b023"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e675f300-ef76-49ae-b081-5446b446f8d2",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "4163643c-a3ba-4017-8d96-349bd0bab672"
            }
          }
        ]
      },
      {
        "id": "531bc36a-0737-4a44-8e60-59a5dcd6c0b3",
        "name": "Presentations - Present",
        "item": [
          {
            "id": "f5ed5a0c-61eb-4c28-ac41-20c2e5b43771",
            "name": "Negative Testing",
            "item": [
              {
                "id": "645e892d-f504-4035-b61c-909419dc02d0",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "9edf31ba-a907-4408-88ae-50c2c647aa22",
                    "name": "presentations:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST"
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "5cf7501f-2b37-49c5-9f76-1329ebcd5d37",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            ""
                          ],
                          "_lastExecutionId": "3618ade3-0d56-40da-a10d-78104dd73faf"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "58952f78-f1fa-4cac-ad54-033ec2ee5d6c",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "a61f0184-2a0c-4a56-b233-5debdfe0a6b2"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "3d08652b-8ad1-4a65-bb0b-b6aaa5992dc5",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "8a862de6-df81-402c-8b6e-773417d3e4ea"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "a69aaac3-9644-4758-938a-acda6cfa73c7",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "4f38f742-edc9-42f9-9410-0ebaf5cf5334"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "type": "string",
              "value": "{{currentAccessToken}}",
              "key": "token"
            }
          ]
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0841ba96-66e3-4f1f-bf45-ef6a1addc7be",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ],
              "_lastExecutionId": "23615fcc-ef88-4f52-93ad-da6a8e2ebff1"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "40451e54-be16-4f96-a576-79a299877b55",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "233f0fb0-c8fc-420e-b5e1-90a4a5842943"
            }
          }
        ]
      },
      {
        "id": "810224ad-89fc-44af-9db1-31cea8f4f9a6",
        "name": "Presentations - Create",
        "item": [
          {
            "id": "7185ade9-4b05-4115-b044-5b135571d268",
            "name": "Negative Testing",
            "item": [
              {
                "id": "e3cd09a4-6551-4c83-82f8-a01649bb801d",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "fa52c795-cc34-4cf9-b4df-3070d3c0fe0a",
                    "name": "presentations_prove:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "prove"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "ee9294f1-100f-4121-8ae7-ce8c6dd7602f",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "0aa4de89-1a47-4989-9b5c-2ea15d8df7d1"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "3466cf61-4f85-4623-8836-0deca70e658f",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "66c35963-8ee1-4c40-a528-b12e1bd1ba2d"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "cbc9058e-342b-4bb1-ab28-10e42a7ee816",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "1e95fed4-3ac4-4c8c-b310-2baaffe32090"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "d68ebdab-5a07-4a4d-8039-58425dd02526",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "b916d80c-2b7d-4419-addf-ee69125ca1af"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "3ff7bace-b79c-42d9-8d91-cb4d393824c9",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "ae9414f3-6d95-45e9-bafe-d8a560327989"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "c51768ce-556d-4626-b35d-90774b9abae5",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "b6a793d2-b0fc-4035-97b4-59ac44af4795"
            }
          }
        ]
      },
      {
        "id": "285146db-8b07-4cb1-b699-4166df89492d",
        "name": "Presentations - Verify",
        "item": [
          {
            "id": "fbaf4d6f-8a42-4766-836b-dbe2e2829a01",
            "name": "Negative Testing",
            "item": [
              {
                "id": "37982d27-3c9c-44b5-ade0-aded10435e58",
                "name": "Bad Auth",
                "item": [
                  {
                    "id": "3d7ec484-bb51-4621-8f41-79f6e5f464f3",
                    "name": "presentations_verify:missing_auth",
                    "request": {
                      "url": {
                        "path": [
                          "presentations",
                          "verify"
                        ],
                        "host": [
                          "{{presentations_base_url}}"
                        ],
                        "query": [],
                        "variable": []
                      },
                      "method": "POST",
                      "body": {
                        "mode": "raw",
                        "raw": "{{requestBody}}",
                        "options": {
                          "raw": {
                            "language": "json"
                          }
                        }
                      }
                    },
                    "response": [],
                    "event": [
                      {
                        "listen": "prerequest",
                        "script": {
                          "id": "8002f3b0-e1b3-4dda-842b-8c16dded435b",
                          "type": "text/javascript",
                          "exec": [
                            "// Get multi-tenant aware presentations base URL from cached did:web document",
                            "const didDoc = pm.variables.get(\"currentDidWeb\");",
                            "const service = didDoc.service.find((s) => s.type.includes('TraceabilityAPI'));",
                            "pm.variables.set(\"presentations_base_url\", service.serviceEndpoint);",
                            "",
                            "// Request body must be serialized before sending over the wire.",
                            "pm.variables.set(\"requestBody\", mutateRequestBody((req) => {",
                            "    // noop",
                            "}));",
                            ""
                          ],
                          "_lastExecutionId": "7fbce612-5bf0-42a4-bad9-b76c38ed86f0"
                        }
                      },
                      {
                        "listen": "test",
                        "script": {
                          "id": "59aca806-486f-4ac4-b5b6-0908ce43a53b",
                          "type": "text/javascript",
                          "exec": [
                            "pm.test(\"status code is 401\", function () {",
                            " pm.response.to.have.status(401);",
                            "});",
                            "",
                            "pm.test(\"response validates against schema\", function() {",
                            " const schemaString = pm.collectionVariables.get(\"responseSchema401\");",
                            " pm.response.to.have.jsonSchema(JSON.parse(schemaString));",
                            "});",
                            ""
                          ],
                          "_lastExecutionId": "c8fa5148-c2b7-42f7-8a58-34f2f837bcb4"
                        }
                      }
                    ]
                  }
                ],
                "auth": {
                  "type": "noauth",
                  "noauth": []
                },
                "event": [
                  {
                    "listen": "prerequest",
                    "script": {
                      "id": "be96da04-190f-4699-878c-0a6313e7d01e",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "54b54e45-ff1c-4e23-817a-25ffa7d98402"
                    }
                  },
                  {
                    "listen": "test",
                    "script": {
                      "id": "16a7bedf-2f3f-4160-9291-c5949c527b74",
                      "type": "text/javascript",
                      "exec": [
                        ""
                      ],
                      "_lastExecutionId": "03f87314-0bf2-4c1c-bf9d-5f49a34276c6"
                    }
                  }
                ]
              }
            ],
            "event": []
          }
        ],
        "auth": {
          "type": "bearer",
          "bearer": []
        },
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "0dbe2fcc-ac4f-488c-9421-24fb539b121a",
              "type": "text/javascript",
              "exec": [
                "// Obtain an access token",
                "utils(pm).getAccessToken();",
                "",
                "",
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                "",
                "// Minimal request body should represent the minimum set of data required",
                "// for a successful request. This should exclude all optional items, and",
                "// should contain the first alternate version of any 'oneOf' elements",
                "// defined in the OpenAPI schema.",
                "//",
                "// Tests will use this minimal request body as a starting point and will",
                "// mutate it as needed in pre-request scripts, e.g., to run tests using",
                "// alternate or optional elements.",
                "",
                "pm.variables.set(\"minimalRequestBody\", {",
                "});",
                "",
                "mutateRequestBody = (mutationFunction) => {",
                "    const req = pm.variables.get(\"minimalRequestBody\");",
                "    mutationFunction(req);",
                "    return JSON.stringify(req);",
                "};"
              ],
              "_lastExecutionId": "93af25ed-54bc-46bb-ab18-c99b81586068"
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "3946c0ed-183a-4016-8928-3b3e85bc4294",
              "type": "text/javascript",
              "exec": [
                ""
              ],
              "_lastExecutionId": "1ce27c76-16a0-458f-8930-ff64a39654ac"
            }
          }
        ]
      },
      {
        "id": "1044cb80-092f-49f8-8757-19eabfc1e8d6",
        "name": "Presentations - Notify",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "b95ea89d-4db6-4b24-bf7b-9e15bc52dbaf",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "b3203906-a689-4441-b6f5-0ef3d6cb2f52",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      },
      {
        "id": "f8d1ad6a-1f35-475a-bce1-fa8aa9ebe33f",
        "name": "Presentations - Submit",
        "item": [],
        "event": [
          {
            "listen": "prerequest",
            "script": {
              "id": "81cb1578-2f10-4745-9669-4b1f25ec5416",
              "type": "text/javascript",
              "exec": [
                "// Presentations requires a multi-tenant aware presentation endpoint. This",
                "// fires off an async sendRequest() that Postman will wait for before running",
                "// any requests in the collection.",
                "utils(pm).populateCurrentDidWeb(pm.environment.get(\"ORGANIZATION_DID_WEB\"));",
                ""
              ]
            }
          },
          {
            "listen": "test",
            "script": {
              "id": "e34d2637-f784-44e4-b128-0716e601947c",
              "type": "text/javascript",
              "exec": [
                ""
              ]
            }
          }
        ]
      }
    ]
  },
  "run": {
    "stats": {
      "iterations": {
        "total": 1,
        "pending": 0,
        "failed": 0
      },
      "items": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "scripts": {
        "total": 1891,
        "pending": 0,
        "failed": 0
      },
      "prerequests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "requests": {
        "total": 252,
        "pending": 0,
        "failed": 0
      },
      "tests": {
        "total": 250,
        "pending": 0,
        "failed": 0
      },
      "assertions": {
        "total": 507,
        "pending": 0,
        "failed": 264
      },
      "testScripts": {
        "total": 950,
        "pending": 0,
        "failed": 0
      },
      "prerequestScripts": {
        "total": 941,
        "pending": 0,
        "failed": 0
      }
    },
    "timings": {
      "responseAverage": 110.17063492063492,
      "responseMin": 21,
      "responseMax": 690,
      "responseSd": 79.31656642291495,
      "dnsAverage": 0,
      "dnsMin": 0,
      "dnsMax": 0,
      "dnsSd": 0,
      "firstByteAverage": 0,
      "firstByteMin": 0,
      "firstByteMax": 0,
      "firstByteSd": 0,
      "started": 1724114432367,
      "completed": 1724114468914
    },
    "executions": [
      {
        "id": "b7d67984-6a73-4bb7-99ca-7c95a37d1b0e",
        "cursor": {
          "position": 0,
          "iteration": 0,
          "length": 250,
          "cycles": 1,
          "empty": false,
          "eof": false,
          "bof": true,
          "cr": false,
          "ref": "23a36284-214a-4fcb-8d63-a13f06fe2d25",
          "httpRequestId": "b112de41-20fa-4f11-8e39-ab6e0a503fbd"
        },
        "item": {
          "id": "b7d67984-6a73-4bb7-99ca-7c95a37d1b0e",
          "name": "Clear Token Cache"
        },
        "response": {
          "id": "1e4f2d6f-cbf0-4f23-8b78-657cbce3618f",
          "status": "OK",
          "code": 200,
          "responseTime": 73,
          "responseSize": 0
        }
      },
      {
        "id": "18012a41-623b-4041-aed2-190940b31dfa",
        "cursor": {
          "ref": "e6b1b855-c1be-4c6d-9516-38bb6b2c6401",
          "length": 250,
          "cycles": 1,
          "position": 1,
          "iteration": 0,
          "httpRequestId": "de01af59-f2f6-4b2d-ac90-0b461136cec2"
        },
        "item": {
          "id": "18012a41-623b-4041-aed2-190940b31dfa",
          "name": "Clear DID Web Cache"
        },
        "response": {
          "id": "354f733d-06e1-4250-925f-b60ff3d85224",
          "status": "OK",
          "code": 200,
          "responseTime": 21,
          "responseSize": 0
        }
      },
      {
        "id": "5873d8b6-888b-4dc3-aa81-1bf9a80b18ed",
        "cursor": {
          "ref": "5882400b-ef63-436d-8019-e4e15bc7bbbd",
          "length": 250,
          "cycles": 1,
          "position": 2,
          "iteration": 0,
          "httpRequestId": "fbdb9b29-7a7d-429c-9e77-e8ff0866c136"
        },
        "item": {
          "id": "5873d8b6-888b-4dc3-aa81-1bf9a80b18ed",
          "name": "did_json"
        },
        "response": {
          "id": "a1fa5f31-9b35-4b5a-8009-f67ebd36f729",
          "status": "OK",
          "code": 200,
          "responseTime": 333,
          "responseSize": 1446
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23b51dec-ef2b-4bef-8a86-d7a9389d7adf",
        "cursor": {
          "ref": "d9effd9a-2189-4a2b-bca0-3e6f660e7e1b",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "64c8f8ea-d108-4304-81aa-649868407157"
        },
        "item": {
          "id": "23b51dec-ef2b-4bef-8a86-d7a9389d7adf",
          "name": "did:invalid"
        },
        "response": {
          "id": "aee7452d-b19d-4013-a4df-cd0ff522c23f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "23b51dec-ef2b-4bef-8a86-d7a9389d7adf",
        "cursor": {
          "ref": "d9effd9a-2189-4a2b-bca0-3e6f660e7e1b",
          "length": 250,
          "cycles": 1,
          "position": 3,
          "iteration": 0,
          "httpRequestId": "64c8f8ea-d108-4304-81aa-649868407157"
        },
        "item": {
          "id": "23b51dec-ef2b-4bef-8a86-d7a9389d7adf",
          "name": "did:invalid"
        },
        "response": {
          "id": "aee7452d-b19d-4013-a4df-cd0ff522c23f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 77
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "1bbeb0ac-c7d3-4839-947d-132d1d6c1111",
        "cursor": {
          "ref": "1c498f0b-d610-41dc-bffc-4b47e737c012",
          "length": 250,
          "cycles": 1,
          "position": 4,
          "iteration": 0,
          "httpRequestId": "6343aa81-9b28-43ab-8432-ebc2051ac38a"
        },
        "item": {
          "id": "1bbeb0ac-c7d3-4839-947d-132d1d6c1111",
          "name": "did:not_found:did_web"
        },
        "response": {
          "id": "06fd5741-91a2-4354-9e11-48ac1bf4f7a2",
          "status": "Not Found",
          "code": 404,
          "responseTime": 136,
          "responseSize": 49
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "86919c62-89c2-4dc6-95f0-5323815a261b",
        "cursor": {
          "ref": "5572ec6d-e2b4-42a1-9ac1-53db8d6db78d",
          "length": 250,
          "cycles": 1,
          "position": 5,
          "iteration": 0,
          "httpRequestId": "e8e12b3d-66ca-4fba-845f-1df9072cb248"
        },
        "item": {
          "id": "86919c62-89c2-4dc6-95f0-5323815a261b",
          "name": "did:not_found:urn"
        },
        "response": {
          "id": "e107b762-8420-42cd-a2de-b804ddf8ea1d",
          "status": "Not Found",
          "code": 404,
          "responseTime": 80,
          "responseSize": 82
        },
        "assertions": [
          {
            "assertion": "status code is 404",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "569820c9-8f53-4cf7-8f1d-50e42e0187fa",
        "cursor": {
          "ref": "e74648d9-0974-4587-9121-f7f6d9d9668a",
          "length": 250,
          "cycles": 1,
          "position": 6,
          "iteration": 0,
          "httpRequestId": "2a4017fb-e49c-4947-9758-635aac449a5d"
        },
        "item": {
          "id": "569820c9-8f53-4cf7-8f1d-50e42e0187fa",
          "name": "identifiers:missing_auth"
        },
        "response": {
          "id": "a4d78a30-3c06-48a9-8861-f76c2af13df9",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 72,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "67cd68fa-0bb1-4e55-87b7-f9c6434b63c0",
        "cursor": {
          "ref": "96c2d2bb-ee43-462d-a82f-59ffd9e07c86",
          "length": 250,
          "cycles": 1,
          "position": 7,
          "iteration": 0,
          "httpRequestId": "9f37b84d-d5a8-471c-a589-b1992b3624b5"
        },
        "item": {
          "id": "67cd68fa-0bb1-4e55-87b7-f9c6434b63c0",
          "name": "identifiers"
        },
        "response": {
          "id": "82cc1711-8212-49d6-98d1-9e2ad097aa0b",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 1462
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "0aaccdaa-ac06-4dcd-820f-4c7921102083",
        "cursor": {
          "ref": "21c5582c-7494-4a78-8d6b-8ca1db5cc333",
          "length": 250,
          "cycles": 1,
          "position": 8,
          "iteration": 0,
          "httpRequestId": "9d7a8575-2b5d-4f6a-8452-04047192847f"
        },
        "item": {
          "id": "0aaccdaa-ac06-4dcd-820f-4c7921102083",
          "name": "credentials_issue:credential:missing"
        },
        "response": {
          "id": "d0453052-dace-4fc8-9321-13e33c283e3d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:9)"
            }
          }
        ]
      },
      {
        "id": "4badf816-1d13-49a1-86cd-cb6712d82ffe",
        "cursor": {
          "ref": "ebcc979b-3d25-42cb-a33d-a478f57965d7",
          "length": 250,
          "cycles": 1,
          "position": 9,
          "iteration": 0,
          "httpRequestId": "a9dfaaed-c48a-4d04-a262-c8af7b6899c4"
        },
        "item": {
          "id": "4badf816-1d13-49a1-86cd-cb6712d82ffe",
          "name": "credentials_issue:credential.@context:missing"
        },
        "response": {
          "id": "a050b1a2-6dce-431c-964e-8386d4409f8d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:10)"
            }
          }
        ]
      },
      {
        "id": "f941ad08-18b5-4141-b1ed-24a78eefd6b9",
        "cursor": {
          "ref": "ebe458c9-08c6-4bc7-bc15-6c631c271ee3",
          "length": 250,
          "cycles": 1,
          "position": 10,
          "iteration": 0,
          "httpRequestId": "d60d2f8b-4596-435e-b7b9-252447a17680"
        },
        "item": {
          "id": "f941ad08-18b5-4141-b1ed-24a78eefd6b9",
          "name": "credentials_issue:credential.@context:boolean"
        },
        "response": {
          "id": "0c869f58-aee6-473c-8c83-66adf61b1943",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:11)"
            }
          }
        ]
      },
      {
        "id": "2b3eb673-5be9-4d27-a425-87d15c864386",
        "cursor": {
          "ref": "9558af10-75f5-4754-a9fb-9ff1cfbf02a3",
          "length": 250,
          "cycles": 1,
          "position": 11,
          "iteration": 0,
          "httpRequestId": "b8210978-e423-4951-8486-7f1db0bfd131"
        },
        "item": {
          "id": "2b3eb673-5be9-4d27-a425-87d15c864386",
          "name": "credentials_issue:credential.@context:integer Copy"
        },
        "response": {
          "id": "f546f36c-b21d-47a8-935c-7d687b3b5b48",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 93,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:12)"
            }
          }
        ]
      },
      {
        "id": "60f93bdb-3463-406c-867b-a3fb6904162f",
        "cursor": {
          "ref": "15622b73-82be-4daf-ba0e-930fb542a62f",
          "length": 250,
          "cycles": 1,
          "position": 12,
          "iteration": 0,
          "httpRequestId": "d5f7f62e-ca3d-48e0-9b76-e2881de95876"
        },
        "item": {
          "id": "60f93bdb-3463-406c-867b-a3fb6904162f",
          "name": "credentials_issue:credential.@context:null"
        },
        "response": {
          "id": "1c6d6b15-8046-43c9-a531-11be8333d171",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:13)"
            }
          }
        ]
      },
      {
        "id": "6a8a5291-feea-4baa-ab22-8b9b4a97f4b9",
        "cursor": {
          "ref": "b69e7463-09cf-4f24-867e-23fde0ca8a3c",
          "length": 250,
          "cycles": 1,
          "position": 13,
          "iteration": 0,
          "httpRequestId": "5a33163b-dc35-40ad-a2e9-59df67cacc39"
        },
        "item": {
          "id": "6a8a5291-feea-4baa-ab22-8b9b4a97f4b9",
          "name": "credentials_issue:credential.@context:object"
        },
        "response": {
          "id": "4cba0cf8-058b-451a-b391-8563bdc9f57a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 122,
          "responseSize": 204
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:14)"
            }
          }
        ]
      },
      {
        "id": "cea3bf4c-3e9b-4675-8937-d95bfadd05b7",
        "cursor": {
          "ref": "83fa01ca-6458-47b8-9958-25a0286adf37",
          "length": 250,
          "cycles": 1,
          "position": 14,
          "iteration": 0,
          "httpRequestId": "e379ca97-5ebe-4953-93e1-611ced8a121a"
        },
        "item": {
          "id": "cea3bf4c-3e9b-4675-8937-d95bfadd05b7",
          "name": "credentials_issue:credential.@context:string"
        },
        "response": {
          "id": "e312b07f-1087-46da-a4ad-8b6ef5aaf206",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 146
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:15)"
            }
          }
        ]
      },
      {
        "id": "15d3876c-d312-4a59-bc5c-c0d8c1bb332d",
        "cursor": {
          "ref": "a86ab37a-2923-4dc1-9895-722301f01fcf",
          "length": 250,
          "cycles": 1,
          "position": 15,
          "iteration": 0,
          "httpRequestId": "19846315-c43c-4d93-aace-172f87437afc"
        },
        "item": {
          "id": "15d3876c-d312-4a59-bc5c-c0d8c1bb332d",
          "name": "credentials_issue:credential.@context.item.array"
        },
        "response": {
          "id": "eae53fec-ebb3-43a2-af4e-39cd55affbef",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:16)"
            }
          }
        ]
      },
      {
        "id": "088f224e-c701-453e-bf20-20a178bea18f",
        "cursor": {
          "ref": "a13c4075-f66d-4473-8def-954e8ebc7ea5",
          "length": 250,
          "cycles": 1,
          "position": 16,
          "iteration": 0,
          "httpRequestId": "30376bf2-52a7-450a-bd22-dbf9c8e42829"
        },
        "item": {
          "id": "088f224e-c701-453e-bf20-20a178bea18f",
          "name": "credentials_issue:credential.@context.item.boolean"
        },
        "response": {
          "id": "a85dc3bb-85c2-429c-97d9-96713f86017d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:17)"
            }
          }
        ]
      },
      {
        "id": "24c971ce-f6a1-4157-97da-b148f935bad1",
        "cursor": {
          "ref": "8cf1bfac-c2c5-418f-8780-cdf00bf30cf0",
          "length": 250,
          "cycles": 1,
          "position": 17,
          "iteration": 0,
          "httpRequestId": "7dba3176-08ae-47c0-9b48-b68eded51f83"
        },
        "item": {
          "id": "24c971ce-f6a1-4157-97da-b148f935bad1",
          "name": "credentials_issue:credential.@context.item.integer"
        },
        "response": {
          "id": "a745e9dc-967a-41d4-bca8-493afb0adfa2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 89,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:18)"
            }
          }
        ]
      },
      {
        "id": "4cfef2c7-be18-44ab-80c2-de2a9b463906",
        "cursor": {
          "ref": "1c5deb58-e3d0-422b-8beb-cba1bb2e2489",
          "length": 250,
          "cycles": 1,
          "position": 18,
          "iteration": 0,
          "httpRequestId": "5a6861b8-39cb-460a-95f5-b57471859ed2"
        },
        "item": {
          "id": "4cfef2c7-be18-44ab-80c2-de2a9b463906",
          "name": "credentials_issue:credential.@context.item.null"
        },
        "response": {
          "id": "3ea141a9-f815-45d0-9b67-66734ca14d95",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:19)"
            }
          }
        ]
      },
      {
        "id": "ad81b402-4fe2-4ea0-b441-2ad130466886",
        "cursor": {
          "ref": "158e1caf-0fcf-442f-9082-799f1223f681",
          "length": 250,
          "cycles": 1,
          "position": 19,
          "iteration": 0,
          "httpRequestId": "c4ed4d86-aca0-46e2-b628-08ac2146903a"
        },
        "item": {
          "id": "ad81b402-4fe2-4ea0-b441-2ad130466886",
          "name": "credentials_issue:credential.@context.item.object"
        },
        "response": {
          "id": "0ad3e1bf-e802-4a55-98d3-62094187d23d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:20)"
            }
          }
        ]
      },
      {
        "id": "e815fb8b-49e7-40d7-a94b-01389e3e35e6",
        "cursor": {
          "ref": "2dba2c7b-596d-4d37-b14d-7c65b34fe393",
          "length": 250,
          "cycles": 1,
          "position": 20,
          "iteration": 0,
          "httpRequestId": "efa9cea4-afe9-4c54-87d6-1fdbd35b2067"
        },
        "item": {
          "id": "e815fb8b-49e7-40d7-a94b-01389e3e35e6",
          "name": "credentials_issue:credential.id:array"
        },
        "response": {
          "id": "34eb891c-2598-47b6-b72f-2e427c0bb7bd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:21)"
            }
          }
        ]
      },
      {
        "id": "47eb4d97-4bce-4e8e-bf18-8010c970383a",
        "cursor": {
          "ref": "1c2c65cb-01ae-40ef-83e1-f20b270c21de",
          "length": 250,
          "cycles": 1,
          "position": 21,
          "iteration": 0,
          "httpRequestId": "f18cd622-1b52-4d1b-a2b5-45012bac9c82"
        },
        "item": {
          "id": "47eb4d97-4bce-4e8e-bf18-8010c970383a",
          "name": "credentials_issue:credential.id:boolean"
        },
        "response": {
          "id": "84354737-73c0-40fb-9c74-9afe0514d204",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:22)"
            }
          }
        ]
      },
      {
        "id": "1f6194aa-7afd-41af-a26c-038d0fcc3ca4",
        "cursor": {
          "ref": "3b98d71c-d251-4a63-bacb-694c3113088d",
          "length": 250,
          "cycles": 1,
          "position": 22,
          "iteration": 0,
          "httpRequestId": "54ce40f9-cce7-4634-a2f1-ef9e723283ec"
        },
        "item": {
          "id": "1f6194aa-7afd-41af-a26c-038d0fcc3ca4",
          "name": "credentials_issue:credential.id:integer"
        },
        "response": {
          "id": "08d05545-886f-44d3-b929-a4963ed02175",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:23)"
            }
          }
        ]
      },
      {
        "id": "5cf6e9b3-a41c-43a2-a3dc-2132e25d4363",
        "cursor": {
          "ref": "3d23e184-3746-4a79-8b83-3f8d904f414f",
          "length": 250,
          "cycles": 1,
          "position": 23,
          "iteration": 0,
          "httpRequestId": "310377bf-4727-4046-b1f5-ab29c0f13fcc"
        },
        "item": {
          "id": "5cf6e9b3-a41c-43a2-a3dc-2132e25d4363",
          "name": "credentials_issue:credential.id:null"
        },
        "response": {
          "id": "7858e9e8-6e2a-458c-b073-36f4f59723e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:24)"
            }
          }
        ]
      },
      {
        "id": "c51f9dbe-74d3-45bd-802e-df76ca4bb15f",
        "cursor": {
          "ref": "a96a0118-0dfb-4352-a1f6-39a756cfc8c4",
          "length": 250,
          "cycles": 1,
          "position": 24,
          "iteration": 0,
          "httpRequestId": "e6356d7b-fc5a-4002-9d1c-ca86768d7620"
        },
        "item": {
          "id": "c51f9dbe-74d3-45bd-802e-df76ca4bb15f",
          "name": "credentials_issue:credential.id:object"
        },
        "response": {
          "id": "87c115b0-61dc-4e4c-8ab1-470601d709ff",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 85
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:25)"
            }
          }
        ]
      },
      {
        "id": "6968b016-8818-4780-a4cf-cb1293011a49",
        "cursor": {
          "ref": "4f8cdc40-b880-4110-b065-50f77c0fc9b1",
          "length": 250,
          "cycles": 1,
          "position": 25,
          "iteration": 0,
          "httpRequestId": "2e56c968-b9c4-498c-97e4-da26cac3428b"
        },
        "item": {
          "id": "6968b016-8818-4780-a4cf-cb1293011a49",
          "name": "credentials_issue:credential.type:missing"
        },
        "response": {
          "id": "95290dad-4d31-4b2e-b7d7-1113c1ab3819",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:26)"
            }
          }
        ]
      },
      {
        "id": "052454be-0ae0-4c71-be8c-94c13980f004",
        "cursor": {
          "ref": "a36f3aec-77f7-4a84-91a8-2e0424865093",
          "length": 250,
          "cycles": 1,
          "position": 26,
          "iteration": 0,
          "httpRequestId": "54d1e509-d98a-4f35-80d5-acd6410900f7"
        },
        "item": {
          "id": "052454be-0ae0-4c71-be8c-94c13980f004",
          "name": "credentials_issue:credential.type:boolean"
        },
        "response": {
          "id": "6f2bfc3e-ffb1-42d0-8de0-ea9f8edecf21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:27)"
            }
          }
        ]
      },
      {
        "id": "6d81609b-8b60-428d-b6df-a7383cbbadf3",
        "cursor": {
          "ref": "ca739b5a-8d35-49bf-ade9-c4ee4b0ec71e",
          "length": 250,
          "cycles": 1,
          "position": 27,
          "iteration": 0,
          "httpRequestId": "910db15e-0922-44e0-940f-28bfeed6f94d"
        },
        "item": {
          "id": "6d81609b-8b60-428d-b6df-a7383cbbadf3",
          "name": "credentials_issue:credential.type:integer"
        },
        "response": {
          "id": "7c719a1a-0323-41f1-a351-34f36d9c15dd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:28)"
            }
          }
        ]
      },
      {
        "id": "b1438060-62f4-479b-b55a-c233437de9e4",
        "cursor": {
          "ref": "3200b6a5-9425-4efe-ae5c-12757aacd52e",
          "length": 250,
          "cycles": 1,
          "position": 28,
          "iteration": 0,
          "httpRequestId": "c6f2f611-fd79-484a-8a57-4196d52a10da"
        },
        "item": {
          "id": "b1438060-62f4-479b-b55a-c233437de9e4",
          "name": "credentials_issue:credential.type:null"
        },
        "response": {
          "id": "0ead0940-89f5-4aa4-9d11-88640d082fd4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:29)"
            }
          }
        ]
      },
      {
        "id": "3822d343-20f6-44c4-ae7c-c982a23e9d11",
        "cursor": {
          "ref": "341a57a0-f53f-46a7-a27d-b9f989398293",
          "length": 250,
          "cycles": 1,
          "position": 29,
          "iteration": 0,
          "httpRequestId": "387bf6d4-0e96-41c0-b1cf-1ecd98736aa2"
        },
        "item": {
          "id": "3822d343-20f6-44c4-ae7c-c982a23e9d11",
          "name": "credentials_issue:credential.type:object"
        },
        "response": {
          "id": "318e254d-be78-4f50-a5e6-a0c10cbdf2fa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:30)"
            }
          }
        ]
      },
      {
        "id": "c015ef9c-276d-44d0-a8a3-92b4b86cf95b",
        "cursor": {
          "ref": "4f4c2809-c30b-4aea-a5a5-3cdfaf2e2750",
          "length": 250,
          "cycles": 1,
          "position": 30,
          "iteration": 0,
          "httpRequestId": "4a475e45-2723-4195-822b-190264b5cf76"
        },
        "item": {
          "id": "c015ef9c-276d-44d0-a8a3-92b4b86cf95b",
          "name": "credentials_issue:credential.type:string"
        },
        "response": {
          "id": "65e324ba-e1a7-4c52-bdd0-e1a382209390",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:31)"
            }
          }
        ]
      },
      {
        "id": "0bdfadf0-76df-40e1-86ad-2d75c2544f1b",
        "cursor": {
          "ref": "36a905b1-2ddb-49df-adc9-6d72c0a5a203",
          "length": 250,
          "cycles": 1,
          "position": 31,
          "iteration": 0,
          "httpRequestId": "5c75f8fe-30ff-49d9-be85-ee7cd593aaf2"
        },
        "item": {
          "id": "0bdfadf0-76df-40e1-86ad-2d75c2544f1b",
          "name": "credentials_issue:credential.type.item:missing"
        },
        "response": {
          "id": "a8210de3-a557-456e-ab60-76d9249bf250",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 88,
          "responseSize": 103
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:32)"
            }
          }
        ]
      },
      {
        "id": "de97b466-83d7-4428-a30e-9641d65c2503",
        "cursor": {
          "ref": "87581730-9958-4741-94d0-e588ffb908f7",
          "length": 250,
          "cycles": 1,
          "position": 32,
          "iteration": 0,
          "httpRequestId": "ac209eee-ac9b-440c-95eb-780026df5a38"
        },
        "item": {
          "id": "de97b466-83d7-4428-a30e-9641d65c2503",
          "name": "credentials_issue:credential.type.item:array"
        },
        "response": {
          "id": "bae43b4a-81c8-4063-9c00-ebb084d6be60",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:33)"
            }
          }
        ]
      },
      {
        "id": "ba9b2e04-fce3-4d84-958c-f7cd0fda3267",
        "cursor": {
          "ref": "456cc40b-bdad-42e9-85ca-d8a509061ee2",
          "length": 250,
          "cycles": 1,
          "position": 33,
          "iteration": 0,
          "httpRequestId": "103db9f4-958d-4de7-9275-7e9bac8af0b1"
        },
        "item": {
          "id": "ba9b2e04-fce3-4d84-958c-f7cd0fda3267",
          "name": "credentials_issue:credential.type.item:boolean"
        },
        "response": {
          "id": "87dc1c31-f093-4c74-98bc-b6733d6e0115",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:34)"
            }
          }
        ]
      },
      {
        "id": "009402b5-3989-43b7-8986-9881e77c6112",
        "cursor": {
          "ref": "2ea703f1-fabb-4a81-b3d6-9ebda715f44b",
          "length": 250,
          "cycles": 1,
          "position": 34,
          "iteration": 0,
          "httpRequestId": "2978d19e-3afb-43b9-bbc3-ee1739ac7cdc"
        },
        "item": {
          "id": "009402b5-3989-43b7-8986-9881e77c6112",
          "name": "credentials_issue:credential.type.item:integer"
        },
        "response": {
          "id": "4ad8db50-7146-4a2f-9112-726a1642b88b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:35)"
            }
          }
        ]
      },
      {
        "id": "89d9be10-8cae-4c34-aaea-5800fc25ae77",
        "cursor": {
          "ref": "04ad112b-59b9-4bc6-b8a4-40d33bf70a32",
          "length": 250,
          "cycles": 1,
          "position": 35,
          "iteration": 0,
          "httpRequestId": "064dbc1f-2a30-4969-90c2-6e7a566796e9"
        },
        "item": {
          "id": "89d9be10-8cae-4c34-aaea-5800fc25ae77",
          "name": "credentials_issue:credential.type.item:null"
        },
        "response": {
          "id": "27e3200e-6ff4-400e-b4a0-d9c2fd874379",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:36)"
            }
          }
        ]
      },
      {
        "id": "f6a7a5fe-4596-4e67-92f2-86c30100d908",
        "cursor": {
          "ref": "f20f46e6-4ee8-46bc-9e52-a6e8c2efdce2",
          "length": 250,
          "cycles": 1,
          "position": 36,
          "iteration": 0,
          "httpRequestId": "5d522682-608f-4c3d-875d-e9b8fc5adaff"
        },
        "item": {
          "id": "f6a7a5fe-4596-4e67-92f2-86c30100d908",
          "name": "credentials_issue:credential.type.item:object"
        },
        "response": {
          "id": "19c0cff5-c7eb-4867-af7c-37d12397c716",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 101
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:37)"
            }
          }
        ]
      },
      {
        "id": "696971cd-aee9-452e-8ab2-680fca3ed172",
        "cursor": {
          "ref": "47de0104-f1c6-4210-9094-7cc194d8bd47",
          "length": 250,
          "cycles": 1,
          "position": 37,
          "iteration": 0,
          "httpRequestId": "a251d7a3-1e75-468d-9149-7f73dd760933"
        },
        "item": {
          "id": "696971cd-aee9-452e-8ab2-680fca3ed172",
          "name": "credentials_issue:credential.issuer:missing"
        },
        "response": {
          "id": "80246751-c3f2-48ce-8d5c-e199b2a4bc86",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:38)"
            }
          }
        ]
      },
      {
        "id": "ae86a4c5-914f-47c8-b75d-e6636fa978e1",
        "cursor": {
          "ref": "928affdf-79d5-4551-b6c3-ac903b86adef",
          "length": 250,
          "cycles": 1,
          "position": 38,
          "iteration": 0,
          "httpRequestId": "28179556-f5b8-457b-9178-fbe590de5b8a"
        },
        "item": {
          "id": "ae86a4c5-914f-47c8-b75d-e6636fa978e1",
          "name": "credentials_issue:credential.issuer:array"
        },
        "response": {
          "id": "169bafc9-02dd-44fb-acca-fb1163903209",
          "status": "Created",
          "code": 201,
          "responseTime": 690,
          "responseSize": 691
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:39)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:39)"
            }
          }
        ]
      },
      {
        "id": "b847d88b-6515-4754-9c42-44781f7ba2cf",
        "cursor": {
          "ref": "17c70872-443d-40e0-9242-1ea269bfb1ea",
          "length": 250,
          "cycles": 1,
          "position": 39,
          "iteration": 0,
          "httpRequestId": "266c15dc-fcd1-464d-97d9-9c0a14e16afe"
        },
        "item": {
          "id": "b847d88b-6515-4754-9c42-44781f7ba2cf",
          "name": "credentials_issue:credential.issuer:boolean"
        },
        "response": {
          "id": "90750719-6b8b-4cf3-852c-8d25ce948713",
          "status": "Created",
          "code": 201,
          "responseTime": 310,
          "responseSize": 650
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:40)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:40)"
            }
          }
        ]
      },
      {
        "id": "334fc269-142c-435d-8f5f-0eb275370994",
        "cursor": {
          "ref": "547b824b-3e6b-41ae-a612-6b27ae824381",
          "length": 250,
          "cycles": 1,
          "position": 40,
          "iteration": 0,
          "httpRequestId": "efbccc49-d135-41ec-94f7-3d817a4ce80e"
        },
        "item": {
          "id": "334fc269-142c-435d-8f5f-0eb275370994",
          "name": "credentials_issue:credential.issuer:integer"
        },
        "response": {
          "id": "b8173181-4654-40cc-b007-cb8b8bbdcdda",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:41)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:41)"
            }
          }
        ]
      },
      {
        "id": "bc024761-e18b-46e4-91f5-bdd838751786",
        "cursor": {
          "ref": "729f3e68-8afd-493e-b85c-c4471004dd65",
          "length": 250,
          "cycles": 1,
          "position": 41,
          "iteration": 0,
          "httpRequestId": "9050e0c0-1dde-4c18-9a4d-96358ea1d54e"
        },
        "item": {
          "id": "bc024761-e18b-46e4-91f5-bdd838751786",
          "name": "credentials_issue:credential.issuer:null"
        },
        "response": {
          "id": "2e414371-fc37-4d18-8d76-d1059846c2ad",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 92
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:42)"
            }
          }
        ]
      },
      {
        "id": "3d5372ff-cb0e-4770-b5df-7fd1a5293e22",
        "cursor": {
          "ref": "0cd06c5c-0aa6-4bdb-a868-fe045707d203",
          "length": 250,
          "cycles": 1,
          "position": 42,
          "iteration": 0,
          "httpRequestId": "dd5026ba-adf8-4995-843a-fee93be5d9ba"
        },
        "item": {
          "id": "3d5372ff-cb0e-4770-b5df-7fd1a5293e22",
          "name": "credentials_issue.credential.issuer:invalid"
        },
        "response": {
          "id": "1b82476f-a70f-4f3a-90c4-1c621ce3444c",
          "status": "Created",
          "code": 201,
          "responseTime": 344,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:43)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:43)"
            }
          }
        ]
      },
      {
        "id": "e8a6a142-1d88-4c07-af12-897a6f3358e5",
        "cursor": {
          "ref": "2441f17a-f726-4da1-9d71-3a5d1b1b80d0",
          "length": 250,
          "cycles": 1,
          "position": 43,
          "iteration": 0,
          "httpRequestId": "d1c97d4a-54a1-4901-806f-70fc336519f8"
        },
        "item": {
          "id": "e8a6a142-1d88-4c07-af12-897a6f3358e5",
          "name": "credentials_issue.credential.issuer:unknown"
        },
        "response": {
          "id": "c4131a71-f1c0-40b2-8482-9ec521d409a1",
          "status": "Created",
          "code": 201,
          "responseTime": 320,
          "responseSize": 692
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:44)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:44)"
            }
          }
        ]
      },
      {
        "id": "23d3b00f-da1c-46e0-b9ad-9e3cddde0898",
        "cursor": {
          "ref": "ee2675f0-bf36-4cb7-b982-a44b171adc7d",
          "length": 250,
          "cycles": 1,
          "position": 44,
          "iteration": 0,
          "httpRequestId": "1c7ca143-842a-4bc0-bc24-c07addde10d5"
        },
        "item": {
          "id": "23d3b00f-da1c-46e0-b9ad-9e3cddde0898",
          "name": "credentials_issue:credential.issuer.id:missing"
        },
        "response": {
          "id": "8aba6f62-838a-4fca-9a7f-b9b4e9f23df7",
          "status": "Created",
          "code": 201,
          "responseTime": 309,
          "responseSize": 647
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:45)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:45)"
            }
          }
        ]
      },
      {
        "id": "81741cf0-12ff-46bc-9cf2-eee24472fd91",
        "cursor": {
          "ref": "ee5f86ff-4611-40b1-bd96-fbea6861d15c",
          "length": 250,
          "cycles": 1,
          "position": 45,
          "iteration": 0,
          "httpRequestId": "61afe43c-e3fb-46bc-b7b2-20ef540ca8cb"
        },
        "item": {
          "id": "81741cf0-12ff-46bc-9cf2-eee24472fd91",
          "name": "credentials_issue:credential.issuer.id:array"
        },
        "response": {
          "id": "2e5aa8ad-df04-41ff-a6f6-c5e27d78db96",
          "status": "Created",
          "code": 201,
          "responseTime": 299,
          "responseSize": 698
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:46)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:46)"
            }
          }
        ]
      },
      {
        "id": "6ba4c391-d0e4-425e-a2d5-af5110f78a3d",
        "cursor": {
          "ref": "0c7b3256-9f68-4a89-b19e-3b31b487e092",
          "length": 250,
          "cycles": 1,
          "position": 46,
          "iteration": 0,
          "httpRequestId": "e0641768-f6e0-41a2-9e5a-683cd3c52fd6"
        },
        "item": {
          "id": "6ba4c391-d0e4-425e-a2d5-af5110f78a3d",
          "name": "credentials_issue:credential.issuer.id:boolean"
        },
        "response": {
          "id": "03a9c1be-dfdf-4be1-b9bb-7a9b0a936ea2",
          "status": "Created",
          "code": 201,
          "responseTime": 331,
          "responseSize": 657
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:47)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:47)"
            }
          }
        ]
      },
      {
        "id": "49c87e82-fefc-461d-a27d-31cd5d6be451",
        "cursor": {
          "ref": "6af9e577-b695-476b-add1-59fbd47c25a6",
          "length": 250,
          "cycles": 1,
          "position": 47,
          "iteration": 0,
          "httpRequestId": "a57073de-1da2-49cf-92c1-2238f3a5cc2a"
        },
        "item": {
          "id": "49c87e82-fefc-461d-a27d-31cd5d6be451",
          "name": "credentials_issue:credential.issuer.id:integer"
        },
        "response": {
          "id": "f322259c-9fd2-4df2-a8d3-1ef2254e09ea",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 654
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:48)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:48)"
            }
          }
        ]
      },
      {
        "id": "997ceac6-03ca-4ca1-85ca-502167c2be1e",
        "cursor": {
          "ref": "ad2aaf57-4ade-44ec-b96b-dfa14b363166",
          "length": 250,
          "cycles": 1,
          "position": 48,
          "iteration": 0,
          "httpRequestId": "46c80d2f-fd9f-47e0-97e7-7f3a9b6eff39"
        },
        "item": {
          "id": "997ceac6-03ca-4ca1-85ca-502167c2be1e",
          "name": "credentials_issue:credential.issuer.id:null"
        },
        "response": {
          "id": "d4f967e0-865a-44ea-8bff-188347d15adb",
          "status": "Created",
          "code": 201,
          "responseTime": 308,
          "responseSize": 656
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:49)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:49)"
            }
          }
        ]
      },
      {
        "id": "879081fd-321a-4e0a-a1f5-532497593dca",
        "cursor": {
          "ref": "250a48be-096d-4a87-9d5d-bb0e91af60dd",
          "length": 250,
          "cycles": 1,
          "position": 49,
          "iteration": 0,
          "httpRequestId": "58ba4ccf-2244-41e1-abee-c065082fe76a"
        },
        "item": {
          "id": "879081fd-321a-4e0a-a1f5-532497593dca",
          "name": "credentials_issue.credential.issuer.id:invalid"
        },
        "response": {
          "id": "b0b84d42-9496-449a-901f-a97460144187",
          "status": "Created",
          "code": 201,
          "responseTime": 289,
          "responseSize": 663
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:50)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:50)"
            }
          }
        ]
      },
      {
        "id": "dd70dba5-15ad-4c7f-8828-81c94ff4fe74",
        "cursor": {
          "ref": "b2c72571-6e24-46d7-a3d9-e120e779d85c",
          "length": 250,
          "cycles": 1,
          "position": 50,
          "iteration": 0,
          "httpRequestId": "276bdc48-8fd1-4f70-86b0-e7e7d66ef8bc"
        },
        "item": {
          "id": "dd70dba5-15ad-4c7f-8828-81c94ff4fe74",
          "name": "credentials_issue.credential.issuer.id:unknown"
        },
        "response": {
          "id": "735895f4-ec73-4311-a8c1-dcc3e7babf77",
          "status": "Created",
          "code": 201,
          "responseTime": 306,
          "responseSize": 699
        },
        "assertions": [
          {
            "assertion": "status code is 422",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 422",
              "message": "expected response to have status code 422 but got 201",
              "stack": "AssertionError: expected response to have status code 422 but got 201\n   at Object.eval sandbox-script.js:1:51)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:51)"
            }
          }
        ]
      },
      {
        "id": "d240a967-230c-4280-b7dc-7fd9361ccfe2",
        "cursor": {
          "ref": "ed56b688-6a2b-40dd-83a1-0689821f34d4",
          "length": 250,
          "cycles": 1,
          "position": 51,
          "iteration": 0,
          "httpRequestId": "1bb8fc28-a3fb-430b-aa27-a0019579f8db"
        },
        "item": {
          "id": "d240a967-230c-4280-b7dc-7fd9361ccfe2",
          "name": "credentials_issue:credential.issuanceDate.missing"
        },
        "response": {
          "id": "84cdbc6f-30d7-4a27-859d-05a1624a7ce6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:52)"
            }
          }
        ]
      },
      {
        "id": "16f85634-034e-420f-9db4-73f3fea9ff41",
        "cursor": {
          "ref": "ff791116-cbd1-414a-b1a5-751b33adcb71",
          "length": 250,
          "cycles": 1,
          "position": 52,
          "iteration": 0,
          "httpRequestId": "cfcb06d2-15dc-4b66-afc4-f6ca12b51744"
        },
        "item": {
          "id": "16f85634-034e-420f-9db4-73f3fea9ff41",
          "name": "credentials_issue:credential.issuanceDate:array"
        },
        "response": {
          "id": "4049c204-edc3-46f2-8779-cbc5ce04dcbd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:53)"
            }
          }
        ]
      },
      {
        "id": "16b338b5-2af5-4562-8361-c5a8fddad5c2",
        "cursor": {
          "ref": "eeaa2ca9-5d04-4d37-8c48-ba9404820037",
          "length": 250,
          "cycles": 1,
          "position": 53,
          "iteration": 0,
          "httpRequestId": "c4ff3cd7-6ea4-4580-bd2f-79681341c1dc"
        },
        "item": {
          "id": "16b338b5-2af5-4562-8361-c5a8fddad5c2",
          "name": "credentials_issue:credential.issuanceDate:boolean"
        },
        "response": {
          "id": "cb949e63-3ecc-4657-8e45-bc1b16433e45",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:54)"
            }
          }
        ]
      },
      {
        "id": "43f0f36e-2f2c-4852-a3bb-dcc196a3de80",
        "cursor": {
          "ref": "97420ba7-af0f-48c1-ad2c-8048bec16637",
          "length": 250,
          "cycles": 1,
          "position": 54,
          "iteration": 0,
          "httpRequestId": "0c5f5e68-cdb7-4001-b5a3-681434363d4d"
        },
        "item": {
          "id": "43f0f36e-2f2c-4852-a3bb-dcc196a3de80",
          "name": "credentials_issue:credential.issuanceDate:integer"
        },
        "response": {
          "id": "b588c485-6797-4e1e-bf28-93cf08ba3550",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:55)"
            }
          }
        ]
      },
      {
        "id": "60849b54-e7f2-43df-b1db-a894169e1eda",
        "cursor": {
          "ref": "26f3335e-fa8c-4be6-a249-9fdcafd9f260",
          "length": 250,
          "cycles": 1,
          "position": 55,
          "iteration": 0,
          "httpRequestId": "5f2118a9-5456-4446-8999-dde476c96729"
        },
        "item": {
          "id": "60849b54-e7f2-43df-b1db-a894169e1eda",
          "name": "credentials_issue:credential.issuanceDate:null"
        },
        "response": {
          "id": "3edf213b-1bc8-4746-af87-450d6ea067b3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 161
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:56)"
            }
          }
        ]
      },
      {
        "id": "81929b14-db4f-4380-b1f9-899b7067af50",
        "cursor": {
          "ref": "9fe54cbe-362b-455a-b776-7c8f1e708fc5",
          "length": 250,
          "cycles": 1,
          "position": 56,
          "iteration": 0,
          "httpRequestId": "cca3cf06-aaa1-4ac2-baba-fe77df83c61e"
        },
        "item": {
          "id": "81929b14-db4f-4380-b1f9-899b7067af50",
          "name": "credentials_issue:credential.issuanceDate:object"
        },
        "response": {
          "id": "92c09a08-895b-453c-9f0a-89b89a1d07d3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:57)"
            }
          }
        ]
      },
      {
        "id": "473f5bf3-2a7a-4f08-8387-b9dc2ded39a9",
        "cursor": {
          "ref": "d4d17f3c-b841-4bf6-bf67-fc740c477f44",
          "length": 250,
          "cycles": 1,
          "position": 57,
          "iteration": 0,
          "httpRequestId": "91323d7c-dd3f-4c17-8c0a-571be5644f10"
        },
        "item": {
          "id": "473f5bf3-2a7a-4f08-8387-b9dc2ded39a9",
          "name": "credentials_issue:credential.issuanceDate:invalid_value"
        },
        "response": {
          "id": "6d857a38-1830-44b7-957a-f2d8becb4196",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 115
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:58)"
            }
          }
        ]
      },
      {
        "id": "d5e5f6cc-c4f3-40c5-9678-42973a12e8a5",
        "cursor": {
          "ref": "2198b74b-11c5-4c01-b074-08698a12ad87",
          "length": 250,
          "cycles": 1,
          "position": 58,
          "iteration": 0,
          "httpRequestId": "0ad80aa0-c7aa-440f-ad36-81d6d59b15a7"
        },
        "item": {
          "id": "d5e5f6cc-c4f3-40c5-9678-42973a12e8a5",
          "name": "credentials_issue:credential.credentialSubject:missing"
        },
        "response": {
          "id": "f5f65741-9369-4552-8ecb-e8313d73e0a7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 132,
          "responseSize": 152
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:59)"
            }
          }
        ]
      },
      {
        "id": "38625b6a-9c9d-4f55-ad5c-7bee1d9a2d02",
        "cursor": {
          "ref": "85ce2e30-e1f7-4148-af8c-2d7f2f2be505",
          "length": 250,
          "cycles": 1,
          "position": 59,
          "iteration": 0,
          "httpRequestId": "3db3a28c-6c09-4478-8a76-a41133a8fedc"
        },
        "item": {
          "id": "38625b6a-9c9d-4f55-ad5c-7bee1d9a2d02",
          "name": "credentials_issue:credential.credentialSubject:array"
        },
        "response": {
          "id": "890318d1-01d8-45bd-8694-b88ae2a73655",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 128,
          "responseSize": 197
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:60)"
            }
          }
        ]
      },
      {
        "id": "ab04f059-9283-46b3-9066-6f90d26e558c",
        "cursor": {
          "ref": "0b78b743-56d5-4a1d-9288-b47a17d0dbd3",
          "length": 250,
          "cycles": 1,
          "position": 60,
          "iteration": 0,
          "httpRequestId": "d6369d36-2aea-4d5c-8f9f-1f12952701d4"
        },
        "item": {
          "id": "ab04f059-9283-46b3-9066-6f90d26e558c",
          "name": "credentials_issue:credential.credentialSubject:boolean"
        },
        "response": {
          "id": "d7af3ff0-ca2d-4986-9572-651231caff55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:61)"
            }
          }
        ]
      },
      {
        "id": "30b6816b-c11b-46e9-836a-004af0e628db",
        "cursor": {
          "ref": "aea26166-237d-4c74-b162-e503c3ae0968",
          "length": 250,
          "cycles": 1,
          "position": 61,
          "iteration": 0,
          "httpRequestId": "3ebd62b4-d42e-4800-ac4e-faf1ac059b57"
        },
        "item": {
          "id": "30b6816b-c11b-46e9-836a-004af0e628db",
          "name": "credentials_issue:credential.credentialSubject:integer"
        },
        "response": {
          "id": "c421a8a5-f144-44e8-862d-d8c1eedc1251",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:62)"
            }
          }
        ]
      },
      {
        "id": "9e724444-fbce-49d1-aa4c-c94f8630c375",
        "cursor": {
          "ref": "3737abc5-1981-4b15-b7b8-f929ffe5a858",
          "length": 250,
          "cycles": 1,
          "position": 62,
          "iteration": 0,
          "httpRequestId": "b77afa57-4b3f-42d1-bf29-b7253b0da800"
        },
        "item": {
          "id": "9e724444-fbce-49d1-aa4c-c94f8630c375",
          "name": "credentials_issue:credential.credentialSubject:null"
        },
        "response": {
          "id": "09ff4356-c411-442f-9490-04bc4ca505f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 230
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:63)"
            }
          }
        ]
      },
      {
        "id": "a037ebb1-a487-4567-b48a-2080716d7bd8",
        "cursor": {
          "ref": "dbf1e1a6-ad31-4c50-b1d8-1523d7a8fcb5",
          "length": 250,
          "cycles": 1,
          "position": 63,
          "iteration": 0,
          "httpRequestId": "c218776c-1ce1-4ad7-b24d-7ea753737a73"
        },
        "item": {
          "id": "a037ebb1-a487-4567-b48a-2080716d7bd8",
          "name": "credentials_issue:credential.credentialSubject:string"
        },
        "response": {
          "id": "700684a4-9411-4684-a025-e883af4bd9f7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 179
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:64)"
            }
          }
        ]
      },
      {
        "id": "68f292a8-1859-4251-a36e-5f3bbf8d3b4d",
        "cursor": {
          "ref": "bfcfd593-7e4e-4e83-9a66-0cff4a794504",
          "length": 250,
          "cycles": 1,
          "position": 64,
          "iteration": 0,
          "httpRequestId": "af77b9ae-0dc7-4a99-aa7a-175859857627"
        },
        "item": {
          "id": "68f292a8-1859-4251-a36e-5f3bbf8d3b4d",
          "name": "credentials_issue:credential.credentialSubject.id:array"
        },
        "response": {
          "id": "7c51b5c3-07f8-422e-9489-edd28dd365bc",
          "status": "Created",
          "code": 201,
          "responseTime": 319,
          "responseSize": 702
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:65)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:65)"
            }
          }
        ]
      },
      {
        "id": "20872c24-d823-44e6-abb8-ec101abb2725",
        "cursor": {
          "ref": "ada23956-c666-4ab9-896a-3a8fde336e55",
          "length": 250,
          "cycles": 1,
          "position": 65,
          "iteration": 0,
          "httpRequestId": "2b59de0d-4160-4b4e-911e-dc4c886e7af3"
        },
        "item": {
          "id": "20872c24-d823-44e6-abb8-ec101abb2725",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy"
        },
        "response": {
          "id": "7cbb0664-1fc5-4a85-b1ac-4df5ce25bf90",
          "status": "Created",
          "code": 201,
          "responseTime": 313,
          "responseSize": 688
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:66)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:66)"
            }
          }
        ]
      },
      {
        "id": "38445425-90d2-4da9-b794-5652bb246a2f",
        "cursor": {
          "ref": "5b687c38-051b-43f6-be9f-01efef523110",
          "length": 250,
          "cycles": 1,
          "position": 66,
          "iteration": 0,
          "httpRequestId": "218bd005-81b9-4d15-aa70-2c40b371af9e"
        },
        "item": {
          "id": "38445425-90d2-4da9-b794-5652bb246a2f",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 2"
        },
        "response": {
          "id": "97624511-9dab-4ad0-af72-4612dce6ad5d",
          "status": "Created",
          "code": 201,
          "responseTime": 300,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:67)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:67)"
            }
          }
        ]
      },
      {
        "id": "2fc425d3-0b4c-4882-a5ee-7f14b7f49706",
        "cursor": {
          "ref": "49956eec-53e8-412f-82b2-daabf0e5eaa9",
          "length": 250,
          "cycles": 1,
          "position": 67,
          "iteration": 0,
          "httpRequestId": "0a6b2c7e-3882-40db-acc7-6dfcbca48670"
        },
        "item": {
          "id": "2fc425d3-0b4c-4882-a5ee-7f14b7f49706",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 3"
        },
        "response": {
          "id": "692cf45f-adcd-4664-867a-4ff079a5abd7",
          "status": "Created",
          "code": 201,
          "responseTime": 317,
          "responseSize": 687
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:68)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:68)"
            }
          }
        ]
      },
      {
        "id": "4df8d2d2-3ab9-456f-b2ce-ddd2036b1fee",
        "cursor": {
          "ref": "40d602c7-c297-4639-85ba-286194699c7e",
          "length": 250,
          "cycles": 1,
          "position": 68,
          "iteration": 0,
          "httpRequestId": "f527223b-d785-4f45-aacb-7bed044bfbe1"
        },
        "item": {
          "id": "4df8d2d2-3ab9-456f-b2ce-ddd2036b1fee",
          "name": "credentials_issue:credential.credentialSubject.id:array Copy 4"
        },
        "response": {
          "id": "1a4fef64-00bf-4448-a749-ca2ba7add0b1",
          "status": "Created",
          "code": 201,
          "responseTime": 312,
          "responseSize": 685
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 201",
              "stack": "AssertionError: expected response to have status code 400 but got 201\n   at Object.eval sandbox-script.js:1:69)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:69)"
            }
          }
        ]
      },
      {
        "id": "7f7bd3f2-5604-462a-bb7d-94c9d2c3b64d",
        "cursor": {
          "ref": "7ddeb271-8a1f-448a-91b3-d250e7cbc3bd",
          "length": 250,
          "cycles": 1,
          "position": 69,
          "iteration": 0,
          "httpRequestId": "174b7723-35a9-4099-be1b-121555f7e5bf"
        },
        "item": {
          "id": "7f7bd3f2-5604-462a-bb7d-94c9d2c3b64d",
          "name": "credentials_issue:options:missing"
        },
        "response": {
          "id": "1b96afd7-1add-46f6-8887-498320dd89ae",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 110
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:70)"
            }
          }
        ]
      },
      {
        "id": "e965cd4d-ee99-40ed-af28-2fd3e44e80f0",
        "cursor": {
          "ref": "de423c36-74ac-4f2e-94df-1780dab6a15b",
          "length": 250,
          "cycles": 1,
          "position": 70,
          "iteration": 0,
          "httpRequestId": "99f87520-6541-40e3-a826-9f599080d658"
        },
        "item": {
          "id": "e965cd4d-ee99-40ed-af28-2fd3e44e80f0",
          "name": "credentials_issue:options:array"
        },
        "response": {
          "id": "d3e0a8c5-6e4c-46db-9def-8e23e7c600c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 80
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:71)"
            }
          }
        ]
      },
      {
        "id": "6a9f2df5-5123-47aa-bbce-8e59eb2029eb",
        "cursor": {
          "ref": "6bbf5010-7076-45c7-bb95-d5eaf5f79657",
          "length": 250,
          "cycles": 1,
          "position": 71,
          "iteration": 0,
          "httpRequestId": "71870173-b683-4b00-be28-8689c7b11ba4"
        },
        "item": {
          "id": "6a9f2df5-5123-47aa-bbce-8e59eb2029eb",
          "name": "credentials_issue:options:boolean"
        },
        "response": {
          "id": "e85f49e2-ad8d-4962-85c3-7b10ccd1e9af",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:72)"
            }
          }
        ]
      },
      {
        "id": "d1398dfa-1d04-4958-9328-e9185f0387fd",
        "cursor": {
          "ref": "1a422361-4d49-475c-8546-2c5e36533e59",
          "length": 250,
          "cycles": 1,
          "position": 72,
          "iteration": 0,
          "httpRequestId": "cbd5c077-bc9a-4eab-bda9-1a49600c0135"
        },
        "item": {
          "id": "d1398dfa-1d04-4958-9328-e9185f0387fd",
          "name": "credentials_issue:options:integer"
        },
        "response": {
          "id": "e8c0d7cb-8a5a-4ce6-ae84-214c51ba94db",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 151
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:73)"
            }
          }
        ]
      },
      {
        "id": "cf5c5ce2-4744-4df1-b69e-2248371adfe9",
        "cursor": {
          "ref": "3a970158-3637-47ad-bf82-0a5db16cd2fe",
          "length": 250,
          "cycles": 1,
          "position": 73,
          "iteration": 0,
          "httpRequestId": "db7f8941-8a19-401b-a8dd-d23a2eaf29cb"
        },
        "item": {
          "id": "cf5c5ce2-4744-4df1-b69e-2248371adfe9",
          "name": "credentials_issue:options:null"
        },
        "response": {
          "id": "19fa1951-7e72-45b8-addb-f85b9e76add6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:74)"
            }
          }
        ]
      },
      {
        "id": "6df6673f-f686-4e77-b903-3726c0df703e",
        "cursor": {
          "ref": "69a77c93-bad9-4600-b0b9-7844dcf6611d",
          "length": 250,
          "cycles": 1,
          "position": 74,
          "iteration": 0,
          "httpRequestId": "d940fd11-4cc2-4202-9b89-fafdd61a1686"
        },
        "item": {
          "id": "6df6673f-f686-4e77-b903-3726c0df703e",
          "name": "credentials_issue:options:string"
        },
        "response": {
          "id": "3915f750-03b2-4d96-8164-5ff11c08ae82",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:75)"
            }
          }
        ]
      },
      {
        "id": "6162acda-b8f3-4941-9f42-f6eb24be4b81",
        "cursor": {
          "ref": "30c49579-004d-4938-81da-95162644010a",
          "length": 250,
          "cycles": 1,
          "position": 75,
          "iteration": 0,
          "httpRequestId": "8fb6e4bf-4398-4f1a-b6ff-bf0bb997049c"
        },
        "item": {
          "id": "6162acda-b8f3-4941-9f42-f6eb24be4b81",
          "name": "credentials_issue:options.type:missing"
        },
        "response": {
          "id": "a48ae626-c8df-44aa-bc2c-a650eaeb640c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:76)"
            }
          }
        ]
      },
      {
        "id": "b62fed2a-4267-4d0c-b37b-59cf5c04b568",
        "cursor": {
          "ref": "e4033410-d838-4e41-9bc6-b6713a0591c9",
          "length": 250,
          "cycles": 1,
          "position": 76,
          "iteration": 0,
          "httpRequestId": "4b6f52b7-1a2a-4b11-87e0-c69e68760337"
        },
        "item": {
          "id": "b62fed2a-4267-4d0c-b37b-59cf5c04b568",
          "name": "credentials_issue:options.type:array"
        },
        "response": {
          "id": "5714cd6d-da91-4229-a850-1a42685f6a4c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:77)"
            }
          }
        ]
      },
      {
        "id": "f2a21d1e-251c-47b6-8b68-e12a89078e6c",
        "cursor": {
          "ref": "e22b6167-1d56-40db-973f-3b44dd1af261",
          "length": 250,
          "cycles": 1,
          "position": 77,
          "iteration": 0,
          "httpRequestId": "f4ddd7f9-f8e9-4764-ab88-e61ae12449f8"
        },
        "item": {
          "id": "f2a21d1e-251c-47b6-8b68-e12a89078e6c",
          "name": "credentials_issue:options.type:boolean"
        },
        "response": {
          "id": "23b17025-3418-49ee-be7e-27e40eb052fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:78)"
            }
          }
        ]
      },
      {
        "id": "774b1c52-f741-4803-81ae-7abbb6d1e793",
        "cursor": {
          "ref": "82764e5e-861f-4bb6-a63d-afdf94b9fe24",
          "length": 250,
          "cycles": 1,
          "position": 78,
          "iteration": 0,
          "httpRequestId": "e52a5b9d-8c9d-46f4-bda0-028dd4aab4ba"
        },
        "item": {
          "id": "774b1c52-f741-4803-81ae-7abbb6d1e793",
          "name": "credentials_issue:options.type:integer"
        },
        "response": {
          "id": "935078e9-fd35-4471-8e61-130e23829a03",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:79)"
            }
          }
        ]
      },
      {
        "id": "058b84cf-1505-46ff-ae90-07cc482ec40b",
        "cursor": {
          "ref": "3ab5d5ef-2321-4541-b10b-e598702f333b",
          "length": 250,
          "cycles": 1,
          "position": 79,
          "iteration": 0,
          "httpRequestId": "339d9176-c849-492d-aeff-11e426360119"
        },
        "item": {
          "id": "058b84cf-1505-46ff-ae90-07cc482ec40b",
          "name": "credentials_issue:options.type:null"
        },
        "response": {
          "id": "d09b2cec-8ae7-4002-ae58-62458fae30e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 270
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:80)"
            }
          }
        ]
      },
      {
        "id": "395d95f7-7b15-4b6d-9173-d11134ef9b31",
        "cursor": {
          "ref": "8549fd1d-297e-4b02-abdc-0f2799785ce3",
          "length": 250,
          "cycles": 1,
          "position": 80,
          "iteration": 0,
          "httpRequestId": "2e73adf1-24ad-4dc4-b7e7-71d6a74d5819"
        },
        "item": {
          "id": "395d95f7-7b15-4b6d-9173-d11134ef9b31",
          "name": "credentials_issue:options.type:object"
        },
        "response": {
          "id": "f5ba6ad3-e928-456d-99ff-59d2fc18dd5a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 235
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:81)"
            }
          }
        ]
      },
      {
        "id": "a3038477-c25b-4cb1-84cd-7565a5fc339c",
        "cursor": {
          "ref": "669e9fbb-b7a1-44db-93bc-d4a4490888ee",
          "length": 250,
          "cycles": 1,
          "position": 81,
          "iteration": 0,
          "httpRequestId": "d4154858-988c-471c-9ff6-69247ee4fa54"
        },
        "item": {
          "id": "a3038477-c25b-4cb1-84cd-7565a5fc339c",
          "name": "credentials_issue:options.type:invalid_value"
        },
        "response": {
          "id": "8075d727-4573-4494-9b38-9863df2953c6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 203
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:82)"
            }
          }
        ]
      },
      {
        "id": "48098487-90b9-412f-9355-c3bbbe4c51d3",
        "cursor": {
          "ref": "78f2706f-6f5b-47f5-b83d-3f2b75551f54",
          "length": 250,
          "cycles": 1,
          "position": 82,
          "iteration": 0,
          "httpRequestId": "38c26feb-47b2-472e-a19e-7961f0cc0283"
        },
        "item": {
          "id": "48098487-90b9-412f-9355-c3bbbe4c51d3",
          "name": "credentials_issue:options.created:array"
        },
        "response": {
          "id": "f1f8dc81-2b8b-4803-be84-6a857a56ef3a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:83)"
            }
          }
        ]
      },
      {
        "id": "8ed96dda-6535-4d0b-8cc8-70cd065e4b51",
        "cursor": {
          "ref": "eebdd356-54f3-40c9-ae7e-b4eee817fcda",
          "length": 250,
          "cycles": 1,
          "position": 83,
          "iteration": 0,
          "httpRequestId": "2fdcb8ca-03db-449d-b112-c4ebb48c6f89"
        },
        "item": {
          "id": "8ed96dda-6535-4d0b-8cc8-70cd065e4b51",
          "name": "credentials_issue:options.created:boolean"
        },
        "response": {
          "id": "758ed355-21b9-4247-9cbc-8d19be36d568",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:84)"
            }
          }
        ]
      },
      {
        "id": "db8f77d1-c9b6-46af-a653-8f904b391cb7",
        "cursor": {
          "ref": "cf2d9e56-400d-494f-a3b1-284a047b975a",
          "length": 250,
          "cycles": 1,
          "position": 84,
          "iteration": 0,
          "httpRequestId": "dc88b0e3-b42c-4900-818c-5ae3134a9e02"
        },
        "item": {
          "id": "db8f77d1-c9b6-46af-a653-8f904b391cb7",
          "name": "credentials_issue:options.created:integer"
        },
        "response": {
          "id": "65bcd9a5-3aa5-4bc0-bbc4-c099a6f3bc85",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:85)"
            }
          }
        ]
      },
      {
        "id": "f8f6d89b-4cda-4aac-8bbc-cec0415230fc",
        "cursor": {
          "ref": "1e6bdd57-1f92-4b89-a2ea-ded60e93de7d",
          "length": 250,
          "cycles": 1,
          "position": 85,
          "iteration": 0,
          "httpRequestId": "4cf8ccae-2978-4f35-b126-a84d25ae5ae2"
        },
        "item": {
          "id": "f8f6d89b-4cda-4aac-8bbc-cec0415230fc",
          "name": "credentials_issue:options.created:null"
        },
        "response": {
          "id": "e18ae840-a49b-43b3-b4d7-260d702a279d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:86)"
            }
          }
        ]
      },
      {
        "id": "6e695fe2-3251-48f1-b0bc-c96ea8158ffa",
        "cursor": {
          "ref": "be3ebdbd-957e-4880-a178-633a477ac216",
          "length": 250,
          "cycles": 1,
          "position": 86,
          "iteration": 0,
          "httpRequestId": "55bc165f-77ab-4fb0-894d-a1cf7e9fb67e"
        },
        "item": {
          "id": "6e695fe2-3251-48f1-b0bc-c96ea8158ffa",
          "name": "credentials_issue:options.created:object"
        },
        "response": {
          "id": "cbc10048-888b-4e24-8a31-acfdde9a4634",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:87)"
            }
          }
        ]
      },
      {
        "id": "a73d78e4-19bb-487b-9e1a-1ed419dbe7ad",
        "cursor": {
          "ref": "933f5744-f3e9-4dc0-acb1-7f0fcf591ed1",
          "length": 250,
          "cycles": 1,
          "position": 87,
          "iteration": 0,
          "httpRequestId": "5ef8dd1d-15ea-4020-bea6-7d5a1a6f41fd"
        },
        "item": {
          "id": "a73d78e4-19bb-487b-9e1a-1ed419dbe7ad",
          "name": "credentials_issue:options.created:invalid"
        },
        "response": {
          "id": "bf05634e-3735-4f02-9669-de2edc065ed9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 107
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:88)"
            }
          }
        ]
      },
      {
        "id": "965e342e-ec45-487b-8ad3-fe5dd87366f8",
        "cursor": {
          "ref": "5447e7fd-f71a-44f1-ac96-13e98f3ce05f",
          "length": 250,
          "cycles": 1,
          "position": 88,
          "iteration": 0,
          "httpRequestId": "a6f8b4db-8451-43b2-a04c-c1225d4e28c2"
        },
        "item": {
          "id": "965e342e-ec45-487b-8ad3-fe5dd87366f8",
          "name": "credentials_issue:options.credentialStatus:array"
        },
        "response": {
          "id": "4e659cd8-1a72-4a72-abd7-49adac998583",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:89)"
            }
          }
        ]
      },
      {
        "id": "bdf9ef49-bd33-4225-a8ad-1b254dc45a5b",
        "cursor": {
          "ref": "b3eecf45-4832-4a5b-88bb-6f8d2425d35a",
          "length": 250,
          "cycles": 1,
          "position": 89,
          "iteration": 0,
          "httpRequestId": "d9abe5b7-72fa-49a2-80ba-01770b644b77"
        },
        "item": {
          "id": "bdf9ef49-bd33-4225-a8ad-1b254dc45a5b",
          "name": "credentials_issue:options.credentialStatus:boolean"
        },
        "response": {
          "id": "5e065020-ff3c-41e3-9355-c2a43b2d72cf",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:90)"
            }
          }
        ]
      },
      {
        "id": "496d069b-c4ac-49ac-be93-a040fe3732a6",
        "cursor": {
          "ref": "d2882e62-f99c-4330-9e34-97a77d0479c8",
          "length": 250,
          "cycles": 1,
          "position": 90,
          "iteration": 0,
          "httpRequestId": "f903f58f-fbcd-4ee6-a8f3-d15ac9a878cd"
        },
        "item": {
          "id": "496d069b-c4ac-49ac-be93-a040fe3732a6",
          "name": "credentials_issue:options.credentialStatus:integer"
        },
        "response": {
          "id": "92f18a62-6aa8-4562-9479-873a80d4a3c8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:91)"
            }
          }
        ]
      },
      {
        "id": "36dfe840-47bc-40c0-b711-403a8089da38",
        "cursor": {
          "ref": "7a54aadd-cc76-4b14-81da-d433e0004543",
          "length": 250,
          "cycles": 1,
          "position": 91,
          "iteration": 0,
          "httpRequestId": "f53c740c-b3c7-4aeb-8773-4cff59e1a486"
        },
        "item": {
          "id": "36dfe840-47bc-40c0-b711-403a8089da38",
          "name": "credentials_issue:options.credentialStatus:null"
        },
        "response": {
          "id": "cec54ad3-862a-44e8-aa56-e436ae9279dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:92)"
            }
          }
        ]
      },
      {
        "id": "16890ef0-8b98-4bf7-9e65-3659a9b58a27",
        "cursor": {
          "ref": "df424c39-e985-4859-9293-eeb92859a0ac",
          "length": 250,
          "cycles": 1,
          "position": 92,
          "iteration": 0,
          "httpRequestId": "29ad4d7c-5adf-40bf-9cf0-ce71990858bb"
        },
        "item": {
          "id": "16890ef0-8b98-4bf7-9e65-3659a9b58a27",
          "name": "credentials_issue:options.credentialStatus:string"
        },
        "response": {
          "id": "822427b2-a87b-4770-9941-7750f4760b96",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 126
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:93)"
            }
          }
        ]
      },
      {
        "id": "113d3efc-1d6f-4ba0-be0b-3238bde0a04d",
        "cursor": {
          "ref": "de3f4006-a6f4-4921-a768-5411abc60ab8",
          "length": 250,
          "cycles": 1,
          "position": 93,
          "iteration": 0,
          "httpRequestId": "570c2225-e6e0-4983-a830-e2f39cf10932"
        },
        "item": {
          "id": "113d3efc-1d6f-4ba0-be0b-3238bde0a04d",
          "name": "credentials_issue:options.credentialStatus.type:missing"
        },
        "response": {
          "id": "d328d3a0-f033-4bd3-a623-9b5be64a91b2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 96,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:94)"
            }
          }
        ]
      },
      {
        "id": "0b963584-78da-43b5-a4d6-45f7b072218f",
        "cursor": {
          "ref": "bfb20f98-610e-4b6c-84b5-fc38e20c11f8",
          "length": 250,
          "cycles": 1,
          "position": 94,
          "iteration": 0,
          "httpRequestId": "cf4f7f60-27db-486f-bfc9-ce5b54505ca6"
        },
        "item": {
          "id": "0b963584-78da-43b5-a4d6-45f7b072218f",
          "name": "credentials_issue:options.credentialStatus.type:array"
        },
        "response": {
          "id": "3a62d7f8-d7ca-49fa-80cf-aa38f7f95dc5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:95)"
            }
          }
        ]
      },
      {
        "id": "cf3b8fe0-a4c0-4a2e-afae-75efd42935a7",
        "cursor": {
          "ref": "90f21d78-4cc7-456d-8e51-b1b44e9210ab",
          "length": 250,
          "cycles": 1,
          "position": 95,
          "iteration": 0,
          "httpRequestId": "0e1350d2-43e8-4d69-a877-afca78d5663f"
        },
        "item": {
          "id": "cf3b8fe0-a4c0-4a2e-afae-75efd42935a7",
          "name": "credentials_issue:options.credentialStatus.type:boolean"
        },
        "response": {
          "id": "ca6a5084-20be-417a-aaa5-8fe103e29301",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:96)"
            }
          }
        ]
      },
      {
        "id": "3e715dbe-ec3c-4bc9-85d7-046f8b0ba126",
        "cursor": {
          "ref": "12e28923-5991-4bb0-a72e-13c9bcba2ed9",
          "length": 250,
          "cycles": 1,
          "position": 96,
          "iteration": 0,
          "httpRequestId": "6f92c8e7-4dfd-42eb-bffd-93915c201cc7"
        },
        "item": {
          "id": "3e715dbe-ec3c-4bc9-85d7-046f8b0ba126",
          "name": "credentials_issue:options.credentialStatus.type:integer"
        },
        "response": {
          "id": "a38f24f2-5cca-49d6-802b-dc5af13f4f71",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:97)"
            }
          }
        ]
      },
      {
        "id": "55d85956-608e-4c0f-90c7-92407a5c259f",
        "cursor": {
          "ref": "ebb25bb0-050f-4fbe-8fa9-4f7b67b412c3",
          "length": 250,
          "cycles": 1,
          "position": 97,
          "iteration": 0,
          "httpRequestId": "2903e4aa-7b73-4a7d-aaa0-d5de59bcdfc6"
        },
        "item": {
          "id": "55d85956-608e-4c0f-90c7-92407a5c259f",
          "name": "credentials_issue:options.credentialStatus.type:null"
        },
        "response": {
          "id": "df4624bb-ffed-4ed5-874a-0c6ebbe6038d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:98)"
            }
          }
        ]
      },
      {
        "id": "1254f699-2708-463c-b5df-fcd7670e4fc6",
        "cursor": {
          "ref": "cdd50034-435f-4e66-8a01-1cc4c19536a7",
          "length": 250,
          "cycles": 1,
          "position": 98,
          "iteration": 0,
          "httpRequestId": "50c4cc98-39f0-4234-a47f-58af30ad3e4d"
        },
        "item": {
          "id": "1254f699-2708-463c-b5df-fcd7670e4fc6",
          "name": "credentials_issue:options.credentialStatus.type:null Copy"
        },
        "response": {
          "id": "933258e1-3415-4c26-bc29-7a449e45e439",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:99)"
            }
          }
        ]
      },
      {
        "id": "68c167fd-e07f-4d49-9ff3-f03cc06ab2e6",
        "cursor": {
          "ref": "34ee0acc-fcf1-4f7e-82c2-0d8cddfaeaf5",
          "length": 250,
          "cycles": 1,
          "position": 99,
          "iteration": 0,
          "httpRequestId": "5a4b3c84-56e2-4e2a-90ff-5cb6f10398d3"
        },
        "item": {
          "id": "68c167fd-e07f-4d49-9ff3-f03cc06ab2e6",
          "name": "credentials_issue:options.credentialStatus.type:invalid"
        },
        "response": {
          "id": "ad3ed448-3aa9-4fb1-a743-72a94cddbb65",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 530
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:100)"
            }
          }
        ]
      },
      {
        "id": "e384e316-f366-4d29-8efb-d1d2fdbf8e81",
        "cursor": {
          "ref": "7a6d8672-76b7-45e3-b9ed-a9a6dd3f9e10",
          "length": 250,
          "cycles": 1,
          "position": 100,
          "iteration": 0,
          "httpRequestId": "1d11c6ec-0843-4519-81a7-180cbfb73f66"
        },
        "item": {
          "id": "e384e316-f366-4d29-8efb-d1d2fdbf8e81",
          "name": "credentials_issue:missing_auth"
        },
        "response": {
          "id": "39d03009-969e-4ade-bf15-2a84fe65c550",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "b2cfbb70-14a2-4571-919c-90731c3b840d",
        "cursor": {
          "ref": "b5aa21ea-7168-49b9-a8b5-22cdee609ddf",
          "length": 250,
          "cycles": 1,
          "position": 101,
          "iteration": 0,
          "httpRequestId": "9aa6ee78-9718-4a03-b0dd-8a98ca951533"
        },
        "item": {
          "id": "b2cfbb70-14a2-4571-919c-90731c3b840d",
          "name": "credentials_issue.credential.issuer:dup"
        },
        "response": {
          "id": "d4651e7c-ebbd-4a02-9936-ffd4d53cd1f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 143
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 201",
              "message": "expected response to have status code 201 but got 400",
              "stack": "AssertionError: expected response to have status code 201 but got 400\n   at Object.eval sandbox-script.js:1:102)"
            }
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false,
            "error": {
              "name": "TypeError",
              "index": 1,
              "test": "response issuer matches request credential.issuer",
              "message": "Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.",
              "stack": "TypeError: Cannot destructure property 'issuer' of 'pm.response.json(...).verifiableCredential' as it is undefined.\n   at Object.eval sandbox-script.js:2:102)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'verifiableCredential'\n   at Object.eval sandbox-script.js:3:102)"
            }
          }
        ]
      },
      {
        "id": "476395d5-bffc-41ba-914b-aa563bcf4507",
        "cursor": {
          "ref": "d0aafb29-1612-42b9-9853-c7965da1644d",
          "length": 250,
          "cycles": 1,
          "position": 102,
          "iteration": 0,
          "httpRequestId": "47eed23f-d8f6-4fa5-9b05-25e2da1b9c8d"
        },
        "item": {
          "id": "476395d5-bffc-41ba-914b-aa563bcf4507",
          "name": "credentials_issue"
        },
        "response": {
          "id": "eadfb4d5-3b59-4857-a27b-5d364afaf243",
          "status": "Created",
          "code": 201,
          "responseTime": 365,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer",
            "skipped": false
          },
          {
            "assertion": "response issuanceDate matches request credential.issuanceDate",
            "skipped": false
          },
          {
            "assertion": "response proof.created is close to 'now'",
            "skipped": false
          }
        ]
      },
      {
        "id": "1f7f75e0-1425-47b2-9a63-3407a6efb077",
        "cursor": {
          "ref": "6769fedb-378c-421d-915d-9bfd3e882886",
          "length": 250,
          "cycles": 1,
          "position": 103,
          "iteration": 0,
          "httpRequestId": "6adc4140-bf84-4904-b60c-07fe41f824f8"
        },
        "item": {
          "id": "1f7f75e0-1425-47b2-9a63-3407a6efb077",
          "name": "credentials_issue:credential.opt.id"
        },
        "response": {
          "id": "10153718-325e-4187-b580-2031bd3d78b3",
          "status": "Created",
          "code": 201,
          "responseTime": 302,
          "responseSize": 643
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verifiableCredential.id matches request credential.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "8d883132-d2b4-4bca-9215-d3fc7048bbc7",
        "cursor": {
          "ref": "9e2092d0-aa33-49ae-aaf1-c13a7a030a67",
          "length": 250,
          "cycles": 1,
          "position": 104,
          "iteration": 0,
          "httpRequestId": "52074822-8045-4342-9403-997275a7edc1"
        },
        "item": {
          "id": "8d883132-d2b4-4bca-9215-d3fc7048bbc7",
          "name": "credentials_issue:credential:alt.issuer.object"
        },
        "response": {
          "id": "eaa7d1d0-e2fc-4d3e-8b2e-a91cf9fe2030",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 696
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response issuer matches request credential.issuer.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "9c15d3d1-9379-4541-8d37-1becf1e1e737",
        "cursor": {
          "ref": "86c5f943-11f5-4456-94e8-6a1e7b7240cd",
          "length": 250,
          "cycles": 1,
          "position": 105,
          "iteration": 0,
          "httpRequestId": "1d32bcd1-2f6a-4855-bd60-5f27cc04539e"
        },
        "item": {
          "id": "9c15d3d1-9379-4541-8d37-1becf1e1e737",
          "name": "credentials_issue:credential:alt.credentialSubject.object:opt.id"
        },
        "response": {
          "id": "e243c17e-0c70-47c6-9275-06897e39fca1",
          "status": "Created",
          "code": 201,
          "responseTime": 322,
          "responseSize": 700
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response credentialSubject.id matches request credential.credentialSubject.id",
            "skipped": false
          }
        ]
      },
      {
        "id": "f2440992-c861-410e-8be3-0034b194cef6",
        "cursor": {
          "ref": "17d6dfcb-685a-4f37-927d-c0a71311688a",
          "length": 250,
          "cycles": 1,
          "position": 106,
          "iteration": 0,
          "httpRequestId": "41528461-13c1-461c-bbb9-2679f69ddb27"
        },
        "item": {
          "id": "f2440992-c861-410e-8be3-0034b194cef6",
          "name": "credentials_issue:options:opt.created"
        },
        "response": {
          "id": "e029a1ba-3dc0-40e1-b834-7b43e28edc4f",
          "status": "Created",
          "code": 201,
          "responseTime": 338,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response proof.created matches request options.created",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response proof.created matches request options.created",
              "message": "expected '2024-08-20T00:40:51.130Z' to equal '2006-01-02T15:04:05Z'",
              "stack": "AssertionError: expected '2024-08-20T00:40:51.130Z' to equal '2006-01-02T15:04:05Z'\n   at Object.eval sandbox-script.js:3:107)"
            }
          }
        ]
      },
      {
        "id": "eaa86453-7e47-4b0f-9109-f916fd1ba986",
        "cursor": {
          "ref": "f074fb00-69d6-4fd1-92be-17d572852bd4",
          "length": 250,
          "cycles": 1,
          "position": 107,
          "iteration": 0,
          "httpRequestId": "3b346365-803f-49aa-932a-d4d7ce780e06"
        },
        "item": {
          "id": "eaa86453-7e47-4b0f-9109-f916fd1ba986",
          "name": "credentials_issue:options:opt.credentialStatus"
        },
        "response": {
          "id": "4d3e9677-a04a-4e14-bbf1-d9888f88f579",
          "status": "Created",
          "code": 201,
          "responseTime": 328,
          "responseSize": 689
        },
        "assertions": [
          {
            "assertion": "status code is 201",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "60a8cb63-25c5-444b-a1ed-5e6eb71fc612",
        "cursor": {
          "ref": "6be033f6-ef69-42b9-b81b-eef6f60652d0",
          "length": 250,
          "cycles": 1,
          "position": 108,
          "iteration": 0,
          "httpRequestId": "4f97dca3-760b-4c81-abe9-f2680aa8d87b"
        },
        "item": {
          "id": "60a8cb63-25c5-444b-a1ed-5e6eb71fc612",
          "name": "credentials_status:credentialId:missing"
        },
        "response": {
          "id": "294baf82-5809-4cf2-9c45-6126aaa4879d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:109)"
            }
          }
        ]
      },
      {
        "id": "6418e19e-25f0-419c-be8d-efc5df27af93",
        "cursor": {
          "ref": "6deff5a7-0430-49e6-b4b4-6d867a01244f",
          "length": 250,
          "cycles": 1,
          "position": 109,
          "iteration": 0,
          "httpRequestId": "f523ed54-3699-4c09-8137-87d7e8c3cffd"
        },
        "item": {
          "id": "6418e19e-25f0-419c-be8d-efc5df27af93",
          "name": "credentials_status:credentialId:array"
        },
        "response": {
          "id": "46a12d0a-bede-4542-9df9-922c37ee057f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:110)"
            }
          }
        ]
      },
      {
        "id": "bf742f4f-d779-4e3d-a795-bf9759ca9a7a",
        "cursor": {
          "ref": "71832695-b7f7-4976-a084-ce06cad06214",
          "length": 250,
          "cycles": 1,
          "position": 110,
          "iteration": 0,
          "httpRequestId": "f0ba553d-0a52-4c9d-ac76-9076aefad0e6"
        },
        "item": {
          "id": "bf742f4f-d779-4e3d-a795-bf9759ca9a7a",
          "name": "credentials_status:credentialId:boolean"
        },
        "response": {
          "id": "de546202-156a-4256-97c5-dfe2d74bf3b1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:111)"
            }
          }
        ]
      },
      {
        "id": "9dfcc2e3-c1c4-435b-a5f9-6a49f83c8d2c",
        "cursor": {
          "ref": "95d175f9-1fc8-48f8-b7b2-4deeb1f20c8c",
          "length": 250,
          "cycles": 1,
          "position": 111,
          "iteration": 0,
          "httpRequestId": "674eb5fe-416f-4e5e-8007-33c102df1269"
        },
        "item": {
          "id": "9dfcc2e3-c1c4-435b-a5f9-6a49f83c8d2c",
          "name": "credentials_status:credentialId:integer"
        },
        "response": {
          "id": "66f52557-d179-4c35-b295-00135fce819a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:112)"
            }
          }
        ]
      },
      {
        "id": "60eceefd-0761-4eba-9802-4ec43d2cfe86",
        "cursor": {
          "ref": "737166f5-40c6-400f-a6cc-1a8639c47388",
          "length": 250,
          "cycles": 1,
          "position": 112,
          "iteration": 0,
          "httpRequestId": "ae6d1b99-a7ae-4b17-a77f-847da19e94ce"
        },
        "item": {
          "id": "60eceefd-0761-4eba-9802-4ec43d2cfe86",
          "name": "credentials_status:credentialId:null"
        },
        "response": {
          "id": "27f59797-d4dd-4914-9740-82db5c097ba3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 171
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:113)"
            }
          }
        ]
      },
      {
        "id": "1a437e75-6015-460a-9fae-aa0f40b122d2",
        "cursor": {
          "ref": "8a8caed7-9e5a-4d88-8118-0b1c2a64e7a8",
          "length": 250,
          "cycles": 1,
          "position": 113,
          "iteration": 0,
          "httpRequestId": "f1180d01-8daf-427b-9082-adedb61d17ae"
        },
        "item": {
          "id": "1a437e75-6015-460a-9fae-aa0f40b122d2",
          "name": "credentials_status:credentialId:object"
        },
        "response": {
          "id": "fdf354a8-1085-49c0-b065-25aa3b202178",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 136
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:114)"
            }
          }
        ]
      },
      {
        "id": "5132f55e-97ae-463c-961d-305f1d5a5df9",
        "cursor": {
          "ref": "4e6b34fa-0750-4c42-b150-7093198de26a",
          "length": 250,
          "cycles": 1,
          "position": 114,
          "iteration": 0,
          "httpRequestId": "7691a30d-f434-41d0-9c52-ddcf18e01350"
        },
        "item": {
          "id": "5132f55e-97ae-463c-961d-305f1d5a5df9",
          "name": "credentials_status:credentialStatus:missing"
        },
        "response": {
          "id": "0d6a0e62-4f21-40aa-b722-41e216fb7c16",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 140
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:115)"
            }
          }
        ]
      },
      {
        "id": "357a49a9-7672-451c-ab59-70b53728d253",
        "cursor": {
          "ref": "ba4335d9-6b97-435b-8f91-08a55f36577c",
          "length": 250,
          "cycles": 1,
          "position": 115,
          "iteration": 0,
          "httpRequestId": "ceddadbb-a824-4244-b6f8-d2b7f2d9a884"
        },
        "item": {
          "id": "357a49a9-7672-451c-ab59-70b53728d253",
          "name": "credentials_status:credentialStatus:boolean"
        },
        "response": {
          "id": "61c8e648-f968-46d3-8076-ce9037a37933",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:116)"
            }
          }
        ]
      },
      {
        "id": "f2cf7356-4af6-433a-9a61-4b8ce7b9ac49",
        "cursor": {
          "ref": "fe99b700-9c8e-4cfa-a72b-87db0d74323e",
          "length": 250,
          "cycles": 1,
          "position": 116,
          "iteration": 0,
          "httpRequestId": "91509286-a867-4630-baf3-a86f0806661e"
        },
        "item": {
          "id": "f2cf7356-4af6-433a-9a61-4b8ce7b9ac49",
          "name": "credentials_status:credentialStatus:integer"
        },
        "response": {
          "id": "304f8b0f-ba33-47ac-8cd7-6d7a99f32f39",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:117)"
            }
          }
        ]
      },
      {
        "id": "27dd9131-c56b-4193-9087-b603fc88f368",
        "cursor": {
          "ref": "ae389706-f187-4253-a380-e189aea6554b",
          "length": 250,
          "cycles": 1,
          "position": 117,
          "iteration": 0,
          "httpRequestId": "62c5609f-6dbd-4965-827c-09f25b784139"
        },
        "item": {
          "id": "27dd9131-c56b-4193-9087-b603fc88f368",
          "name": "credentials_status:credentialStatus:null"
        },
        "response": {
          "id": "9f8894df-a2ac-4625-8327-0cb8265dcf1d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:118)"
            }
          }
        ]
      },
      {
        "id": "9d4c234e-fe22-43a5-b3fd-d142a60554a8",
        "cursor": {
          "ref": "af1cb175-4c1e-427d-bdcf-dd5f40ddec9f",
          "length": 250,
          "cycles": 1,
          "position": 118,
          "iteration": 0,
          "httpRequestId": "f1da44a2-14ec-478d-8fb1-fee845a97056"
        },
        "item": {
          "id": "9d4c234e-fe22-43a5-b3fd-d142a60554a8",
          "name": "credentials_status:credentialStatus:object"
        },
        "response": {
          "id": "bab12abc-00c0-4218-8f21-79032bf1cb0c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 118
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:119)"
            }
          }
        ]
      },
      {
        "id": "e8313808-bbae-4b72-bc54-8124087d26ea",
        "cursor": {
          "ref": "5b24b948-6e59-4aa7-b3e7-2ade40c50399",
          "length": 250,
          "cycles": 1,
          "position": 119,
          "iteration": 0,
          "httpRequestId": "3ce00692-62f9-4282-86c6-56a79603f9e0"
        },
        "item": {
          "id": "e8313808-bbae-4b72-bc54-8124087d26ea",
          "name": "credentials_status:credentialStatus:string"
        },
        "response": {
          "id": "7bc5d6d0-7064-4d0b-b953-10c050fe8a21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 220
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:120)"
            }
          }
        ]
      },
      {
        "id": "bdaf3ec4-8df9-4325-9183-5c09abd8a627",
        "cursor": {
          "ref": "5a279517-a02b-44f6-9d2f-e8bc6cb876b1",
          "length": 250,
          "cycles": 1,
          "position": 120,
          "iteration": 0,
          "httpRequestId": "d9eee2cf-90cd-4d08-9c89-73f6de428c5d"
        },
        "item": {
          "id": "bdaf3ec4-8df9-4325-9183-5c09abd8a627",
          "name": "credentials_status:credentialStatus:too_long"
        },
        "response": {
          "id": "e86cbd88-007d-4015-97b5-998d68c7c676",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 188
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:121)"
            }
          }
        ]
      },
      {
        "id": "22e4d701-1d48-45c1-86a0-24c44e24d5ed",
        "cursor": {
          "ref": "10711c69-0ae6-45e5-8004-44084ba8839e",
          "length": 250,
          "cycles": 1,
          "position": 121,
          "iteration": 0,
          "httpRequestId": "24d98492-e077-40ba-8718-3bf32d1b4d3b"
        },
        "item": {
          "id": "22e4d701-1d48-45c1-86a0-24c44e24d5ed",
          "name": "credentials_status:credentialStatus:item:array"
        },
        "response": {
          "id": "fd046503-06df-4152-ad6c-db53c69bea35",
          "status": "Internal Server Error",
          "code": 500,
          "responseTime": 107,
          "responseSize": 50
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 500",
              "stack": "AssertionError: expected response to have status code 400 but got 500\n   at Object.eval sandbox-script.js:1:122)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:122)"
            }
          }
        ]
      },
      {
        "id": "9ec0a31b-0260-4d8a-9e86-3a9eec1d3325",
        "cursor": {
          "ref": "a21a19d9-79eb-4ef7-90bd-109615ef7118",
          "length": 250,
          "cycles": 1,
          "position": 122,
          "iteration": 0,
          "httpRequestId": "e0c871c7-a993-4bfb-a1cf-1573c1600662"
        },
        "item": {
          "id": "9ec0a31b-0260-4d8a-9e86-3a9eec1d3325",
          "name": "credentials_status:credentialStatus:item:boolean"
        },
        "response": {
          "id": "375d8a41-9916-4854-b16b-4495338b2385",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:123)"
            }
          }
        ]
      },
      {
        "id": "bdf3c36d-fb12-4596-a47e-34e4a25b5fba",
        "cursor": {
          "ref": "44c64d66-d358-4fbb-ba46-d2d695e62568",
          "length": 250,
          "cycles": 1,
          "position": 123,
          "iteration": 0,
          "httpRequestId": "5d1888d4-e444-4975-becd-7ef391f34432"
        },
        "item": {
          "id": "bdf3c36d-fb12-4596-a47e-34e4a25b5fba",
          "name": "credentials_status:credentialStatus:item:integer"
        },
        "response": {
          "id": "1400d3bb-7edb-4bb9-8eb8-c905e702c881",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:124)"
            }
          }
        ]
      },
      {
        "id": "851b3941-49b1-47ce-b142-20505123c6ab",
        "cursor": {
          "ref": "00bb6c29-51cb-4e13-9572-a9653f0a2dac",
          "length": 250,
          "cycles": 1,
          "position": 124,
          "iteration": 0,
          "httpRequestId": "e41bce04-17df-4a84-b3cf-c97bae27347e"
        },
        "item": {
          "id": "851b3941-49b1-47ce-b142-20505123c6ab",
          "name": "credentials_status:credentialStatus:item:null"
        },
        "response": {
          "id": "e29fdc67-c1a2-4635-bc78-ca9b48d63c57",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:125)"
            }
          }
        ]
      },
      {
        "id": "61beff4c-f2e3-4abf-933a-d10f10086c9b",
        "cursor": {
          "ref": "4645ee02-bbcb-49ac-a7cc-e8f79c90c17b",
          "length": 250,
          "cycles": 1,
          "position": 125,
          "iteration": 0,
          "httpRequestId": "19a6b76b-b3c3-4987-8e23-124710507432"
        },
        "item": {
          "id": "61beff4c-f2e3-4abf-933a-d10f10086c9b",
          "name": "credentials_status:credentialStatus:item:string"
        },
        "response": {
          "id": "8499c234-f952-47c7-8cb3-d85f44fb8f04",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 149
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:126)"
            }
          }
        ]
      },
      {
        "id": "2c47dad3-df94-4b3f-9428-95fcca9fcaa1",
        "cursor": {
          "ref": "c541396d-820f-481d-bdc3-d626dcbae28a",
          "length": 250,
          "cycles": 1,
          "position": 126,
          "iteration": 0,
          "httpRequestId": "5f1d2ea9-a2d9-4672-8bf7-4f6f135b3816"
        },
        "item": {
          "id": "2c47dad3-df94-4b3f-9428-95fcca9fcaa1",
          "name": "credentials_status:credentialStatus:item:type:missing"
        },
        "response": {
          "id": "09af1503-f9e8-49a3-9a96-af6988ebfe13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:127)"
            }
          }
        ]
      },
      {
        "id": "9964bbb9-9f1b-4e2e-9ee8-fa3060f053fc",
        "cursor": {
          "ref": "a4ff58d1-e0c7-402a-884e-46eaa05b4c91",
          "length": 250,
          "cycles": 1,
          "position": 127,
          "iteration": 0,
          "httpRequestId": "ce9e778b-666c-49a5-b1fa-641491cada99"
        },
        "item": {
          "id": "9964bbb9-9f1b-4e2e-9ee8-fa3060f053fc",
          "name": "credentials_status:credentialStatus:item:type:array"
        },
        "response": {
          "id": "b79ffc9e-21ad-4774-8bf8-bceaace52515",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:128)"
            }
          }
        ]
      },
      {
        "id": "29d5f2e9-b59c-4412-867d-c5c558546c05",
        "cursor": {
          "ref": "8fa29781-0a89-440b-afa6-b56434f6392a",
          "length": 250,
          "cycles": 1,
          "position": 128,
          "iteration": 0,
          "httpRequestId": "b4704358-6db1-421d-b05b-f59c1283cd4f"
        },
        "item": {
          "id": "29d5f2e9-b59c-4412-867d-c5c558546c05",
          "name": "credentials_status:credentialStatus:item:type:boolean"
        },
        "response": {
          "id": "2ac6a055-1275-48c1-9e11-76684a6950d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:129)"
            }
          }
        ]
      },
      {
        "id": "ad5d44cd-568d-47dd-a9b7-22885bd677ee",
        "cursor": {
          "ref": "0ec6404d-0944-4741-9a07-1ecbf4944953",
          "length": 250,
          "cycles": 1,
          "position": 129,
          "iteration": 0,
          "httpRequestId": "fe6bfac0-6dca-4d9a-924b-c706716e7fbb"
        },
        "item": {
          "id": "ad5d44cd-568d-47dd-a9b7-22885bd677ee",
          "name": "credentials_status:credentialStatus:item:type:integer"
        },
        "response": {
          "id": "82e5d558-5c2a-4415-abfd-1891f9b5560c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:130)"
            }
          }
        ]
      },
      {
        "id": "1d1a7c72-7bc9-4ceb-8c93-c89202e81cfd",
        "cursor": {
          "ref": "c24fdf98-23a5-4d90-b894-b33a0f8034a7",
          "length": 250,
          "cycles": 1,
          "position": 130,
          "iteration": 0,
          "httpRequestId": "99974cb0-17dc-4bbc-8ab0-22edca17248b"
        },
        "item": {
          "id": "1d1a7c72-7bc9-4ceb-8c93-c89202e81cfd",
          "name": "credentials_status:credentialStatus:item:type:null"
        },
        "response": {
          "id": "adb57c1f-b51b-4944-b857-08f3508835fe",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:131)"
            }
          }
        ]
      },
      {
        "id": "b7bebb90-eacf-4b08-b640-3c2c8e208763",
        "cursor": {
          "ref": "bd880d1c-640e-46b7-b7e5-02e41d79e4a0",
          "length": 250,
          "cycles": 1,
          "position": 131,
          "iteration": 0,
          "httpRequestId": "e8302ba7-5bbf-44b6-980b-93cb64cb0570"
        },
        "item": {
          "id": "b7bebb90-eacf-4b08-b640-3c2c8e208763",
          "name": "credentials_status:credentialStatus:item:type:object"
        },
        "response": {
          "id": "8a12a1aa-e61e-4286-85ba-7e0718d6bd13",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 163
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:132)"
            }
          }
        ]
      },
      {
        "id": "b3acaa02-8001-4b14-a407-7b102485ef33",
        "cursor": {
          "ref": "b47d43bc-5121-4c9d-ad8d-833c2dc4bb1a",
          "length": 250,
          "cycles": 1,
          "position": 132,
          "iteration": 0,
          "httpRequestId": "836825e0-b8a7-4921-8361-4f4d357d1b3e"
        },
        "item": {
          "id": "b3acaa02-8001-4b14-a407-7b102485ef33",
          "name": "credentials_status:credentialStatus:item:type:invalid"
        },
        "response": {
          "id": "14889a06-521a-4169-b1c1-095dc3f70042",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 150,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:133)"
            }
          }
        ]
      },
      {
        "id": "ec243268-d0d6-4d4b-aa48-fbac0a5a4b2d",
        "cursor": {
          "ref": "5f4a17ca-fe5f-4f23-b290-4e9ac42430e8",
          "length": 250,
          "cycles": 1,
          "position": 133,
          "iteration": 0,
          "httpRequestId": "4f7a0ea2-5522-4267-818b-ad2cbbeef4f7"
        },
        "item": {
          "id": "ec243268-d0d6-4d4b-aa48-fbac0a5a4b2d",
          "name": "credentials_status:credentialStatus:item:status:missing"
        },
        "response": {
          "id": "80964764-a7f6-483b-9811-d3713d4a1f10",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:134)"
            }
          }
        ]
      },
      {
        "id": "7c371dfc-1747-4813-b778-e1fb3bdbe397",
        "cursor": {
          "ref": "92d5a296-1404-4bde-a2f0-5feb50626093",
          "length": 250,
          "cycles": 1,
          "position": 134,
          "iteration": 0,
          "httpRequestId": "f55b6c9a-2428-4d24-b20e-0eeed04a8c4f"
        },
        "item": {
          "id": "7c371dfc-1747-4813-b778-e1fb3bdbe397",
          "name": "credentials_status:credentialStatus:item:status:array"
        },
        "response": {
          "id": "81655930-b29a-40e2-9267-5655eb6d6547",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:135)"
            }
          }
        ]
      },
      {
        "id": "1576077b-7c84-4d93-b966-7c2bda40bdc8",
        "cursor": {
          "ref": "7d426f59-0586-4fe5-b307-3447886f73ff",
          "length": 250,
          "cycles": 1,
          "position": 135,
          "iteration": 0,
          "httpRequestId": "2b784bed-7179-4a0a-9dfd-e26f7833a312"
        },
        "item": {
          "id": "1576077b-7c84-4d93-b966-7c2bda40bdc8",
          "name": "credentials_status:credentialStatus:item:status:boolean"
        },
        "response": {
          "id": "6f6cba80-0886-4eb2-8740-01cd1c2bc9d7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:136)"
            }
          }
        ]
      },
      {
        "id": "5c7bb09d-3590-4c45-a424-e229f620a7c7",
        "cursor": {
          "ref": "eda4c869-bb95-451c-a7b7-92a9a24fc03b",
          "length": 250,
          "cycles": 1,
          "position": 136,
          "iteration": 0,
          "httpRequestId": "ac609962-9d38-4deb-8604-4ec2b35a1714"
        },
        "item": {
          "id": "5c7bb09d-3590-4c45-a424-e229f620a7c7",
          "name": "credentials_status:credentialStatus:item:status:integer"
        },
        "response": {
          "id": "2a265bf5-d5b6-4b3f-b2cd-1a97ab14e393",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:137)"
            }
          }
        ]
      },
      {
        "id": "2fe7e442-d7b5-40d0-9ca5-3c69bb8b1ee8",
        "cursor": {
          "ref": "a3f79b1b-5a30-48e2-8d5d-6c300dbfd1a3",
          "length": 250,
          "cycles": 1,
          "position": 137,
          "iteration": 0,
          "httpRequestId": "8a77d8d7-1c03-48d0-9c68-d67c18f2780e"
        },
        "item": {
          "id": "2fe7e442-d7b5-40d0-9ca5-3c69bb8b1ee8",
          "name": "credentials_status:credentialStatus:item:status:null"
        },
        "response": {
          "id": "cbc85443-e5d3-4f6e-98cf-98635c15e8e2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 213
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:138)"
            }
          }
        ]
      },
      {
        "id": "e9cc99b6-a1f4-4dca-85d3-215c9067f8c0",
        "cursor": {
          "ref": "716a1d46-8091-4bbb-8448-fb5d23f9da93",
          "length": 250,
          "cycles": 1,
          "position": 138,
          "iteration": 0,
          "httpRequestId": "d58e0d75-3275-42cd-857d-bd3a91f4439b"
        },
        "item": {
          "id": "e9cc99b6-a1f4-4dca-85d3-215c9067f8c0",
          "name": "credentials_status:credentialStatus:item:status:object"
        },
        "response": {
          "id": "c8b04dfe-b35d-499d-bc0a-f3f57df90d21",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:139)"
            }
          }
        ]
      },
      {
        "id": "6a6ed082-c371-437c-ad01-a31fa4170aa0",
        "cursor": {
          "ref": "db00d174-159e-4588-8669-69b470514348",
          "length": 250,
          "cycles": 1,
          "position": 139,
          "iteration": 0,
          "httpRequestId": "b3475901-cf88-4623-b3a0-a55b3467508c"
        },
        "item": {
          "id": "6a6ed082-c371-437c-ad01-a31fa4170aa0",
          "name": "credentials_status:credentialStatus:item:purpose:missing"
        },
        "response": {
          "id": "81a4ed3b-15f6-4fcf-9547-3e4a5102c7d2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:140)"
            }
          }
        ]
      },
      {
        "id": "3e967359-aa0b-4405-aa63-0cc7ae37f593",
        "cursor": {
          "ref": "15a6d3d6-7148-4a4c-a705-cefee1f1c68a",
          "length": 250,
          "cycles": 1,
          "position": 140,
          "iteration": 0,
          "httpRequestId": "7289121c-8ed1-43fc-a70a-894a344aee26"
        },
        "item": {
          "id": "3e967359-aa0b-4405-aa63-0cc7ae37f593",
          "name": "credentials_status:credentialStatus:item:purpose:array"
        },
        "response": {
          "id": "0da36069-4fa4-49ce-9e83-0e1e3ab9c30b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:141)"
            }
          }
        ]
      },
      {
        "id": "99104a6b-0493-4051-8937-c6e177c89550",
        "cursor": {
          "ref": "5c614414-e09f-47c4-8ed6-77e960b549c9",
          "length": 250,
          "cycles": 1,
          "position": 141,
          "iteration": 0,
          "httpRequestId": "158867c2-829c-4e2a-9e31-20d9fa09fcbc"
        },
        "item": {
          "id": "99104a6b-0493-4051-8937-c6e177c89550",
          "name": "credentials_status:credentialStatus:item:purpose:boolean"
        },
        "response": {
          "id": "b318ccee-f2b1-4f4d-b25d-acf966f83086",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:142)"
            }
          }
        ]
      },
      {
        "id": "1ff390e5-1a37-4502-a3e2-7560c135901b",
        "cursor": {
          "ref": "0f99bfbd-8d5d-4c02-9b8f-27e9d008db16",
          "length": 250,
          "cycles": 1,
          "position": 142,
          "iteration": 0,
          "httpRequestId": "98636cc4-1191-4274-8a76-659e39a2bdd3"
        },
        "item": {
          "id": "1ff390e5-1a37-4502-a3e2-7560c135901b",
          "name": "credentials_status:credentialStatus:item:purpose:integer"
        },
        "response": {
          "id": "76fe5b43-1170-4370-bf31-4dd93331cc9c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:143)"
            }
          }
        ]
      },
      {
        "id": "a6287039-c41a-40be-9b1d-0592a8b23bf1",
        "cursor": {
          "ref": "692863af-523b-4d8b-9549-b0350405c9e0",
          "length": 250,
          "cycles": 1,
          "position": 143,
          "iteration": 0,
          "httpRequestId": "d414d49b-1dae-4dff-a2eb-53256b3de215"
        },
        "item": {
          "id": "a6287039-c41a-40be-9b1d-0592a8b23bf1",
          "name": "credentials_status:credentialStatus:item:purpose:null"
        },
        "response": {
          "id": "ea335c0d-72f5-4ea5-8843-7a9eb8a96aaa",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:144)"
            }
          }
        ]
      },
      {
        "id": "3b958dc2-aaa9-4fa7-abfe-48114bef5357",
        "cursor": {
          "ref": "6134a2c9-c2ba-4ccc-b530-7f0dbf191a4a",
          "length": 250,
          "cycles": 1,
          "position": 144,
          "iteration": 0,
          "httpRequestId": "69e46a5c-0705-4caa-9a24-713cf83bdd4e"
        },
        "item": {
          "id": "3b958dc2-aaa9-4fa7-abfe-48114bef5357",
          "name": "credentials_status:credentialStatus:item:purpose:object"
        },
        "response": {
          "id": "33e19c3e-338b-4700-9179-8c7f2e20caf3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:145)"
            }
          }
        ]
      },
      {
        "id": "199000b7-0323-4c18-a530-3dd0e004c1c0",
        "cursor": {
          "ref": "71c8feb9-eafd-4b81-959f-536c6b840179",
          "length": 250,
          "cycles": 1,
          "position": 145,
          "iteration": 0,
          "httpRequestId": "d03d4746-f363-4af1-967a-56e560cf8380"
        },
        "item": {
          "id": "199000b7-0323-4c18-a530-3dd0e004c1c0",
          "name": "credentials_status:missing_auth"
        },
        "response": {
          "id": "cf49e7ed-b87c-429f-bd74-5a4ceccb2f6c",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "52e81e3a-e264-4811-a999-2fe308b17de9",
        "cursor": {
          "ref": "99a4ceb9-a072-48cf-8a0d-dc67cc8974fc",
          "length": 250,
          "cycles": 1,
          "position": 146,
          "iteration": 0,
          "httpRequestId": "37c8a550-3c94-427d-9dfe-312ad2b24997"
        },
        "item": {
          "id": "52e81e3a-e264-4811-a999-2fe308b17de9",
          "name": "credentials_verify:vc:missing"
        },
        "response": {
          "id": "a1fd9167-ff2d-4d5b-aeee-9d7ab69d960a",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 87,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:147)"
            }
          }
        ]
      },
      {
        "id": "26ef61a7-c4c4-4718-a7a6-1b0bb0f9f0dc",
        "cursor": {
          "ref": "9ae5d734-3fdb-4111-a0af-8afcdde48983",
          "length": 250,
          "cycles": 1,
          "position": 147,
          "iteration": 0,
          "httpRequestId": "d7b5fa9a-423f-4aa6-ba56-b2448e01bc8e"
        },
        "item": {
          "id": "26ef61a7-c4c4-4718-a7a6-1b0bb0f9f0dc",
          "name": "credentials_verify:vc:string"
        },
        "response": {
          "id": "c741b6a5-b565-4e40-8fb8-f3b1c7eb1b6d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:148)"
            }
          }
        ]
      },
      {
        "id": "e78504c7-891a-4531-9950-dc4c07b51d84",
        "cursor": {
          "ref": "6c1fadb4-9d74-40f2-bc59-5287a5b5806a",
          "length": 250,
          "cycles": 1,
          "position": 148,
          "iteration": 0,
          "httpRequestId": "956d720b-bba1-486f-aa3f-253ed9366410"
        },
        "item": {
          "id": "e78504c7-891a-4531-9950-dc4c07b51d84",
          "name": "credentials_verify:vc:null"
        },
        "response": {
          "id": "b6c9c772-310d-439b-99b4-19f6fa6e31a8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 165
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:149)"
            }
          }
        ]
      },
      {
        "id": "63abb8c0-ff6e-4f6c-9116-ad3a064198b0",
        "cursor": {
          "ref": "aab989aa-e3f8-4c3e-ab4a-134ea90e5c6a",
          "length": 250,
          "cycles": 1,
          "position": 149,
          "iteration": 0,
          "httpRequestId": "2f15fcea-7541-4cc7-82e7-75877eba9ac4"
        },
        "item": {
          "id": "63abb8c0-ff6e-4f6c-9116-ad3a064198b0",
          "name": "credentials_verify:vc:integer"
        },
        "response": {
          "id": "86dc3cd2-c3b9-4da1-8b34-3dd18f28b270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:150)"
            }
          }
        ]
      },
      {
        "id": "e08ccc01-d21c-4136-a291-5833f473275a",
        "cursor": {
          "ref": "2a1fc3ea-9ef5-43e8-815a-d22ccbb80c78",
          "length": 250,
          "cycles": 1,
          "position": 150,
          "iteration": 0,
          "httpRequestId": "bf1808b0-c2a8-4786-bd6b-1026c4e94761"
        },
        "item": {
          "id": "e08ccc01-d21c-4136-a291-5833f473275a",
          "name": "credentials_verify:vc:boolean"
        },
        "response": {
          "id": "cba058ef-514e-404d-8b14-7b1efe10efc6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 122
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:151)"
            }
          }
        ]
      },
      {
        "id": "397e8873-9947-449a-9e2f-4f1b666e6df3",
        "cursor": {
          "ref": "5dfda6e1-970d-4b01-9ce9-aa0529c1af0d",
          "length": 250,
          "cycles": 1,
          "position": 151,
          "iteration": 0,
          "httpRequestId": "23375d9c-f892-4111-a662-a57804cbc9ec"
        },
        "item": {
          "id": "397e8873-9947-449a-9e2f-4f1b666e6df3",
          "name": "credentials_verify:vc:array"
        },
        "response": {
          "id": "95400380-d6cf-4514-bd24-23d00ee22836",
          "status": "OK",
          "code": 200,
          "responseTime": 130,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:152)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:152)"
            }
          }
        ]
      },
      {
        "id": "a8103021-099e-43d8-b2ee-be4376293150",
        "cursor": {
          "ref": "6e163618-2737-4d1e-b9c6-7a7d8bf51fa6",
          "length": 250,
          "cycles": 1,
          "position": 152,
          "iteration": 0,
          "httpRequestId": "0c24325b-cb2e-4db6-bae6-87493ea3f0be"
        },
        "item": {
          "id": "a8103021-099e-43d8-b2ee-be4376293150",
          "name": "credentials_verify:vc:@context:missing"
        },
        "response": {
          "id": "4caa62eb-c5bc-4883-881c-6a379ee47a06",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:153)"
            }
          }
        ]
      },
      {
        "id": "609ac65d-d7de-4046-bcaa-8e8b89cacc6e",
        "cursor": {
          "ref": "91df3c77-6c7a-48e3-a957-050231ec5a7e",
          "length": 250,
          "cycles": 1,
          "position": 153,
          "iteration": 0,
          "httpRequestId": "958161c5-511c-4c6e-b9c4-35f9d4e5dcc0"
        },
        "item": {
          "id": "609ac65d-d7de-4046-bcaa-8e8b89cacc6e",
          "name": "credentials_verify:vc:@context:boolean"
        },
        "response": {
          "id": "fc6ab137-020f-4c99-b490-cb42bfbfed0f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:154)"
            }
          }
        ]
      },
      {
        "id": "4b623501-a49e-4b2e-99f4-2d981a571a35",
        "cursor": {
          "ref": "899061e3-d4ef-463d-8a77-867c7b458814",
          "length": 250,
          "cycles": 1,
          "position": 154,
          "iteration": 0,
          "httpRequestId": "fa9c9574-e446-42f8-9dcd-ba4ca5c71115"
        },
        "item": {
          "id": "4b623501-a49e-4b2e-99f4-2d981a571a35",
          "name": "credentials_verify:vc:@context:integer"
        },
        "response": {
          "id": "4d9cc882-f38a-43c8-a5d2-a4a92eb74adc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:155)"
            }
          }
        ]
      },
      {
        "id": "4c4c43e0-d003-4050-b1a9-66b98479cdd2",
        "cursor": {
          "ref": "36a4fc73-befa-479e-9ca9-be107c61474b",
          "length": 250,
          "cycles": 1,
          "position": 155,
          "iteration": 0,
          "httpRequestId": "06cb9ac1-76f5-457a-810d-0b93126d9a76"
        },
        "item": {
          "id": "4c4c43e0-d003-4050-b1a9-66b98479cdd2",
          "name": "credentials_verify:vc:@context:null"
        },
        "response": {
          "id": "62ee5fbd-c688-4c23-ae22-ed162f9143dc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 100,
          "responseSize": 295
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:156)"
            }
          }
        ]
      },
      {
        "id": "9d4f8feb-c74a-40bd-a6fc-d46734647c4b",
        "cursor": {
          "ref": "2f86cc44-47ed-46b1-80a3-55530839e046",
          "length": 250,
          "cycles": 1,
          "position": 156,
          "iteration": 0,
          "httpRequestId": "69572b61-7552-4bfa-96b5-6421ecb95641"
        },
        "item": {
          "id": "9d4f8feb-c74a-40bd-a6fc-d46734647c4b",
          "name": "credentials_verify:vc:@context:object"
        },
        "response": {
          "id": "f37bb424-52b6-4f3e-8988-d693f585d563",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 234
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:157)"
            }
          }
        ]
      },
      {
        "id": "7000070b-0164-488f-967e-f43963f6de5a",
        "cursor": {
          "ref": "2c4d34b2-14f3-4551-9c0e-9d7ad7d549ac",
          "length": 250,
          "cycles": 1,
          "position": 157,
          "iteration": 0,
          "httpRequestId": "47256639-930a-4a9e-a13d-af69cb94d9cd"
        },
        "item": {
          "id": "7000070b-0164-488f-967e-f43963f6de5a",
          "name": "credentials_verify:vc:@context:string"
        },
        "response": {
          "id": "7cac79d8-836d-4db0-8177-82f0219f5b55",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:158)"
            }
          }
        ]
      },
      {
        "id": "3eea2b1a-57ea-4ad5-b4a9-69b3be5cd59f",
        "cursor": {
          "ref": "68c41940-c30a-4b4e-8cdd-c37384a6c9bd",
          "length": 250,
          "cycles": 1,
          "position": 158,
          "iteration": 0,
          "httpRequestId": "636df5b6-cf22-4ff6-9288-54f4b65b6d59"
        },
        "item": {
          "id": "3eea2b1a-57ea-4ad5-b4a9-69b3be5cd59f",
          "name": "credentials_verify:vc:@context:item:array"
        },
        "response": {
          "id": "b1ce66e9-3c0a-4143-93b5-8b9529757de3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:159)"
            }
          }
        ]
      },
      {
        "id": "4c4b931e-13cc-4297-a23e-cc4eac59156c",
        "cursor": {
          "ref": "044dacb9-571a-4356-b7bb-c475e5e1b0c6",
          "length": 250,
          "cycles": 1,
          "position": 159,
          "iteration": 0,
          "httpRequestId": "16a1060b-94b3-48e6-9191-1dad872b2cf5"
        },
        "item": {
          "id": "4c4b931e-13cc-4297-a23e-cc4eac59156c",
          "name": "credentials_verify:vc:@context:item:boolean"
        },
        "response": {
          "id": "304a0fda-097f-4432-962f-5aa28dae56de",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:160)"
            }
          }
        ]
      },
      {
        "id": "cb5c6b9f-4a9f-4f69-89d8-f73a5f18ebde",
        "cursor": {
          "ref": "60c9c6a4-9df5-4c7d-9d8a-b41d824cc9ef",
          "length": 250,
          "cycles": 1,
          "position": 160,
          "iteration": 0,
          "httpRequestId": "bedcf6c9-5fe2-466d-baef-ecacfeddc27c"
        },
        "item": {
          "id": "cb5c6b9f-4a9f-4f69-89d8-f73a5f18ebde",
          "name": "credentials_verify:vc:@context:item:integer"
        },
        "response": {
          "id": "01e2f357-0799-48d0-80aa-2b264149e7b9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:161)"
            }
          }
        ]
      },
      {
        "id": "2b12e0a3-8843-42f1-bcfc-229ef0f7e878",
        "cursor": {
          "ref": "ff57bd70-f44c-4a0a-9880-a8ea876b37ac",
          "length": 250,
          "cycles": 1,
          "position": 161,
          "iteration": 0,
          "httpRequestId": "b2ee5431-fded-4f55-a2c5-23fb3b27db9a"
        },
        "item": {
          "id": "2b12e0a3-8843-42f1-bcfc-229ef0f7e878",
          "name": "credentials_verify:vc:@context:item:null"
        },
        "response": {
          "id": "d2750808-4d9c-42aa-bfe6-bba1ac145bd9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:162)"
            }
          }
        ]
      },
      {
        "id": "db01aefb-3627-462c-a929-ee15bbb0e517",
        "cursor": {
          "ref": "28053747-5572-4c8b-9924-a8ea8b597abc",
          "length": 250,
          "cycles": 1,
          "position": 162,
          "iteration": 0,
          "httpRequestId": "9802517c-2589-4145-ac05-b32a8e11da04"
        },
        "item": {
          "id": "db01aefb-3627-462c-a929-ee15bbb0e517",
          "name": "credentials_verify:vc:@context:item:object"
        },
        "response": {
          "id": "79d52f06-6ab1-4045-8dd1-4a0dec217509",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 90,
          "responseSize": 120
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:163)"
            }
          }
        ]
      },
      {
        "id": "056b66ed-5f90-447b-b664-9048007db961",
        "cursor": {
          "ref": "b660c69d-e1fd-4ad7-99c8-c6be0843e453",
          "length": 250,
          "cycles": 1,
          "position": 163,
          "iteration": 0,
          "httpRequestId": "29109ad2-fa3b-4293-a601-f2375d00184e"
        },
        "item": {
          "id": "056b66ed-5f90-447b-b664-9048007db961",
          "name": "credentials_verify:vc:id:array"
        },
        "response": {
          "id": "5a3291e6-cf23-43ae-9c72-76a18b9dee0b",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:164)"
            }
          }
        ]
      },
      {
        "id": "6de4e8f0-5eb6-435f-bd23-7cf151f7d7e9",
        "cursor": {
          "ref": "f1f96298-2d71-465f-a324-b958ed964945",
          "length": 250,
          "cycles": 1,
          "position": 164,
          "iteration": 0,
          "httpRequestId": "dd9a3311-6c14-4d9c-8453-91841aa17a4b"
        },
        "item": {
          "id": "6de4e8f0-5eb6-435f-bd23-7cf151f7d7e9",
          "name": "credentials_verify:vc:id:boolean"
        },
        "response": {
          "id": "65347412-1f15-4dcf-902c-22ce4e482018",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:165)"
            }
          }
        ]
      },
      {
        "id": "2b7916ce-fa5a-45e6-921a-5ac724db89c0",
        "cursor": {
          "ref": "7e1e29f6-6b8e-4354-8111-ae0ea9d309a9",
          "length": 250,
          "cycles": 1,
          "position": 165,
          "iteration": 0,
          "httpRequestId": "c28d0ea0-5974-4a02-a43e-b8a4683612ed"
        },
        "item": {
          "id": "2b7916ce-fa5a-45e6-921a-5ac724db89c0",
          "name": "credentials_verify:vc:id:integer"
        },
        "response": {
          "id": "30337c00-28a3-4645-8e46-ed9984bbf8a1",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:166)"
            }
          }
        ]
      },
      {
        "id": "a27229ac-545b-4e19-8f91-a2580e787c9a",
        "cursor": {
          "ref": "1413684e-66a8-416f-8ae5-403893331738",
          "length": 250,
          "cycles": 1,
          "position": 166,
          "iteration": 0,
          "httpRequestId": "5c7d0cc5-f16b-444f-8a89-1f4b5af68c57"
        },
        "item": {
          "id": "a27229ac-545b-4e19-8f91-a2580e787c9a",
          "name": "credentials_verify:vc:id:null"
        },
        "response": {
          "id": "ce7cccea-1052-427e-8431-157d0bd8c191",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:167)"
            }
          }
        ]
      },
      {
        "id": "a49022a1-f964-40f5-83f5-1ad586ae2f52",
        "cursor": {
          "ref": "4d3f1faf-45e4-4093-9351-1ad6dea31b19",
          "length": 250,
          "cycles": 1,
          "position": 167,
          "iteration": 0,
          "httpRequestId": "c2594372-fe7a-4f7e-8875-26fcdb30494c"
        },
        "item": {
          "id": "a49022a1-f964-40f5-83f5-1ad586ae2f52",
          "name": "credentials_verify:vc:id:object"
        },
        "response": {
          "id": "8fa964f0-5fe3-4fdb-b292-198b35dfb9cd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 95
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:168)"
            }
          }
        ]
      },
      {
        "id": "f2f7d869-f991-4b08-a37c-bd17c985bcdb",
        "cursor": {
          "ref": "434145c8-6ccd-47ad-9c89-6ccc8bb0069e",
          "length": 250,
          "cycles": 1,
          "position": 168,
          "iteration": 0,
          "httpRequestId": "803d299b-84d2-4a0f-adaf-78415d637dc5"
        },
        "item": {
          "id": "f2f7d869-f991-4b08-a37c-bd17c985bcdb",
          "name": "credentials_verify:vc:type:missing"
        },
        "response": {
          "id": "9c163dcd-36bb-42eb-8dd6-46b8ac9db07e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:169)"
            }
          }
        ]
      },
      {
        "id": "9d041ec5-c723-4a20-a494-b69da88fcb3e",
        "cursor": {
          "ref": "8740bc21-0e2f-4173-96fe-3080297206ba",
          "length": 250,
          "cycles": 1,
          "position": 169,
          "iteration": 0,
          "httpRequestId": "df794750-ce7d-4140-8c8a-7c4ee98f18c4"
        },
        "item": {
          "id": "9d041ec5-c723-4a20-a494-b69da88fcb3e",
          "name": "credentials_verify:vc:type:boolean"
        },
        "response": {
          "id": "a57a4268-dd02-455e-b005-66d3560e668c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:170)"
            }
          }
        ]
      },
      {
        "id": "8dc85994-903c-49f5-bf47-62c838836a48",
        "cursor": {
          "ref": "29b16c0f-dce7-49d0-9d04-42e818bf499c",
          "length": 250,
          "cycles": 1,
          "position": 170,
          "iteration": 0,
          "httpRequestId": "c2fa5ccb-8040-480f-a973-c4cecfceaeff"
        },
        "item": {
          "id": "8dc85994-903c-49f5-bf47-62c838836a48",
          "name": "credentials_verify:vc:type:integer"
        },
        "response": {
          "id": "bbc120bb-31c2-4538-a591-ddc7ed2e2b43",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:171)"
            }
          }
        ]
      },
      {
        "id": "160da2da-268e-4ffc-8157-7df60a1a08b3",
        "cursor": {
          "ref": "ad0dbb83-7e1a-442d-a69b-68f7ddd94b47",
          "length": 250,
          "cycles": 1,
          "position": 171,
          "iteration": 0,
          "httpRequestId": "9ccc5f9b-c28e-4ea2-840b-ff32791b798d"
        },
        "item": {
          "id": "160da2da-268e-4ffc-8157-7df60a1a08b3",
          "name": "credentials_verify:vc:type:null"
        },
        "response": {
          "id": "8dd9672d-ea35-4af6-8e60-db09e64c3d02",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:172)"
            }
          }
        ]
      },
      {
        "id": "dc7a09f2-7f3a-4c18-98e4-6a608734a872",
        "cursor": {
          "ref": "1cf988ef-d8c6-4006-b652-af7d51969a00",
          "length": 250,
          "cycles": 1,
          "position": 172,
          "iteration": 0,
          "httpRequestId": "c1cb75b5-d7b7-46cb-af17-5e8ea8f6f644"
        },
        "item": {
          "id": "dc7a09f2-7f3a-4c18-98e4-6a608734a872",
          "name": "credentials_verify:vc:type:object"
        },
        "response": {
          "id": "fd25c3a1-bf01-4fc0-902a-ff6a46c073d6",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:173)"
            }
          }
        ]
      },
      {
        "id": "fab6b170-b6ff-4ca2-b299-b6d82d1fb24f",
        "cursor": {
          "ref": "1183f184-93c7-4f63-ad44-56137d8b3a03",
          "length": 250,
          "cycles": 1,
          "position": 173,
          "iteration": 0,
          "httpRequestId": "e8420285-17a7-4966-b6b7-4327317083e2"
        },
        "item": {
          "id": "fab6b170-b6ff-4ca2-b299-b6d82d1fb24f",
          "name": "credentials_verify:vc:type:string"
        },
        "response": {
          "id": "82405846-0d44-4c30-b2df-06f7a8489451",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:174)"
            }
          }
        ]
      },
      {
        "id": "a0088de9-99ef-470b-beb4-bf769df0809c",
        "cursor": {
          "ref": "42d2c307-0358-4869-9767-1a7930581aa6",
          "length": 250,
          "cycles": 1,
          "position": 174,
          "iteration": 0,
          "httpRequestId": "7d4ead05-33e9-49a9-ac19-e8342c658b1b"
        },
        "item": {
          "id": "a0088de9-99ef-470b-beb4-bf769df0809c",
          "name": "credentials_verify:vc:type:item:missing"
        },
        "response": {
          "id": "8c2a9dbc-d2d7-42c7-9107-cbdc9b39f5a3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:175)"
            }
          }
        ]
      },
      {
        "id": "167058eb-d5f6-4ca0-8de4-b84fc858caba",
        "cursor": {
          "ref": "cb84f320-8854-478a-ba2d-a2b8c1c3a5be",
          "length": 250,
          "cycles": 1,
          "position": 175,
          "iteration": 0,
          "httpRequestId": "cb47cb3c-d360-468b-850a-79e7ae9abd1a"
        },
        "item": {
          "id": "167058eb-d5f6-4ca0-8de4-b84fc858caba",
          "name": "credentials_verify:vc:type:item:array"
        },
        "response": {
          "id": "26851fda-639b-4920-b5dd-105ef28feaf5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:176)"
            }
          }
        ]
      },
      {
        "id": "50b8f1bc-a273-4905-aa0c-bdbc66582d16",
        "cursor": {
          "ref": "710b9118-5f2e-497e-8e56-b81cce667998",
          "length": 250,
          "cycles": 1,
          "position": 176,
          "iteration": 0,
          "httpRequestId": "b95784eb-c68a-48c8-a2a4-fa2123a96c03"
        },
        "item": {
          "id": "50b8f1bc-a273-4905-aa0c-bdbc66582d16",
          "name": "credentials_verify:vc:type:item:boolean"
        },
        "response": {
          "id": "36705afd-9b2b-4efa-91d6-37eb7786f3da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:177)"
            }
          }
        ]
      },
      {
        "id": "9030dfa4-b085-45b9-8c3f-bacd96f60f27",
        "cursor": {
          "ref": "f4e6a5f3-ad8f-4ce3-9f6f-01e675ec1315",
          "length": 250,
          "cycles": 1,
          "position": 177,
          "iteration": 0,
          "httpRequestId": "46218502-5864-45f7-afef-0170e381e2e0"
        },
        "item": {
          "id": "9030dfa4-b085-45b9-8c3f-bacd96f60f27",
          "name": "credentials_verify:vc:type:item:integer"
        },
        "response": {
          "id": "72a27e8d-5adb-444c-94f1-b468625015f5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:178)"
            }
          }
        ]
      },
      {
        "id": "cf4d1a5d-734d-45c3-9441-00598e720c31",
        "cursor": {
          "ref": "99731359-bbce-45b3-a270-f87fae6e01a0",
          "length": 250,
          "cycles": 1,
          "position": 178,
          "iteration": 0,
          "httpRequestId": "72970550-e4f9-4739-bd96-25a59c49df16"
        },
        "item": {
          "id": "cf4d1a5d-734d-45c3-9441-00598e720c31",
          "name": "credentials_verify:vc:type:item:null"
        },
        "response": {
          "id": "77b2dddc-8016-4000-a0e4-e3b907a4619d",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:179)"
            }
          }
        ]
      },
      {
        "id": "568096ca-f6e6-4d41-88f6-c534381c9951",
        "cursor": {
          "ref": "3eda37da-d05f-47f1-b2ca-31ed407db8d0",
          "length": 250,
          "cycles": 1,
          "position": 179,
          "iteration": 0,
          "httpRequestId": "f495dd4c-00a2-4ec5-b86e-0e939caaf62d"
        },
        "item": {
          "id": "568096ca-f6e6-4d41-88f6-c534381c9951",
          "name": "credentials_verify:vc:type:item:object"
        },
        "response": {
          "id": "b67f4826-223e-406a-a04f-1895db26d3c0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 111
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:180)"
            }
          }
        ]
      },
      {
        "id": "6fec845c-83d5-4ef9-aaff-cf1e6f7ce9c7",
        "cursor": {
          "ref": "4ee367a6-fe32-455f-bd2c-27c766db45cd",
          "length": 250,
          "cycles": 1,
          "position": 180,
          "iteration": 0,
          "httpRequestId": "d525a03b-64ba-4013-b67d-47d12d22d612"
        },
        "item": {
          "id": "6fec845c-83d5-4ef9-aaff-cf1e6f7ce9c7",
          "name": "credentials_verify:vc:issuer:missing"
        },
        "response": {
          "id": "ccac0b66-04c6-459a-9d85-0c0d653dee0e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 111,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:181)"
            }
          }
        ]
      },
      {
        "id": "fbd10729-78af-4f27-87cb-a33e848fcd2b",
        "cursor": {
          "ref": "8997a1c1-4041-4f99-a1f2-281a16e3f1c9",
          "length": 250,
          "cycles": 1,
          "position": 181,
          "iteration": 0,
          "httpRequestId": "af84cc1c-f4ae-4db0-97b0-ce5d984e30ec"
        },
        "item": {
          "id": "fbd10729-78af-4f27-87cb-a33e848fcd2b",
          "name": "credentials_verify:vc:issuer:array"
        },
        "response": {
          "id": "03d90c66-c423-40e3-bb86-036e882c210f",
          "status": "OK",
          "code": 200,
          "responseTime": 141,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:182)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:182)"
            }
          }
        ]
      },
      {
        "id": "1ec61bf8-e2be-4195-81cc-cb06a202236a",
        "cursor": {
          "ref": "24f633fa-8f8a-43cd-972c-ef1b197b5198",
          "length": 250,
          "cycles": 1,
          "position": 182,
          "iteration": 0,
          "httpRequestId": "cf12b451-7ea7-48fa-b3e1-ba657d5bf31c"
        },
        "item": {
          "id": "1ec61bf8-e2be-4195-81cc-cb06a202236a",
          "name": "credentials_verify:vc:issuer:boolean"
        },
        "response": {
          "id": "7a038b72-7cdf-4f05-bf40-d9573ba5b3a7",
          "status": "OK",
          "code": 200,
          "responseTime": 161,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:183)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:183)"
            }
          }
        ]
      },
      {
        "id": "00822a78-9838-44d2-b4e3-d6e89b39427e",
        "cursor": {
          "ref": "d68d2fd8-dd5a-49b0-bc3e-d6a3ee56fdb2",
          "length": 250,
          "cycles": 1,
          "position": 183,
          "iteration": 0,
          "httpRequestId": "a0658dfc-442f-4721-bed3-010f6dc0319b"
        },
        "item": {
          "id": "00822a78-9838-44d2-b4e3-d6e89b39427e",
          "name": "credentials_verify:vc:issuer:integer"
        },
        "response": {
          "id": "72046847-49d6-42a3-a1f6-ea86ea4782dd",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:184)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:184)"
            }
          }
        ]
      },
      {
        "id": "83aa7d82-9cdb-4e24-86cc-e17f71f34ab4",
        "cursor": {
          "ref": "d748ce07-d9b8-46e1-a69c-d62eeb98a341",
          "length": 250,
          "cycles": 1,
          "position": 184,
          "iteration": 0,
          "httpRequestId": "e3fa00c6-ec13-454c-af9f-8f18d7cc78a2"
        },
        "item": {
          "id": "83aa7d82-9cdb-4e24-86cc-e17f71f34ab4",
          "name": "credentials_verify:vc:issuer:null"
        },
        "response": {
          "id": "61add2a2-c72e-4bb3-bd2c-ca35e6cf5e2f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 102
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:185)"
            }
          }
        ]
      },
      {
        "id": "4f53f7ba-acd2-485f-b9d0-da8ec9ea51df",
        "cursor": {
          "ref": "9ab5646b-e06d-4ed6-b1d1-8462175af3fb",
          "length": 250,
          "cycles": 1,
          "position": 185,
          "iteration": 0,
          "httpRequestId": "645168a0-19fc-415c-97bb-215c3c628449"
        },
        "item": {
          "id": "4f53f7ba-acd2-485f-b9d0-da8ec9ea51df",
          "name": "credentials_verify:vc:issuer:id:missing"
        },
        "response": {
          "id": "a5e25717-2abe-4f06-ade8-e9cda0f22869",
          "status": "OK",
          "code": 200,
          "responseTime": 118,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:186)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:186)"
            }
          }
        ]
      },
      {
        "id": "b582def7-e747-4e9c-a8b9-da9e8387af4b",
        "cursor": {
          "ref": "c0ccd4c3-b548-42e2-9374-80f39ba7c702",
          "length": 250,
          "cycles": 1,
          "position": 186,
          "iteration": 0,
          "httpRequestId": "08e4563b-b138-4e73-96b1-fb98cd49e598"
        },
        "item": {
          "id": "b582def7-e747-4e9c-a8b9-da9e8387af4b",
          "name": "credentials_verify:vc:issuer:id:array"
        },
        "response": {
          "id": "af101414-8b19-4d77-9e9f-9acacc2418bc",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:187)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:187)"
            }
          }
        ]
      },
      {
        "id": "23d643c1-05e1-49fd-bc7c-f56333ba1b97",
        "cursor": {
          "ref": "28190744-6ecc-40ba-84d7-e21e0e53fbb1",
          "length": 250,
          "cycles": 1,
          "position": 187,
          "iteration": 0,
          "httpRequestId": "b0cd30b0-af36-4c29-ab59-6907ec85107c"
        },
        "item": {
          "id": "23d643c1-05e1-49fd-bc7c-f56333ba1b97",
          "name": "credentials_verify:vc:issuer:id:boolean"
        },
        "response": {
          "id": "99b0d3ed-e0be-48af-ae2a-65576ce79e4b",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:188)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:188)"
            }
          }
        ]
      },
      {
        "id": "b06f8d56-cd1a-45d4-9ef9-fab5d607f8a2",
        "cursor": {
          "ref": "3c80ebbf-7c95-4563-bcde-c5a3d1c89445",
          "length": 250,
          "cycles": 1,
          "position": 188,
          "iteration": 0,
          "httpRequestId": "56c7fadd-b3cd-438b-b581-be386476c496"
        },
        "item": {
          "id": "b06f8d56-cd1a-45d4-9ef9-fab5d607f8a2",
          "name": "credentials_verify:vc:issuer:id:integer"
        },
        "response": {
          "id": "88244371-5e1f-4234-8386-cdfe6c12f9ca",
          "status": "OK",
          "code": 200,
          "responseTime": 124,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:189)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:189)"
            }
          }
        ]
      },
      {
        "id": "55b0910f-db31-4da3-987c-918ff72b6ba8",
        "cursor": {
          "ref": "5a76bf9d-fe8b-4d68-a20f-1aaeb2a201cb",
          "length": 250,
          "cycles": 1,
          "position": 189,
          "iteration": 0,
          "httpRequestId": "7f11cac3-e527-4a4d-b632-fc9b6f0c4e42"
        },
        "item": {
          "id": "55b0910f-db31-4da3-987c-918ff72b6ba8",
          "name": "credentials_verify:vc:issuer:id:null"
        },
        "response": {
          "id": "42659204-2905-4556-aaee-1d6692d78cbc",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:190)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:190)"
            }
          }
        ]
      },
      {
        "id": "7e6639c2-2570-4c78-a3bf-a18523a8db17",
        "cursor": {
          "ref": "7861d0ee-772d-4715-a857-2bcf9afe2799",
          "length": 250,
          "cycles": 1,
          "position": 190,
          "iteration": 0,
          "httpRequestId": "4afe5218-29df-47ca-a79a-894ec9aec749"
        },
        "item": {
          "id": "7e6639c2-2570-4c78-a3bf-a18523a8db17",
          "name": "credentials_verify:vc:issuer:id:object"
        },
        "response": {
          "id": "bc2cc574-3bc8-40a0-be2d-f4b98412c729",
          "status": "OK",
          "code": 200,
          "responseTime": 126,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:191)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:191)"
            }
          }
        ]
      },
      {
        "id": "6887722e-dfba-4c80-950c-7f138795f814",
        "cursor": {
          "ref": "3188b524-0cc2-4d00-a76c-969dc5653137",
          "length": 250,
          "cycles": 1,
          "position": 191,
          "iteration": 0,
          "httpRequestId": "69deea91-5b5d-4734-b7ae-3be7f2d4cee8"
        },
        "item": {
          "id": "6887722e-dfba-4c80-950c-7f138795f814",
          "name": "credentials_verify:vc:issuanceDate:missing"
        },
        "response": {
          "id": "bb8e34e5-fb70-4d7f-8ac0-862f279f08bc",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:192)"
            }
          }
        ]
      },
      {
        "id": "c2df59ab-a665-459f-ad4f-98653e0e3513",
        "cursor": {
          "ref": "b2f6fded-673a-4a36-b362-be8c5a31d418",
          "length": 250,
          "cycles": 1,
          "position": 192,
          "iteration": 0,
          "httpRequestId": "52b6b362-cee3-4bcd-a2ed-15baa0e48514"
        },
        "item": {
          "id": "c2df59ab-a665-459f-ad4f-98653e0e3513",
          "name": "credentials_verify:vc:issuanceDate:array"
        },
        "response": {
          "id": "ada02de4-e010-4696-b5ef-e1af387b3821",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 91,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:193)"
            }
          }
        ]
      },
      {
        "id": "acfd7d8d-dfab-4d0b-b336-86ce6d973c82",
        "cursor": {
          "ref": "5b0d9023-5d3e-48d5-9dec-f3f32ff10c2e",
          "length": 250,
          "cycles": 1,
          "position": 193,
          "iteration": 0,
          "httpRequestId": "4646e950-5d75-47e6-bd91-3929ebd08ad2"
        },
        "item": {
          "id": "acfd7d8d-dfab-4d0b-b336-86ce6d973c82",
          "name": "credentials_verify:vc:issuanceDate:boolean"
        },
        "response": {
          "id": "f4f7247b-b1a6-4e53-86f8-942cc3605450",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 92,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:194)"
            }
          }
        ]
      },
      {
        "id": "ab03072d-ebf6-4735-8e60-e8801fdf0532",
        "cursor": {
          "ref": "e8f99aa9-2326-472a-a6d6-7afdb8e680ab",
          "length": 250,
          "cycles": 1,
          "position": 194,
          "iteration": 0,
          "httpRequestId": "12c9ad4b-3f1e-46f9-8b38-96c4f5beff52"
        },
        "item": {
          "id": "ab03072d-ebf6-4735-8e60-e8801fdf0532",
          "name": "credentials_verify:vc:issuanceDate:integer"
        },
        "response": {
          "id": "6f9d7b31-c69f-4db8-ad96-0da43846ae5c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:195)"
            }
          }
        ]
      },
      {
        "id": "7efaa996-40cf-4eb9-a51f-8aaf29706eab",
        "cursor": {
          "ref": "0cc9d5af-0d63-49f1-b197-5a74f44a90ce",
          "length": 250,
          "cycles": 1,
          "position": 195,
          "iteration": 0,
          "httpRequestId": "af0ad706-e774-47b0-8e15-2e89a748028c"
        },
        "item": {
          "id": "7efaa996-40cf-4eb9-a51f-8aaf29706eab",
          "name": "credentials_verify:vc:issuanceDate:null"
        },
        "response": {
          "id": "2b8c92c6-d225-46a2-accf-89c300fefae7",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 181
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:196)"
            }
          }
        ]
      },
      {
        "id": "9154c005-8874-4be7-9758-ec42266bb9bd",
        "cursor": {
          "ref": "539e818e-51f5-46a9-aeb4-3449de53f6da",
          "length": 250,
          "cycles": 1,
          "position": 196,
          "iteration": 0,
          "httpRequestId": "a36b7371-4ff0-472c-ab0a-3be8dc896f0e"
        },
        "item": {
          "id": "9154c005-8874-4be7-9758-ec42266bb9bd",
          "name": "credentials_verify:vc:issuanceDate:object"
        },
        "response": {
          "id": "9feb78ea-e3c7-4bc4-9fb7-482307e47a41",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:197)"
            }
          }
        ]
      },
      {
        "id": "665d80cf-dfaa-4136-8d3a-393a77a72ea3",
        "cursor": {
          "ref": "a0f41f36-4182-4ca4-94ab-ecbc32832438",
          "length": 250,
          "cycles": 1,
          "position": 197,
          "iteration": 0,
          "httpRequestId": "351c42a3-7386-4d07-9d5d-6c3e5104005c"
        },
        "item": {
          "id": "665d80cf-dfaa-4136-8d3a-393a77a72ea3",
          "name": "credentials_verify:vc:issuanceDate:string"
        },
        "response": {
          "id": "366139f1-8d2a-4c8b-ae0b-514148cdd796",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 125
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:198)"
            }
          }
        ]
      },
      {
        "id": "d200595a-185b-4660-83da-4e725e9050e0",
        "cursor": {
          "ref": "cc33348d-9287-4215-b742-38c1eefbdc70",
          "length": 250,
          "cycles": 1,
          "position": 198,
          "iteration": 0,
          "httpRequestId": "70cbe76c-67ae-47a0-8865-13167bbd54e0"
        },
        "item": {
          "id": "d200595a-185b-4660-83da-4e725e9050e0",
          "name": "credentials_verify:vc:credentialSubject:missing"
        },
        "response": {
          "id": "9bd57c97-9f1c-4666-8f83-feef2d2d64da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 83,
          "responseSize": 172
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:199)"
            }
          }
        ]
      },
      {
        "id": "fe5d094f-9298-4bca-a769-e433673c2cc8",
        "cursor": {
          "ref": "5446ac52-d7a1-4342-92b2-79e081925fa6",
          "length": 250,
          "cycles": 1,
          "position": 199,
          "iteration": 0,
          "httpRequestId": "0a1e0699-1bcf-4c8a-ad91-0b6827649285"
        },
        "item": {
          "id": "fe5d094f-9298-4bca-a769-e433673c2cc8",
          "name": "credentials_verify:vc:credentialSubject:array"
        },
        "response": {
          "id": "9c4a8003-eae9-48d0-9560-d8e3a3a96687",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 217
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:200)"
            }
          }
        ]
      },
      {
        "id": "764c209d-8462-453c-bd16-e022e8192ce2",
        "cursor": {
          "ref": "604ed9bd-5462-45e0-bece-7b9d2e86d8a0",
          "length": 250,
          "cycles": 1,
          "position": 200,
          "iteration": 0,
          "httpRequestId": "ef66b4bb-0f7a-4c4c-82fe-261656df2e2b"
        },
        "item": {
          "id": "764c209d-8462-453c-bd16-e022e8192ce2",
          "name": "credentials_verify:vc:credentialSubject:boolean"
        },
        "response": {
          "id": "5318380c-ba9f-451f-bb13-ff1a268176b5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:201)"
            }
          }
        ]
      },
      {
        "id": "86ab2151-6e66-4148-b96f-219006f5ec35",
        "cursor": {
          "ref": "134c20f5-39ae-4b38-9531-dbc19b2709bd",
          "length": 250,
          "cycles": 1,
          "position": 201,
          "iteration": 0,
          "httpRequestId": "d2644d78-012c-48c0-be6b-2986f72039e9"
        },
        "item": {
          "id": "86ab2151-6e66-4148-b96f-219006f5ec35",
          "name": "credentials_verify:vc:credentialSubject:integer"
        },
        "response": {
          "id": "64cc2363-eba5-417f-9470-789a6b834af0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:202)"
            }
          }
        ]
      },
      {
        "id": "943669cc-acb0-4493-a1bb-dd130e07095a",
        "cursor": {
          "ref": "9add0cab-f4df-4b19-82df-456a2bf3723e",
          "length": 250,
          "cycles": 1,
          "position": 202,
          "iteration": 0,
          "httpRequestId": "1a5fab35-6ecc-454a-a4d1-b50540323d75"
        },
        "item": {
          "id": "943669cc-acb0-4493-a1bb-dd130e07095a",
          "name": "credentials_verify:vc:credentialSubject:null"
        },
        "response": {
          "id": "7c190c09-3167-4d99-a393-c2262db7accb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 260
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:203)"
            }
          }
        ]
      },
      {
        "id": "b35482ce-42da-4992-b634-b6f07392c78f",
        "cursor": {
          "ref": "ea14c0aa-0296-4a9e-8b93-cd92c4f0e764",
          "length": 250,
          "cycles": 1,
          "position": 203,
          "iteration": 0,
          "httpRequestId": "f04cbad9-dbb7-49fb-a70f-8471d95f14cf"
        },
        "item": {
          "id": "b35482ce-42da-4992-b634-b6f07392c78f",
          "name": "credentials_verify:vc:credentialSubject:string"
        },
        "response": {
          "id": "96f2dda7-c44a-4a66-958a-573e8335b9b8",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 199
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:204)"
            }
          }
        ]
      },
      {
        "id": "280f199d-c12d-4624-a680-69cfb0461668",
        "cursor": {
          "ref": "1b6643ad-7141-421d-8f01-83e5970f1260",
          "length": 250,
          "cycles": 1,
          "position": 204,
          "iteration": 0,
          "httpRequestId": "b0a53f99-bbd7-4634-b128-cb7bf03cc517"
        },
        "item": {
          "id": "280f199d-c12d-4624-a680-69cfb0461668",
          "name": "credentials_verify:vc:credentialSubject:id:array"
        },
        "response": {
          "id": "c166b66e-9009-4476-b24d-5d025fba71a3",
          "status": "OK",
          "code": 200,
          "responseTime": 125,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:205)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:205)"
            }
          }
        ]
      },
      {
        "id": "0a3a2251-540e-42b0-9196-06b3a6f3f3d0",
        "cursor": {
          "ref": "a71cb1ae-1b2f-4990-8663-ec313016972a",
          "length": 250,
          "cycles": 1,
          "position": 205,
          "iteration": 0,
          "httpRequestId": "0eb584d4-5602-4985-a0fe-bee45a6d77e5"
        },
        "item": {
          "id": "0a3a2251-540e-42b0-9196-06b3a6f3f3d0",
          "name": "credentials_verify:vc:credentialSubject:id:boolean"
        },
        "response": {
          "id": "3f00fcdc-3c53-430d-b9e9-af28aba78776",
          "status": "OK",
          "code": 200,
          "responseTime": 121,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:206)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:206)"
            }
          }
        ]
      },
      {
        "id": "27af2bc6-be25-401e-97f1-d32598f02a7c",
        "cursor": {
          "ref": "207299c8-0e04-4715-b07f-13d753c62b3f",
          "length": 250,
          "cycles": 1,
          "position": 206,
          "iteration": 0,
          "httpRequestId": "ad4b8386-311b-431d-8641-21562fafeec3"
        },
        "item": {
          "id": "27af2bc6-be25-401e-97f1-d32598f02a7c",
          "name": "credentials_verify:vc:credentialSubject:id:integer"
        },
        "response": {
          "id": "4f6d9eeb-2c2b-43e1-93ce-fbefa96a0ab2",
          "status": "OK",
          "code": 200,
          "responseTime": 129,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:207)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:207)"
            }
          }
        ]
      },
      {
        "id": "e9db42ae-82fc-47c8-936c-a48619d4efd4",
        "cursor": {
          "ref": "dafe90c5-93df-4178-beda-ce2c7a4b2ab4",
          "length": 250,
          "cycles": 1,
          "position": 207,
          "iteration": 0,
          "httpRequestId": "24d2e5e0-49d1-4764-8d1f-e365d7e93cd5"
        },
        "item": {
          "id": "e9db42ae-82fc-47c8-936c-a48619d4efd4",
          "name": "credentials_verify:vc:credentialSubject:id:null"
        },
        "response": {
          "id": "e2b35402-d00d-4d02-868f-33f440cb42cd",
          "status": "OK",
          "code": 200,
          "responseTime": 120,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:208)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:208)"
            }
          }
        ]
      },
      {
        "id": "bef9cf46-ca4a-4e25-ae6e-c2ccacacda78",
        "cursor": {
          "ref": "2437e0a1-4e54-46c2-89c5-198f4e020891",
          "length": 250,
          "cycles": 1,
          "position": 208,
          "iteration": 0,
          "httpRequestId": "816bad00-6725-40c6-8a02-70c430afccfa"
        },
        "item": {
          "id": "bef9cf46-ca4a-4e25-ae6e-c2ccacacda78",
          "name": "credentials_verify:vc:credentialSubject:id:object"
        },
        "response": {
          "id": "8fb7f8a7-df0d-473d-9b6a-9b2cf0dbc463",
          "status": "OK",
          "code": 200,
          "responseTime": 131,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 0,
              "test": "status code is 400",
              "message": "expected response to have status code 400 but got 200",
              "stack": "AssertionError: expected response to have status code 400 but got 200\n   at Object.eval sandbox-script.js:1:209)"
            }
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata should have required property 'message'",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata should have required property 'message'\n   at Object.eval sandbox-script.js:2:209)"
            }
          }
        ]
      },
      {
        "id": "26fb0d02-3aa2-4ec6-937f-bdda86394aeb",
        "cursor": {
          "ref": "900c8240-ed00-4fb6-877d-55f5eedfe6c7",
          "length": 250,
          "cycles": 1,
          "position": 209,
          "iteration": 0,
          "httpRequestId": "1922c053-50d8-4157-870a-87ea3f700349"
        },
        "item": {
          "id": "26fb0d02-3aa2-4ec6-937f-bdda86394aeb",
          "name": "credentials_verify:proof:missing"
        },
        "response": {
          "id": "2492dd88-c699-4b5e-afb5-5c5e0162f852",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 209
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:210)"
            }
          }
        ]
      },
      {
        "id": "4ce5cf61-8a9b-4849-a574-f7440301b5c9",
        "cursor": {
          "ref": "97c0086e-3f3e-4b70-9c48-70a4f7de9423",
          "length": 250,
          "cycles": 1,
          "position": 210,
          "iteration": 0,
          "httpRequestId": "dde50283-20d6-40eb-a48b-15a2e7c7d2e2"
        },
        "item": {
          "id": "4ce5cf61-8a9b-4849-a574-f7440301b5c9",
          "name": "credentials_verify:proof:array"
        },
        "response": {
          "id": "8c420949-74de-4d97-8d2c-616208d6c270",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 160
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:211)"
            }
          }
        ]
      },
      {
        "id": "423f59ce-94ba-48c3-a533-3b24779d1393",
        "cursor": {
          "ref": "12df544c-594d-4975-bda4-d335fa2a4dbf",
          "length": 250,
          "cycles": 1,
          "position": 211,
          "iteration": 0,
          "httpRequestId": "694a0993-9592-4e98-93fc-2184262df111"
        },
        "item": {
          "id": "423f59ce-94ba-48c3-a533-3b24779d1393",
          "name": "credentials_verify:proof:boolean"
        },
        "response": {
          "id": "24bbeeed-352c-4261-ad8b-003927fc64ee",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:212)"
            }
          }
        ]
      },
      {
        "id": "1a0a8b55-6b08-4127-b294-f671d510cf8b",
        "cursor": {
          "ref": "969f3119-7625-4fa2-89f6-ffb7926949e1",
          "length": 250,
          "cycles": 1,
          "position": 212,
          "iteration": 0,
          "httpRequestId": "d5d59b42-9273-4e78-b4e8-8baac80d2b9a"
        },
        "item": {
          "id": "1a0a8b55-6b08-4127-b294-f671d510cf8b",
          "name": "credentials_verify:proof:integer"
        },
        "response": {
          "id": "4bff5d80-6712-4711-b36b-ab919205a9f4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:213)"
            }
          }
        ]
      },
      {
        "id": "a94f45c2-b3aa-495d-8e54-1027104dab84",
        "cursor": {
          "ref": "589ad6e0-980d-45dd-88c4-18ed563245d5",
          "length": 250,
          "cycles": 1,
          "position": 213,
          "iteration": 0,
          "httpRequestId": "e04be203-c363-481c-b1db-fa0eacc7a263"
        },
        "item": {
          "id": "a94f45c2-b3aa-495d-8e54-1027104dab84",
          "name": "credentials_verify:proof:null"
        },
        "response": {
          "id": "53de1ebf-efc0-4309-a6df-80cef44469b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 285
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:214)"
            }
          }
        ]
      },
      {
        "id": "b19c9201-a64d-4f39-bb1c-693fac9005bd",
        "cursor": {
          "ref": "a4912e0d-d7ac-458f-b5c2-94815571b308",
          "length": 250,
          "cycles": 1,
          "position": 214,
          "iteration": 0,
          "httpRequestId": "0ee7e228-4cd4-4d49-899b-73a935fb7923"
        },
        "item": {
          "id": "b19c9201-a64d-4f39-bb1c-693fac9005bd",
          "name": "credentials_verify:proof:string"
        },
        "response": {
          "id": "d86bcda1-dace-4c99-9d5f-7279b365ad26",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 236
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:215)"
            }
          }
        ]
      },
      {
        "id": "9d14ee2f-f351-40ae-b1b3-46596900ea02",
        "cursor": {
          "ref": "8a6f1761-834f-4725-a8ac-3e83cfe5b978",
          "length": 250,
          "cycles": 1,
          "position": 215,
          "iteration": 0,
          "httpRequestId": "bbe7f0c8-faf7-48cb-9321-d03362614cba"
        },
        "item": {
          "id": "9d14ee2f-f351-40ae-b1b3-46596900ea02",
          "name": "credentials_verify:proof:type:missing"
        },
        "response": {
          "id": "58944acd-103f-47a0-a6a8-81b7371e0cd3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 75,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:216)"
            }
          }
        ]
      },
      {
        "id": "c9620507-3b2a-4b8b-84cf-b03ff8c3b459",
        "cursor": {
          "ref": "28aefc24-4116-4150-b202-6b4616088099",
          "length": 250,
          "cycles": 1,
          "position": 216,
          "iteration": 0,
          "httpRequestId": "8ca17f36-9ad1-420c-ae29-aa0c0a61b779"
        },
        "item": {
          "id": "c9620507-3b2a-4b8b-84cf-b03ff8c3b459",
          "name": "credentials_verify:proof:type:array"
        },
        "response": {
          "id": "7b2d3af0-36ba-4440-b252-7b9a1480f2a5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 79,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:217)"
            }
          }
        ]
      },
      {
        "id": "18189712-e29e-4263-880c-2e063c4b280e",
        "cursor": {
          "ref": "2a790ee5-5a1a-42e1-a06d-f52fbd639e46",
          "length": 250,
          "cycles": 1,
          "position": 217,
          "iteration": 0,
          "httpRequestId": "53279912-999c-4d99-a862-1ac826e773b2"
        },
        "item": {
          "id": "18189712-e29e-4263-880c-2e063c4b280e",
          "name": "credentials_verify:proof:type:boolean"
        },
        "response": {
          "id": "2ad1c128-a824-449a-8000-26ae02644c22",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 74,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:218)"
            }
          }
        ]
      },
      {
        "id": "ffc45015-c574-4116-98ab-b10c7379827a",
        "cursor": {
          "ref": "9ad7068d-e5ea-4a30-9dac-63e3c4199bde",
          "length": 250,
          "cycles": 1,
          "position": 218,
          "iteration": 0,
          "httpRequestId": "25f88792-3b80-4291-a827-785933c5372f"
        },
        "item": {
          "id": "ffc45015-c574-4116-98ab-b10c7379827a",
          "name": "credentials_verify:proof:type:integer"
        },
        "response": {
          "id": "7cd42276-6efb-4637-adc2-f8d617336e91",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:219)"
            }
          }
        ]
      },
      {
        "id": "71df10cf-1e36-47d1-bebe-7ba2369207b5",
        "cursor": {
          "ref": "f37ade33-45cb-46d2-b855-b1317fd9419d",
          "length": 250,
          "cycles": 1,
          "position": 219,
          "iteration": 0,
          "httpRequestId": "a3444988-a91e-4ca8-a8cd-c90dce65a611"
        },
        "item": {
          "id": "71df10cf-1e36-47d1-bebe-7ba2369207b5",
          "name": "credentials_verify:proof:type:null"
        },
        "response": {
          "id": "6999ce6d-bffc-4cfd-b8a9-8ce35b79031c",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 84,
          "responseSize": 337
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:220)"
            }
          }
        ]
      },
      {
        "id": "244c3fe4-3432-406b-8a41-47ec492017b5",
        "cursor": {
          "ref": "c3d24f18-10f7-49fd-9634-3e23c3e9f1d8",
          "length": 250,
          "cycles": 1,
          "position": 220,
          "iteration": 0,
          "httpRequestId": "aa9371c8-38f8-4d0b-926d-8f0ef6081c61"
        },
        "item": {
          "id": "244c3fe4-3432-406b-8a41-47ec492017b5",
          "name": "credentials_verify:proof:type:object"
        },
        "response": {
          "id": "16725225-e6e1-4ae1-8ad4-8acd787ecaa0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:221)"
            }
          }
        ]
      },
      {
        "id": "ce29a412-45c1-4453-8489-80b1d1695c60",
        "cursor": {
          "ref": "e6344dc8-8319-4bc6-92ae-d43de15094f8",
          "length": 250,
          "cycles": 1,
          "position": 221,
          "iteration": 0,
          "httpRequestId": "47f02de4-706f-4794-b680-f64269b8092b"
        },
        "item": {
          "id": "ce29a412-45c1-4453-8489-80b1d1695c60",
          "name": "credentials_verify:proof:type:string"
        },
        "response": {
          "id": "b6daaa79-556c-463d-b474-14bfa2dab505",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 82,
          "responseSize": 283
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:222)"
            }
          }
        ]
      },
      {
        "id": "18ba6b1e-3905-401c-be32-b17d336b4789",
        "cursor": {
          "ref": "c7d2e888-9d0a-4e8b-b153-08e4ddd9ce27",
          "length": 250,
          "cycles": 1,
          "position": 222,
          "iteration": 0,
          "httpRequestId": "c2c77fb1-9e2d-48f9-82ca-64bb83a4c559"
        },
        "item": {
          "id": "18ba6b1e-3905-401c-be32-b17d336b4789",
          "name": "credentials_verify:proof:created:array"
        },
        "response": {
          "id": "13d2c4ac-d4a4-4bd8-b7d6-50f798f922e5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:223)"
            }
          }
        ]
      },
      {
        "id": "aa3b3e10-403f-4c78-8966-f5ffaec2e4e0",
        "cursor": {
          "ref": "97bf9eea-34ed-4505-806e-03c4ece9ad4a",
          "length": 250,
          "cycles": 1,
          "position": 223,
          "iteration": 0,
          "httpRequestId": "d5a8e362-765d-47d2-bb8a-bd5f090e51b6"
        },
        "item": {
          "id": "aa3b3e10-403f-4c78-8966-f5ffaec2e4e0",
          "name": "credentials_verify:proof:created:boolean"
        },
        "response": {
          "id": "5eddb48c-9f96-488d-8668-008ea3ebcff5",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:224)"
            }
          }
        ]
      },
      {
        "id": "11453422-852c-48ce-ae53-c428e36c55a9",
        "cursor": {
          "ref": "36dc3896-cbe2-4577-b29b-74fba99f68bc",
          "length": 250,
          "cycles": 1,
          "position": 224,
          "iteration": 0,
          "httpRequestId": "bacac47b-1fe4-40e0-9081-1fcac10a9898"
        },
        "item": {
          "id": "11453422-852c-48ce-ae53-c428e36c55a9",
          "name": "credentials_verify:proof:created:integer"
        },
        "response": {
          "id": "7d85440a-1421-4329-b8e7-17fab51843b0",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:225)"
            }
          }
        ]
      },
      {
        "id": "066ddcbe-b641-4328-add8-f226f07e4ba9",
        "cursor": {
          "ref": "bb346498-a4c9-40bf-ac12-d5a91245d632",
          "length": 250,
          "cycles": 1,
          "position": 225,
          "iteration": 0,
          "httpRequestId": "3b92a486-0e63-44af-a0c9-cf9a27fa7762"
        },
        "item": {
          "id": "066ddcbe-b641-4328-add8-f226f07e4ba9",
          "name": "credentials_verify:proof:created:null"
        },
        "response": {
          "id": "47a0ba89-b42c-4612-b57e-7b9624f40f76",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 244
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:226)"
            }
          }
        ]
      },
      {
        "id": "9cee84d6-e0b8-4dcf-8294-4c7d0d3ce08c",
        "cursor": {
          "ref": "77c4dec8-5833-445a-a9a1-b8d98c4821e6",
          "length": 250,
          "cycles": 1,
          "position": 226,
          "iteration": 0,
          "httpRequestId": "cdce44ec-f6c5-4dcb-82d7-155abedf8267"
        },
        "item": {
          "id": "9cee84d6-e0b8-4dcf-8294-4c7d0d3ce08c",
          "name": "credentials_verify:proof:created:object"
        },
        "response": {
          "id": "58c8d51a-1e81-431a-9035-101087505a93",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 187
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:227)"
            }
          }
        ]
      },
      {
        "id": "da8c5727-1b62-428e-880d-a4edf1530002",
        "cursor": {
          "ref": "edeb9423-7cc2-45e7-9fbd-b59109973bf2",
          "length": 250,
          "cycles": 1,
          "position": 227,
          "iteration": 0,
          "httpRequestId": "68a94a2c-9e44-49d6-bf9b-588f89a44651"
        },
        "item": {
          "id": "da8c5727-1b62-428e-880d-a4edf1530002",
          "name": "credentials_verify:proof:verificationMethod:array"
        },
        "response": {
          "id": "515b9293-487c-42f5-a8b8-ebc38fb55624",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:228)"
            }
          }
        ]
      },
      {
        "id": "d0a0347e-f753-4b4b-b959-952fcf5d6058",
        "cursor": {
          "ref": "fcb47924-8365-4410-abd3-b0e5f638d323",
          "length": 250,
          "cycles": 1,
          "position": 228,
          "iteration": 0,
          "httpRequestId": "85bbf125-4d5d-48a3-8ae3-92ff939b9a1e"
        },
        "item": {
          "id": "d0a0347e-f753-4b4b-b959-952fcf5d6058",
          "name": "credentials_verify:proof:verificationMethod:boolean"
        },
        "response": {
          "id": "c934cd17-dfc1-4efe-b496-6281fb899a44",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:229)"
            }
          }
        ]
      },
      {
        "id": "1a60ca18-d386-416e-babb-0b7474abf82a",
        "cursor": {
          "ref": "7a483a87-1888-4df8-8b2d-b794452b1989",
          "length": 250,
          "cycles": 1,
          "position": 229,
          "iteration": 0,
          "httpRequestId": "29620f48-00b2-4833-aee9-dc9912d35c11"
        },
        "item": {
          "id": "1a60ca18-d386-416e-babb-0b7474abf82a",
          "name": "credentials_verify:proof:verificationMethod:integer"
        },
        "response": {
          "id": "773ad112-694d-4ac9-b71e-645d823ab5da",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:230)"
            }
          }
        ]
      },
      {
        "id": "f93a02bb-6588-4a6a-8999-fd15c6e9ce76",
        "cursor": {
          "ref": "9e4b77f8-fe1b-4f60-988c-eef37c8fcd68",
          "length": 250,
          "cycles": 1,
          "position": 230,
          "iteration": 0,
          "httpRequestId": "aa981c67-4ec2-4e1d-8f28-6843cfbe1627"
        },
        "item": {
          "id": "f93a02bb-6588-4a6a-8999-fd15c6e9ce76",
          "name": "credentials_verify:proof:verificationMethod:null"
        },
        "response": {
          "id": "ae0de23e-5f57-403c-aca8-a3b8956d6955",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:231)"
            }
          }
        ]
      },
      {
        "id": "61677c09-e1d2-48c2-b9ce-08ebef69c0eb",
        "cursor": {
          "ref": "a1b4bbed-20ea-4f13-8949-5ff946c84587",
          "length": 250,
          "cycles": 1,
          "position": 231,
          "iteration": 0,
          "httpRequestId": "f1a2bdba-c6c3-4aac-a342-1f45620e42aa"
        },
        "item": {
          "id": "61677c09-e1d2-48c2-b9ce-08ebef69c0eb",
          "name": "credentials_verify:proof:verificationMethod:object"
        },
        "response": {
          "id": "47a354ae-28c9-4744-a746-caf24bdf0493",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 178
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:232)"
            }
          }
        ]
      },
      {
        "id": "404d4ec8-ae1a-47ca-8e87-6e2494c50574",
        "cursor": {
          "ref": "92d4cdd6-e5db-4fc3-a49d-fc2b69521941",
          "length": 250,
          "cycles": 1,
          "position": 232,
          "iteration": 0,
          "httpRequestId": "24babc8c-f7f1-41e0-bd5e-eaf825ce42ed"
        },
        "item": {
          "id": "404d4ec8-ae1a-47ca-8e87-6e2494c50574",
          "name": "credentials_verify:proof:jws:array"
        },
        "response": {
          "id": "fd68264b-464f-4c20-a460-30f7efd01dc2",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 76,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:233)"
            }
          }
        ]
      },
      {
        "id": "9e997a18-6b73-4432-9df4-74718b47355f",
        "cursor": {
          "ref": "aab7aadf-3486-492b-a8f7-872d9c500189",
          "length": 250,
          "cycles": 1,
          "position": 233,
          "iteration": 0,
          "httpRequestId": "65118727-2d75-4fc2-ae3a-23ca3ad9e4a4"
        },
        "item": {
          "id": "9e997a18-6b73-4432-9df4-74718b47355f",
          "name": "credentials_verify:proof:jws:boolean"
        },
        "response": {
          "id": "54e4193f-d236-420b-b184-890335df44e3",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 85,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:234)"
            }
          }
        ]
      },
      {
        "id": "93f78bde-5309-4844-8ae4-3510668bed9b",
        "cursor": {
          "ref": "e022a16c-2923-43b5-b71b-ae9784adbace",
          "length": 250,
          "cycles": 1,
          "position": 234,
          "iteration": 0,
          "httpRequestId": "91769843-5d84-40f4-8faa-9b5a30bbe8ef"
        },
        "item": {
          "id": "93f78bde-5309-4844-8ae4-3510668bed9b",
          "name": "credentials_verify:proof:jws:integer"
        },
        "response": {
          "id": "d12376d9-f9c7-4880-91d1-3b8ac5c982e4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:235)"
            }
          }
        ]
      },
      {
        "id": "4f5f02a1-9e39-468a-bdc6-bd933f020c6e",
        "cursor": {
          "ref": "e2f1717a-1f46-4aab-91d0-98f812f21933",
          "length": 250,
          "cycles": 1,
          "position": 235,
          "iteration": 0,
          "httpRequestId": "19166235-6da6-4ada-966b-87f378627e13"
        },
        "item": {
          "id": "4f5f02a1-9e39-468a-bdc6-bd933f020c6e",
          "name": "credentials_verify:proof:jws:null"
        },
        "response": {
          "id": "6f9b106e-9974-40a8-8454-f1a4bcd9808e",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 77,
          "responseSize": 166
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:236)"
            }
          }
        ]
      },
      {
        "id": "f609e20a-96f1-4815-b9df-8f270643f58c",
        "cursor": {
          "ref": "b3dc81d5-9b94-4ea0-a30b-854582e5c101",
          "length": 250,
          "cycles": 1,
          "position": 236,
          "iteration": 0,
          "httpRequestId": "0e1d1472-cdd1-4a88-ac2c-013f74a36f28"
        },
        "item": {
          "id": "f609e20a-96f1-4815-b9df-8f270643f58c",
          "name": "credentials_verify:proof:jws:object"
        },
        "response": {
          "id": "11c0d62c-f6bd-4c39-a9d8-d7963e878801",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 94,
          "responseSize": 113
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:237)"
            }
          }
        ]
      },
      {
        "id": "e4698622-8b8d-40dc-a577-8570ea4799eb",
        "cursor": {
          "ref": "a0517971-2ac6-42af-9b0c-1f51cc8a81a3",
          "length": 250,
          "cycles": 1,
          "position": 237,
          "iteration": 0,
          "httpRequestId": "0b726581-37ca-44ee-9c81-df7cb50883bd"
        },
        "item": {
          "id": "e4698622-8b8d-40dc-a577-8570ea4799eb",
          "name": "credentials_verify:proof:proofPurpose:array"
        },
        "response": {
          "id": "4d931ee8-592f-4937-8968-2dcda2d6c0fb",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 78,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:238)"
            }
          }
        ]
      },
      {
        "id": "3abd0222-26b4-48bf-a1f7-d34bbc1f1a49",
        "cursor": {
          "ref": "4f1456a4-9d9a-44f6-8204-aa527fa742dd",
          "length": 250,
          "cycles": 1,
          "position": 238,
          "iteration": 0,
          "httpRequestId": "c1c9785b-4674-49db-b525-36b9fdcd16df"
        },
        "item": {
          "id": "3abd0222-26b4-48bf-a1f7-d34bbc1f1a49",
          "name": "credentials_verify:proof:proofPurpose:boolean"
        },
        "response": {
          "id": "ad576968-6b2d-43b7-95b8-7d63f143ff62",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 81,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:239)"
            }
          }
        ]
      },
      {
        "id": "cb35ea95-4d58-4596-8c5c-f5c12a919140",
        "cursor": {
          "ref": "d2d2fc21-735d-4439-9e15-a06cd652d5c5",
          "length": 250,
          "cycles": 1,
          "position": 239,
          "iteration": 0,
          "httpRequestId": "5debbd78-6f41-41c1-8b1f-b200bd2baa70"
        },
        "item": {
          "id": "cb35ea95-4d58-4596-8c5c-f5c12a919140",
          "name": "credentials_verify:proof:proofPurpose:integer"
        },
        "response": {
          "id": "5f0e6793-253a-4f48-b837-580055b2bac9",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 98,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:240)"
            }
          }
        ]
      },
      {
        "id": "180f6a46-c467-459a-870e-b1f428e936e8",
        "cursor": {
          "ref": "62da637c-ee35-4080-89f8-ec93298ac096",
          "length": 250,
          "cycles": 1,
          "position": 240,
          "iteration": 0,
          "httpRequestId": "6381a6b9-12cf-4977-8a18-3bc864e24467"
        },
        "item": {
          "id": "180f6a46-c467-459a-870e-b1f428e936e8",
          "name": "credentials_verify:proof:proofPurpose:null"
        },
        "response": {
          "id": "0cbd7641-32f3-4a94-aaf8-9e2cb39ccbdd",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:241)"
            }
          }
        ]
      },
      {
        "id": "eb28649e-0746-4c72-b161-4f0a5bed2188",
        "cursor": {
          "ref": "99a02b2e-c1b6-4d0d-a21f-931b98589966",
          "length": 250,
          "cycles": 1,
          "position": 241,
          "iteration": 0,
          "httpRequestId": "a4af3f1b-6231-4899-82f4-db742d7865a8"
        },
        "item": {
          "id": "eb28649e-0746-4c72-b161-4f0a5bed2188",
          "name": "credentials_verify:proof:proofPurpose:object"
        },
        "response": {
          "id": "f797b505-be69-4938-a032-505e3cc60c5f",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 86,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:242)"
            }
          }
        ]
      },
      {
        "id": "dfc4eb45-add5-4880-98c9-481013e89f39",
        "cursor": {
          "ref": "83a8d248-bdfe-45f7-bc3a-7e4699c05eff",
          "length": 250,
          "cycles": 1,
          "position": 242,
          "iteration": 0,
          "httpRequestId": "5ed0dbe0-677f-4607-b581-8bc46f4692fd"
        },
        "item": {
          "id": "dfc4eb45-add5-4880-98c9-481013e89f39",
          "name": "credentials_verify:proof:proofPurpose:string"
        },
        "response": {
          "id": "8d173b92-e41d-4ff3-a590-ef5c12cd62b4",
          "status": "Bad Request",
          "code": 400,
          "responseTime": 80,
          "responseSize": 224
        },
        "assertions": [
          {
            "assertion": "status code is 400",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 1,
              "test": "response validates against schema",
              "message": "expected data to satisfy schema but found following errors: \ndata.message should be string",
              "stack": "AssertionError: expected data to satisfy schema but found following errors: \ndata.message should be string\n   at Object.eval sandbox-script.js:2:243)"
            }
          }
        ]
      },
      {
        "id": "f64f7808-2c9b-4f0d-a679-ffeeea177b71",
        "cursor": {
          "ref": "8c2362b1-a624-4531-a14b-ca5da2e3bceb",
          "length": 250,
          "cycles": 1,
          "position": 243,
          "iteration": 0,
          "httpRequestId": "41beb5c7-ae21-431a-9658-715642c7dd8d"
        },
        "item": {
          "id": "f64f7808-2c9b-4f0d-a679-ffeeea177b71",
          "name": "credentials_verify:missing_auth"
        },
        "response": {
          "id": "1ad68f48-4a42-4571-a54f-9936a3cdb2d8",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "7ab0bdc3-11e5-4006-9351-8f4c1aba073e",
        "cursor": {
          "ref": "55de5d62-2cf4-4e11-821c-17402c7513bd",
          "length": 250,
          "cycles": 1,
          "position": 244,
          "iteration": 0,
          "httpRequestId": "a2a69060-46fd-4c12-84bb-1c74913aa80b"
        },
        "item": {
          "id": "7ab0bdc3-11e5-4006-9351-8f4c1aba073e",
          "name": "credentials_verify:bad_signature"
        },
        "response": {
          "id": "b3f215ab-b5a6-4991-9431-0e0a44fbc828",
          "status": "OK",
          "code": 200,
          "responseTime": 133,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is false",
            "skipped": false,
            "error": {
              "name": "AssertionError",
              "index": 2,
              "test": "response verified is false",
              "message": "expected true to be false",
              "stack": "AssertionError: expected true to be false\n   at Object.eval sandbox-script.js:3:245)"
            }
          }
        ]
      },
      {
        "id": "2cb951e5-350e-4c34-90bd-99f61214d65a",
        "cursor": {
          "ref": "145f920b-e16e-45f3-896e-65d0ac47ec1e",
          "length": 250,
          "cycles": 1,
          "position": 245,
          "iteration": 0,
          "httpRequestId": "c26e7a84-ff6d-40c8-b785-16235b0b8e16"
        },
        "item": {
          "id": "2cb951e5-350e-4c34-90bd-99f61214d65a",
          "name": "credentials_verify"
        },
        "response": {
          "id": "8ded9135-dd49-47ed-944c-a55e89aa59e1",
          "status": "OK",
          "code": 200,
          "responseTime": 128,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "6e4f6b9b-d630-42a3-8728-0aa5fd73caff",
        "cursor": {
          "ref": "38376f8f-4668-48a3-8456-fbc9c275452d",
          "length": 250,
          "cycles": 1,
          "position": 246,
          "iteration": 0,
          "httpRequestId": "ecf01a30-dce6-4fb7-8592-bc9f18e52c1c"
        },
        "item": {
          "id": "6e4f6b9b-d630-42a3-8728-0aa5fd73caff",
          "name": "credentials_verify:issuer:object"
        },
        "response": {
          "id": "a19199cd-158d-4111-b0d7-c48d8e0730be",
          "status": "OK",
          "code": 200,
          "responseTime": 132,
          "responseSize": 48
        },
        "assertions": [
          {
            "assertion": "status code is 200",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          },
          {
            "assertion": "response verified is true",
            "skipped": false
          }
        ]
      },
      {
        "id": "9edf31ba-a907-4408-88ae-50c2c647aa22",
        "cursor": {
          "ref": "2e7fae48-bef5-4d97-ab6e-698acf98fa67",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3c881a54-3dab-46ec-b049-7e25f1deb792"
        },
        "item": {
          "id": "9edf31ba-a907-4408-88ae-50c2c647aa22",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "06a6f81d-469d-4b5e-a712-933036e9e4a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "9edf31ba-a907-4408-88ae-50c2c647aa22",
        "cursor": {
          "ref": "2e7fae48-bef5-4d97-ab6e-698acf98fa67",
          "length": 250,
          "cycles": 1,
          "position": 247,
          "iteration": 0,
          "httpRequestId": "3c881a54-3dab-46ec-b049-7e25f1deb792"
        },
        "item": {
          "id": "9edf31ba-a907-4408-88ae-50c2c647aa22",
          "name": "presentations:missing_auth"
        },
        "response": {
          "id": "06a6f81d-469d-4b5e-a712-933036e9e4a6",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "fa52c795-cc34-4cf9-b4df-3070d3c0fe0a",
        "cursor": {
          "ref": "97997932-a9e6-49e9-aa23-2faf73b541d1",
          "length": 250,
          "cycles": 1,
          "position": 248,
          "iteration": 0,
          "httpRequestId": "adbd994b-d3b3-49eb-b60d-e2deadfb2e8a"
        },
        "item": {
          "id": "fa52c795-cc34-4cf9-b4df-3070d3c0fe0a",
          "name": "presentations_prove:missing_auth"
        },
        "response": {
          "id": "050e9fab-3a0f-4365-ad1d-c0b025a881cf",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 70,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      },
      {
        "id": "3d7ec484-bb51-4621-8f41-79f6e5f464f3",
        "cursor": {
          "ref": "75817a68-ceff-420e-84e2-3030e98b3e35",
          "length": 250,
          "cycles": 1,
          "position": 249,
          "iteration": 0,
          "httpRequestId": "af662a44-87d7-45d4-902f-b117daa16609"
        },
        "item": {
          "id": "3d7ec484-bb51-4621-8f41-79f6e5f464f3",
          "name": "presentations_verify:missing_auth"
        },
        "response": {
          "id": "15db273f-be27-41f2-a843-86544b2a228d",
          "status": "Unauthorized",
          "code": 401,
          "responseTime": 68,
          "responseSize": 43
        },
        "assertions": [
          {
            "assertion": "status code is 401",
            "skipped": false
          },
          {
            "assertion": "response validates against schema",
            "skipped": false
          }
        ]
      }
    ]
  }
}